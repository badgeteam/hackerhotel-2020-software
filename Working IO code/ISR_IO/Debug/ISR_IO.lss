
ISR_IO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000040  00803800  00003faa  0000405e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003f1a  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  0000bf1a  00003f1a  00003fce  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          000002e7  00803840  00803840  0000409e  2**0
                  ALLOC
  4 .comment      00000030  00000000  00000000  0000409e  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000040d0  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000002f8  00000000  00000000  00004110  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00006a78  00000000  00000000  00004408  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002660  00000000  00000000  0000ae80  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003a2e  00000000  00000000  0000d4e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000890  00000000  00000000  00010f10  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000018e1  00000000  00000000  000117a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003923  00000000  00000000  00013081  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000378  00000000  00000000  000169a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	56 c0       	rjmp	.+172    	; 0xae <__ctors_end>
       2:	00 00       	nop
       4:	71 c0       	rjmp	.+226    	; 0xe8 <__bad_interrupt>
       6:	00 00       	nop
       8:	6f c0       	rjmp	.+222    	; 0xe8 <__bad_interrupt>
       a:	00 00       	nop
       c:	6d c0       	rjmp	.+218    	; 0xe8 <__bad_interrupt>
       e:	00 00       	nop
      10:	6b c0       	rjmp	.+214    	; 0xe8 <__bad_interrupt>
      12:	00 00       	nop
      14:	69 c0       	rjmp	.+210    	; 0xe8 <__bad_interrupt>
      16:	00 00       	nop
      18:	bb c6       	rjmp	.+3446   	; 0xd90 <__vector_6>
      1a:	00 00       	nop
      1c:	0d c7       	rjmp	.+3610   	; 0xe38 <__vector_7>
      1e:	00 00       	nop
      20:	a5 c4       	rjmp	.+2378   	; 0x96c <__vector_8>
      22:	00 00       	nop
      24:	61 c0       	rjmp	.+194    	; 0xe8 <__bad_interrupt>
      26:	00 00       	nop
      28:	5f c0       	rjmp	.+190    	; 0xe8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	5d c0       	rjmp	.+186    	; 0xe8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	5b c0       	rjmp	.+182    	; 0xe8 <__bad_interrupt>
      32:	00 00       	nop
      34:	e3 c4       	rjmp	.+2502   	; 0x9fc <__vector_13>
      36:	00 00       	nop
      38:	14 c5       	rjmp	.+2600   	; 0xa62 <__vector_14>
      3a:	00 00       	nop
      3c:	55 c0       	rjmp	.+170    	; 0xe8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	53 c0       	rjmp	.+166    	; 0xe8 <__bad_interrupt>
      42:	00 00       	nop
      44:	51 c0       	rjmp	.+162    	; 0xe8 <__bad_interrupt>
      46:	00 00       	nop
      48:	4f c0       	rjmp	.+158    	; 0xe8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	4d c0       	rjmp	.+154    	; 0xe8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	2b c6       	rjmp	.+3158   	; 0xca8 <__vector_20>
      52:	00 00       	nop
      54:	49 c0       	rjmp	.+146    	; 0xe8 <__bad_interrupt>
      56:	00 00       	nop
      58:	53 c6       	rjmp	.+3238   	; 0xd00 <__vector_22>
      5a:	00 00       	nop
      5c:	45 c0       	rjmp	.+138    	; 0xe8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	43 c0       	rjmp	.+134    	; 0xe8 <__bad_interrupt>
      62:	00 00       	nop
      64:	51 c5       	rjmp	.+2722   	; 0xb08 <__vector_25>
      66:	00 00       	nop
      68:	3f c0       	rjmp	.+126    	; 0xe8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	a6 c5       	rjmp	.+2892   	; 0xbba <__vector_27>
      6e:	00 00       	nop
      70:	ff c5       	rjmp	.+3070   	; 0xc70 <__vector_28>
      72:	00 00       	nop
      74:	39 c0       	rjmp	.+114    	; 0xe8 <__bad_interrupt>
      76:	00 00       	nop
      78:	37 c0       	rjmp	.+110    	; 0xe8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	03 0b       	sbc	r16, r19
      7e:	0a 0b       	sbc	r16, r26
      80:	13 0b       	sbc	r17, r19
      82:	0a 0b       	sbc	r16, r26
      84:	13 0b       	sbc	r17, r19
      86:	0a 0b       	sbc	r16, r26
      88:	03 0b       	sbc	r16, r19
      8a:	38 0b       	sbc	r19, r24
      8c:	52 0b       	sbc	r21, r18
      8e:	64 0b       	sbc	r22, r20
      90:	1f 0c       	add	r1, r15
      92:	1f 0c       	add	r1, r15
      94:	73 0b       	sbc	r23, r19
      96:	80 0b       	sbc	r24, r16
      98:	be 0b       	sbc	r27, r30
      9a:	e5 0b       	sbc	r30, r21
      9c:	1f 0c       	add	r1, r15
      9e:	1f 0c       	add	r1, r15
      a0:	1f 0c       	add	r1, r15
      a2:	1f 0c       	add	r1, r15
      a4:	1f 0c       	add	r1, r15
      a6:	1f 0c       	add	r1, r15
      a8:	1f 0c       	add	r1, r15
      aa:	38 0b       	sbc	r19, r24
      ac:	52 0b       	sbc	r21, r18

000000ae <__ctors_end>:
      ae:	11 24       	eor	r1, r1
      b0:	1f be       	out	0x3f, r1	; 63
      b2:	cf ef       	ldi	r28, 0xFF	; 255
      b4:	cd bf       	out	0x3d, r28	; 61
      b6:	df e3       	ldi	r29, 0x3F	; 63
      b8:	de bf       	out	0x3e, r29	; 62

000000ba <__do_copy_data>:
      ba:	18 e3       	ldi	r17, 0x38	; 56
      bc:	a0 e0       	ldi	r26, 0x00	; 0
      be:	b8 e3       	ldi	r27, 0x38	; 56
      c0:	ea ea       	ldi	r30, 0xAA	; 170
      c2:	ff e3       	ldi	r31, 0x3F	; 63
      c4:	02 c0       	rjmp	.+4      	; 0xca <__do_copy_data+0x10>
      c6:	05 90       	lpm	r0, Z+
      c8:	0d 92       	st	X+, r0
      ca:	a0 34       	cpi	r26, 0x40	; 64
      cc:	b1 07       	cpc	r27, r17
      ce:	d9 f7       	brne	.-10     	; 0xc6 <__do_copy_data+0xc>

000000d0 <__do_clear_bss>:
      d0:	2b e3       	ldi	r18, 0x3B	; 59
      d2:	a0 e4       	ldi	r26, 0x40	; 64
      d4:	b8 e3       	ldi	r27, 0x38	; 56
      d6:	01 c0       	rjmp	.+2      	; 0xda <.do_clear_bss_start>

000000d8 <.do_clear_bss_loop>:
      d8:	1d 92       	st	X+, r1

000000da <.do_clear_bss_start>:
      da:	a7 32       	cpi	r26, 0x27	; 39
      dc:	b2 07       	cpc	r27, r18
      de:	e1 f7       	brne	.-8      	; 0xd8 <.do_clear_bss_loop>
      e0:	0e 94 89 1e 	call	0x3d12	; 0x3d12 <main>
      e4:	0c 94 8b 1f 	jmp	0x3f16	; 0x3f16 <_exit>

000000e8 <__bad_interrupt>:
      e8:	8b cf       	rjmp	.-234    	; 0x0 <__vectors>

000000ea <chkVolt250>:
#include <friends.h>
#include <main_def.h>
#include <resources.h>

//Returns measured voltage * 4 (2V returns 8) if it is in the expected range (DELTA)
uint8_t chkVolt250(){
      ea:	28 ed       	ldi	r18, 0xD8	; 216
      ec:	30 e0       	ldi	r19, 0x00	; 0
    uint8_t avgVolt = 9;
      ee:	89 e0       	ldi	r24, 0x09	; 9
        
    for (uint8_t x=225; x>24; x-=25) {
        if ((auIn > (x-DELTA)) && (auIn < (x+DELTA))) {
      f0:	40 91 d7 3a 	lds	r20, 0x3AD7	; 0x803ad7 <auIn>
      f4:	50 e0       	ldi	r21, 0x00	; 0
      f6:	42 17       	cp	r20, r18
      f8:	53 07       	cpc	r21, r19
      fa:	4c f0       	brlt	.+18     	; 0x10e <chkVolt250+0x24>
      fc:	40 91 d7 3a 	lds	r20, 0x3AD7	; 0x803ad7 <auIn>
     100:	50 e0       	ldi	r21, 0x00	; 0
     102:	b9 01       	movw	r22, r18
     104:	6e 5e       	subi	r22, 0xEE	; 238
     106:	7f 4f       	sbci	r23, 0xFF	; 255
     108:	64 17       	cp	r22, r20
     10a:	75 07       	cpc	r23, r21
     10c:	2c f4       	brge	.+10     	; 0x118 <chkVolt250+0x2e>
            break;
        }
        --avgVolt;
     10e:	81 50       	subi	r24, 0x01	; 1
     110:	29 51       	subi	r18, 0x19	; 25
     112:	31 09       	sbc	r19, r1

//Returns measured voltage * 4 (2V returns 8) if it is in the expected range (DELTA)
uint8_t chkVolt250(){
    uint8_t avgVolt = 9;
        
    for (uint8_t x=225; x>24; x-=25) {
     114:	81 11       	cpse	r24, r1
     116:	ec cf       	rjmp	.-40     	; 0xf0 <chkVolt250+0x6>
            break;
        }
        --avgVolt;
    }
    return avgVolt;
}
     118:	08 95       	ret

0000011a <MakeFriends>:

// Main game loop
uint8_t MakeFriends(){
     11a:	cf 93       	push	r28
     11c:	df 93       	push	r29
    static uint8_t setDAC[2] = {255, 0};
    static uint8_t chkTmr = 0;
    static uint8_t jackIn = 0;
    static uint8_t candidate = 0;

    ++chkTmr;
     11e:	80 91 43 38 	lds	r24, 0x3843	; 0x803843 <chkTmr.3770>
     122:	8f 5f       	subi	r24, 0xFF	; 255
     124:	80 93 43 38 	sts	0x3843, r24	; 0x803843 <chkTmr.3770>
     128:	c4 e6       	ldi	r28, 0x64	; 100

    //Check if badge has found 3 friends, if true, don't accept any new connections!
    uint8_t foundAll = 1;
     12a:	d1 e0       	ldi	r29, 0x01	; 1
    for (uint8_t x=0; x<4; ++x){
        if (CheckState(100+x) == 0) foundAll = 0;
     12c:	8c 2f       	mov	r24, r28
     12e:	0e 94 5f 09 	call	0x12be	; 0x12be <CheckState>
     132:	81 11       	cpse	r24, r1
     134:	01 c0       	rjmp	.+2      	; 0x138 <MakeFriends+0x1e>
     136:	d0 e0       	ldi	r29, 0x00	; 0
     138:	cf 5f       	subi	r28, 0xFF	; 255

    ++chkTmr;

    //Check if badge has found 3 friends, if true, don't accept any new connections!
    uint8_t foundAll = 1;
    for (uint8_t x=0; x<4; ++x){
     13a:	c8 36       	cpi	r28, 0x68	; 104
     13c:	b9 f7       	brne	.-18     	; 0x12c <MakeFriends+0x12>
        if (CheckState(100+x) == 0) foundAll = 0;
    }
    if (foundAll) {
     13e:	dd 23       	and	r29, r29
     140:	59 f0       	breq	.+22     	; 0x158 <MakeFriends+0x3e>
        UpdateState(124);
     142:	8c e7       	ldi	r24, 0x7C	; 124
     144:	0e 94 3e 09 	call	0x127c	; 0x127c <UpdateState>
        if (gameNow == FRIENDS) gameNow = TEXT; 
     148:	80 91 4c 38 	lds	r24, 0x384C	; 0x80384c <gameNow>
     14c:	84 30       	cpi	r24, 0x04	; 4
     14e:	09 f0       	breq	.+2      	; 0x152 <MakeFriends+0x38>
     150:	f1 c0       	rjmp	.+482    	; 0x334 <MakeFriends+0x21a>
     152:	10 92 4c 38 	sts	0x384C, r1	; 0x80384c <gameNow>
     156:	ee c0       	rjmp	.+476    	; 0x334 <MakeFriends+0x21a>
        return 0;
    }

    //Set game state, must be able to hijack from other games.
    if (progress > FIRST_CONTACT) { 
     158:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <progress.3768>
     15c:	82 30       	cpi	r24, 0x02	; 2
     15e:	20 f0       	brcs	.+8      	; 0x168 <MakeFriends+0x4e>
        gameNow = FRIENDS; 
     160:	94 e0       	ldi	r25, 0x04	; 4
     162:	90 93 4c 38 	sts	0x384C, r25	; 0x80384c <gameNow>
     166:	0d c0       	rjmp	.+26     	; 0x182 <MakeFriends+0x68>
    }
    
    //Clear game state if not communicating properly or headphones detected
    if (((progress == NO_OTHER) || detHdPh) && (gameNow == FRIENDS)) {
     168:	81 11       	cpse	r24, r1
     16a:	0b c0       	rjmp	.+22     	; 0x182 <MakeFriends+0x68>
     16c:	90 91 4c 38 	lds	r25, 0x384C	; 0x80384c <gameNow>
     170:	94 30       	cpi	r25, 0x04	; 4
     172:	61 f4       	brne	.+24     	; 0x18c <MakeFriends+0x72>
        gameNow = TEXT; 
     174:	10 92 4c 38 	sts	0x384C, r1	; 0x80384c <gameNow>
        effect = 0;
     178:	10 92 4a 38 	sts	0x384A, r1	; 0x80384a <effect>
     17c:	10 92 4b 38 	sts	0x384B, r1	; 0x80384b <effect+0x1>
     180:	05 c0       	rjmp	.+10     	; 0x18c <MakeFriends+0x72>
    if (progress > FIRST_CONTACT) { 
        gameNow = FRIENDS; 
    }
    
    //Clear game state if not communicating properly or headphones detected
    if (((progress == NO_OTHER) || detHdPh) && (gameNow == FRIENDS)) {
     182:	90 91 d4 3a 	lds	r25, 0x3AD4	; 0x803ad4 <detHdPh>
     186:	91 11       	cpse	r25, r1
     188:	f1 cf       	rjmp	.-30     	; 0x16c <MakeFriends+0x52>
     18a:	18 c0       	rjmp	.+48     	; 0x1bc <MakeFriends+0xa2>
        gameNow = TEXT; 
        effect = 0;
    }

    //Audio off, set voltage level (setDAC[0]*10mV)
    if ((progress == NO_OTHER) && (detHdPh == 0)) {
     18c:	81 11       	cpse	r24, r1
     18e:	16 c0       	rjmp	.+44     	; 0x1bc <MakeFriends+0xa2>
     190:	90 91 d4 3a 	lds	r25, 0x3AD4	; 0x803ad4 <detHdPh>
     194:	91 11       	cpse	r25, r1
     196:	12 c0       	rjmp	.+36     	; 0x1bc <MakeFriends+0xa2>
        setDAC[0] = whoami * 51;
     198:	80 91 4d 38 	lds	r24, 0x384D	; 0x80384d <whoami>
     19c:	93 e3       	ldi	r25, 0x33	; 51
     19e:	89 9f       	mul	r24, r25
     1a0:	80 2d       	mov	r24, r0
     1a2:	11 24       	eor	r1, r1
     1a4:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__data_start>
        auRepAddr = &setDAC[0];
     1a8:	80 e0       	ldi	r24, 0x00	; 0
     1aa:	98 e3       	ldi	r25, 0x38	; 56
     1ac:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
     1b0:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
        auVolume = 255;
     1b4:	8f ef       	ldi	r24, 0xFF	; 255
     1b6:	80 93 ca 3a 	sts	0x3ACA, r24	; 0x803aca <auVolume>
     1ba:	09 c0       	rjmp	.+18     	; 0x1ce <MakeFriends+0xb4>
    } else {
        if (progress & NEXT){
     1bc:	98 2f       	mov	r25, r24
     1be:	90 7f       	andi	r25, 0xF0	; 240
     1c0:	31 f0       	breq	.+12     	; 0x1ce <MakeFriends+0xb4>
            progress++;
            progress&=0x0f;
     1c2:	8f 5f       	subi	r24, 0xFF	; 255
     1c4:	8f 70       	andi	r24, 0x0F	; 15
     1c6:	80 93 42 38 	sts	0x3842, r24	; 0x803842 <progress.3768>
            chkTmr = 0;
     1ca:	10 92 43 38 	sts	0x3843, r1	; 0x803843 <chkTmr.3770>
        }
    }

    //Check for other badges ()
    if ((auIn < (setDAC[0] - DELTA)) || (auIn > (setDAC[0] + DELTA)) || (progress > FIRST_CONTACT)) {
     1ce:	40 91 d7 3a 	lds	r20, 0x3AD7	; 0x803ad7 <auIn>
     1d2:	20 91 00 38 	lds	r18, 0x3800	; 0x803800 <__data_start>
     1d6:	30 e0       	ldi	r19, 0x00	; 0
     1d8:	50 e0       	ldi	r21, 0x00	; 0
     1da:	b9 01       	movw	r22, r18
     1dc:	6a 50       	subi	r22, 0x0A	; 10
     1de:	71 09       	sbc	r23, r1
     1e0:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <progress.3768>
     1e4:	46 17       	cp	r20, r22
     1e6:	57 07       	cpc	r21, r23
     1e8:	5c f0       	brlt	.+22     	; 0x200 <MakeFriends+0xe6>
     1ea:	40 91 d7 3a 	lds	r20, 0x3AD7	; 0x803ad7 <auIn>
     1ee:	50 e0       	ldi	r21, 0x00	; 0
     1f0:	26 5f       	subi	r18, 0xF6	; 246
     1f2:	3f 4f       	sbci	r19, 0xFF	; 255
     1f4:	24 17       	cp	r18, r20
     1f6:	35 07       	cpc	r19, r21
     1f8:	1c f0       	brlt	.+6      	; 0x200 <MakeFriends+0xe6>
     1fa:	82 30       	cpi	r24, 0x02	; 2
     1fc:	08 f4       	brcc	.+2      	; 0x200 <MakeFriends+0xe6>
     1fe:	43 c0       	rjmp	.+134    	; 0x286 <MakeFriends+0x16c>
        if ((progress == NO_OTHER) && (detHdPh == 0)) {
     200:	81 11       	cpse	r24, r1
     202:	0b c0       	rjmp	.+22     	; 0x21a <MakeFriends+0x100>
     204:	80 91 d4 3a 	lds	r24, 0x3AD4	; 0x803ad4 <detHdPh>
     208:	81 11       	cpse	r24, r1
     20a:	94 c0       	rjmp	.+296    	; 0x334 <MakeFriends+0x21a>
            if (chkTmr >= 8) {
     20c:	80 91 43 38 	lds	r24, 0x3843	; 0x803843 <chkTmr.3770>
     210:	88 30       	cpi	r24, 0x08	; 8
     212:	08 f4       	brcc	.+2      	; 0x216 <MakeFriends+0xfc>
     214:	8f c0       	rjmp	.+286    	; 0x334 <MakeFriends+0x21a>
                progress |= NEXT;
     216:	80 ef       	ldi	r24, 0xF0	; 240
     218:	63 c0       	rjmp	.+198    	; 0x2e0 <MakeFriends+0x1c6>
            }
        }

        //Candidate found, check ranges
        else if (progress == FIRST_CONTACT) {
     21a:	81 30       	cpi	r24, 0x01	; 1
     21c:	41 f5       	brne	.+80     	; 0x26e <MakeFriends+0x154>
            jackIn = chkVolt250();
     21e:	65 df       	rcall	.-310    	; 0xea <chkVolt250>
     220:	80 93 41 38 	sts	0x3841, r24	; 0x803841 <jackIn.3771>
            if (jackIn) {
     224:	88 23       	and	r24, r24
     226:	79 f1       	breq	.+94     	; 0x286 <MakeFriends+0x16c>
                if (chkTmr >= SHORT_WAIT){
     228:	90 91 43 38 	lds	r25, 0x3843	; 0x803843 <chkTmr.3770>
     22c:	98 30       	cpi	r25, 0x08	; 8
     22e:	08 f4       	brcc	.+2      	; 0x232 <MakeFriends+0x118>
     230:	81 c0       	rjmp	.+258    	; 0x334 <MakeFriends+0x21a>
                    if (   ((whoami == 1)&&((jackIn >= 3)&&(jackIn <= 5))) 
     232:	90 91 4d 38 	lds	r25, 0x384D	; 0x80384d <whoami>
     236:	91 30       	cpi	r25, 0x01	; 1
     238:	11 f4       	brne	.+4      	; 0x23e <MakeFriends+0x124>
     23a:	83 50       	subi	r24, 0x03	; 3
     23c:	14 c0       	rjmp	.+40     	; 0x266 <MakeFriends+0x14c>
                    || ((whoami == 2)&&((jackIn == 3)||(jackIn == 5)||(jackIn == 6)))  
     23e:	92 30       	cpi	r25, 0x02	; 2
     240:	31 f4       	brne	.+12     	; 0x24e <MakeFriends+0x134>
     242:	83 30       	cpi	r24, 0x03	; 3
     244:	91 f0       	breq	.+36     	; 0x26a <MakeFriends+0x150>
     246:	85 50       	subi	r24, 0x05	; 5
     248:	82 30       	cpi	r24, 0x02	; 2
     24a:	e8 f4       	brcc	.+58     	; 0x286 <MakeFriends+0x16c>
     24c:	0e c0       	rjmp	.+28     	; 0x26a <MakeFriends+0x150>
                    || ((whoami == 3)&&((jackIn == 4)||(jackIn == 5)||(jackIn == 7))) 
     24e:	93 30       	cpi	r25, 0x03	; 3
     250:	39 f4       	brne	.+14     	; 0x260 <MakeFriends+0x146>
     252:	9c ef       	ldi	r25, 0xFC	; 252
     254:	98 0f       	add	r25, r24
     256:	92 30       	cpi	r25, 0x02	; 2
     258:	40 f0       	brcs	.+16     	; 0x26a <MakeFriends+0x150>
     25a:	87 30       	cpi	r24, 0x07	; 7
     25c:	a1 f4       	brne	.+40     	; 0x286 <MakeFriends+0x16c>
     25e:	05 c0       	rjmp	.+10     	; 0x26a <MakeFriends+0x150>
                    || ((whoami == 4)&&((jackIn >= 5)&&(jackIn <= 7)))   ) {
     260:	94 30       	cpi	r25, 0x04	; 4
     262:	89 f4       	brne	.+34     	; 0x286 <MakeFriends+0x16c>
     264:	85 50       	subi	r24, 0x05	; 5
     266:	83 30       	cpi	r24, 0x03	; 3
     268:	70 f4       	brcc	.+28     	; 0x286 <MakeFriends+0x16c>
                        progress |= NEXT;
     26a:	81 ef       	ldi	r24, 0xF1	; 241
     26c:	39 c0       	rjmp	.+114    	; 0x2e0 <MakeFriends+0x1c6>
                progress = NO_OTHER;
            }
        }

        //Wait for the other badge (and a bit longer for effect)
        else if (progress == SECOND_LOVE){
     26e:	82 30       	cpi	r24, 0x02	; 2
     270:	69 f0       	breq	.+26     	; 0x28c <MakeFriends+0x172>
                progress |= NEXT;
            }
        } 
        
        //Wait a bit, check Voltage again, if ok show who you connected with and your own number, save, exit
        else if (progress == THIRD_KISS) {
     272:	83 30       	cpi	r24, 0x03	; 3
     274:	c1 f1       	breq	.+112    	; 0x2e6 <MakeFriends+0x1cc>
                    progress |= NEXT;
                } else progress = NO_OTHER;                
            }

        //Wait for quit
        } else if (progress == FOURTH_BASE) {
     276:	84 30       	cpi	r24, 0x04	; 4
     278:	09 f0       	breq	.+2      	; 0x27c <MakeFriends+0x162>
     27a:	5c c0       	rjmp	.+184    	; 0x334 <MakeFriends+0x21a>
            if (chkTmr >= (SHORT_WAIT<<3)) {
     27c:	80 91 43 38 	lds	r24, 0x3843	; 0x803843 <chkTmr.3770>
     280:	80 34       	cpi	r24, 0x40	; 64
     282:	08 f4       	brcc	.+2      	; 0x286 <MakeFriends+0x16c>
     284:	57 c0       	rjmp	.+174    	; 0x334 <MakeFriends+0x21a>
                    if (   ((whoami == 1)&&((jackIn >= 3)&&(jackIn <= 5))) 
                    || ((whoami == 2)&&((jackIn == 3)||(jackIn == 5)||(jackIn == 6)))  
                    || ((whoami == 3)&&((jackIn == 4)||(jackIn == 5)||(jackIn == 7))) 
                    || ((whoami == 4)&&((jackIn >= 5)&&(jackIn <= 7)))   ) {
                        progress |= NEXT;
                    } else progress = NO_OTHER;
     286:	10 92 42 38 	sts	0x3842, r1	; 0x803842 <progress.3768>
     28a:	54 c0       	rjmp	.+168    	; 0x334 <MakeFriends+0x21a>
        }

        //Wait for the other badge (and a bit longer for effect)
        else if (progress == SECOND_LOVE){
            
            effect = 7;
     28c:	87 e0       	ldi	r24, 0x07	; 7
     28e:	90 e0       	ldi	r25, 0x00	; 0
     290:	80 93 4a 38 	sts	0x384A, r24	; 0x80384a <effect>
     294:	90 93 4b 38 	sts	0x384B, r25	; 0x80384b <effect+0x1>
            if (chkTmr >= SHORT_WAIT) {
     298:	80 91 43 38 	lds	r24, 0x3843	; 0x803843 <chkTmr.3770>
     29c:	88 30       	cpi	r24, 0x08	; 8
     29e:	38 f0       	brcs	.+14     	; 0x2ae <MakeFriends+0x194>
                setDAC[0] = floatAround(0x80, 8, 100, 255); 
     2a0:	2f ef       	ldi	r18, 0xFF	; 255
     2a2:	44 e6       	ldi	r20, 0x64	; 100
     2a4:	68 e0       	ldi	r22, 0x08	; 8
     2a6:	80 e8       	ldi	r24, 0x80	; 128
     2a8:	30 d7       	rcall	.+3680   	; 0x110a <floatAround>
     2aa:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__data_start>
            }

            //The badge with the lowest voltage will now go to 2.5V (impedance check, for people tricking the things with a power supply)
            if (chkTmr >= LONG_WAIT){
     2ae:	80 91 43 38 	lds	r24, 0x3843	; 0x803843 <chkTmr.3770>
     2b2:	8a 3f       	cpi	r24, 0xFA	; 250
     2b4:	08 f4       	brcc	.+2      	; 0x2b8 <MakeFriends+0x19e>
     2b6:	3e c0       	rjmp	.+124    	; 0x334 <MakeFriends+0x21a>
                candidate = jackIn-whoami;
     2b8:	80 91 4d 38 	lds	r24, 0x384D	; 0x80384d <whoami>
     2bc:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <jackIn.3771>
     2c0:	98 1b       	sub	r25, r24
     2c2:	90 93 40 38 	sts	0x3840, r25	; 0x803840 <__data_end>
                if (candidate > whoami) {
     2c6:	89 17       	cp	r24, r25
     2c8:	10 f4       	brcc	.+4      	; 0x2ce <MakeFriends+0x1b4>
                    setDAC[0] = 249;
     2ca:	89 ef       	ldi	r24, 0xF9	; 249
     2cc:	04 c0       	rjmp	.+8      	; 0x2d6 <MakeFriends+0x1bc>
                } else {
                    setDAC[0] = whoami * 51;
     2ce:	93 e3       	ldi	r25, 0x33	; 51
     2d0:	89 9f       	mul	r24, r25
     2d2:	80 2d       	mov	r24, r0
     2d4:	11 24       	eor	r1, r1
     2d6:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__data_start>
                }
                progress |= NEXT;
     2da:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <progress.3768>
     2de:	80 6f       	ori	r24, 0xF0	; 240
     2e0:	80 93 42 38 	sts	0x3842, r24	; 0x803842 <progress.3768>
     2e4:	27 c0       	rjmp	.+78     	; 0x334 <MakeFriends+0x21a>
            }
        } 
        
        //Wait a bit, check Voltage again, if ok show who you connected with and your own number, save, exit
        else if (progress == THIRD_KISS) {
            if (chkTmr >= SHORT_WAIT) {
     2e6:	80 91 43 38 	lds	r24, 0x3843	; 0x803843 <chkTmr.3770>
     2ea:	88 30       	cpi	r24, 0x08	; 8
                jackIn = chkVolt250();
     2ec:	18 f1       	brcs	.+70     	; 0x334 <MakeFriends+0x21a>
     2ee:	fd de       	rcall	.-518    	; 0xea <chkVolt250>
     2f0:	80 93 41 38 	sts	0x3841, r24	; 0x803841 <jackIn.3771>
                if (jackIn == (((candidate > whoami)?candidate:whoami) + 5)) {
     2f4:	90 91 40 38 	lds	r25, 0x3840	; 0x803840 <__data_end>
     2f8:	48 2f       	mov	r20, r24
     2fa:	50 e0       	ldi	r21, 0x00	; 0
     2fc:	20 91 4d 38 	lds	r18, 0x384D	; 0x80384d <whoami>
     300:	29 17       	cp	r18, r25
     302:	08 f4       	brcc	.+2      	; 0x306 <MakeFriends+0x1ec>
     304:	29 2f       	mov	r18, r25
     306:	30 e0       	ldi	r19, 0x00	; 0
     308:	2b 5f       	subi	r18, 0xFB	; 251
     30a:	3f 4f       	sbci	r19, 0xFF	; 255
     30c:	42 17       	cp	r20, r18
     30e:	53 07       	cpc	r21, r19
     310:	09 f0       	breq	.+2      	; 0x314 <MakeFriends+0x1fa>
                    UpdateState(99+candidate);
     312:	b9 cf       	rjmp	.-142    	; 0x286 <MakeFriends+0x16c>
     314:	83 e6       	ldi	r24, 0x63	; 99
     316:	89 0f       	add	r24, r25
     318:	b1 d7       	rcall	.+3938   	; 0x127c <UpdateState>
                 
                    effect = 31;
     31a:	8f e1       	ldi	r24, 0x1F	; 31
     31c:	90 e0       	ldi	r25, 0x00	; 0
     31e:	80 93 4a 38 	sts	0x384A, r24	; 0x80384a <effect>
     322:	90 93 4b 38 	sts	0x384B, r25	; 0x80384b <effect+0x1>
                    WingBar(candidate, whoami);
     326:	60 91 4d 38 	lds	r22, 0x384D	; 0x80384d <whoami>
     32a:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <__data_end>
     32e:	0e 94 49 0a 	call	0x1492	; 0x1492 <WingBar>
     332:	d3 cf       	rjmp	.-90     	; 0x2da <MakeFriends+0x1c0>
    } else {
        progress = NO_OTHER;
    }
      
    return 0;
}
     334:	80 e0       	ldi	r24, 0x00	; 0
     336:	df 91       	pop	r29
     338:	cf 91       	pop	r28
     33a:	08 95       	ret

0000033c <LanyardCode>:
uint16_t        lanyardLastActive = 0;


// Main game loop
uint8_t LanyardCode(){
    if (gameNow == LANYARD && idleTimeout(lanyardLastActive,LANYARD_MAX_IDLE)) {
     33c:	80 91 4c 38 	lds	r24, 0x384C	; 0x80384c <gameNow>
     340:	83 30       	cpi	r24, 0x03	; 3
     342:	89 f4       	brne	.+34     	; 0x366 <LanyardCode+0x2a>
     344:	6a e0       	ldi	r22, 0x0A	; 10
     346:	70 e0       	ldi	r23, 0x00	; 0
     348:	80 91 44 38 	lds	r24, 0x3844	; 0x803844 <lanyardLastActive>
     34c:	90 91 45 38 	lds	r25, 0x3845	; 0x803845 <lanyardLastActive+0x1>
     350:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <idleTimeout>
     354:	88 23       	and	r24, r24
     356:	39 f0       	breq	.+14     	; 0x366 <LanyardCode+0x2a>
        /* clean up maze game and go back to text game */
        gameNow = TEXT;
     358:	10 92 4c 38 	sts	0x384C, r1	; 0x80384c <gameNow>
        effect = 0;
     35c:	10 92 4a 38 	sts	0x384A, r1	; 0x80384a <effect>
     360:	10 92 4b 38 	sts	0x384B, r1	; 0x80384b <effect+0x1>
        return 0;
     364:	95 c0       	rjmp	.+298    	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
    }

    if (CheckState(LANYARD_COMPLETED))
     366:	8b e7       	ldi	r24, 0x7B	; 123
     368:	aa d7       	rcall	.+3924   	; 0x12be <CheckState>
     36a:	81 11       	cpse	r24, r1
     36c:	91 c0       	rjmp	.+290    	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
        return 0;

    if ( gameNow != TEXT && gameNow != LANYARD )
     36e:	80 91 4c 38 	lds	r24, 0x384C	; 0x80384c <gameNow>
     372:	88 23       	and	r24, r24
     374:	19 f0       	breq	.+6      	; 0x37c <LanyardCode+0x40>
     376:	83 30       	cpi	r24, 0x03	; 3
     378:	09 f0       	breq	.+2      	; 0x37c <LanyardCode+0x40>
     37a:	8a c0       	rjmp	.+276    	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
        return 0;

    if (buttonState == 0xff)
     37c:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <buttonState>
     380:	8f 3f       	cpi	r24, 0xFF	; 255
     382:	09 f4       	brne	.+2      	; 0x386 <LanyardCode+0x4a>
     384:	85 c0       	rjmp	.+266    	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
        return 0;

    if (buttonState == lastButtonState)
     386:	90 91 07 38 	lds	r25, 0x3807	; 0x803807 <lastButtonState>
     38a:	89 17       	cp	r24, r25
     38c:	09 f4       	brne	.+2      	; 0x390 <LanyardCode+0x54>
     38e:	80 c0       	rjmp	.+256    	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
        return 0;

    lanyardLastActive = getClock();
     390:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <getClock>
     394:	80 93 44 38 	sts	0x3844, r24	; 0x803844 <lanyardLastActive>
     398:	90 93 45 38 	sts	0x3845, r25	; 0x803845 <lanyardLastActive+0x1>

    if (lastButtonState == 0xff){
     39c:	80 91 07 38 	lds	r24, 0x3807	; 0x803807 <lastButtonState>
     3a0:	8f 3f       	cpi	r24, 0xFF	; 255
     3a2:	09 f0       	breq	.+2      	; 0x3a6 <LanyardCode+0x6a>
     3a4:	75 c0       	rjmp	.+234    	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
        if ((gameNow != LANYARD) || (lanyardState == LANYARD_GAMEOVER)) {
     3a6:	80 91 4c 38 	lds	r24, 0x384C	; 0x80384c <gameNow>
     3aa:	83 30       	cpi	r24, 0x03	; 3
     3ac:	21 f4       	brne	.+8      	; 0x3b6 <LanyardCode+0x7a>
     3ae:	80 91 02 38 	lds	r24, 0x3802	; 0x803802 <lanyardState>
     3b2:	83 30       	cpi	r24, 0x03	; 3
     3b4:	a1 f4       	brne	.+40     	; 0x3de <LanyardCode+0xa2>
            // init Lanyard game
            gameNow         = LANYARD;
     3b6:	83 e0       	ldi	r24, 0x03	; 3
     3b8:	80 93 4c 38 	sts	0x384C, r24	; 0x80384c <gameNow>
            lanyardPos      = 0;
     3bc:	10 92 47 38 	sts	0x3847, r1	; 0x803847 <lanyardPos>
            lanyardCnt      = 0;
     3c0:	10 92 46 38 	sts	0x3846, r1	; 0x803846 <lanyardCnt>
            lanyardState    = LANYARD_GOOD;
     3c4:	81 e0       	ldi	r24, 0x01	; 1
     3c6:	80 93 02 38 	sts	0x3802, r24	; 0x803802 <lanyardState>
            SetHackerLeds(0,0);
     3ca:	60 e0       	ldi	r22, 0x00	; 0
     3cc:	80 e0       	ldi	r24, 0x00	; 0
     3ce:	0e 94 87 0a 	call	0x150e	; 0x150e <SetHackerLeds>
            effect = 16;
     3d2:	80 e1       	ldi	r24, 0x10	; 16
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	80 93 4a 38 	sts	0x384A, r24	; 0x80384a <effect>
     3da:	90 93 4b 38 	sts	0x384B, r25	; 0x80384b <effect+0x1>
        }

        if (buttonState != lanyardCode[lanyardPos]) {
     3de:	80 91 47 38 	lds	r24, 0x3847	; 0x803847 <lanyardPos>
     3e2:	e8 2f       	mov	r30, r24
     3e4:	f0 e0       	ldi	r31, 0x00	; 0
     3e6:	e6 5d       	subi	r30, 0xD6	; 214
     3e8:	f0 44       	sbci	r31, 0x40	; 64
     3ea:	20 81       	ld	r18, Z
     3ec:	90 91 08 38 	lds	r25, 0x3808	; 0x803808 <buttonState>
     3f0:	29 17       	cp	r18, r25
     3f2:	41 f0       	breq	.+16     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
            if (lanyardPos == 0 ) {
     3f4:	81 11       	cpse	r24, r1
     3f6:	03 c0       	rjmp	.+6      	; 0x3fe <LanyardCode+0xc2>
                gameNow = TEXT;
     3f8:	10 92 4c 38 	sts	0x384C, r1	; 0x80384c <gameNow>
                return 0;
     3fc:	49 c0       	rjmp	.+146    	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
            }
            lanyardState = LANYARD_MISTAKE;
     3fe:	92 e0       	ldi	r25, 0x02	; 2
     400:	90 93 02 38 	sts	0x3802, r25	; 0x803802 <lanyardState>
        }
        lanyardPos++;
     404:	8f 5f       	subi	r24, 0xFF	; 255
     406:	80 93 47 38 	sts	0x3847, r24	; 0x803847 <lanyardPos>
        lanyardCnt++;            
     40a:	80 91 46 38 	lds	r24, 0x3846	; 0x803846 <lanyardCnt>
     40e:	8f 5f       	subi	r24, 0xFF	; 255
     410:	80 93 46 38 	sts	0x3846, r24	; 0x803846 <lanyardCnt>
        WingBar(lanyardCnt,lanyardCnt);
     414:	68 2f       	mov	r22, r24
     416:	0e 94 49 0a 	call	0x1492	; 0x1492 <WingBar>
        if (lanyardCnt >= 4) {
     41a:	80 91 46 38 	lds	r24, 0x3846	; 0x803846 <lanyardCnt>
     41e:	84 30       	cpi	r24, 0x04	; 4
     420:	b8 f1       	brcs	.+110    	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
            lanyardCnt = 0;
     422:	10 92 46 38 	sts	0x3846, r1	; 0x803846 <lanyardCnt>
            if (lanyardState == LANYARD_GOOD) {
     426:	80 91 02 38 	lds	r24, 0x3802	; 0x803802 <lanyardState>
     42a:	81 30       	cpi	r24, 0x01	; 1
     42c:	21 f5       	brne	.+72     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
                if (lanyardCnt == 0) {
                    WingBar(0,0);
     42e:	60 e0       	ldi	r22, 0x00	; 0
     430:	80 e0       	ldi	r24, 0x00	; 0
     432:	0e 94 49 0a 	call	0x1492	; 0x1492 <WingBar>
                    iLED[HCKR[G][(lanyardPos>>1)-2]] = dimValue;
     436:	80 91 47 38 	lds	r24, 0x3847	; 0x803847 <lanyardPos>
     43a:	e8 2f       	mov	r30, r24
     43c:	e6 95       	lsr	r30
     43e:	f0 e0       	ldi	r31, 0x00	; 0
     440:	e8 5b       	subi	r30, 0xB8	; 184
     442:	f0 44       	sbci	r31, 0x40	; 64
     444:	a4 81       	ldd	r26, Z+4	; 0x04
     446:	b0 e0       	ldi	r27, 0x00	; 0
     448:	90 91 0c 38 	lds	r25, 0x380C	; 0x80380c <dimValue>
     44c:	a8 52       	subi	r26, 0x28	; 40
     44e:	b5 4c       	sbci	r27, 0xC5	; 197
     450:	9c 93       	st	X, r25
                    iLED[HCKR[G][(lanyardPos>>1)-1]] = dimValue;
     452:	e5 81       	ldd	r30, Z+5	; 0x05
     454:	f0 e0       	ldi	r31, 0x00	; 0
     456:	90 91 0c 38 	lds	r25, 0x380C	; 0x80380c <dimValue>
     45a:	e8 52       	subi	r30, 0x28	; 40
     45c:	f5 4c       	sbci	r31, 0xC5	; 197
     45e:	90 83       	st	Z, r25
                }
                if (lanyardPos == LANYARD_LEN) {
     460:	8c 30       	cpi	r24, 0x0C	; 12
     462:	b1 f4       	brne	.+44     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
                    UpdateState(LANYARD_COMPLETED);
     464:	8b e7       	ldi	r24, 0x7B	; 123
     466:	0a d7       	rcall	.+3604   	; 0x127c <UpdateState>
                    effect    = 0x42;
     468:	82 e4       	ldi	r24, 0x42	; 66
     46a:	90 e0       	ldi	r25, 0x00	; 0
     46c:	80 93 4a 38 	sts	0x384A, r24	; 0x80384a <effect>
     470:	90 93 4b 38 	sts	0x384B, r25	; 0x80384b <effect+0x1>
     474:	0d c0       	rjmp	.+26     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
                    /*TODO state = STATE_MUSIC;*/
                }
            } else {
                lanyardState = LANYARD_GAMEOVER;
     476:	83 e0       	ldi	r24, 0x03	; 3
     478:	80 93 02 38 	sts	0x3802, r24	; 0x803802 <lanyardState>
                effect  = 0x31;
     47c:	81 e3       	ldi	r24, 0x31	; 49
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	80 93 4a 38 	sts	0x384A, r24	; 0x80384a <effect>
     484:	90 93 4b 38 	sts	0x384B, r25	; 0x80384b <effect+0x1>
                WingBar(0,0);
     488:	60 e0       	ldi	r22, 0x00	; 0
     48a:	80 e0       	ldi	r24, 0x00	; 0
     48c:	0e 94 49 0a 	call	0x1492	; 0x1492 <WingBar>
            }
        }
    }

    return 0;
}
     490:	80 e0       	ldi	r24, 0x00	; 0
     492:	08 95       	ret

00000494 <initMaze>:
uint8_t         mazeState = TRUE;
uint8_t         inverted  = FALSE;
uint16_t        mazeLastActive = 0;

void initMaze() {
    mazeHckrPos = 0;
     494:	10 92 5a 38 	sts	0x385A, r1	; 0x80385a <mazeHckrPos>
    mazePos = 0;
     498:	10 92 5b 38 	sts	0x385B, r1	; 0x80385b <mazePos>
    mazeCnt = 0;
     49c:	10 92 59 38 	sts	0x3859, r1	; 0x803859 <mazeCnt>
    mazeState = TRUE;
     4a0:	81 e0       	ldi	r24, 0x01	; 1
     4a2:	80 93 0d 38 	sts	0x380D, r24	; 0x80380d <mazeState>
    inverted  = FALSE;
     4a6:	10 92 58 38 	sts	0x3858, r1	; 0x803858 <inverted>
    effect = 16;
     4aa:	80 e1       	ldi	r24, 0x10	; 16
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	80 93 4a 38 	sts	0x384A, r24	; 0x80384a <effect>
     4b2:	90 93 4b 38 	sts	0x384B, r25	; 0x80384b <effect+0x1>
    SetHackerLeds(0,0);
     4b6:	60 e0       	ldi	r22, 0x00	; 0
     4b8:	80 e0       	ldi	r24, 0x00	; 0
     4ba:	0c 94 87 0a 	jmp	0x150e	; 0x150e <SetHackerLeds>
     4be:	08 95       	ret

000004c0 <showFieldStrength>:
}

void showFieldStrength(int16_t val) {
     4c0:	cf 93       	push	r28
     4c2:	df 93       	push	r29
     4c4:	ec 01       	movw	r28, r24
    int16_t field;
 
    field = abs(val);
     4c6:	97 ff       	sbrs	r25, 7
     4c8:	03 c0       	rjmp	.+6      	; 0x4d0 <showFieldStrength+0x10>
     4ca:	d1 95       	neg	r29
     4cc:	c1 95       	neg	r28
     4ce:	d1 09       	sbc	r29, r1
 
    if ( field > HALL_FIELD_0 ) {
     4d0:	cd 33       	cpi	r28, 0x3D	; 61
     4d2:	d1 05       	cpc	r29, r1
     4d4:	44 f0       	brlt	.+16     	; 0x4e6 <showFieldStrength+0x26>
        if (gameNow == TEXT) {
     4d6:	80 91 4c 38 	lds	r24, 0x384C	; 0x80384c <gameNow>
     4da:	81 11       	cpse	r24, r1
     4dc:	04 c0       	rjmp	.+8      	; 0x4e6 <showFieldStrength+0x26>
            initMaze();
     4de:	da df       	rcall	.-76     	; 0x494 <initMaze>
            gameNow = MAZE;
     4e0:	81 e0       	ldi	r24, 0x01	; 1
     4e2:	80 93 4c 38 	sts	0x384C, r24	; 0x80384c <gameNow>
        }
    }

    if (gameNow == MAZE) {
     4e6:	80 91 4c 38 	lds	r24, 0x384C	; 0x80384c <gameNow>
     4ea:	81 30       	cpi	r24, 0x01	; 1
     4ec:	09 f5       	brne	.+66     	; 0x530 <showFieldStrength+0x70>
        if ( field < HALL_FIELD_0 )
     4ee:	cc 33       	cpi	r28, 0x3C	; 60
     4f0:	d1 05       	cpc	r29, r1
     4f2:	1c f4       	brge	.+6      	; 0x4fa <showFieldStrength+0x3a>
            WingBar(0,0);
     4f4:	60 e0       	ldi	r22, 0x00	; 0
     4f6:	80 e0       	ldi	r24, 0x00	; 0
     4f8:	1a c0       	rjmp	.+52     	; 0x52e <showFieldStrength+0x6e>
        else if ( field < HALL_FIELD_1 )
     4fa:	c8 37       	cpi	r28, 0x78	; 120
     4fc:	d1 05       	cpc	r29, r1
     4fe:	1c f4       	brge	.+6      	; 0x506 <showFieldStrength+0x46>
            WingBar(1,1);
     500:	61 e0       	ldi	r22, 0x01	; 1
     502:	81 e0       	ldi	r24, 0x01	; 1
     504:	14 c0       	rjmp	.+40     	; 0x52e <showFieldStrength+0x6e>
        else if ( field < HALL_FIELD_2 )
     506:	c6 39       	cpi	r28, 0x96	; 150
     508:	d1 05       	cpc	r29, r1
     50a:	1c f4       	brge	.+6      	; 0x512 <showFieldStrength+0x52>
            WingBar(2,2);
     50c:	62 e0       	ldi	r22, 0x02	; 2
     50e:	82 e0       	ldi	r24, 0x02	; 2
     510:	0e c0       	rjmp	.+28     	; 0x52e <showFieldStrength+0x6e>
        else if ( field < HALL_FIELD_3 )
     512:	c8 3c       	cpi	r28, 0xC8	; 200
     514:	d1 05       	cpc	r29, r1
     516:	1c f4       	brge	.+6      	; 0x51e <showFieldStrength+0x5e>
            WingBar(3,3);
     518:	63 e0       	ldi	r22, 0x03	; 3
     51a:	83 e0       	ldi	r24, 0x03	; 3
     51c:	08 c0       	rjmp	.+16     	; 0x52e <showFieldStrength+0x6e>
        else if ( field < HALL_FIELD_4 )
     51e:	cc 32       	cpi	r28, 0x2C	; 44
     520:	d1 40       	sbci	r29, 0x01	; 1
     522:	1c f4       	brge	.+6      	; 0x52a <showFieldStrength+0x6a>
            WingBar(4,4);
     524:	64 e0       	ldi	r22, 0x04	; 4
     526:	84 e0       	ldi	r24, 0x04	; 4
     528:	02 c0       	rjmp	.+4      	; 0x52e <showFieldStrength+0x6e>
        else
            WingBar(5,5);
     52a:	65 e0       	ldi	r22, 0x05	; 5
     52c:	85 e0       	ldi	r24, 0x05	; 5
     52e:	b1 d7       	rcall	.+3938   	; 0x1492 <WingBar>
    }
}
     530:	df 91       	pop	r29
     532:	cf 91       	pop	r28
     534:	08 95       	ret

00000536 <MagnetMaze>:

// Main game loop
uint8_t MagnetMaze(){
     536:	cf 93       	push	r28
     538:	df 93       	push	r29
    if (gameNow == MAZE && idleTimeout(mazeLastActive,MAZE_MAX_IDLE)) {
     53a:	80 91 4c 38 	lds	r24, 0x384C	; 0x80384c <gameNow>
     53e:	81 30       	cpi	r24, 0x01	; 1
     540:	71 f4       	brne	.+28     	; 0x55e <MagnetMaze+0x28>
     542:	6a e0       	ldi	r22, 0x0A	; 10
     544:	70 e0       	ldi	r23, 0x00	; 0
     546:	80 91 56 38 	lds	r24, 0x3856	; 0x803856 <mazeLastActive>
     54a:	90 91 57 38 	lds	r25, 0x3857	; 0x803857 <mazeLastActive+0x1>
     54e:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <idleTimeout>
     552:	88 23       	and	r24, r24
     554:	21 f0       	breq	.+8      	; 0x55e <MagnetMaze+0x28>
        /* clean up maze game and go back to text game */
        initMaze();
     556:	9e df       	rcall	.-196    	; 0x494 <initMaze>
        gameNow = TEXT;
     558:	10 92 4c 38 	sts	0x384C, r1	; 0x80384c <gameNow>
        return 0;
     55c:	e5 c0       	rjmp	.+458    	; 0x728 <MagnetMaze+0x1f2>
    }
        
    if (CheckState(MAZE_INACTIVE))
     55e:	87 ef       	ldi	r24, 0xF7	; 247
     560:	ae d6       	rcall	.+3420   	; 0x12be <CheckState>
     562:	81 11       	cpse	r24, r1
     564:	e1 c0       	rjmp	.+450    	; 0x728 <MagnetMaze+0x1f2>
        return 0;

    if (CheckState(MAZE_COMPLETED))
     566:	8d e7       	ldi	r24, 0x7D	; 125
     568:	aa d6       	rcall	.+3412   	; 0x12be <CheckState>
     56a:	81 11       	cpse	r24, r1
     56c:	dd c0       	rjmp	.+442    	; 0x728 <MagnetMaze+0x1f2>
     56e:	80 91 4c 38 	lds	r24, 0x384C	; 0x80384c <gameNow>
        return 0;

    if ( (gameNow != TEXT) && (gameNow != MAZE) )
     572:	82 30       	cpi	r24, 0x02	; 2
     574:	08 f0       	brcs	.+2      	; 0x578 <MagnetMaze+0x42>
     576:	d8 c0       	rjmp	.+432    	; 0x728 <MagnetMaze+0x1f2>
     578:	80 91 00 3b 	lds	r24, 0x3B00	; 0x803b00 <calHall>
        return 0;

    if (calHall == 0)
     57c:	90 91 01 3b 	lds	r25, 0x3B01	; 0x803b01 <calHall+0x1>
     580:	89 2b       	or	r24, r25
     582:	41 f4       	brne	.+16     	; 0x594 <MagnetMaze+0x5e>
     584:	80 91 cf 3a 	lds	r24, 0x3ACF	; 0x803acf <adcHall>
        calHall = adcHall;
     588:	90 91 d0 3a 	lds	r25, 0x3AD0	; 0x803ad0 <adcHall+0x1>
     58c:	80 93 00 3b 	sts	0x3B00, r24	; 0x803b00 <calHall>
     590:	90 93 01 3b 	sts	0x3B01, r25	; 0x803b01 <calHall+0x1>
     594:	c0 91 cf 3a 	lds	r28, 0x3ACF	; 0x803acf <adcHall>

    int16_t valHall = adcHall - calHall;
     598:	d0 91 d0 3a 	lds	r29, 0x3AD0	; 0x803ad0 <adcHall+0x1>
     59c:	80 91 00 3b 	lds	r24, 0x3B00	; 0x803b00 <calHall>
     5a0:	90 91 01 3b 	lds	r25, 0x3B01	; 0x803b01 <calHall+0x1>
     5a4:	c8 1b       	sub	r28, r24
     5a6:	d9 0b       	sbc	r29, r25
    showFieldStrength(valHall);
     5a8:	ce 01       	movw	r24, r28
     5aa:	8a df       	rcall	.-236    	; 0x4c0 <showFieldStrength>
     5ac:	80 91 5d 38 	lds	r24, 0x385D	; 0x80385d <curHallState>

    switch (curHallState) {
     5b0:	81 30       	cpi	r24, 0x01	; 1
     5b2:	89 f0       	breq	.+34     	; 0x5d6 <MagnetMaze+0xa0>
     5b4:	18 f0       	brcs	.+6      	; 0x5bc <MagnetMaze+0x86>
     5b6:	82 30       	cpi	r24, 0x02	; 2
     5b8:	c1 f0       	breq	.+48     	; 0x5ea <MagnetMaze+0xb4>
     5ba:	1f c0       	rjmp	.+62     	; 0x5fa <MagnetMaze+0xc4>
     5bc:	c4 3d       	cpi	r28, 0xD4	; 212
        case 0:
            if ( valHall + HALL_HIGH < 0 ) {
     5be:	9e ef       	ldi	r25, 0xFE	; 254
     5c0:	d9 07       	cpc	r29, r25
     5c2:	14 f4       	brge	.+4      	; 0x5c8 <MagnetMaze+0x92>
     5c4:	91 e0       	ldi	r25, 0x01	; 1
                newHallState = 1;
     5c6:	04 c0       	rjmp	.+8      	; 0x5d0 <MagnetMaze+0x9a>
     5c8:	cd 32       	cpi	r28, 0x2D	; 45
            } else if ( valHall - HALL_HIGH > 0 ) {
     5ca:	d1 40       	sbci	r29, 0x01	; 1
     5cc:	5c f0       	brlt	.+22     	; 0x5e4 <MagnetMaze+0xae>
     5ce:	92 e0       	ldi	r25, 0x02	; 2
                newHallState = 2;
     5d0:	90 93 5c 38 	sts	0x385C, r25	; 0x80385c <newHallState>
     5d4:	12 c0       	rjmp	.+36     	; 0x5fa <MagnetMaze+0xc4>
     5d6:	cd 32       	cpi	r28, 0x2D	; 45
                newHallState = 0;
            }
            break;
        
        case 1:
            if ( valHall - HALL_HIGH > 0 ) {
     5d8:	91 e0       	ldi	r25, 0x01	; 1
     5da:	d9 07       	cpc	r29, r25
     5dc:	c4 f7       	brge	.-16     	; 0x5ce <MagnetMaze+0x98>
     5de:	c9 38       	cpi	r28, 0x89	; 137
                newHallState = 2;
            } else if ( valHall + HALL_LOW > 0 ) {
     5e0:	df 4f       	sbci	r29, 0xFF	; 255
     5e2:	84 f3       	brlt	.-32     	; 0x5c4 <MagnetMaze+0x8e>
     5e4:	10 92 5c 38 	sts	0x385C, r1	; 0x80385c <newHallState>
            if ( valHall + HALL_HIGH < 0 ) {
                newHallState = 1;
            } else if ( valHall - HALL_HIGH > 0 ) {
                newHallState = 2;
            } else {
                newHallState = 0;
     5e8:	08 c0       	rjmp	.+16     	; 0x5fa <MagnetMaze+0xc4>
     5ea:	c4 3d       	cpi	r28, 0xD4	; 212
                newHallState = 1;
            }
            break;
        
        case 2:
            if ( valHall + HALL_HIGH < 0 ) {
     5ec:	9e ef       	ldi	r25, 0xFE	; 254
     5ee:	d9 07       	cpc	r29, r25
     5f0:	4c f3       	brlt	.-46     	; 0x5c4 <MagnetMaze+0x8e>
     5f2:	c8 37       	cpi	r28, 0x78	; 120
                newHallState = 1;
            } else if ( valHall - HALL_LOW < 0 ) {
     5f4:	d1 05       	cpc	r29, r1
     5f6:	b4 f3       	brlt	.-20     	; 0x5e4 <MagnetMaze+0xae>
     5f8:	ea cf       	rjmp	.-44     	; 0x5ce <MagnetMaze+0x98>
     5fa:	c0 91 36 bf 	lds	r28, 0xBF36	; 0x80bf36 <__bss_end+0x840f>
            }
            break;
    }

    /* Indicate that the magnet was read succesfully */
    iLED[CAT] = (newHallState ? dimValue : 0);
     5fe:	ec 2f       	mov	r30, r28
     600:	f0 e0       	ldi	r31, 0x00	; 0
     602:	90 91 5c 38 	lds	r25, 0x385C	; 0x80385c <newHallState>
     606:	99 23       	and	r25, r25
     608:	19 f0       	breq	.+6      	; 0x610 <MagnetMaze+0xda>
     60a:	20 91 0c 38 	lds	r18, 0x380C	; 0x80380c <dimValue>
     60e:	01 c0       	rjmp	.+2      	; 0x612 <MagnetMaze+0xdc>
     610:	20 e0       	ldi	r18, 0x00	; 0
     612:	e8 52       	subi	r30, 0x28	; 40
     614:	f5 4c       	sbci	r31, 0xC5	; 197
     616:	20 83       	st	Z, r18
     618:	89 17       	cp	r24, r25

    if (newHallState != curHallState) {
     61a:	09 f4       	brne	.+2      	; 0x61e <MagnetMaze+0xe8>
     61c:	85 c0       	rjmp	.+266    	; 0x728 <MagnetMaze+0x1f2>
     61e:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <getClock>
        /* keep track of time to enable an idle timeout to exit the game */
        mazeLastActive = getClock();
     622:	80 93 56 38 	sts	0x3856, r24	; 0x803856 <mazeLastActive>
     626:	90 93 57 38 	sts	0x3857, r25	; 0x803857 <mazeLastActive+0x1>
     62a:	90 91 5b 38 	lds	r25, 0x385B	; 0x80385b <mazePos>

        /* Make the maze work regardless of badge orientation */
        if ((mazePos == 0) && (newHallState != 0))
     62e:	80 91 5c 38 	lds	r24, 0x385C	; 0x80385c <newHallState>
     632:	91 11       	cpse	r25, r1
     634:	08 c0       	rjmp	.+16     	; 0x646 <MagnetMaze+0x110>
     636:	88 23       	and	r24, r24
     638:	31 f0       	breq	.+12     	; 0x646 <MagnetMaze+0x110>
     63a:	91 e0       	ldi	r25, 0x01	; 1
            inverted = (newHallState != mazeCode[0]) ? TRUE : FALSE;
     63c:	81 30       	cpi	r24, 0x01	; 1
     63e:	09 f4       	brne	.+2      	; 0x642 <MagnetMaze+0x10c>
     640:	90 e0       	ldi	r25, 0x00	; 0
     642:	90 93 58 38 	sts	0x3858, r25	; 0x803858 <inverted>
     646:	80 93 5d 38 	sts	0x385D, r24	; 0x80385d <curHallState>

        curHallState = newHallState;
     64a:	88 23       	and	r24, r24
        
        if (curHallState != 0) {
     64c:	09 f4       	brne	.+2      	; 0x650 <MagnetMaze+0x11a>
     64e:	6c c0       	rjmp	.+216    	; 0x728 <MagnetMaze+0x1f2>
     650:	8f e9       	ldi	r24, 0x9F	; 159
            effect = 0x19f;
     652:	91 e0       	ldi	r25, 0x01	; 1
     654:	80 93 4a 38 	sts	0x384A, r24	; 0x80384a <effect>
     658:	90 93 4b 38 	sts	0x384B, r25	; 0x80384b <effect+0x1>
     65c:	80 91 4c 38 	lds	r24, 0x384C	; 0x80384c <gameNow>
            if (gameNow == TEXT)
     660:	81 11       	cpse	r24, r1
     662:	01 c0       	rjmp	.+2      	; 0x666 <MagnetMaze+0x130>
                initMaze();
     664:	17 df       	rcall	.-466    	; 0x494 <initMaze>
     666:	81 e0       	ldi	r24, 0x01	; 1
            gameNow = MAZE;
     668:	80 93 4c 38 	sts	0x384C, r24	; 0x80384c <gameNow>
     66c:	80 91 58 38 	lds	r24, 0x3858	; 0x803858 <inverted>

            if ( (inverted ? curHallState^3 : curHallState) == mazeCode[mazePos]) {
     670:	20 91 5d 38 	lds	r18, 0x385D	; 0x80385d <curHallState>
     674:	88 23       	and	r24, r24
     676:	11 f0       	breq	.+4      	; 0x67c <MagnetMaze+0x146>
     678:	83 e0       	ldi	r24, 0x03	; 3
     67a:	28 27       	eor	r18, r24
     67c:	30 e0       	ldi	r19, 0x00	; 0
     67e:	80 91 5b 38 	lds	r24, 0x385B	; 0x80385b <mazePos>
     682:	e8 2f       	mov	r30, r24
     684:	f0 e0       	ldi	r31, 0x00	; 0
     686:	ec 59       	subi	r30, 0x9C	; 156
     688:	f0 44       	sbci	r31, 0x40	; 64
     68a:	40 81       	ld	r20, Z
     68c:	50 e0       	ldi	r21, 0x00	; 0
     68e:	24 17       	cp	r18, r20
     690:	35 07       	cpc	r19, r21
     692:	91 f4       	brne	.+36     	; 0x6b8 <MagnetMaze+0x182>
     694:	90 91 0d 38 	lds	r25, 0x380D	; 0x80380d <mazeState>
                mazeState &= TRUE;
     698:	91 70       	andi	r25, 0x01	; 1
     69a:	90 93 0d 38 	sts	0x380D, r25	; 0x80380d <mazeState>
     69e:	e0 91 45 bf 	lds	r30, 0xBF45	; 0x80bf45 <__bss_end+0x841e>
                iLED[EYE[R][L]] = 0;
     6a2:	f0 e0       	ldi	r31, 0x00	; 0
     6a4:	e8 52       	subi	r30, 0x28	; 40
     6a6:	f5 4c       	sbci	r31, 0xC5	; 197
     6a8:	10 82       	st	Z, r1
     6aa:	e0 91 44 bf 	lds	r30, 0xBF44	; 0x80bf44 <__bss_end+0x841d>
                iLED[EYE[R][R]] = 0;
     6ae:	f0 e0       	ldi	r31, 0x00	; 0
     6b0:	e8 52       	subi	r30, 0x28	; 40
     6b2:	f5 4c       	sbci	r31, 0xC5	; 197
     6b4:	10 82       	st	Z, r1
     6b6:	02 c0       	rjmp	.+4      	; 0x6bc <MagnetMaze+0x186>
     6b8:	10 92 0d 38 	sts	0x380D, r1	; 0x80380d <mazeState>
            } else {
                mazeState = FALSE;
     6bc:	8f 5f       	subi	r24, 0xFF	; 255
            }
            mazePos++;
     6be:	80 93 5b 38 	sts	0x385B, r24	; 0x80385b <mazePos>
     6c2:	90 91 59 38 	lds	r25, 0x3859	; 0x803859 <mazeCnt>
            mazeCnt++;            
     6c6:	9f 5f       	subi	r25, 0xFF	; 255
     6c8:	93 30       	cpi	r25, 0x03	; 3
            if (mazeCnt >= 3) {
     6ca:	18 f4       	brcc	.+6      	; 0x6d2 <MagnetMaze+0x19c>
     6cc:	90 93 59 38 	sts	0x3859, r25	; 0x803859 <mazeCnt>
                iLED[EYE[R][R]] = 0;
            } else {
                mazeState = FALSE;
            }
            mazePos++;
            mazeCnt++;            
     6d0:	2b c0       	rjmp	.+86     	; 0x728 <MagnetMaze+0x1f2>
     6d2:	10 92 59 38 	sts	0x3859, r1	; 0x803859 <mazeCnt>
            if (mazeCnt >= 3) {
                mazeCnt = 0;
     6d6:	90 91 0d 38 	lds	r25, 0x380D	; 0x80380d <mazeState>
                if (mazeState == TRUE) {
     6da:	91 30       	cpi	r25, 0x01	; 1
     6dc:	e1 f4       	brne	.+56     	; 0x716 <MagnetMaze+0x1e0>
     6de:	90 91 5a 38 	lds	r25, 0x385A	; 0x80385a <mazeHckrPos>
                    iLED[HCKR[G][mazeHckrPos]] = dimValue;
     6e2:	e9 2f       	mov	r30, r25
     6e4:	f0 e0       	ldi	r31, 0x00	; 0
     6e6:	e8 5b       	subi	r30, 0xB8	; 184
     6e8:	f0 44       	sbci	r31, 0x40	; 64
     6ea:	e6 81       	ldd	r30, Z+6	; 0x06
     6ec:	f0 e0       	ldi	r31, 0x00	; 0
     6ee:	20 91 0c 38 	lds	r18, 0x380C	; 0x80380c <dimValue>
     6f2:	e8 52       	subi	r30, 0x28	; 40
     6f4:	f5 4c       	sbci	r31, 0xC5	; 197
     6f6:	20 83       	st	Z, r18
     6f8:	9f 5f       	subi	r25, 0xFF	; 255
                    mazeHckrPos++;
     6fa:	90 93 5a 38 	sts	0x385A, r25	; 0x80385a <mazeHckrPos>
                    if (mazePos == sizeof(mazeCode)) {
     6fe:	82 31       	cpi	r24, 0x12	; 18
     700:	99 f4       	brne	.+38     	; 0x728 <MagnetMaze+0x1f2>
                        UpdateState(MAZE_COMPLETED);
     702:	8d e7       	ldi	r24, 0x7D	; 125
     704:	bb d5       	rcall	.+2934   	; 0x127c <UpdateState>
     706:	ec 2f       	mov	r30, r28
                        iLED[CAT]       = 0;
     708:	f0 e0       	ldi	r31, 0x00	; 0
     70a:	e8 52       	subi	r30, 0x28	; 40
     70c:	f5 4c       	sbci	r31, 0xC5	; 197
     70e:	10 82       	st	Z, r1
                        effect = 0x42;
     710:	82 e4       	ldi	r24, 0x42	; 66
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	05 c0       	rjmp	.+10     	; 0x720 <MagnetMaze+0x1ea>
                        /*TODO state = STATE_MUSIC;*/
                    }
                } else {
                    initMaze();
     716:	be de       	rcall	.-644    	; 0x494 <initMaze>
     718:	10 92 4c 38 	sts	0x384C, r1	; 0x80384c <gameNow>
                    gameNow   = TEXT;
     71c:	81 e3       	ldi	r24, 0x31	; 49
                    effect = 0x31;
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	80 93 4a 38 	sts	0x384A, r24	; 0x80384a <effect>
     724:	90 93 4b 38 	sts	0x384B, r25	; 0x80384b <effect+0x1>
     728:	80 e0       	ldi	r24, 0x00	; 0
                }
            }
        }
    }
    return 0;
}
     72a:	df 91       	pop	r29
     72c:	cf 91       	pop	r28
     72e:	08 95       	ret

00000730 <Setup>:
     730:	f8 94       	cli
    TCB1_CCMP = pitch;
    if (repeat) auRepAddr = auBuffer;
    else auSmpAddr = auBuffer;
    auVolume = volume;
    return 1;
}
     732:	88 ed       	ldi	r24, 0xD8	; 216
     734:	84 bf       	out	0x34, r24	; 52
     736:	81 e0       	ldi	r24, 0x01	; 1
     738:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x700061>
     73c:	9a e4       	ldi	r25, 0x4A	; 74
     73e:	90 93 00 04 	sts	0x0400, r25	; 0x800400 <__TEXT_REGION_LENGTH__+0x700400>
     742:	9c e7       	ldi	r25, 0x7C	; 124
     744:	90 93 20 04 	sts	0x0420, r25	; 0x800420 <__TEXT_REGION_LENGTH__+0x700420>
     748:	2f e3       	ldi	r18, 0x3F	; 63
     74a:	20 93 40 04 	sts	0x0440, r18	; 0x800440 <__TEXT_REGION_LENGTH__+0x700440>
     74e:	90 91 53 04 	lds	r25, 0x0453	; 0x800453 <__TEXT_REGION_LENGTH__+0x700453>
     752:	90 68       	ori	r25, 0x80	; 128
     754:	90 93 53 04 	sts	0x0453, r25	; 0x800453 <__TEXT_REGION_LENGTH__+0x700453>
     758:	90 91 54 04 	lds	r25, 0x0454	; 0x800454 <__TEXT_REGION_LENGTH__+0x700454>
     75c:	90 68       	ori	r25, 0x80	; 128
     75e:	90 93 54 04 	sts	0x0454, r25	; 0x800454 <__TEXT_REGION_LENGTH__+0x700454>
     762:	90 91 55 04 	lds	r25, 0x0455	; 0x800455 <__TEXT_REGION_LENGTH__+0x700455>
     766:	90 68       	ori	r25, 0x80	; 128
     768:	90 93 55 04 	sts	0x0455, r25	; 0x800455 <__TEXT_REGION_LENGTH__+0x700455>
     76c:	90 91 33 04 	lds	r25, 0x0433	; 0x800433 <__TEXT_REGION_LENGTH__+0x700433>
     770:	90 68       	ori	r25, 0x80	; 128
     772:	90 93 33 04 	sts	0x0433, r25	; 0x800433 <__TEXT_REGION_LENGTH__+0x700433>
     776:	90 91 34 04 	lds	r25, 0x0434	; 0x800434 <__TEXT_REGION_LENGTH__+0x700434>
     77a:	90 68       	ori	r25, 0x80	; 128
     77c:	90 93 34 04 	sts	0x0434, r25	; 0x800434 <__TEXT_REGION_LENGTH__+0x700434>
     780:	90 91 35 04 	lds	r25, 0x0435	; 0x800435 <__TEXT_REGION_LENGTH__+0x700435>
     784:	90 68       	ori	r25, 0x80	; 128
     786:	90 93 35 04 	sts	0x0435, r25	; 0x800435 <__TEXT_REGION_LENGTH__+0x700435>
     78a:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <__TEXT_REGION_LENGTH__+0x700201>
     78e:	92 e0       	ldi	r25, 0x02	; 2
     790:	90 93 05 04 	sts	0x0405, r25	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
     794:	4b e5       	ldi	r20, 0x5B	; 91
     796:	51 e0       	ldi	r21, 0x01	; 1
     798:	40 93 08 08 	sts	0x0808, r20	; 0x800808 <__TEXT_REGION_LENGTH__+0x700808>
     79c:	50 93 09 08 	sts	0x0809, r21	; 0x800809 <__TEXT_REGION_LENGTH__+0x700809>
     7a0:	30 ea       	ldi	r19, 0xA0	; 160
     7a2:	30 93 05 08 	sts	0x0805, r19	; 0x800805 <__TEXT_REGION_LENGTH__+0x700805>
     7a6:	30 ec       	ldi	r19, 0xC0	; 192
     7a8:	30 93 06 08 	sts	0x0806, r19	; 0x800806 <__TEXT_REGION_LENGTH__+0x700806>
     7ac:	33 e0       	ldi	r19, 0x03	; 3
     7ae:	30 93 07 08 	sts	0x0807, r19	; 0x800807 <__TEXT_REGION_LENGTH__+0x700807>
     7b2:	1c ba       	out	0x1c, r1	; 28
     7b4:	1d ba       	out	0x1d, r1	; 29
     7b6:	1f ba       	out	0x1f, r1	; 31
     7b8:	80 93 03 0a 	sts	0x0A03, r24	; 0x800a03 <__TEXT_REGION_LENGTH__+0x700a03>
     7bc:	38 e0       	ldi	r19, 0x08	; 8
     7be:	30 93 00 0a 	sts	0x0A00, r19	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
     7c2:	20 93 02 02 	sts	0x0202, r18	; 0x800202 <__TEXT_REGION_LENGTH__+0x700202>
     7c6:	27 e7       	ldi	r18, 0x77	; 119
     7c8:	20 93 01 0a 	sts	0x0A01, r18	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
     7cc:	80 93 0a 0a 	sts	0x0A0A, r24	; 0x800a0a <__TEXT_REGION_LENGTH__+0x700a0a>
     7d0:	2b e0       	ldi	r18, 0x0B	; 11
     7d2:	20 93 05 0a 	sts	0x0A05, r18	; 0x800a05 <__TEXT_REGION_LENGTH__+0x700a05>
     7d6:	20 91 00 0a 	lds	r18, 0x0A00	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
     7da:	21 60       	ori	r18, 0x01	; 1
     7dc:	20 93 00 0a 	sts	0x0A00, r18	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
     7e0:	25 e0       	ldi	r18, 0x05	; 5
     7e2:	20 93 40 0a 	sts	0x0A40, r18	; 0x800a40 <__TEXT_REGION_LENGTH__+0x700a40>
     7e6:	10 92 41 0a 	sts	0x0A41, r1	; 0x800a41 <__TEXT_REGION_LENGTH__+0x700a41>
     7ea:	4f ef       	ldi	r20, 0xFF	; 255
     7ec:	51 e0       	ldi	r21, 0x01	; 1
     7ee:	40 93 4c 0a 	sts	0x0A4C, r20	; 0x800a4c <__TEXT_REGION_LENGTH__+0x700a4c>
     7f2:	50 93 4d 0a 	sts	0x0A4D, r21	; 0x800a4d <__TEXT_REGION_LENGTH__+0x700a4d>
     7f6:	10 92 45 0a 	sts	0x0A45, r1	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
     7fa:	80 93 50 0a 	sts	0x0A50, r24	; 0x800a50 <__TEXT_REGION_LENGTH__+0x700a50>
     7fe:	10 92 51 0a 	sts	0x0A51, r1	; 0x800a51 <__TEXT_REGION_LENGTH__+0x700a51>
     802:	4b e8       	ldi	r20, 0x8B	; 139
     804:	53 e0       	ldi	r21, 0x03	; 3
     806:	40 93 5c 0a 	sts	0x0A5C, r20	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
     80a:	50 93 5d 0a 	sts	0x0A5D, r21	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
     80e:	80 93 55 0a 	sts	0x0A55, r24	; 0x800a55 <__TEXT_REGION_LENGTH__+0x700a55>
     812:	30 93 16 08 	sts	0x0816, r19	; 0x800816 <__TEXT_REGION_LENGTH__+0x700816>
     816:	23 ec       	ldi	r18, 0xC3	; 195
     818:	20 93 13 08 	sts	0x0813, r18	; 0x800813 <__TEXT_REGION_LENGTH__+0x700813>
     81c:	20 91 15 08 	lds	r18, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     820:	21 60       	ori	r18, 0x01	; 1
     822:	20 93 15 08 	sts	0x0815, r18	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     826:	20 91 15 08 	lds	r18, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     82a:	24 6c       	ori	r18, 0xC4	; 196
     82c:	20 93 15 08 	sts	0x0815, r18	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     830:	22 e1       	ldi	r18, 0x12	; 18
     832:	20 93 a0 00 	sts	0x00A0, r18	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     836:	20 e2       	ldi	r18, 0x20	; 32
     838:	20 93 a2 00 	sts	0x00A2, r18	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     83c:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
     840:	90 93 00 06 	sts	0x0600, r25	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
     844:	24 e4       	ldi	r18, 0x44	; 68
     846:	20 93 02 06 	sts	0x0602, r18	; 0x800602 <__TEXT_REGION_LENGTH__+0x700602>
     84a:	2e e1       	ldi	r18, 0x1E	; 30
     84c:	20 93 06 06 	sts	0x0606, r18	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
     850:	80 93 0a 06 	sts	0x060A, r24	; 0x80060a <__TEXT_REGION_LENGTH__+0x70060a>
     854:	20 91 00 06 	lds	r18, 0x0600	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
     858:	21 60       	ori	r18, 0x01	; 1
     85a:	20 93 00 06 	sts	0x0600, r18	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
     85e:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
     862:	10 92 40 06 	sts	0x0640, r1	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
     866:	90 93 41 06 	sts	0x0641, r25	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
     86a:	92 e5       	ldi	r25, 0x52	; 82
     86c:	90 93 42 06 	sts	0x0642, r25	; 0x800642 <__TEXT_REGION_LENGTH__+0x700642>
     870:	94 e0       	ldi	r25, 0x04	; 4
     872:	90 93 45 06 	sts	0x0645, r25	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
     876:	90 93 46 06 	sts	0x0646, r25	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     87a:	80 93 4a 06 	sts	0x064A, r24	; 0x80064a <__TEXT_REGION_LENGTH__+0x70064a>
     87e:	90 91 40 06 	lds	r25, 0x0640	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
     882:	91 60       	ori	r25, 0x01	; 1
     884:	90 93 40 06 	sts	0x0640, r25	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
     888:	80 93 48 06 	sts	0x0648, r24	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
     88c:	80 e4       	ldi	r24, 0x40	; 64
     88e:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
     892:	80 e8       	ldi	r24, 0x80	; 128
     894:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
     898:	80 91 a0 06 	lds	r24, 0x06A0	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
     89c:	81 60       	ori	r24, 0x01	; 1
     89e:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
     8a2:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     8a6:	80 fd       	sbrc	r24, 0
     8a8:	fc cf       	rjmp	.-8      	; 0x8a2 <Setup+0x172>
     8aa:	80 e3       	ldi	r24, 0x30	; 48
     8ac:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__TEXT_REGION_LENGTH__+0x700140>
     8b0:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <__TEXT_REGION_LENGTH__+0x700147>
     8b4:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     8b8:	82 fd       	sbrc	r24, 2
     8ba:	fc cf       	rjmp	.-8      	; 0x8b4 <Setup+0x184>
     8bc:	80 e0       	ldi	r24, 0x00	; 0
     8be:	98 e7       	ldi	r25, 0x78	; 120
     8c0:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     8c4:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
     8c8:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     8cc:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     8d0:	82 96       	adiw	r24, 0x22	; 34
     8d2:	80 93 04 3b 	sts	0x3B04, r24	; 0x803b04 <tmp16bit>
     8d6:	90 93 05 3b 	sts	0x3B05, r25	; 0x803b05 <tmp16bit+0x1>
     8da:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     8de:	30 91 4b 01 	lds	r19, 0x014B	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
     8e2:	80 91 04 3b 	lds	r24, 0x3B04	; 0x803b04 <tmp16bit>
     8e6:	90 91 05 3b 	lds	r25, 0x3B05	; 0x803b05 <tmp16bit+0x1>
     8ea:	28 17       	cp	r18, r24
     8ec:	39 07       	cpc	r19, r25
     8ee:	70 f4       	brcc	.+28     	; 0x90c <Setup+0x1dc>
     8f0:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     8f4:	30 91 4b 01 	lds	r19, 0x014B	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
     8f8:	80 91 04 3b 	lds	r24, 0x3B04	; 0x803b04 <tmp16bit>
     8fc:	90 91 05 3b 	lds	r25, 0x3B05	; 0x803b05 <tmp16bit+0x1>
     900:	82 1b       	sub	r24, r18
     902:	93 0b       	sbc	r25, r19
     904:	80 93 04 3b 	sts	0x3B04, r24	; 0x803b04 <tmp16bit>
     908:	90 93 05 3b 	sts	0x3B05, r25	; 0x803b05 <tmp16bit+0x1>
     90c:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     910:	83 fd       	sbrc	r24, 3
     912:	fc cf       	rjmp	.-8      	; 0x90c <Setup+0x1dc>
     914:	80 91 04 3b 	lds	r24, 0x3B04	; 0x803b04 <tmp16bit>
     918:	90 91 05 3b 	lds	r25, 0x3B05	; 0x803b05 <tmp16bit+0x1>
     91c:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     920:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     924:	83 e0       	ldi	r24, 0x03	; 3
     926:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     92a:	81 e0       	ldi	r24, 0x01	; 1
     92c:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <__TEXT_REGION_LENGTH__+0x700152>
     930:	88 e0       	ldi	r24, 0x08	; 8
     932:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__TEXT_REGION_LENGTH__+0x700150>
     936:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     93a:	80 fd       	sbrc	r24, 0
     93c:	fc cf       	rjmp	.-8      	; 0x936 <Setup+0x206>
     93e:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <__TEXT_REGION_LENGTH__+0x700140>
     942:	81 60       	ori	r24, 0x01	; 1
     944:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__TEXT_REGION_LENGTH__+0x700140>
     948:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <__TEXT_REGION_LENGTH__+0x700150>
     94c:	81 60       	ori	r24, 0x01	; 1
     94e:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__TEXT_REGION_LENGTH__+0x700150>
     952:	10 92 87 3a 	sts	0x3A87, r1	; 0x803a87 <serRx>
     956:	87 e8       	ldi	r24, 0x87	; 135
     958:	9a e3       	ldi	r25, 0x3A	; 58
     95a:	80 93 cd 3a 	sts	0x3ACD, r24	; 0x803acd <serTxAddr>
     95e:	90 93 ce 3a 	sts	0x3ACE, r25	; 0x803ace <serTxAddr+0x1>
     962:	8f ef       	ldi	r24, 0xFF	; 255
     964:	80 93 48 38 	sts	0x3848, r24	; 0x803848 <adc0Chg>
     968:	78 94       	sei
     96a:	08 95       	ret

0000096c <__vector_8>:
     96c:	1f 92       	push	r1
     96e:	0f 92       	push	r0
     970:	0f b6       	in	r0, 0x3f	; 63
     972:	0f 92       	push	r0
     974:	11 24       	eor	r1, r1
     976:	8f 93       	push	r24
     978:	9f 93       	push	r25
     97a:	af 93       	push	r26
     97c:	bf 93       	push	r27
     97e:	ef 93       	push	r30
     980:	ff 93       	push	r31
     982:	87 e0       	ldi	r24, 0x07	; 7
     984:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x700446>
     988:	84 e4       	ldi	r24, 0x44	; 68
     98a:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
     98e:	ec b3       	in	r30, 0x1c	; 28
     990:	88 e0       	ldi	r24, 0x08	; 8
     992:	e8 9f       	mul	r30, r24
     994:	f0 01       	movw	r30, r0
     996:	11 24       	eor	r1, r1
     998:	e8 52       	subi	r30, 0x28	; 40
     99a:	f5 4c       	sbci	r31, 0xC5	; 197
     99c:	a8 e2       	ldi	r26, 0x28	; 40
     99e:	ba e0       	ldi	r27, 0x0A	; 10
     9a0:	96 e0       	ldi	r25, 0x06	; 6
     9a2:	81 91       	ld	r24, Z+
     9a4:	8d 93       	st	X+, r24
     9a6:	9a 95       	dec	r25
     9a8:	e1 f7       	brne	.-8      	; 0x9a2 <__vector_8+0x36>
     9aa:	8b e0       	ldi	r24, 0x0B	; 11
     9ac:	80 93 05 0a 	sts	0x0A05, r24	; 0x800a05 <__TEXT_REGION_LENGTH__+0x700a05>
     9b0:	8c b3       	in	r24, 0x1c	; 28
     9b2:	83 30       	cpi	r24, 0x03	; 3
     9b4:	58 f4       	brcc	.+22     	; 0x9cc <__vector_8+0x60>
     9b6:	8c b3       	in	r24, 0x1c	; 28
     9b8:	91 e0       	ldi	r25, 0x01	; 1
     9ba:	01 c0       	rjmp	.+2      	; 0x9be <__vector_8+0x52>
     9bc:	99 0f       	add	r25, r25
     9be:	8a 95       	dec	r24
     9c0:	ea f7       	brpl	.-6      	; 0x9bc <__vector_8+0x50>
     9c2:	99 b9       	out	0x09, r25	; 9
     9c4:	8c b3       	in	r24, 0x1c	; 28
     9c6:	83 95       	inc	r24
     9c8:	8c bb       	out	0x1c, r24	; 28
     9ca:	0a c0       	rjmp	.+20     	; 0x9e0 <__vector_8+0x74>
     9cc:	8c b3       	in	r24, 0x1c	; 28
     9ce:	83 30       	cpi	r24, 0x03	; 3
     9d0:	21 f4       	brne	.+8      	; 0x9da <__vector_8+0x6e>
     9d2:	2a 9a       	sbi	0x05, 2	; 5
     9d4:	83 95       	inc	r24
     9d6:	8c bb       	out	0x1c, r24	; 28
     9d8:	03 c0       	rjmp	.+6      	; 0x9e0 <__vector_8+0x74>
     9da:	2e 9a       	sbi	0x05, 6	; 5
     9dc:	88 27       	eor	r24, r24
     9de:	8c bb       	out	0x1c, r24	; 28
     9e0:	8f ef       	ldi	r24, 0xFF	; 255
     9e2:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <__TEXT_REGION_LENGTH__+0x700a0b>
     9e6:	ff 91       	pop	r31
     9e8:	ef 91       	pop	r30
     9ea:	bf 91       	pop	r27
     9ec:	af 91       	pop	r26
     9ee:	9f 91       	pop	r25
     9f0:	8f 91       	pop	r24
     9f2:	0f 90       	pop	r0
     9f4:	0f be       	out	0x3f, r0	; 63
     9f6:	0f 90       	pop	r0
     9f8:	1f 90       	pop	r1
     9fa:	18 95       	reti

000009fc <__vector_13>:
     9fc:	1f 92       	push	r1
     9fe:	0f 92       	push	r0
     a00:	0f b6       	in	r0, 0x3f	; 63
     a02:	0f 92       	push	r0
     a04:	11 24       	eor	r1, r1
     a06:	8f 93       	push	r24
     a08:	9f 93       	push	r25
     a0a:	ef 93       	push	r30
     a0c:	ff 93       	push	r31
     a0e:	e0 91 cd 3a 	lds	r30, 0x3ACD	; 0x803acd <serTxAddr>
     a12:	f0 91 ce 3a 	lds	r31, 0x3ACE	; 0x803ace <serTxAddr+0x1>
     a16:	80 81       	ld	r24, Z
     a18:	88 23       	and	r24, r24
     a1a:	91 f0       	breq	.+36     	; 0xa40 <__vector_13+0x44>
     a1c:	80 81       	ld	r24, Z
     a1e:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
     a22:	80 91 cd 3a 	lds	r24, 0x3ACD	; 0x803acd <serTxAddr>
     a26:	90 91 ce 3a 	lds	r25, 0x3ACE	; 0x803ace <serTxAddr+0x1>
     a2a:	01 96       	adiw	r24, 0x01	; 1
     a2c:	80 93 cd 3a 	sts	0x3ACD, r24	; 0x803acd <serTxAddr>
     a30:	90 93 ce 3a 	sts	0x3ACE, r25	; 0x803ace <serTxAddr+0x1>
     a34:	80 91 05 08 	lds	r24, 0x0805	; 0x800805 <__TEXT_REGION_LENGTH__+0x700805>
     a38:	80 62       	ori	r24, 0x20	; 32
     a3a:	80 93 05 08 	sts	0x0805, r24	; 0x800805 <__TEXT_REGION_LENGTH__+0x700805>
     a3e:	05 c0       	rjmp	.+10     	; 0xa4a <__vector_13+0x4e>
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	80 93 09 38 	sts	0x3809, r24	; 0x803809 <serTxDone>
     a46:	10 92 45 0a 	sts	0x0A45, r1	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
     a4a:	81 e0       	ldi	r24, 0x01	; 1
     a4c:	80 93 46 0a 	sts	0x0A46, r24	; 0x800a46 <__TEXT_REGION_LENGTH__+0x700a46>
     a50:	ff 91       	pop	r31
     a52:	ef 91       	pop	r30
     a54:	9f 91       	pop	r25
     a56:	8f 91       	pop	r24
     a58:	0f 90       	pop	r0
     a5a:	0f be       	out	0x3f, r0	; 63
     a5c:	0f 90       	pop	r0
     a5e:	1f 90       	pop	r1
     a60:	18 95       	reti

00000a62 <__vector_14>:
     a62:	1f 92       	push	r1
     a64:	0f 92       	push	r0
     a66:	0f b6       	in	r0, 0x3f	; 63
     a68:	0f 92       	push	r0
     a6a:	11 24       	eor	r1, r1
     a6c:	2f 93       	push	r18
     a6e:	3f 93       	push	r19
     a70:	4f 93       	push	r20
     a72:	8f 93       	push	r24
     a74:	9f 93       	push	r25
     a76:	ef 93       	push	r30
     a78:	ff 93       	push	r31
     a7a:	e0 91 05 38 	lds	r30, 0x3805	; 0x803805 <auSmpAddr>
     a7e:	f0 91 06 38 	lds	r31, 0x3806	; 0x803806 <auSmpAddr+0x1>
     a82:	80 81       	ld	r24, Z
     a84:	81 11       	cpse	r24, r1
     a86:	08 c0       	rjmp	.+16     	; 0xa98 <__vector_14+0x36>
     a88:	80 91 03 38 	lds	r24, 0x3803	; 0x803803 <auRepAddr>
     a8c:	90 91 04 38 	lds	r25, 0x3804	; 0x803804 <auRepAddr+0x1>
     a90:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <auSmpAddr>
     a94:	90 93 06 38 	sts	0x3806, r25	; 0x803806 <auSmpAddr+0x1>
     a98:	e0 91 05 38 	lds	r30, 0x3805	; 0x803805 <auSmpAddr>
     a9c:	f0 91 06 38 	lds	r31, 0x3806	; 0x803806 <auSmpAddr+0x1>
     aa0:	80 81       	ld	r24, Z
     aa2:	88 23       	and	r24, r24
     aa4:	e1 f0       	breq	.+56     	; 0xade <__vector_14+0x7c>
     aa6:	20 81       	ld	r18, Z
     aa8:	40 91 ca 3a 	lds	r20, 0x3ACA	; 0x803aca <auVolume>
     aac:	30 e0       	ldi	r19, 0x00	; 0
     aae:	2f 57       	subi	r18, 0x7F	; 127
     ab0:	31 09       	sbc	r19, r1
     ab2:	42 9f       	mul	r20, r18
     ab4:	c0 01       	movw	r24, r0
     ab6:	43 9f       	mul	r20, r19
     ab8:	90 0d       	add	r25, r0
     aba:	11 24       	eor	r1, r1
     abc:	89 2f       	mov	r24, r25
     abe:	99 0f       	add	r25, r25
     ac0:	99 0b       	sbc	r25, r25
     ac2:	80 58       	subi	r24, 0x80	; 128
     ac4:	9f 4f       	sbci	r25, 0xFF	; 255
     ac6:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
     aca:	80 91 05 38 	lds	r24, 0x3805	; 0x803805 <auSmpAddr>
     ace:	90 91 06 38 	lds	r25, 0x3806	; 0x803806 <auSmpAddr+0x1>
     ad2:	01 96       	adiw	r24, 0x01	; 1
     ad4:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <auSmpAddr>
     ad8:	90 93 06 38 	sts	0x3806, r25	; 0x803806 <auSmpAddr+0x1>
     adc:	06 c0       	rjmp	.+12     	; 0xaea <__vector_14+0x88>
     ade:	8f ef       	ldi	r24, 0xFF	; 255
     ae0:	80 93 ca 3a 	sts	0x3ACA, r24	; 0x803aca <auVolume>
     ae4:	80 e8       	ldi	r24, 0x80	; 128
     ae6:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
     aea:	81 e0       	ldi	r24, 0x01	; 1
     aec:	80 93 56 0a 	sts	0x0A56, r24	; 0x800a56 <__TEXT_REGION_LENGTH__+0x700a56>
     af0:	ff 91       	pop	r31
     af2:	ef 91       	pop	r30
     af4:	9f 91       	pop	r25
     af6:	8f 91       	pop	r24
     af8:	4f 91       	pop	r20
     afa:	3f 91       	pop	r19
     afc:	2f 91       	pop	r18
     afe:	0f 90       	pop	r0
     b00:	0f be       	out	0x3f, r0	; 63
     b02:	0f 90       	pop	r0
     b04:	1f 90       	pop	r1
     b06:	18 95       	reti

00000b08 <__vector_25>:
     b08:	1f 92       	push	r1
     b0a:	0f 92       	push	r0
     b0c:	0f b6       	in	r0, 0x3f	; 63
     b0e:	0f 92       	push	r0
     b10:	11 24       	eor	r1, r1
     b12:	8f 93       	push	r24
     b14:	9f 93       	push	r25
     b16:	ef 93       	push	r30
     b18:	ff 93       	push	r31
     b1a:	80 91 d3 3a 	lds	r24, 0x3AD3	; 0x803ad3 <bytesLeftI2C>
     b1e:	88 23       	and	r24, r24
     b20:	29 f0       	breq	.+10     	; 0xb2c <__vector_25+0x24>
     b22:	80 91 d3 3a 	lds	r24, 0x3AD3	; 0x803ad3 <bytesLeftI2C>
     b26:	81 50       	subi	r24, 0x01	; 1
     b28:	80 93 d3 3a 	sts	0x3AD3, r24	; 0x803ad3 <bytesLeftI2C>
     b2c:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     b30:	87 ff       	sbrs	r24, 7
     b32:	18 c0       	rjmp	.+48     	; 0xb64 <__vector_25+0x5c>
     b34:	80 91 d3 3a 	lds	r24, 0x3AD3	; 0x803ad3 <bytesLeftI2C>
     b38:	88 23       	and	r24, r24
     b3a:	81 f0       	breq	.+32     	; 0xb5c <__vector_25+0x54>
     b3c:	e0 91 c8 3a 	lds	r30, 0x3AC8	; 0x803ac8 <addrDataI2C>
     b40:	f0 91 c9 3a 	lds	r31, 0x3AC9	; 0x803ac9 <addrDataI2C+0x1>
     b44:	cf 01       	movw	r24, r30
     b46:	01 96       	adiw	r24, 0x01	; 1
     b48:	80 93 c8 3a 	sts	0x3AC8, r24	; 0x803ac8 <addrDataI2C>
     b4c:	90 93 c9 3a 	sts	0x3AC9, r25	; 0x803ac9 <addrDataI2C+0x1>
     b50:	80 91 18 08 	lds	r24, 0x0818	; 0x800818 <__TEXT_REGION_LENGTH__+0x700818>
     b54:	80 83       	st	Z, r24
     b56:	10 92 14 08 	sts	0x0814, r1	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     b5a:	26 c0       	rjmp	.+76     	; 0xba8 <__vector_25+0xa0>
     b5c:	87 e0       	ldi	r24, 0x07	; 7
     b5e:	80 93 14 08 	sts	0x0814, r24	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     b62:	22 c0       	rjmp	.+68     	; 0xba8 <__vector_25+0xa0>
     b64:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     b68:	8c 70       	andi	r24, 0x0C	; 12
     b6a:	19 f0       	breq	.+6      	; 0xb72 <__vector_25+0x6a>
     b6c:	10 92 d3 3a 	sts	0x3AD3, r1	; 0x803ad3 <bytesLeftI2C>
     b70:	1b c0       	rjmp	.+54     	; 0xba8 <__vector_25+0xa0>
     b72:	80 91 d3 3a 	lds	r24, 0x3AD3	; 0x803ad3 <bytesLeftI2C>
     b76:	82 30       	cpi	r24, 0x02	; 2
     b78:	31 f4       	brne	.+12     	; 0xb86 <__vector_25+0x7e>
     b7a:	e0 91 c8 3a 	lds	r30, 0x3AC8	; 0x803ac8 <addrDataI2C>
     b7e:	f0 91 c9 3a 	lds	r31, 0x3AC9	; 0x803ac9 <addrDataI2C+0x1>
     b82:	80 81       	ld	r24, Z
     b84:	09 c0       	rjmp	.+18     	; 0xb98 <__vector_25+0x90>
     b86:	80 91 d3 3a 	lds	r24, 0x3AD3	; 0x803ad3 <bytesLeftI2C>
     b8a:	81 30       	cpi	r24, 0x01	; 1
     b8c:	41 f4       	brne	.+16     	; 0xb9e <__vector_25+0x96>
     b8e:	e0 91 c8 3a 	lds	r30, 0x3AC8	; 0x803ac8 <addrDataI2C>
     b92:	f0 91 c9 3a 	lds	r31, 0x3AC9	; 0x803ac9 <addrDataI2C+0x1>
     b96:	81 81       	ldd	r24, Z+1	; 0x01
     b98:	80 93 18 08 	sts	0x0818, r24	; 0x800818 <__TEXT_REGION_LENGTH__+0x700818>
     b9c:	05 c0       	rjmp	.+10     	; 0xba8 <__vector_25+0xa0>
     b9e:	80 91 17 08 	lds	r24, 0x0817	; 0x800817 <__TEXT_REGION_LENGTH__+0x700817>
     ba2:	81 60       	ori	r24, 0x01	; 1
     ba4:	80 93 17 08 	sts	0x0817, r24	; 0x800817 <__TEXT_REGION_LENGTH__+0x700817>
     ba8:	ff 91       	pop	r31
     baa:	ef 91       	pop	r30
     bac:	9f 91       	pop	r25
     bae:	8f 91       	pop	r24
     bb0:	0f 90       	pop	r0
     bb2:	0f be       	out	0x3f, r0	; 63
     bb4:	0f 90       	pop	r0
     bb6:	1f 90       	pop	r1
     bb8:	18 95       	reti

00000bba <__vector_27>:
     bba:	1f 92       	push	r1
     bbc:	0f 92       	push	r0
     bbe:	0f b6       	in	r0, 0x3f	; 63
     bc0:	0f 92       	push	r0
     bc2:	11 24       	eor	r1, r1
     bc4:	8f 93       	push	r24
     bc6:	ef 93       	push	r30
     bc8:	ff 93       	push	r31
     bca:	80 91 55 38 	lds	r24, 0x3855	; 0x803855 <serRxDone>
     bce:	81 11       	cpse	r24, r1
     bd0:	44 c0       	rjmp	.+136    	; 0xc5a <__vector_27+0xa0>
     bd2:	ed b3       	in	r30, 0x1d	; 29
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
     bda:	e9 57       	subi	r30, 0x79	; 121
     bdc:	f5 4c       	sbci	r31, 0xC5	; 197
     bde:	80 83       	st	Z, r24
     be0:	ed b3       	in	r30, 0x1d	; 29
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	e9 57       	subi	r30, 0x79	; 121
     be6:	f5 4c       	sbci	r31, 0xC5	; 197
     be8:	80 81       	ld	r24, Z
     bea:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
     bee:	ed b3       	in	r30, 0x1d	; 29
     bf0:	f0 e0       	ldi	r31, 0x00	; 0
     bf2:	e9 57       	subi	r30, 0x79	; 121
     bf4:	f5 4c       	sbci	r31, 0xC5	; 197
     bf6:	80 81       	ld	r24, Z
     bf8:	8a 30       	cpi	r24, 0x0A	; 10
     bfa:	39 f0       	breq	.+14     	; 0xc0a <__vector_27+0x50>
     bfc:	ed b3       	in	r30, 0x1d	; 29
     bfe:	f0 e0       	ldi	r31, 0x00	; 0
     c00:	e9 57       	subi	r30, 0x79	; 121
     c02:	f5 4c       	sbci	r31, 0xC5	; 197
     c04:	80 81       	ld	r24, Z
     c06:	8d 30       	cpi	r24, 0x0D	; 13
     c08:	49 f4       	brne	.+18     	; 0xc1c <__vector_27+0x62>
     c0a:	ed b3       	in	r30, 0x1d	; 29
     c0c:	f0 e0       	ldi	r31, 0x00	; 0
     c0e:	e9 57       	subi	r30, 0x79	; 121
     c10:	f5 4c       	sbci	r31, 0xC5	; 197
     c12:	10 82       	st	Z, r1
     c14:	81 e0       	ldi	r24, 0x01	; 1
     c16:	80 93 55 38 	sts	0x3855, r24	; 0x803855 <serRxDone>
     c1a:	1f c0       	rjmp	.+62     	; 0xc5a <__vector_27+0xa0>
     c1c:	ed b3       	in	r30, 0x1d	; 29
     c1e:	f0 e0       	ldi	r31, 0x00	; 0
     c20:	e9 57       	subi	r30, 0x79	; 121
     c22:	f5 4c       	sbci	r31, 0xC5	; 197
     c24:	80 81       	ld	r24, Z
     c26:	88 30       	cpi	r24, 0x08	; 8
     c28:	39 f0       	breq	.+14     	; 0xc38 <__vector_27+0x7e>
     c2a:	ed b3       	in	r30, 0x1d	; 29
     c2c:	f0 e0       	ldi	r31, 0x00	; 0
     c2e:	e9 57       	subi	r30, 0x79	; 121
     c30:	f5 4c       	sbci	r31, 0xC5	; 197
     c32:	80 81       	ld	r24, Z
     c34:	8f 37       	cpi	r24, 0x7F	; 127
     c36:	59 f4       	brne	.+22     	; 0xc4e <__vector_27+0x94>
     c38:	8d b3       	in	r24, 0x1d	; 29
     c3a:	88 23       	and	r24, r24
     c3c:	41 f0       	breq	.+16     	; 0xc4e <__vector_27+0x94>
     c3e:	ed b3       	in	r30, 0x1d	; 29
     c40:	f0 e0       	ldi	r31, 0x00	; 0
     c42:	e9 57       	subi	r30, 0x79	; 121
     c44:	f5 4c       	sbci	r31, 0xC5	; 197
     c46:	10 82       	st	Z, r1
     c48:	8d b3       	in	r24, 0x1d	; 29
     c4a:	81 50       	subi	r24, 0x01	; 1
     c4c:	05 c0       	rjmp	.+10     	; 0xc58 <__vector_27+0x9e>
     c4e:	8d b3       	in	r24, 0x1d	; 29
     c50:	80 34       	cpi	r24, 0x40	; 64
     c52:	18 f4       	brcc	.+6      	; 0xc5a <__vector_27+0xa0>
     c54:	8d b3       	in	r24, 0x1d	; 29
     c56:	8f 5f       	subi	r24, 0xFF	; 255
     c58:	8d bb       	out	0x1d, r24	; 29
     c5a:	80 e8       	ldi	r24, 0x80	; 128
     c5c:	80 93 04 08 	sts	0x0804, r24	; 0x800804 <__TEXT_REGION_LENGTH__+0x700804>
     c60:	ff 91       	pop	r31
     c62:	ef 91       	pop	r30
     c64:	8f 91       	pop	r24
     c66:	0f 90       	pop	r0
     c68:	0f be       	out	0x3f, r0	; 63
     c6a:	0f 90       	pop	r0
     c6c:	1f 90       	pop	r1
     c6e:	18 95       	reti

00000c70 <__vector_28>:
     c70:	1f 92       	push	r1
     c72:	0f 92       	push	r0
     c74:	0f b6       	in	r0, 0x3f	; 63
     c76:	0f 92       	push	r0
     c78:	11 24       	eor	r1, r1
     c7a:	8f 93       	push	r24
     c7c:	ef 93       	push	r30
     c7e:	ff 93       	push	r31
     c80:	10 92 4a 0a 	sts	0x0A4A, r1	; 0x800a4a <__TEXT_REGION_LENGTH__+0x700a4a>
     c84:	10 92 4b 0a 	sts	0x0A4B, r1	; 0x800a4b <__TEXT_REGION_LENGTH__+0x700a4b>
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	80 93 45 0a 	sts	0x0A45, r24	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
     c8e:	e5 e0       	ldi	r30, 0x05	; 5
     c90:	f8 e0       	ldi	r31, 0x08	; 8
     c92:	80 81       	ld	r24, Z
     c94:	8f 7d       	andi	r24, 0xDF	; 223
     c96:	80 83       	st	Z, r24
     c98:	ff 91       	pop	r31
     c9a:	ef 91       	pop	r30
     c9c:	8f 91       	pop	r24
     c9e:	0f 90       	pop	r0
     ca0:	0f be       	out	0x3f, r0	; 63
     ca2:	0f 90       	pop	r0
     ca4:	1f 90       	pop	r1
     ca6:	18 95       	reti

00000ca8 <__vector_20>:
     ca8:	1f 92       	push	r1
     caa:	0f 92       	push	r0
     cac:	0f b6       	in	r0, 0x3f	; 63
     cae:	0f 92       	push	r0
     cb0:	11 24       	eor	r1, r1
     cb2:	8f 93       	push	r24
     cb4:	9f 93       	push	r25
     cb6:	80 91 48 38 	lds	r24, 0x3848	; 0x803848 <adc0Chg>
     cba:	81 11       	cpse	r24, r1
     cbc:	12 c0       	rjmp	.+36     	; 0xce2 <__vector_20+0x3a>
     cbe:	80 91 06 06 	lds	r24, 0x0606	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
     cc2:	8e 31       	cpi	r24, 0x1E	; 30
     cc4:	49 f4       	brne	.+18     	; 0xcd8 <__vector_20+0x30>
     cc6:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x700610>
     cca:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x700611>
     cce:	80 93 02 3b 	sts	0x3B02, r24	; 0x803b02 <adcTemp>
     cd2:	90 93 03 3b 	sts	0x3B03, r25	; 0x803b03 <adcTemp+0x1>
     cd6:	0a c0       	rjmp	.+20     	; 0xcec <__vector_20+0x44>
     cd8:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x700610>
     cdc:	80 93 d7 3a 	sts	0x3AD7, r24	; 0x803ad7 <auIn>
     ce0:	05 c0       	rjmp	.+10     	; 0xcec <__vector_20+0x44>
     ce2:	80 91 48 38 	lds	r24, 0x3848	; 0x803848 <adc0Chg>
     ce6:	81 50       	subi	r24, 0x01	; 1
     ce8:	80 93 48 38 	sts	0x3848, r24	; 0x803848 <adc0Chg>
     cec:	81 e0       	ldi	r24, 0x01	; 1
     cee:	80 93 0b 06 	sts	0x060B, r24	; 0x80060b <__TEXT_REGION_LENGTH__+0x70060b>
     cf2:	9f 91       	pop	r25
     cf4:	8f 91       	pop	r24
     cf6:	0f 90       	pop	r0
     cf8:	0f be       	out	0x3f, r0	; 63
     cfa:	0f 90       	pop	r0
     cfc:	1f 90       	pop	r1
     cfe:	18 95       	reti

00000d00 <__vector_22>:
     d00:	1f 92       	push	r1
     d02:	0f 92       	push	r0
     d04:	0f b6       	in	r0, 0x3f	; 63
     d06:	0f 92       	push	r0
     d08:	11 24       	eor	r1, r1
     d0a:	8f 93       	push	r24
     d0c:	9f 93       	push	r25
     d0e:	80 91 46 06 	lds	r24, 0x0646	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     d12:	81 11       	cpse	r24, r1
     d14:	0a c0       	rjmp	.+20     	; 0xd2a <__vector_22+0x2a>
     d16:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <__TEXT_REGION_LENGTH__+0x700650>
     d1a:	90 91 51 06 	lds	r25, 0x0651	; 0x800651 <__TEXT_REGION_LENGTH__+0x700651>
     d1e:	80 93 d1 3a 	sts	0x3AD1, r24	; 0x803ad1 <adcPhot>
     d22:	90 93 d2 3a 	sts	0x3AD2, r25	; 0x803ad2 <adcPhot+0x1>
     d26:	81 e0       	ldi	r24, 0x01	; 1
     d28:	10 c0       	rjmp	.+32     	; 0xd4a <__vector_22+0x4a>
     d2a:	80 91 46 06 	lds	r24, 0x0646	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     d2e:	81 30       	cpi	r24, 0x01	; 1
     d30:	79 f4       	brne	.+30     	; 0xd50 <__vector_22+0x50>
     d32:	88 e0       	ldi	r24, 0x08	; 8
     d34:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x700406>
     d38:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <__TEXT_REGION_LENGTH__+0x700650>
     d3c:	90 91 51 06 	lds	r25, 0x0651	; 0x800651 <__TEXT_REGION_LENGTH__+0x700651>
     d40:	80 93 cf 3a 	sts	0x3ACF, r24	; 0x803acf <adcHall>
     d44:	90 93 d0 3a 	sts	0x3AD0, r25	; 0x803ad0 <adcHall+0x1>
     d48:	84 e0       	ldi	r24, 0x04	; 4
     d4a:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     d4e:	10 c0       	rjmp	.+32     	; 0xd70 <__vector_22+0x70>
     d50:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <__TEXT_REGION_LENGTH__+0x700650>
     d54:	90 91 51 06 	lds	r25, 0x0651	; 0x800651 <__TEXT_REGION_LENGTH__+0x700651>
     d58:	80 93 cb 3a 	sts	0x3ACB, r24	; 0x803acb <adcBtns>
     d5c:	90 93 cc 3a 	sts	0x3ACC, r25	; 0x803acc <adcBtns+0x1>
     d60:	8f b3       	in	r24, 0x1f	; 31
     d62:	8f 30       	cpi	r24, 0x0F	; 15
     d64:	29 f4       	brne	.+10     	; 0xd70 <__vector_22+0x70>
     d66:	10 92 46 06 	sts	0x0646, r1	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     d6a:	88 e0       	ldi	r24, 0x08	; 8
     d6c:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
     d70:	8f b3       	in	r24, 0x1f	; 31
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	01 96       	adiw	r24, 0x01	; 1
     d76:	8f 70       	andi	r24, 0x0F	; 15
     d78:	99 27       	eor	r25, r25
     d7a:	8f bb       	out	0x1f, r24	; 31
     d7c:	81 e0       	ldi	r24, 0x01	; 1
     d7e:	80 93 4b 06 	sts	0x064B, r24	; 0x80064b <__TEXT_REGION_LENGTH__+0x70064b>
     d82:	9f 91       	pop	r25
     d84:	8f 91       	pop	r24
     d86:	0f 90       	pop	r0
     d88:	0f be       	out	0x3f, r0	; 63
     d8a:	0f 90       	pop	r0
     d8c:	1f 90       	pop	r1
     d8e:	18 95       	reti

00000d90 <__vector_6>:
     d90:	1f 92       	push	r1
     d92:	0f 92       	push	r0
     d94:	0f b6       	in	r0, 0x3f	; 63
     d96:	0f 92       	push	r0
     d98:	11 24       	eor	r1, r1
     d9a:	2f 93       	push	r18
     d9c:	3f 93       	push	r19
     d9e:	8f 93       	push	r24
     da0:	9f 93       	push	r25
     da2:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     da6:	81 ff       	sbrs	r24, 1
     da8:	36 c0       	rjmp	.+108    	; 0xe16 <__vector_6+0x86>
     daa:	80 91 52 38 	lds	r24, 0x3852	; 0x803852 <buttonMark>
     dae:	8f 3f       	cpi	r24, 0xFF	; 255
     db0:	29 f0       	breq	.+10     	; 0xdbc <__vector_6+0x2c>
     db2:	80 91 52 38 	lds	r24, 0x3852	; 0x803852 <buttonMark>
     db6:	8f 5f       	subi	r24, 0xFF	; 255
     db8:	80 93 52 38 	sts	0x3852, r24	; 0x803852 <buttonMark>
     dbc:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     dc0:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     dc4:	82 96       	adiw	r24, 0x22	; 34
     dc6:	80 93 04 3b 	sts	0x3B04, r24	; 0x803b04 <tmp16bit>
     dca:	90 93 05 3b 	sts	0x3B05, r25	; 0x803b05 <tmp16bit+0x1>
     dce:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     dd2:	30 91 4b 01 	lds	r19, 0x014B	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
     dd6:	80 91 04 3b 	lds	r24, 0x3B04	; 0x803b04 <tmp16bit>
     dda:	90 91 05 3b 	lds	r25, 0x3B05	; 0x803b05 <tmp16bit+0x1>
     dde:	28 17       	cp	r18, r24
     de0:	39 07       	cpc	r19, r25
     de2:	58 f4       	brcc	.+22     	; 0xdfa <__vector_6+0x6a>
     de4:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     de8:	30 91 4b 01 	lds	r19, 0x014B	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
     dec:	80 91 04 3b 	lds	r24, 0x3B04	; 0x803b04 <tmp16bit>
     df0:	90 91 05 3b 	lds	r25, 0x3B05	; 0x803b05 <tmp16bit+0x1>
     df4:	82 1b       	sub	r24, r18
     df6:	93 0b       	sbc	r25, r19
     df8:	e6 cf       	rjmp	.-52     	; 0xdc6 <__vector_6+0x36>
     dfa:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     dfe:	83 fd       	sbrc	r24, 3
     e00:	fc cf       	rjmp	.-8      	; 0xdfa <__vector_6+0x6a>
     e02:	80 91 04 3b 	lds	r24, 0x3B04	; 0x803b04 <tmp16bit>
     e06:	90 91 05 3b 	lds	r25, 0x3B05	; 0x803b05 <tmp16bit+0x1>
     e0a:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     e0e:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     e12:	82 e0       	ldi	r24, 0x02	; 2
     e14:	06 c0       	rjmp	.+12     	; 0xe22 <__vector_6+0x92>
     e16:	80 91 53 38 	lds	r24, 0x3853	; 0x803853 <minuteMark>
     e1a:	8f 5f       	subi	r24, 0xFF	; 255
     e1c:	80 93 53 38 	sts	0x3853, r24	; 0x803853 <minuteMark>
     e20:	81 e0       	ldi	r24, 0x01	; 1
     e22:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     e26:	9f 91       	pop	r25
     e28:	8f 91       	pop	r24
     e2a:	3f 91       	pop	r19
     e2c:	2f 91       	pop	r18
     e2e:	0f 90       	pop	r0
     e30:	0f be       	out	0x3f, r0	; 63
     e32:	0f 90       	pop	r0
     e34:	1f 90       	pop	r1
     e36:	18 95       	reti

00000e38 <__vector_7>:
     e38:	1f 92       	push	r1
     e3a:	0f 92       	push	r0
     e3c:	0f b6       	in	r0, 0x3f	; 63
     e3e:	0f 92       	push	r0
     e40:	11 24       	eor	r1, r1
     e42:	8f 93       	push	r24
     e44:	9f 93       	push	r25
     e46:	91 e0       	ldi	r25, 0x01	; 1
     e48:	90 93 48 06 	sts	0x0648, r25	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
     e4c:	80 91 54 38 	lds	r24, 0x3854	; 0x803854 <fastTicker>
     e50:	8f 5f       	subi	r24, 0xFF	; 255
     e52:	80 93 54 38 	sts	0x3854, r24	; 0x803854 <fastTicker>
     e56:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <__TEXT_REGION_LENGTH__+0x700153>
     e5a:	9f 91       	pop	r25
     e5c:	8f 91       	pop	r24
     e5e:	0f 90       	pop	r0
     e60:	0f be       	out	0x3f, r0	; 63
     e62:	0f 90       	pop	r0
     e64:	1f 90       	pop	r1
     e66:	18 95       	reti

00000e68 <I2C_read_bytes>:
     e68:	0f 93       	push	r16
     e6a:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     e6e:	83 70       	andi	r24, 0x03	; 3
     e70:	d1 f0       	breq	.+52     	; 0xea6 <I2C_read_bytes+0x3e>
     e72:	60 93 c8 3a 	sts	0x3AC8, r22	; 0x803ac8 <addrDataI2C>
     e76:	70 93 c9 3a 	sts	0x3AC9, r23	; 0x803ac9 <addrDataI2C+0x1>
     e7a:	80 ea       	ldi	r24, 0xA0	; 160
     e7c:	80 93 17 08 	sts	0x0817, r24	; 0x800817 <__TEXT_REGION_LENGTH__+0x700817>
     e80:	4f 5f       	subi	r20, 0xFF	; 255
     e82:	40 93 d3 3a 	sts	0x3AD3, r20	; 0x803ad3 <bytesLeftI2C>
     e86:	80 91 d3 3a 	lds	r24, 0x3AD3	; 0x803ad3 <bytesLeftI2C>
     e8a:	81 11       	cpse	r24, r1
     e8c:	fc cf       	rjmp	.-8      	; 0xe86 <I2C_read_bytes+0x1e>
     e8e:	20 93 c8 3a 	sts	0x3AC8, r18	; 0x803ac8 <addrDataI2C>
     e92:	30 93 c9 3a 	sts	0x3AC9, r19	; 0x803ac9 <addrDataI2C+0x1>
     e96:	0f 5f       	subi	r16, 0xFF	; 255
     e98:	00 93 d3 3a 	sts	0x3AD3, r16	; 0x803ad3 <bytesLeftI2C>
     e9c:	80 91 d3 3a 	lds	r24, 0x3AD3	; 0x803ad3 <bytesLeftI2C>
     ea0:	81 11       	cpse	r24, r1
     ea2:	fc cf       	rjmp	.-8      	; 0xe9c <I2C_read_bytes+0x34>
     ea4:	01 c0       	rjmp	.+2      	; 0xea8 <I2C_read_bytes+0x40>
     ea6:	81 e0       	ldi	r24, 0x01	; 1
     ea8:	0f 91       	pop	r16
     eaa:	08 95       	ret

00000eac <EERead>:
     eac:	90 91 02 10 	lds	r25, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x701002>
     eb0:	91 fd       	sbrc	r25, 1
     eb2:	fc cf       	rjmp	.-8      	; 0xeac <EERead>
     eb4:	fb 01       	movw	r30, r22
     eb6:	48 0f       	add	r20, r24
     eb8:	84 17       	cp	r24, r20
     eba:	39 f0       	breq	.+14     	; 0xeca <EERead+0x1e>
     ebc:	a8 2f       	mov	r26, r24
     ebe:	b0 e0       	ldi	r27, 0x00	; 0
     ec0:	bc 5e       	subi	r27, 0xEC	; 236
     ec2:	9c 91       	ld	r25, X
     ec4:	91 93       	st	Z+, r25
     ec6:	8f 5f       	subi	r24, 0xFF	; 255
     ec8:	f7 cf       	rjmp	.-18     	; 0xeb8 <EERead+0xc>
     eca:	08 95       	ret

00000ecc <EEWrite>:
     ecc:	9d e9       	ldi	r25, 0x9D	; 157
     ece:	24 e0       	ldi	r18, 0x04	; 4
     ed0:	33 e0       	ldi	r19, 0x03	; 3
     ed2:	44 23       	and	r20, r20
     ed4:	09 f1       	breq	.+66     	; 0xf18 <EEWrite+0x4c>
     ed6:	50 91 02 10 	lds	r21, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x701002>
     eda:	51 fd       	sbrc	r21, 1
     edc:	fc cf       	rjmp	.-8      	; 0xed6 <EEWrite+0xa>
     ede:	94 bf       	out	0x34, r25	; 52
     ee0:	20 93 00 10 	sts	0x1000, r18	; 0x801000 <__TEXT_REGION_LENGTH__+0x701000>
     ee4:	e8 2f       	mov	r30, r24
     ee6:	58 2f       	mov	r21, r24
     ee8:	5f 71       	andi	r21, 0x1F	; 31
     eea:	8f 5f       	subi	r24, 0xFF	; 255
     eec:	6f 5f       	subi	r22, 0xFF	; 255
     eee:	7f 4f       	sbci	r23, 0xFF	; 255
     ef0:	db 01       	movw	r26, r22
     ef2:	11 97       	sbiw	r26, 0x01	; 1
     ef4:	ac 91       	ld	r26, X
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	fc 5e       	subi	r31, 0xEC	; 236
     efa:	a0 83       	st	Z, r26
     efc:	41 50       	subi	r20, 0x01	; 1
     efe:	19 f0       	breq	.+6      	; 0xf06 <EEWrite+0x3a>
     f00:	e8 2f       	mov	r30, r24
     f02:	5f 31       	cpi	r21, 0x1F	; 31
     f04:	81 f7       	brne	.-32     	; 0xee6 <EEWrite+0x1a>
     f06:	94 bf       	out	0x34, r25	; 52
     f08:	30 93 00 10 	sts	0x1000, r19	; 0x801000 <__TEXT_REGION_LENGTH__+0x701000>
     f0c:	50 91 02 10 	lds	r21, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x701002>
     f10:	52 ff       	sbrs	r21, 2
     f12:	df cf       	rjmp	.-66     	; 0xed2 <EEWrite+0x6>
     f14:	81 e0       	ldi	r24, 0x01	; 1
     f16:	08 95       	ret
     f18:	80 e0       	ldi	r24, 0x00	; 0
     f1a:	08 95       	ret

00000f1c <DecryptData>:
     f1c:	f9 01       	movw	r30, r18
     f1e:	9c 01       	movw	r18, r24
     f20:	2e 1b       	sub	r18, r30
     f22:	3f 0b       	sbc	r19, r31
     f24:	88 e0       	ldi	r24, 0x08	; 8
     f26:	48 9f       	mul	r20, r24
     f28:	a0 01       	movw	r20, r0
     f2a:	11 24       	eor	r1, r1
     f2c:	4c 5a       	subi	r20, 0xAC	; 172
     f2e:	50 44       	sbci	r21, 0x40	; 64
     f30:	66 23       	and	r22, r22
     f32:	69 f0       	breq	.+26     	; 0xf4e <DecryptData+0x32>
     f34:	df 01       	movw	r26, r30
     f36:	a2 0f       	add	r26, r18
     f38:	b3 1f       	adc	r27, r19
     f3a:	a7 70       	andi	r26, 0x07	; 7
     f3c:	bb 27       	eor	r27, r27
     f3e:	a4 0f       	add	r26, r20
     f40:	b5 1f       	adc	r27, r21
     f42:	80 81       	ld	r24, Z
     f44:	9c 91       	ld	r25, X
     f46:	98 27       	eor	r25, r24
     f48:	91 93       	st	Z+, r25
     f4a:	61 50       	subi	r22, 0x01	; 1
     f4c:	f1 cf       	rjmp	.-30     	; 0xf30 <DecryptData+0x14>
     f4e:	08 95       	ret

00000f50 <ExtEERead>:
     f50:	a2 e0       	ldi	r26, 0x02	; 2
     f52:	b0 e0       	ldi	r27, 0x00	; 0
     f54:	ee ea       	ldi	r30, 0xAE	; 174
     f56:	f7 e0       	ldi	r31, 0x07	; 7
     f58:	0c 94 62 1f 	jmp	0x3ec4	; 0x3ec4 <__prologue_saves__+0x10>
     f5c:	d6 2e       	mov	r13, r22
     f5e:	c4 2e       	mov	r12, r20
     f60:	59 01       	movw	r10, r18
     f62:	7c 01       	movw	r14, r24
     f64:	e8 94       	clt
     f66:	f7 f8       	bld	r15, 7
     f68:	f9 82       	std	Y+1, r15	; 0x01
     f6a:	ea 82       	std	Y+2, r14	; 0x02
     f6c:	06 2f       	mov	r16, r22
     f6e:	42 e0       	ldi	r20, 0x02	; 2
     f70:	be 01       	movw	r22, r28
     f72:	6f 5f       	subi	r22, 0xFF	; 255
     f74:	7f 4f       	sbci	r23, 0xFF	; 255
     f76:	80 e5       	ldi	r24, 0x50	; 80
     f78:	77 df       	rcall	.-274    	; 0xe68 <I2C_read_bytes>
     f7a:	18 2f       	mov	r17, r24
     f7c:	81 11       	cpse	r24, r1
     f7e:	05 c0       	rjmp	.+10     	; 0xf8a <ExtEERead+0x3a>
     f80:	95 01       	movw	r18, r10
     f82:	4c 2d       	mov	r20, r12
     f84:	6d 2d       	mov	r22, r13
     f86:	c7 01       	movw	r24, r14
     f88:	c9 df       	rcall	.-110    	; 0xf1c <DecryptData>
     f8a:	81 2f       	mov	r24, r17
     f8c:	22 96       	adiw	r28, 0x02	; 2
     f8e:	ea e0       	ldi	r30, 0x0A	; 10
     f90:	0c 94 7b 1f 	jmp	0x3ef6	; 0x3ef6 <__epilogue_restores__+0x10>

00000f94 <SerSend>:
     f94:	20 91 09 38 	lds	r18, 0x3809	; 0x803809 <serTxDone>
     f98:	22 23       	and	r18, r18
     f9a:	59 f0       	breq	.+22     	; 0xfb2 <SerSend+0x1e>
     f9c:	80 93 cd 3a 	sts	0x3ACD, r24	; 0x803acd <serTxAddr>
     fa0:	90 93 ce 3a 	sts	0x3ACE, r25	; 0x803ace <serTxAddr+0x1>
     fa4:	10 92 09 38 	sts	0x3809, r1	; 0x803809 <serTxDone>
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	80 93 45 0a 	sts	0x0A45, r24	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
     fae:	80 e0       	ldi	r24, 0x00	; 0
     fb0:	08 95       	ret
     fb2:	81 e0       	ldi	r24, 0x01	; 1
     fb4:	08 95       	ret

00000fb6 <SerSpeed>:
     fb6:	28 2f       	mov	r18, r24
     fb8:	81 11       	cpse	r24, r1
     fba:	01 c0       	rjmp	.+2      	; 0xfbe <SerSpeed+0x8>
     fbc:	21 e0       	ldi	r18, 0x01	; 1
     fbe:	8f ef       	ldi	r24, 0xFF	; 255
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	82 1b       	sub	r24, r18
     fc4:	91 09       	sbc	r25, r1
     fc6:	98 2f       	mov	r25, r24
     fc8:	88 27       	eor	r24, r24
     fca:	81 50       	subi	r24, 0x01	; 1
     fcc:	9f 4f       	sbci	r25, 0xFF	; 255
     fce:	80 93 4c 0a 	sts	0x0A4C, r24	; 0x800a4c <__TEXT_REGION_LENGTH__+0x700a4c>
     fd2:	90 93 4d 0a 	sts	0x0A4D, r25	; 0x800a4d <__TEXT_REGION_LENGTH__+0x700a4d>
     fd6:	08 95       	ret

00000fd8 <SelectTSens>:
     fd8:	8f ef       	ldi	r24, 0xFF	; 255
     fda:	80 93 48 38 	sts	0x3848, r24	; 0x803848 <adc0Chg>
     fde:	82 e1       	ldi	r24, 0x12	; 18
     fe0:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     fe4:	e0 e0       	ldi	r30, 0x00	; 0
     fe6:	f6 e0       	ldi	r31, 0x06	; 6
     fe8:	80 81       	ld	r24, Z
     fea:	8b 7f       	andi	r24, 0xFB	; 251
     fec:	80 83       	st	Z, r24
     fee:	8e e1       	ldi	r24, 0x1E	; 30
     ff0:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
     ff4:	08 95       	ret

00000ff6 <SelectAuIn>:
     ff6:	8f ef       	ldi	r24, 0xFF	; 255
     ff8:	80 93 48 38 	sts	0x3848, r24	; 0x803848 <adc0Chg>
     ffc:	82 e2       	ldi	r24, 0x22	; 34
     ffe:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    1002:	e0 e0       	ldi	r30, 0x00	; 0
    1004:	f6 e0       	ldi	r31, 0x06	; 6
    1006:	80 81       	ld	r24, Z
    1008:	84 60       	ori	r24, 0x04	; 4
    100a:	80 83       	st	Z, r24
    100c:	87 e0       	ldi	r24, 0x07	; 7
    100e:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
    1012:	08 95       	ret

00001014 <CheckButtons>:
    1014:	80 91 cb 3a 	lds	r24, 0x3ACB	; 0x803acb <adcBtns>
    1018:	90 91 cc 3a 	lds	r25, 0x3ACC	; 0x803acc <adcBtns+0x1>
    101c:	24 e0       	ldi	r18, 0x04	; 4
    101e:	96 95       	lsr	r25
    1020:	87 95       	ror	r24
    1022:	2a 95       	dec	r18
    1024:	e1 f7       	brne	.-8      	; 0x101e <CheckButtons+0xa>
    1026:	99 27       	eor	r25, r25
    1028:	80 36       	cpi	r24, 0x60	; 96
    102a:	91 05       	cpc	r25, r1
    102c:	40 f4       	brcc	.+16     	; 0x103e <CheckButtons+0x2a>
    102e:	8f 34       	cpi	r24, 0x4F	; 79
    1030:	91 05       	cpc	r25, r1
    1032:	88 f4       	brcc	.+34     	; 0x1056 <CheckButtons+0x42>
    1034:	c0 97       	sbiw	r24, 0x30	; 48
    1036:	09 97       	sbiw	r24, 0x09	; 9
    1038:	90 f4       	brcc	.+36     	; 0x105e <CheckButtons+0x4a>
    103a:	92 e0       	ldi	r25, 0x02	; 2
    103c:	11 c0       	rjmp	.+34     	; 0x1060 <CheckButtons+0x4c>
    103e:	85 37       	cpi	r24, 0x75	; 117
    1040:	91 05       	cpc	r25, r1
    1042:	68 f0       	brcs	.+26     	; 0x105e <CheckButtons+0x4a>
    1044:	8e 38       	cpi	r24, 0x8E	; 142
    1046:	91 05       	cpc	r25, r1
    1048:	40 f0       	brcs	.+16     	; 0x105a <CheckButtons+0x46>
    104a:	8e 59       	subi	r24, 0x9E	; 158
    104c:	91 09       	sbc	r25, r1
    104e:	81 97       	sbiw	r24, 0x21	; 33
    1050:	30 f4       	brcc	.+12     	; 0x105e <CheckButtons+0x4a>
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	05 c0       	rjmp	.+10     	; 0x1060 <CheckButtons+0x4c>
    1056:	93 e0       	ldi	r25, 0x03	; 3
    1058:	03 c0       	rjmp	.+6      	; 0x1060 <CheckButtons+0x4c>
    105a:	91 e0       	ldi	r25, 0x01	; 1
    105c:	01 c0       	rjmp	.+2      	; 0x1060 <CheckButtons+0x4c>
    105e:	9f ef       	ldi	r25, 0xFF	; 255
    1060:	80 91 34 38 	lds	r24, 0x3834	; 0x803834 <previousValue.3902>
    1064:	98 17       	cp	r25, r24
    1066:	19 f0       	breq	.+6      	; 0x106e <CheckButtons+0x5a>
    1068:	90 93 34 38 	sts	0x3834, r25	; 0x803834 <previousValue.3902>
    106c:	8f ef       	ldi	r24, 0xFF	; 255
    106e:	08 95       	ret

00001070 <lfsr>:
    1070:	80 91 6c 38 	lds	r24, 0x386C	; 0x80386c <lfsrSeed>
    1074:	90 91 6d 38 	lds	r25, 0x386D	; 0x80386d <lfsrSeed+0x1>
    1078:	9c 01       	movw	r18, r24
    107a:	32 2f       	mov	r19, r18
    107c:	22 27       	eor	r18, r18
    107e:	32 95       	swap	r19
    1080:	33 0f       	add	r19, r19
    1082:	30 7e       	andi	r19, 0xE0	; 224
    1084:	82 27       	eor	r24, r18
    1086:	93 27       	eor	r25, r19
    1088:	9c 01       	movw	r18, r24
    108a:	23 2f       	mov	r18, r19
    108c:	33 27       	eor	r19, r19
    108e:	26 95       	lsr	r18
    1090:	82 27       	eor	r24, r18
    1092:	93 27       	eor	r25, r19
    1094:	9c 01       	movw	r18, r24
    1096:	36 95       	lsr	r19
    1098:	32 2f       	mov	r19, r18
    109a:	22 27       	eor	r18, r18
    109c:	37 95       	ror	r19
    109e:	27 95       	ror	r18
    10a0:	82 27       	eor	r24, r18
    10a2:	93 27       	eor	r25, r19
    10a4:	80 93 6c 38 	sts	0x386C, r24	; 0x80386c <lfsrSeed>
    10a8:	90 93 6d 38 	sts	0x386D, r25	; 0x80386d <lfsrSeed+0x1>
    10ac:	08 95       	ret

000010ae <floatSpeed>:
    10ae:	a0 e0       	ldi	r26, 0x00	; 0
    10b0:	b0 e0       	ldi	r27, 0x00	; 0
    10b2:	ed e5       	ldi	r30, 0x5D	; 93
    10b4:	f8 e0       	ldi	r31, 0x08	; 8
    10b6:	0c 94 65 1f 	jmp	0x3eca	; 0x3eca <__prologue_saves__+0x16>
    10ba:	7b 01       	movw	r14, r22
    10bc:	8a 01       	movw	r16, r20
    10be:	c0 91 5c 0a 	lds	r28, 0x0A5C	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    10c2:	d0 91 5d 0a 	lds	r29, 0x0A5D	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
    10c6:	e8 2f       	mov	r30, r24
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	31 97       	sbiw	r30, 0x01	; 1
    10cc:	e7 70       	andi	r30, 0x07	; 7
    10ce:	ff 27       	eor	r31, r31
    10d0:	eb 5c       	subi	r30, 0xCB	; 203
    10d2:	f7 4c       	sbci	r31, 0xC7	; 199
    10d4:	d0 80       	ld	r13, Z
    10d6:	cc df       	rcall	.-104    	; 0x1070 <lfsr>
    10d8:	8d 21       	and	r24, r13
    10da:	c8 0f       	add	r28, r24
    10dc:	d1 1d       	adc	r29, r1
    10de:	c8 df       	rcall	.-112    	; 0x1070 <lfsr>
    10e0:	8d 21       	and	r24, r13
    10e2:	c8 1b       	sub	r28, r24
    10e4:	d1 09       	sbc	r29, r1
    10e6:	0c 17       	cp	r16, r28
    10e8:	1d 07       	cpc	r17, r29
    10ea:	08 f4       	brcc	.+2      	; 0x10ee <floatSpeed+0x40>
    10ec:	e8 01       	movw	r28, r16
    10ee:	c7 01       	movw	r24, r14
    10f0:	ec 16       	cp	r14, r28
    10f2:	fd 06       	cpc	r15, r29
    10f4:	08 f4       	brcc	.+2      	; 0x10f8 <floatSpeed+0x4a>
    10f6:	ce 01       	movw	r24, r28
    10f8:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    10fc:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
    1100:	cd b7       	in	r28, 0x3d	; 61
    1102:	de b7       	in	r29, 0x3e	; 62
    1104:	e7 e0       	ldi	r30, 0x07	; 7
    1106:	0c 94 7e 1f 	jmp	0x3efc	; 0x3efc <__epilogue_restores__+0x16>

0000110a <floatAround>:
    110a:	0f 93       	push	r16
    110c:	1f 93       	push	r17
    110e:	cf 93       	push	r28
    1110:	df 93       	push	r29
    1112:	c8 2f       	mov	r28, r24
    1114:	d4 2f       	mov	r29, r20
    1116:	02 2f       	mov	r16, r18
    1118:	e6 2f       	mov	r30, r22
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	31 97       	sbiw	r30, 0x01	; 1
    111e:	e7 70       	andi	r30, 0x07	; 7
    1120:	ff 27       	eor	r31, r31
    1122:	eb 5c       	subi	r30, 0xCB	; 203
    1124:	f7 4c       	sbci	r31, 0xC7	; 199
    1126:	10 81       	ld	r17, Z
    1128:	a3 df       	rcall	.-186    	; 0x1070 <lfsr>
    112a:	81 23       	and	r24, r17
    112c:	c8 0f       	add	r28, r24
    112e:	a0 df       	rcall	.-192    	; 0x1070 <lfsr>
    1130:	81 23       	and	r24, r17
    1132:	c8 1b       	sub	r28, r24
    1134:	8c 2f       	mov	r24, r28
    1136:	00 23       	and	r16, r16
    1138:	41 f0       	breq	.+16     	; 0x114a <floatAround+0x40>
    113a:	9c 2f       	mov	r25, r28
    113c:	0c 17       	cp	r16, r28
    113e:	08 f4       	brcc	.+2      	; 0x1142 <floatAround+0x38>
    1140:	90 2f       	mov	r25, r16
    1142:	8d 2f       	mov	r24, r29
    1144:	d9 17       	cp	r29, r25
    1146:	08 f4       	brcc	.+2      	; 0x114a <floatAround+0x40>
    1148:	89 2f       	mov	r24, r25
    114a:	41 e0       	ldi	r20, 0x01	; 1
    114c:	50 e0       	ldi	r21, 0x00	; 0
    114e:	8d 17       	cp	r24, r29
    1150:	10 f0       	brcs	.+4      	; 0x1156 <floatAround+0x4c>
    1152:	40 e0       	ldi	r20, 0x00	; 0
    1154:	50 e0       	ldi	r21, 0x00	; 0
    1156:	2d 2f       	mov	r18, r29
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	24 23       	and	r18, r20
    115c:	35 23       	and	r19, r21
    115e:	23 2b       	or	r18, r19
    1160:	09 f0       	breq	.+2      	; 0x1164 <floatAround+0x5a>
    1162:	8d 2f       	mov	r24, r29
    1164:	df 91       	pop	r29
    1166:	cf 91       	pop	r28
    1168:	1f 91       	pop	r17
    116a:	0f 91       	pop	r16
    116c:	08 95       	ret

0000116e <SaveGameState>:
    116e:	cf 92       	push	r12
    1170:	df 92       	push	r13
    1172:	ff 92       	push	r15
    1174:	0f 93       	push	r16
    1176:	1f 93       	push	r17
    1178:	cf 93       	push	r28
    117a:	df 93       	push	r29
    117c:	cd b7       	in	r28, 0x3d	; 61
    117e:	de b7       	in	r29, 0x3e	; 62
    1180:	64 97       	sbiw	r28, 0x14	; 20
    1182:	cd bf       	out	0x3d, r28	; 61
    1184:	de bf       	out	0x3e, r29	; 62
    1186:	44 e1       	ldi	r20, 0x14	; 20
    1188:	be 01       	movw	r22, r28
    118a:	6f 5f       	subi	r22, 0xFF	; 255
    118c:	7f 4f       	sbci	r23, 0xFF	; 255
    118e:	80 e0       	ldi	r24, 0x00	; 0
    1190:	8d de       	rcall	.-742    	; 0xeac <EERead>
    1192:	83 e7       	ldi	r24, 0x73	; 115
    1194:	c8 2e       	mov	r12, r24
    1196:	8a e3       	ldi	r24, 0x3A	; 58
    1198:	d8 2e       	mov	r13, r24
    119a:	8e 01       	movw	r16, r28
    119c:	0f 5f       	subi	r16, 0xFF	; 255
    119e:	1f 4f       	sbci	r17, 0xFF	; 255
    11a0:	f1 2c       	mov	r15, r1
    11a2:	f8 01       	movw	r30, r16
    11a4:	81 91       	ld	r24, Z+
    11a6:	8f 01       	movw	r16, r30
    11a8:	f6 01       	movw	r30, r12
    11aa:	90 81       	ld	r25, Z
    11ac:	98 13       	cpse	r25, r24
    11ae:	08 c0       	rjmp	.+16     	; 0x11c0 <SaveGameState+0x52>
    11b0:	f3 94       	inc	r15
    11b2:	ff ef       	ldi	r31, 0xFF	; 255
    11b4:	cf 1a       	sub	r12, r31
    11b6:	df 0a       	sbc	r13, r31
    11b8:	80 e1       	ldi	r24, 0x10	; 16
    11ba:	f8 12       	cpse	r15, r24
    11bc:	f2 cf       	rjmp	.-28     	; 0x11a2 <SaveGameState+0x34>
    11be:	08 c0       	rjmp	.+16     	; 0x11d0 <SaveGameState+0x62>
    11c0:	41 e0       	ldi	r20, 0x01	; 1
    11c2:	b6 01       	movw	r22, r12
    11c4:	8f 2d       	mov	r24, r15
    11c6:	82 de       	rcall	.-764    	; 0xecc <EEWrite>
    11c8:	88 23       	and	r24, r24
    11ca:	91 f3       	breq	.-28     	; 0x11b0 <SaveGameState+0x42>
    11cc:	91 e0       	ldi	r25, 0x01	; 1
    11ce:	36 c0       	rjmp	.+108    	; 0x123c <SaveGameState+0xce>
    11d0:	20 91 4e 38 	lds	r18, 0x384E	; 0x80384e <inventory>
    11d4:	30 91 4f 38 	lds	r19, 0x384F	; 0x80384f <inventory+0x1>
    11d8:	30 93 83 3a 	sts	0x3A83, r19	; 0x803a83 <gameState+0x10>
    11dc:	20 93 84 3a 	sts	0x3A84, r18	; 0x803a84 <gameState+0x11>
    11e0:	80 91 50 38 	lds	r24, 0x3850	; 0x803850 <inventory+0x2>
    11e4:	90 91 51 38 	lds	r25, 0x3851	; 0x803851 <inventory+0x3>
    11e8:	90 93 85 3a 	sts	0x3A85, r25	; 0x803a85 <gameState+0x12>
    11ec:	80 93 86 3a 	sts	0x3A86, r24	; 0x803a86 <gameState+0x13>
    11f0:	89 89       	ldd	r24, Y+17	; 0x11
    11f2:	9a 89       	ldd	r25, Y+18	; 0x12
    11f4:	98 27       	eor	r25, r24
    11f6:	89 27       	eor	r24, r25
    11f8:	98 27       	eor	r25, r24
    11fa:	28 17       	cp	r18, r24
    11fc:	39 07       	cpc	r19, r25
    11fe:	69 f4       	brne	.+26     	; 0x121a <SaveGameState+0xac>
    1200:	8b 89       	ldd	r24, Y+19	; 0x13
    1202:	9c 89       	ldd	r25, Y+20	; 0x14
    1204:	98 27       	eor	r25, r24
    1206:	89 27       	eor	r24, r25
    1208:	98 27       	eor	r25, r24
    120a:	20 91 50 38 	lds	r18, 0x3850	; 0x803850 <inventory+0x2>
    120e:	30 91 51 38 	lds	r19, 0x3851	; 0x803851 <inventory+0x3>
    1212:	28 17       	cp	r18, r24
    1214:	39 07       	cpc	r19, r25
    1216:	49 f4       	brne	.+18     	; 0x122a <SaveGameState+0xbc>
    1218:	10 c0       	rjmp	.+32     	; 0x123a <SaveGameState+0xcc>
    121a:	42 e0       	ldi	r20, 0x02	; 2
    121c:	63 e8       	ldi	r22, 0x83	; 131
    121e:	7a e3       	ldi	r23, 0x3A	; 58
    1220:	80 e1       	ldi	r24, 0x10	; 16
    1222:	54 de       	rcall	.-856    	; 0xecc <EEWrite>
    1224:	88 23       	and	r24, r24
    1226:	61 f3       	breq	.-40     	; 0x1200 <SaveGameState+0x92>
    1228:	d1 cf       	rjmp	.-94     	; 0x11cc <SaveGameState+0x5e>
    122a:	42 e0       	ldi	r20, 0x02	; 2
    122c:	65 e8       	ldi	r22, 0x85	; 133
    122e:	7a e3       	ldi	r23, 0x3A	; 58
    1230:	82 e1       	ldi	r24, 0x12	; 18
    1232:	4c de       	rcall	.-872    	; 0xecc <EEWrite>
    1234:	91 e0       	ldi	r25, 0x01	; 1
    1236:	81 11       	cpse	r24, r1
    1238:	01 c0       	rjmp	.+2      	; 0x123c <SaveGameState+0xce>
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	89 2f       	mov	r24, r25
    123e:	64 96       	adiw	r28, 0x14	; 20
    1240:	cd bf       	out	0x3d, r28	; 61
    1242:	de bf       	out	0x3e, r29	; 62
    1244:	df 91       	pop	r29
    1246:	cf 91       	pop	r28
    1248:	1f 91       	pop	r17
    124a:	0f 91       	pop	r16
    124c:	ff 90       	pop	r15
    124e:	df 90       	pop	r13
    1250:	cf 90       	pop	r12
    1252:	08 95       	ret

00001254 <ReadStatusBit>:
    1254:	e8 2f       	mov	r30, r24
    1256:	ef 77       	andi	r30, 0x7F	; 127
    1258:	e6 95       	lsr	r30
    125a:	e6 95       	lsr	r30
    125c:	e6 95       	lsr	r30
    125e:	f0 e0       	ldi	r31, 0x00	; 0
    1260:	ed 58       	subi	r30, 0x8D	; 141
    1262:	f5 4c       	sbci	r31, 0xC5	; 197
    1264:	20 81       	ld	r18, Z
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	87 70       	andi	r24, 0x07	; 7
    126a:	a9 01       	movw	r20, r18
    126c:	02 c0       	rjmp	.+4      	; 0x1272 <ReadStatusBit+0x1e>
    126e:	55 95       	asr	r21
    1270:	47 95       	ror	r20
    1272:	8a 95       	dec	r24
    1274:	e2 f7       	brpl	.-8      	; 0x126e <ReadStatusBit+0x1a>
    1276:	ca 01       	movw	r24, r20
    1278:	81 70       	andi	r24, 0x01	; 1
    127a:	08 95       	ret

0000127c <UpdateState>:
    127c:	e8 2f       	mov	r30, r24
    127e:	ef 77       	andi	r30, 0x7F	; 127
    1280:	e9 f0       	breq	.+58     	; 0x12bc <UpdateState+0x40>
    1282:	e6 95       	lsr	r30
    1284:	e6 95       	lsr	r30
    1286:	e6 95       	lsr	r30
    1288:	28 2f       	mov	r18, r24
    128a:	27 70       	andi	r18, 0x07	; 7
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	ed 58       	subi	r30, 0x8D	; 141
    1290:	f5 4c       	sbci	r31, 0xC5	; 197
    1292:	87 ff       	sbrs	r24, 7
    1294:	0a c0       	rjmp	.+20     	; 0x12aa <UpdateState+0x2e>
    1296:	81 e0       	ldi	r24, 0x01	; 1
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	01 c0       	rjmp	.+2      	; 0x129e <UpdateState+0x22>
    129c:	88 0f       	add	r24, r24
    129e:	2a 95       	dec	r18
    12a0:	ea f7       	brpl	.-6      	; 0x129c <UpdateState+0x20>
    12a2:	80 95       	com	r24
    12a4:	90 81       	ld	r25, Z
    12a6:	89 23       	and	r24, r25
    12a8:	08 c0       	rjmp	.+16     	; 0x12ba <UpdateState+0x3e>
    12aa:	81 e0       	ldi	r24, 0x01	; 1
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	01 c0       	rjmp	.+2      	; 0x12b2 <UpdateState+0x36>
    12b0:	88 0f       	add	r24, r24
    12b2:	2a 95       	dec	r18
    12b4:	ea f7       	brpl	.-6      	; 0x12b0 <UpdateState+0x34>
    12b6:	90 81       	ld	r25, Z
    12b8:	89 2b       	or	r24, r25
    12ba:	80 83       	st	Z, r24
    12bc:	08 95       	ret

000012be <CheckState>:
    12be:	cf 93       	push	r28
    12c0:	c8 2f       	mov	r28, r24
    12c2:	8f 77       	andi	r24, 0x7F	; 127
    12c4:	c7 df       	rcall	.-114    	; 0x1254 <ReadStatusBit>
    12c6:	2c 2f       	mov	r18, r28
    12c8:	22 1f       	adc	r18, r18
    12ca:	22 27       	eor	r18, r18
    12cc:	22 1f       	adc	r18, r18
    12ce:	91 e0       	ldi	r25, 0x01	; 1
    12d0:	81 11       	cpse	r24, r1
    12d2:	01 c0       	rjmp	.+2      	; 0x12d6 <CheckState+0x18>
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	82 2f       	mov	r24, r18
    12d8:	89 27       	eor	r24, r25
    12da:	cf 91       	pop	r28
    12dc:	08 95       	ret

000012de <getID>:
    12de:	e3 e0       	ldi	r30, 0x03	; 3
    12e0:	f1 e1       	ldi	r31, 0x11	; 17
    12e2:	80 e0       	ldi	r24, 0x00	; 0
    12e4:	91 91       	ld	r25, Z+
    12e6:	89 0f       	add	r24, r25
    12e8:	ed 30       	cpi	r30, 0x0D	; 13
    12ea:	91 e1       	ldi	r25, 0x11	; 17
    12ec:	f9 07       	cpc	r31, r25
    12ee:	d1 f7       	brne	.-12     	; 0x12e4 <getID+0x6>
    12f0:	83 70       	andi	r24, 0x03	; 3
    12f2:	91 e0       	ldi	r25, 0x01	; 1
    12f4:	98 0f       	add	r25, r24
    12f6:	90 93 4d 38 	sts	0x384D, r25	; 0x80384d <whoami>
    12fa:	08 95       	ret

000012fc <WipeAfterBoot>:
    12fc:	a1 e0       	ldi	r26, 0x01	; 1
    12fe:	b0 e0       	ldi	r27, 0x00	; 0
    1300:	e4 e8       	ldi	r30, 0x84	; 132
    1302:	f9 e0       	ldi	r31, 0x09	; 9
    1304:	0c 94 69 1f 	jmp	0x3ed2	; 0x3ed2 <__prologue_saves__+0x1e>
    1308:	9f ef       	ldi	r25, 0xFF	; 255
    130a:	99 83       	std	Y+1, r25	; 0x01
    130c:	81 11       	cpse	r24, r1
    130e:	08 c0       	rjmp	.+16     	; 0x1320 <WipeAfterBoot+0x24>
    1310:	80 91 4d 38 	lds	r24, 0x384D	; 0x80384d <whoami>
    1314:	83 51       	subi	r24, 0x13	; 19
    1316:	b2 df       	rcall	.-156    	; 0x127c <UpdateState>
    1318:	21 96       	adiw	r28, 0x01	; 1
    131a:	e3 e0       	ldi	r30, 0x03	; 3
    131c:	0c 94 82 1f 	jmp	0x3f04	; 0x3f04 <__epilogue_restores__+0x1e>
    1320:	10 e0       	ldi	r17, 0x00	; 0
    1322:	41 e0       	ldi	r20, 0x01	; 1
    1324:	be 01       	movw	r22, r28
    1326:	6f 5f       	subi	r22, 0xFF	; 255
    1328:	7f 4f       	sbci	r23, 0xFF	; 255
    132a:	81 2f       	mov	r24, r17
    132c:	cf dd       	rcall	.-1122   	; 0xecc <EEWrite>
    132e:	1f 5f       	subi	r17, 0xFF	; 255
    1330:	10 32       	cpi	r17, 0x20	; 32
    1332:	b9 f7       	brne	.-18     	; 0x1322 <WipeAfterBoot+0x26>
    1334:	ed cf       	rjmp	.-38     	; 0x1310 <WipeAfterBoot+0x14>

00001336 <Reset>:
    1336:	cf 93       	push	r28
    1338:	e3 e7       	ldi	r30, 0x73	; 115
    133a:	fa e3       	ldi	r31, 0x3A	; 58
    133c:	11 92       	st	Z+, r1
    133e:	8a e3       	ldi	r24, 0x3A	; 58
    1340:	e7 38       	cpi	r30, 0x87	; 135
    1342:	f8 07       	cpc	r31, r24
    1344:	d9 f7       	brne	.-10     	; 0x133c <Reset+0x6>
    1346:	cb df       	rcall	.-106    	; 0x12de <getID>
    1348:	c8 2f       	mov	r28, r24
    134a:	81 11       	cpse	r24, r1
    134c:	02 c0       	rjmp	.+4      	; 0x1352 <Reset+0x1c>
    134e:	8e e6       	ldi	r24, 0x6E	; 110
    1350:	0b c0       	rjmp	.+22     	; 0x1368 <Reset+0x32>
    1352:	81 30       	cpi	r24, 0x01	; 1
    1354:	11 f4       	brne	.+4      	; 0x135a <Reset+0x24>
    1356:	8f e6       	ldi	r24, 0x6F	; 111
    1358:	07 c0       	rjmp	.+14     	; 0x1368 <Reset+0x32>
    135a:	82 30       	cpi	r24, 0x02	; 2
    135c:	11 f4       	brne	.+4      	; 0x1362 <Reset+0x2c>
    135e:	80 e7       	ldi	r24, 0x70	; 112
    1360:	03 c0       	rjmp	.+6      	; 0x1368 <Reset+0x32>
    1362:	83 30       	cpi	r24, 0x03	; 3
    1364:	11 f4       	brne	.+4      	; 0x136a <Reset+0x34>
    1366:	81 e7       	ldi	r24, 0x71	; 113
    1368:	89 df       	rcall	.-238    	; 0x127c <UpdateState>
    136a:	84 e6       	ldi	r24, 0x64	; 100
    136c:	8c 0f       	add	r24, r28
    136e:	86 df       	rcall	.-244    	; 0x127c <UpdateState>
    1370:	cf 91       	pop	r28
    1372:	08 95       	ret

00001374 <LoadGameState>:
    1374:	cf 93       	push	r28
    1376:	df 93       	push	r29
    1378:	44 e1       	ldi	r20, 0x14	; 20
    137a:	63 e7       	ldi	r22, 0x73	; 115
    137c:	7a e3       	ldi	r23, 0x3A	; 58
    137e:	80 e0       	ldi	r24, 0x00	; 0
    1380:	95 dd       	rcall	.-1238   	; 0xeac <EERead>
    1382:	ce e6       	ldi	r28, 0x6E	; 110
    1384:	d0 e0       	ldi	r29, 0x00	; 0
    1386:	8c 2f       	mov	r24, r28
    1388:	65 df       	rcall	.-310    	; 0x1254 <ReadStatusBit>
    138a:	d8 0f       	add	r29, r24
    138c:	cf 5f       	subi	r28, 0xFF	; 255
    138e:	c2 37       	cpi	r28, 0x72	; 114
    1390:	d1 f7       	brne	.-12     	; 0x1386 <LoadGameState+0x12>
    1392:	d1 30       	cpi	r29, 0x01	; 1
    1394:	11 f0       	breq	.+4      	; 0x139a <LoadGameState+0x26>
    1396:	cf df       	rcall	.-98     	; 0x1336 <Reset>
    1398:	01 c0       	rjmp	.+2      	; 0x139c <LoadGameState+0x28>
    139a:	a1 df       	rcall	.-190    	; 0x12de <getID>
    139c:	80 91 83 3a 	lds	r24, 0x3A83	; 0x803a83 <gameState+0x10>
    13a0:	90 91 84 3a 	lds	r25, 0x3A84	; 0x803a84 <gameState+0x11>
    13a4:	98 27       	eor	r25, r24
    13a6:	89 27       	eor	r24, r25
    13a8:	98 27       	eor	r25, r24
    13aa:	80 93 4e 38 	sts	0x384E, r24	; 0x80384e <inventory>
    13ae:	90 93 4f 38 	sts	0x384F, r25	; 0x80384f <inventory+0x1>
    13b2:	80 91 85 3a 	lds	r24, 0x3A85	; 0x803a85 <gameState+0x12>
    13b6:	90 91 86 3a 	lds	r25, 0x3A86	; 0x803a86 <gameState+0x13>
    13ba:	98 27       	eor	r25, r24
    13bc:	89 27       	eor	r24, r25
    13be:	98 27       	eor	r25, r24
    13c0:	80 93 50 38 	sts	0x3850, r24	; 0x803850 <inventory+0x2>
    13c4:	90 93 51 38 	sts	0x3851, r25	; 0x803851 <inventory+0x3>
    13c8:	df 91       	pop	r29
    13ca:	cf 91       	pop	r28
    13cc:	08 95       	ret

000013ce <HotSummer>:
    13ce:	cf 93       	push	r28
    13d0:	86 e7       	ldi	r24, 0x76	; 118
    13d2:	75 df       	rcall	.-278    	; 0x12be <CheckState>
    13d4:	c8 2f       	mov	r28, r24
    13d6:	88 23       	and	r24, r24
    13d8:	81 f0       	breq	.+32     	; 0x13fa <HotSummer+0x2c>
    13da:	e0 91 38 bf 	lds	r30, 0xBF38	; 0x80bf38 <__bss_end+0x8411>
    13de:	f0 e0       	ldi	r31, 0x00	; 0
    13e0:	e8 52       	subi	r30, 0x28	; 40
    13e2:	f5 4c       	sbci	r31, 0xC5	; 197
    13e4:	10 82       	st	Z, r1
    13e6:	e0 91 39 bf 	lds	r30, 0xBF39	; 0x80bf39 <__bss_end+0x8412>
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    13f0:	e8 52       	subi	r30, 0x28	; 40
    13f2:	f5 4c       	sbci	r31, 0xC5	; 197
    13f4:	80 83       	st	Z, r24
    13f6:	c1 e0       	ldi	r28, 0x01	; 1
    13f8:	49 c0       	rjmp	.+146    	; 0x148c <HotSummer+0xbe>
    13fa:	85 e7       	ldi	r24, 0x75	; 117
    13fc:	60 df       	rcall	.-320    	; 0x12be <CheckState>
    13fe:	88 23       	and	r24, r24
    1400:	49 f1       	breq	.+82     	; 0x1454 <HotSummer+0x86>
    1402:	e0 91 38 bf 	lds	r30, 0xBF38	; 0x80bf38 <__bss_end+0x8411>
    1406:	f0 e0       	ldi	r31, 0x00	; 0
    1408:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    140c:	e8 52       	subi	r30, 0x28	; 40
    140e:	f5 4c       	sbci	r31, 0xC5	; 197
    1410:	80 83       	st	Z, r24
    1412:	80 91 69 38 	lds	r24, 0x3869	; 0x803869 <cooledDown.3974>
    1416:	88 23       	and	r24, r24
    1418:	71 f0       	breq	.+28     	; 0x1436 <HotSummer+0x68>
    141a:	80 91 d5 3a 	lds	r24, 0x3AD5	; 0x803ad5 <calTemp>
    141e:	90 91 d6 3a 	lds	r25, 0x3AD6	; 0x803ad6 <calTemp+0x1>
    1422:	20 91 02 3b 	lds	r18, 0x3B02	; 0x803b02 <adcTemp>
    1426:	30 91 03 3b 	lds	r19, 0x3B03	; 0x803b03 <adcTemp+0x1>
    142a:	80 96       	adiw	r24, 0x20	; 32
    142c:	28 17       	cp	r18, r24
    142e:	39 07       	cpc	r19, r25
    1430:	10 f0       	brcs	.+4      	; 0x1436 <HotSummer+0x68>
    1432:	86 e7       	ldi	r24, 0x76	; 118
    1434:	2a c0       	rjmp	.+84     	; 0x148a <HotSummer+0xbc>
    1436:	80 91 d5 3a 	lds	r24, 0x3AD5	; 0x803ad5 <calTemp>
    143a:	90 91 d6 3a 	lds	r25, 0x3AD6	; 0x803ad6 <calTemp+0x1>
    143e:	20 91 02 3b 	lds	r18, 0x3B02	; 0x803b02 <adcTemp>
    1442:	30 91 03 3b 	lds	r19, 0x3B03	; 0x803b03 <adcTemp+0x1>
    1446:	08 96       	adiw	r24, 0x08	; 8
    1448:	82 17       	cp	r24, r18
    144a:	93 07       	cpc	r25, r19
    144c:	18 f0       	brcs	.+6      	; 0x1454 <HotSummer+0x86>
    144e:	81 e0       	ldi	r24, 0x01	; 1
    1450:	80 93 69 38 	sts	0x3869, r24	; 0x803869 <cooledDown.3974>
    1454:	80 91 d5 3a 	lds	r24, 0x3AD5	; 0x803ad5 <calTemp>
    1458:	90 91 d6 3a 	lds	r25, 0x3AD6	; 0x803ad6 <calTemp+0x1>
    145c:	89 2b       	or	r24, r25
    145e:	41 f4       	brne	.+16     	; 0x1470 <HotSummer+0xa2>
    1460:	80 91 02 3b 	lds	r24, 0x3B02	; 0x803b02 <adcTemp>
    1464:	90 91 03 3b 	lds	r25, 0x3B03	; 0x803b03 <adcTemp+0x1>
    1468:	80 93 d5 3a 	sts	0x3AD5, r24	; 0x803ad5 <calTemp>
    146c:	90 93 d6 3a 	sts	0x3AD6, r25	; 0x803ad6 <calTemp+0x1>
    1470:	80 91 d5 3a 	lds	r24, 0x3AD5	; 0x803ad5 <calTemp>
    1474:	90 91 d6 3a 	lds	r25, 0x3AD6	; 0x803ad6 <calTemp+0x1>
    1478:	20 91 02 3b 	lds	r18, 0x3B02	; 0x803b02 <adcTemp>
    147c:	30 91 03 3b 	lds	r19, 0x3B03	; 0x803b03 <adcTemp+0x1>
    1480:	80 96       	adiw	r24, 0x20	; 32
    1482:	28 17       	cp	r18, r24
    1484:	39 07       	cpc	r19, r25
    1486:	10 f0       	brcs	.+4      	; 0x148c <HotSummer+0xbe>
    1488:	85 e7       	ldi	r24, 0x75	; 117
    148a:	f8 de       	rcall	.-528    	; 0x127c <UpdateState>
    148c:	8c 2f       	mov	r24, r28
    148e:	cf 91       	pop	r28
    1490:	08 95       	ret

00001492 <WingBar>:
    1492:	ea e3       	ldi	r30, 0x3A	; 58
    1494:	ff eb       	ldi	r31, 0xBF	; 191
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	a5 81       	ldd	r26, Z+5	; 0x05
    149a:	b0 e0       	ldi	r27, 0x00	; 0
    149c:	98 17       	cp	r25, r24
    149e:	34 f4       	brge	.+12     	; 0x14ac <WingBar+0x1a>
    14a0:	20 91 0c 38 	lds	r18, 0x380C	; 0x80380c <dimValue>
    14a4:	a8 52       	subi	r26, 0x28	; 40
    14a6:	b5 4c       	sbci	r27, 0xC5	; 197
    14a8:	2c 93       	st	X, r18
    14aa:	03 c0       	rjmp	.+6      	; 0x14b2 <WingBar+0x20>
    14ac:	a8 52       	subi	r26, 0x28	; 40
    14ae:	b5 4c       	sbci	r27, 0xC5	; 197
    14b0:	1c 92       	st	X, r1
    14b2:	a0 81       	ld	r26, Z
    14b4:	b0 e0       	ldi	r27, 0x00	; 0
    14b6:	96 17       	cp	r25, r22
    14b8:	34 f4       	brge	.+12     	; 0x14c6 <WingBar+0x34>
    14ba:	20 91 0c 38 	lds	r18, 0x380C	; 0x80380c <dimValue>
    14be:	a8 52       	subi	r26, 0x28	; 40
    14c0:	b5 4c       	sbci	r27, 0xC5	; 197
    14c2:	2c 93       	st	X, r18
    14c4:	03 c0       	rjmp	.+6      	; 0x14cc <WingBar+0x3a>
    14c6:	a8 52       	subi	r26, 0x28	; 40
    14c8:	b5 4c       	sbci	r27, 0xC5	; 197
    14ca:	1c 92       	st	X, r1
    14cc:	9f 5f       	subi	r25, 0xFF	; 255
    14ce:	31 96       	adiw	r30, 0x01	; 1
    14d0:	95 30       	cpi	r25, 0x05	; 5
    14d2:	11 f7       	brne	.-60     	; 0x1498 <WingBar+0x6>
    14d4:	08 95       	ret

000014d6 <SetBothEyes>:
    14d6:	a4 e4       	ldi	r26, 0x44	; 68
    14d8:	bf eb       	ldi	r27, 0xBF	; 191
    14da:	ec 91       	ld	r30, X
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	e8 52       	subi	r30, 0x28	; 40
    14e0:	f5 4c       	sbci	r31, 0xC5	; 197
    14e2:	80 83       	st	Z, r24
    14e4:	12 96       	adiw	r26, 0x02	; 2
    14e6:	ec 91       	ld	r30, X
    14e8:	12 97       	sbiw	r26, 0x02	; 2
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	e8 52       	subi	r30, 0x28	; 40
    14ee:	f5 4c       	sbci	r31, 0xC5	; 197
    14f0:	60 83       	st	Z, r22
    14f2:	11 96       	adiw	r26, 0x01	; 1
    14f4:	ec 91       	ld	r30, X
    14f6:	11 97       	sbiw	r26, 0x01	; 1
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	e8 52       	subi	r30, 0x28	; 40
    14fc:	f5 4c       	sbci	r31, 0xC5	; 197
    14fe:	80 83       	st	Z, r24
    1500:	13 96       	adiw	r26, 0x03	; 3
    1502:	ec 91       	ld	r30, X
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	e8 52       	subi	r30, 0x28	; 40
    1508:	f5 4c       	sbci	r31, 0xC5	; 197
    150a:	60 83       	st	Z, r22
    150c:	08 95       	ret

0000150e <SetHackerLeds>:
    150e:	a8 e4       	ldi	r26, 0x48	; 72
    1510:	bf eb       	ldi	r27, 0xBF	; 191
    1512:	ed 91       	ld	r30, X+
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	e8 52       	subi	r30, 0x28	; 40
    1518:	f5 4c       	sbci	r31, 0xC5	; 197
    151a:	80 83       	st	Z, r24
    151c:	15 96       	adiw	r26, 0x05	; 5
    151e:	ec 91       	ld	r30, X
    1520:	15 97       	sbiw	r26, 0x05	; 5
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	e8 52       	subi	r30, 0x28	; 40
    1526:	f5 4c       	sbci	r31, 0xC5	; 197
    1528:	60 83       	st	Z, r22
    152a:	9f eb       	ldi	r25, 0xBF	; 191
    152c:	ae 34       	cpi	r26, 0x4E	; 78
    152e:	b9 07       	cpc	r27, r25
    1530:	81 f7       	brne	.-32     	; 0x1512 <SetHackerLeds+0x4>
    1532:	08 95       	ret

00001534 <VictoryDance>:
    1534:	60 91 0c 38 	lds	r22, 0x380C	; 0x80380c <dimValue>
    1538:	80 e0       	ldi	r24, 0x00	; 0
    153a:	cd df       	rcall	.-102    	; 0x14d6 <SetBothEyes>
    153c:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
    1540:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
    1544:	89 2f       	mov	r24, r25
    1546:	99 27       	eor	r25, r25
    1548:	82 95       	swap	r24
    154a:	8f 70       	andi	r24, 0x0F	; 15
    154c:	87 70       	andi	r24, 0x07	; 7
    154e:	99 27       	eor	r25, r25
    1550:	84 30       	cpi	r24, 0x04	; 4
    1552:	91 05       	cpc	r25, r1
    1554:	59 f0       	breq	.+22     	; 0x156c <VictoryDance+0x38>
    1556:	28 f4       	brcc	.+10     	; 0x1562 <VictoryDance+0x2e>
    1558:	03 97       	sbiw	r24, 0x03	; 3
    155a:	58 f4       	brcc	.+22     	; 0x1572 <VictoryDance+0x3e>
    155c:	88 e0       	ldi	r24, 0x08	; 8
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	0d c0       	rjmp	.+26     	; 0x157c <VictoryDance+0x48>
    1562:	06 97       	sbiw	r24, 0x06	; 6
    1564:	31 f4       	brne	.+12     	; 0x1572 <VictoryDance+0x3e>
    1566:	87 e0       	ldi	r24, 0x07	; 7
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	08 c0       	rjmp	.+16     	; 0x157c <VictoryDance+0x48>
    156c:	86 e0       	ldi	r24, 0x06	; 6
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	05 c0       	rjmp	.+10     	; 0x157c <VictoryDance+0x48>
    1572:	60 e0       	ldi	r22, 0x00	; 0
    1574:	80 e0       	ldi	r24, 0x00	; 0
    1576:	8d df       	rcall	.-230    	; 0x1492 <WingBar>
    1578:	82 e0       	ldi	r24, 0x02	; 2
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	80 93 4a 38 	sts	0x384A, r24	; 0x80384a <effect>
    1580:	90 93 4b 38 	sts	0x384B, r25	; 0x80384b <effect+0x1>
    1584:	08 95       	ret

00001586 <GenerateBlinks>:
    1586:	a0 e0       	ldi	r26, 0x00	; 0
    1588:	b0 e0       	ldi	r27, 0x00	; 0
    158a:	e9 ec       	ldi	r30, 0xC9	; 201
    158c:	fa e0       	ldi	r31, 0x0A	; 10
    158e:	0c 94 64 1f 	jmp	0x3ec8	; 0x3ec8 <__prologue_saves__+0x14>
    1592:	80 91 4c 38 	lds	r24, 0x384C	; 0x80384c <gameNow>
    1596:	88 23       	and	r24, r24
    1598:	29 f0       	breq	.+10     	; 0x15a4 <GenerateBlinks+0x1e>
    159a:	80 e4       	ldi	r24, 0x40	; 64
    159c:	90 de       	rcall	.-736    	; 0x12be <CheckState>
    159e:	81 11       	cpse	r24, r1
    15a0:	24 c0       	rjmp	.+72     	; 0x15ea <GenerateBlinks+0x64>
    15a2:	53 c0       	rjmp	.+166    	; 0x164a <GenerateBlinks+0xc4>
    15a4:	c8 e4       	ldi	r28, 0x48	; 72
    15a6:	df eb       	ldi	r29, 0xBF	; 191
    15a8:	1a e7       	ldi	r17, 0x7A	; 122
    15aa:	81 2f       	mov	r24, r17
    15ac:	88 de       	rcall	.-752    	; 0x12be <CheckState>
    15ae:	ee 81       	ldd	r30, Y+6	; 0x06
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	88 23       	and	r24, r24
    15b4:	59 f0       	breq	.+22     	; 0x15cc <GenerateBlinks+0x46>
    15b6:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    15ba:	e8 52       	subi	r30, 0x28	; 40
    15bc:	f5 4c       	sbci	r31, 0xC5	; 197
    15be:	80 83       	st	Z, r24
    15c0:	e8 81       	ld	r30, Y
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	e8 52       	subi	r30, 0x28	; 40
    15c6:	f5 4c       	sbci	r31, 0xC5	; 197
    15c8:	10 82       	st	Z, r1
    15ca:	0a c0       	rjmp	.+20     	; 0x15e0 <GenerateBlinks+0x5a>
    15cc:	e8 52       	subi	r30, 0x28	; 40
    15ce:	f5 4c       	sbci	r31, 0xC5	; 197
    15d0:	10 82       	st	Z, r1
    15d2:	e8 81       	ld	r30, Y
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    15da:	e8 52       	subi	r30, 0x28	; 40
    15dc:	f5 4c       	sbci	r31, 0xC5	; 197
    15de:	80 83       	st	Z, r24
    15e0:	1f 5f       	subi	r17, 0xFF	; 255
    15e2:	21 96       	adiw	r28, 0x01	; 1
    15e4:	10 38       	cpi	r17, 0x80	; 128
    15e6:	09 f7       	brne	.-62     	; 0x15aa <GenerateBlinks+0x24>
    15e8:	d8 cf       	rjmp	.-80     	; 0x159a <GenerateBlinks+0x14>
    15ea:	90 91 6b 38 	lds	r25, 0x386B	; 0x80386b <HeartCount>
    15ee:	49 2f       	mov	r20, r25
    15f0:	50 e0       	ldi	r21, 0x00	; 0
    15f2:	80 91 37 bf 	lds	r24, 0xBF37	; 0x80bf37 <__bss_end+0x8410>
    15f6:	47 30       	cpi	r20, 0x07	; 7
    15f8:	51 05       	cpc	r21, r1
    15fa:	d0 f4       	brcc	.+52     	; 0x1630 <GenerateBlinks+0xaa>
    15fc:	fa 01       	movw	r30, r20
    15fe:	e2 5c       	subi	r30, 0xC2	; 194
    1600:	ff 4f       	sbci	r31, 0xFF	; 255
    1602:	0c 94 54 1f 	jmp	0x3ea8	; 0x3ea8 <__tablejump2__>
    1606:	e8 2f       	mov	r30, r24
    1608:	f0 e0       	ldi	r31, 0x00	; 0
    160a:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    160e:	86 95       	lsr	r24
    1610:	86 95       	lsr	r24
    1612:	05 c0       	rjmp	.+10     	; 0x161e <GenerateBlinks+0x98>
    1614:	e8 2f       	mov	r30, r24
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    161c:	86 95       	lsr	r24
    161e:	e8 52       	subi	r30, 0x28	; 40
    1620:	f5 4c       	sbci	r31, 0xC5	; 197
    1622:	80 83       	st	Z, r24
    1624:	0a c0       	rjmp	.+20     	; 0x163a <GenerateBlinks+0xb4>
    1626:	e8 2f       	mov	r30, r24
    1628:	f0 e0       	ldi	r31, 0x00	; 0
    162a:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    162e:	f7 cf       	rjmp	.-18     	; 0x161e <GenerateBlinks+0x98>
    1630:	e8 2f       	mov	r30, r24
    1632:	f0 e0       	ldi	r31, 0x00	; 0
    1634:	e8 52       	subi	r30, 0x28	; 40
    1636:	f5 4c       	sbci	r31, 0xC5	; 197
    1638:	10 82       	st	Z, r1
    163a:	90 32       	cpi	r25, 0x20	; 32
    163c:	20 f4       	brcc	.+8      	; 0x1646 <GenerateBlinks+0xc0>
    163e:	9f 5f       	subi	r25, 0xFF	; 255
    1640:	90 93 6b 38 	sts	0x386B, r25	; 0x80386b <HeartCount>
    1644:	02 c0       	rjmp	.+4      	; 0x164a <GenerateBlinks+0xc4>
    1646:	10 92 6b 38 	sts	0x386B, r1	; 0x80386b <HeartCount>
    164a:	90 91 6a 38 	lds	r25, 0x386A	; 0x80386a <LedCount>
    164e:	9f 5f       	subi	r25, 0xFF	; 255
    1650:	90 93 6a 38 	sts	0x386A, r25	; 0x80386a <LedCount>
    1654:	e0 91 4a 38 	lds	r30, 0x384A	; 0x80384a <effect>
    1658:	f0 91 4b 38 	lds	r31, 0x384B	; 0x80384b <effect+0x1>
    165c:	ef 71       	andi	r30, 0x1F	; 31
    165e:	ff 27       	eor	r31, r31
    1660:	e2 31       	cpi	r30, 0x12	; 18
    1662:	f1 05       	cpc	r31, r1
    1664:	08 f0       	brcs	.+2      	; 0x1668 <GenerateBlinks+0xe2>
    1666:	eb c0       	rjmp	.+470    	; 0x183e <GenerateBlinks+0x2b8>
    1668:	eb 5b       	subi	r30, 0xBB	; 187
    166a:	ff 4f       	sbci	r31, 0xFF	; 255
    166c:	0c 94 54 1f 	jmp	0x3ea8	; 0x3ea8 <__tablejump2__>
    1670:	60 e0       	ldi	r22, 0x00	; 0
    1672:	80 e0       	ldi	r24, 0x00	; 0
    1674:	30 df       	rcall	.-416    	; 0x14d6 <SetBothEyes>
    1676:	80 91 4a 38 	lds	r24, 0x384A	; 0x80384a <effect>
    167a:	90 91 4b 38 	lds	r25, 0x384B	; 0x80384b <effect+0x1>
    167e:	84 fd       	sbrc	r24, 4
    1680:	0a c0       	rjmp	.+20     	; 0x1696 <GenerateBlinks+0x110>
    1682:	60 e0       	ldi	r22, 0x00	; 0
    1684:	80 e0       	ldi	r24, 0x00	; 0
    1686:	05 df       	rcall	.-502    	; 0x1492 <WingBar>
    1688:	e0 91 36 bf 	lds	r30, 0xBF36	; 0x80bf36 <__bss_end+0x840f>
    168c:	f0 e0       	ldi	r31, 0x00	; 0
    168e:	e8 52       	subi	r30, 0x28	; 40
    1690:	f5 4c       	sbci	r31, 0xC5	; 197
    1692:	10 82       	st	Z, r1
    1694:	d4 c0       	rjmp	.+424    	; 0x183e <GenerateBlinks+0x2b8>
    1696:	8f e1       	ldi	r24, 0x1F	; 31
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	80 93 4a 38 	sts	0x384A, r24	; 0x80384a <effect>
    169e:	90 93 4b 38 	sts	0x384B, r25	; 0x80384b <effect+0x1>
    16a2:	cd c0       	rjmp	.+410    	; 0x183e <GenerateBlinks+0x2b8>
    16a4:	89 2f       	mov	r24, r25
    16a6:	81 70       	andi	r24, 0x01	; 1
    16a8:	90 fd       	sbrc	r25, 0
    16aa:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    16ae:	60 e0       	ldi	r22, 0x00	; 0
    16b0:	12 df       	rcall	.-476    	; 0x14d6 <SetBothEyes>
    16b2:	80 91 4a 38 	lds	r24, 0x384A	; 0x80384a <effect>
    16b6:	90 91 4b 38 	lds	r25, 0x384B	; 0x80384b <effect+0x1>
    16ba:	84 ff       	sbrs	r24, 4
    16bc:	c0 c0       	rjmp	.+384    	; 0x183e <GenerateBlinks+0x2b8>
    16be:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    16c2:	60 e0       	ldi	r22, 0x00	; 0
    16c4:	24 df       	rcall	.-440    	; 0x150e <SetHackerLeds>
    16c6:	bb c0       	rjmp	.+374    	; 0x183e <GenerateBlinks+0x2b8>
    16c8:	69 2f       	mov	r22, r25
    16ca:	70 e0       	ldi	r23, 0x00	; 0
    16cc:	93 ff       	sbrs	r25, 3
    16ce:	02 c0       	rjmp	.+4      	; 0x16d4 <GenerateBlinks+0x14e>
    16d0:	60 95       	com	r22
    16d2:	70 95       	com	r23
    16d4:	95 e0       	ldi	r25, 0x05	; 5
    16d6:	66 0f       	add	r22, r22
    16d8:	77 1f       	adc	r23, r23
    16da:	9a 95       	dec	r25
    16dc:	e1 f7       	brne	.-8      	; 0x16d6 <GenerateBlinks+0x150>
    16de:	61 5e       	subi	r22, 0xE1	; 225
    16e0:	80 e0       	ldi	r24, 0x00	; 0
    16e2:	f9 de       	rcall	.-526    	; 0x14d6 <SetBothEyes>
    16e4:	ac c0       	rjmp	.+344    	; 0x183e <GenerateBlinks+0x2b8>
    16e6:	89 2f       	mov	r24, r25
    16e8:	83 70       	andi	r24, 0x03	; 3
    16ea:	09 f0       	breq	.+2      	; 0x16ee <GenerateBlinks+0x168>
    16ec:	a8 c0       	rjmp	.+336    	; 0x183e <GenerateBlinks+0x2b8>
    16ee:	92 ff       	sbrs	r25, 2
    16f0:	03 c0       	rjmp	.+6      	; 0x16f8 <GenerateBlinks+0x172>
    16f2:	65 e0       	ldi	r22, 0x05	; 5
    16f4:	85 e0       	ldi	r24, 0x05	; 5
    16f6:	02 c0       	rjmp	.+4      	; 0x16fc <GenerateBlinks+0x176>
    16f8:	60 e0       	ldi	r22, 0x00	; 0
    16fa:	80 e0       	ldi	r24, 0x00	; 0
    16fc:	ca de       	rcall	.-620    	; 0x1492 <WingBar>
    16fe:	9f c0       	rjmp	.+318    	; 0x183e <GenerateBlinks+0x2b8>
    1700:	95 30       	cpi	r25, 0x05	; 5
    1702:	10 f0       	brcs	.+4      	; 0x1708 <GenerateBlinks+0x182>
    1704:	10 92 6a 38 	sts	0x386A, r1	; 0x80386a <LedCount>
    1708:	40 91 6a 38 	lds	r20, 0x386A	; 0x80386a <LedCount>
    170c:	24 2f       	mov	r18, r20
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	f9 01       	movw	r30, r18
    1712:	e6 5c       	subi	r30, 0xC6	; 198
    1714:	f0 44       	sbci	r31, 0x40	; 64
    1716:	e5 81       	ldd	r30, Z+5	; 0x05
    1718:	f0 e0       	ldi	r31, 0x00	; 0
    171a:	e8 52       	subi	r30, 0x28	; 40
    171c:	f5 4c       	sbci	r31, 0xC5	; 197
    171e:	10 82       	st	Z, r1
    1720:	44 30       	cpi	r20, 0x04	; 4
    1722:	19 f0       	breq	.+6      	; 0x172a <GenerateBlinks+0x1a4>
    1724:	c9 01       	movw	r24, r18
    1726:	01 96       	adiw	r24, 0x01	; 1
    1728:	02 c0       	rjmp	.+4      	; 0x172e <GenerateBlinks+0x1a8>
    172a:	80 e0       	ldi	r24, 0x00	; 0
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	fc 01       	movw	r30, r24
    1730:	e6 5c       	subi	r30, 0xC6	; 198
    1732:	f0 44       	sbci	r31, 0x40	; 64
    1734:	e5 81       	ldd	r30, Z+5	; 0x05
    1736:	f0 e0       	ldi	r31, 0x00	; 0
    1738:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    173c:	e8 52       	subi	r30, 0x28	; 40
    173e:	f5 4c       	sbci	r31, 0xC5	; 197
    1740:	80 83       	st	Z, r24
    1742:	ee e3       	ldi	r30, 0x3E	; 62
    1744:	ff eb       	ldi	r31, 0xBF	; 191
    1746:	e2 1b       	sub	r30, r18
    1748:	f3 0b       	sbc	r31, r19
    174a:	e0 81       	ld	r30, Z
    174c:	f0 e0       	ldi	r31, 0x00	; 0
    174e:	e8 52       	subi	r30, 0x28	; 40
    1750:	f5 4c       	sbci	r31, 0xC5	; 197
    1752:	10 82       	st	Z, r1
    1754:	44 30       	cpi	r20, 0x04	; 4
    1756:	29 f0       	breq	.+10     	; 0x1762 <GenerateBlinks+0x1dc>
    1758:	83 e0       	ldi	r24, 0x03	; 3
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	82 1b       	sub	r24, r18
    175e:	93 0b       	sbc	r25, r19
    1760:	02 c0       	rjmp	.+4      	; 0x1766 <GenerateBlinks+0x1e0>
    1762:	84 e0       	ldi	r24, 0x04	; 4
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	fc 01       	movw	r30, r24
    1768:	e6 5c       	subi	r30, 0xC6	; 198
    176a:	f0 44       	sbci	r31, 0x40	; 64
    176c:	e0 81       	ld	r30, Z
    176e:	f0 e0       	ldi	r31, 0x00	; 0
    1770:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1774:	e8 52       	subi	r30, 0x28	; 40
    1776:	f5 4c       	sbci	r31, 0xC5	; 197
    1778:	80 83       	st	Z, r24
    177a:	61 c0       	rjmp	.+194    	; 0x183e <GenerateBlinks+0x2b8>
    177c:	ca e3       	ldi	r28, 0x3A	; 58
    177e:	df eb       	ldi	r29, 0xBF	; 191
    1780:	8f e3       	ldi	r24, 0x3F	; 63
    1782:	e8 2e       	mov	r14, r24
    1784:	8f eb       	ldi	r24, 0xBF	; 191
    1786:	f8 2e       	mov	r15, r24
    1788:	6e 01       	movw	r12, r28
    178a:	0d 81       	ldd	r16, Y+5	; 0x05
    178c:	10 e0       	ldi	r17, 0x00	; 0
    178e:	70 dc       	rcall	.-1824   	; 0x1070 <lfsr>
    1790:	87 ff       	sbrs	r24, 7
    1792:	03 c0       	rjmp	.+6      	; 0x179a <GenerateBlinks+0x214>
    1794:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1798:	01 c0       	rjmp	.+2      	; 0x179c <GenerateBlinks+0x216>
    179a:	80 e0       	ldi	r24, 0x00	; 0
    179c:	f8 01       	movw	r30, r16
    179e:	e8 52       	subi	r30, 0x28	; 40
    17a0:	f5 4c       	sbci	r31, 0xC5	; 197
    17a2:	80 83       	st	Z, r24
    17a4:	21 96       	adiw	r28, 0x01	; 1
    17a6:	f6 01       	movw	r30, r12
    17a8:	00 81       	ld	r16, Z
    17aa:	10 e0       	ldi	r17, 0x00	; 0
    17ac:	61 dc       	rcall	.-1854   	; 0x1070 <lfsr>
    17ae:	87 ff       	sbrs	r24, 7
    17b0:	03 c0       	rjmp	.+6      	; 0x17b8 <GenerateBlinks+0x232>
    17b2:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    17b6:	01 c0       	rjmp	.+2      	; 0x17ba <GenerateBlinks+0x234>
    17b8:	80 e0       	ldi	r24, 0x00	; 0
    17ba:	f8 01       	movw	r30, r16
    17bc:	e8 52       	subi	r30, 0x28	; 40
    17be:	f5 4c       	sbci	r31, 0xC5	; 197
    17c0:	80 83       	st	Z, r24
    17c2:	ec 16       	cp	r14, r28
    17c4:	fd 06       	cpc	r15, r29
    17c6:	01 f7       	brne	.-64     	; 0x1788 <GenerateBlinks+0x202>
    17c8:	3a c0       	rjmp	.+116    	; 0x183e <GenerateBlinks+0x2b8>
    17ca:	90 fd       	sbrc	r25, 0
    17cc:	38 c0       	rjmp	.+112    	; 0x183e <GenerateBlinks+0x2b8>
    17ce:	ea e3       	ldi	r30, 0x3A	; 58
    17d0:	ff eb       	ldi	r31, 0xBF	; 191
    17d2:	8e e3       	ldi	r24, 0x3E	; 62
    17d4:	9f eb       	ldi	r25, 0xBF	; 191
    17d6:	9f 01       	movw	r18, r30
    17d8:	a5 81       	ldd	r26, Z+5	; 0x05
    17da:	b0 e0       	ldi	r27, 0x00	; 0
    17dc:	c6 81       	ldd	r28, Z+6	; 0x06
    17de:	d0 e0       	ldi	r29, 0x00	; 0
    17e0:	c8 52       	subi	r28, 0x28	; 40
    17e2:	d5 4c       	sbci	r29, 0xC5	; 197
    17e4:	48 81       	ld	r20, Y
    17e6:	a8 52       	subi	r26, 0x28	; 40
    17e8:	b5 4c       	sbci	r27, 0xC5	; 197
    17ea:	4c 93       	st	X, r20
    17ec:	31 96       	adiw	r30, 0x01	; 1
    17ee:	e9 01       	movw	r28, r18
    17f0:	a8 81       	ld	r26, Y
    17f2:	b0 e0       	ldi	r27, 0x00	; 0
    17f4:	c0 81       	ld	r28, Z
    17f6:	d0 e0       	ldi	r29, 0x00	; 0
    17f8:	c8 52       	subi	r28, 0x28	; 40
    17fa:	d5 4c       	sbci	r29, 0xC5	; 197
    17fc:	28 81       	ld	r18, Y
    17fe:	a8 52       	subi	r26, 0x28	; 40
    1800:	b5 4c       	sbci	r27, 0xC5	; 197
    1802:	2c 93       	st	X, r18
    1804:	8e 17       	cp	r24, r30
    1806:	9f 07       	cpc	r25, r31
    1808:	31 f7       	brne	.-52     	; 0x17d6 <GenerateBlinks+0x250>
    180a:	c0 91 43 bf 	lds	r28, 0xBF43	; 0x80bf43 <__bss_end+0x841c>
    180e:	d0 e0       	ldi	r29, 0x00	; 0
    1810:	2f dc       	rcall	.-1954   	; 0x1070 <lfsr>
    1812:	81 3e       	cpi	r24, 0xE1	; 225
    1814:	18 f0       	brcs	.+6      	; 0x181c <GenerateBlinks+0x296>
    1816:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    181a:	01 c0       	rjmp	.+2      	; 0x181e <GenerateBlinks+0x298>
    181c:	80 e0       	ldi	r24, 0x00	; 0
    181e:	c8 52       	subi	r28, 0x28	; 40
    1820:	d5 4c       	sbci	r29, 0xC5	; 197
    1822:	88 83       	st	Y, r24
    1824:	c0 91 3e bf 	lds	r28, 0xBF3E	; 0x80bf3e <__bss_end+0x8417>
    1828:	d0 e0       	ldi	r29, 0x00	; 0
    182a:	22 dc       	rcall	.-1980   	; 0x1070 <lfsr>
    182c:	81 3e       	cpi	r24, 0xE1	; 225
    182e:	18 f0       	brcs	.+6      	; 0x1836 <GenerateBlinks+0x2b0>
    1830:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1834:	01 c0       	rjmp	.+2      	; 0x1838 <GenerateBlinks+0x2b2>
    1836:	80 e0       	ldi	r24, 0x00	; 0
    1838:	c8 52       	subi	r28, 0x28	; 40
    183a:	d5 4c       	sbci	r29, 0xC5	; 197
    183c:	88 83       	st	Y, r24
    183e:	cd b7       	in	r28, 0x3d	; 61
    1840:	de b7       	in	r29, 0x3e	; 62
    1842:	e8 e0       	ldi	r30, 0x08	; 8
    1844:	0c 94 7d 1f 	jmp	0x3efa	; 0x3efa <__epilogue_restores__+0x14>

00001848 <FadeOut>:
    1848:	80 95       	com	r24
    184a:	20 91 54 38 	lds	r18, 0x3854	; 0x803854 <fastTicker>
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	87 70       	andi	r24, 0x07	; 7
    1852:	a9 01       	movw	r20, r18
    1854:	02 c0       	rjmp	.+4      	; 0x185a <FadeOut+0x12>
    1856:	55 95       	asr	r21
    1858:	47 95       	ror	r20
    185a:	8a 95       	dec	r24
    185c:	e2 f7       	brpl	.-8      	; 0x1856 <FadeOut+0xe>
    185e:	ca 01       	movw	r24, r20
    1860:	44 23       	and	r20, r20
    1862:	01 f1       	breq	.+64     	; 0x18a4 <FadeOut+0x5c>
    1864:	30 91 ca 3a 	lds	r19, 0x3ACA	; 0x803aca <auVolume>
    1868:	43 17       	cp	r20, r19
    186a:	30 f4       	brcc	.+12     	; 0x1878 <FadeOut+0x30>
    186c:	90 91 ca 3a 	lds	r25, 0x3ACA	; 0x803aca <auVolume>
    1870:	98 1b       	sub	r25, r24
    1872:	90 93 ca 3a 	sts	0x3ACA, r25	; 0x803aca <auVolume>
    1876:	14 c0       	rjmp	.+40     	; 0x18a0 <FadeOut+0x58>
    1878:	10 92 ca 3a 	sts	0x3ACA, r1	; 0x803aca <auVolume>
    187c:	66 23       	and	r22, r22
    187e:	81 f0       	breq	.+32     	; 0x18a0 <FadeOut+0x58>
    1880:	89 e4       	ldi	r24, 0x49	; 73
    1882:	98 e3       	ldi	r25, 0x38	; 56
    1884:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    1888:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
    188c:	80 91 4a 38 	lds	r24, 0x384A	; 0x80384a <effect>
    1890:	90 91 4b 38 	lds	r25, 0x384B	; 0x80384b <effect+0x1>
    1894:	8f 71       	andi	r24, 0x1F	; 31
    1896:	99 27       	eor	r25, r25
    1898:	80 93 4a 38 	sts	0x384A, r24	; 0x80384a <effect>
    189c:	90 93 4b 38 	sts	0x384B, r25	; 0x80384b <effect+0x1>
    18a0:	10 92 54 38 	sts	0x3854, r1	; 0x803854 <fastTicker>
    18a4:	08 95       	ret

000018a6 <GenerateAudio>:

//This is the audio routine, it's magic!
uint8_t GenerateAudio(){
    18a6:	0f 93       	push	r16
    18a8:	1f 93       	push	r17
    18aa:	cf 93       	push	r28
    18ac:	df 93       	push	r29
    static uint8_t start = 0;
    static uint8_t duration;

    //Headphones detected?
    if (auIn < HPLVL) {
    18ae:	80 91 d7 3a 	lds	r24, 0x3AD7	; 0x803ad7 <auIn>
    18b2:	89 31       	cpi	r24, 0x19	; 25
    18b4:	08 f0       	brcs	.+2      	; 0x18b8 <GenerateAudio+0x12>
    18b6:	ca c1       	rjmp	.+916    	; 0x1c4c <GenerateAudio+0x3a6>

        detHdPh = 1;
    18b8:	c1 e0       	ldi	r28, 0x01	; 1
    18ba:	c0 93 d4 3a 	sts	0x3AD4, r28	; 0x803ad4 <detHdPh>

        //Audio for text adventure
        if ((effect&0xff00)==0) {
    18be:	80 91 4a 38 	lds	r24, 0x384A	; 0x80384a <effect>
    18c2:	90 91 4b 38 	lds	r25, 0x384B	; 0x80384b <effect+0x1>
    18c6:	88 27       	eor	r24, r24
    18c8:	89 2b       	or	r24, r25
    18ca:	09 f0       	breq	.+2      	; 0x18ce <GenerateAudio+0x28>
    18cc:	75 c1       	rjmp	.+746    	; 0x1bb8 <GenerateAudio+0x312>
        
            //Silence, I kill u
            if ((effect&0xE0)==0){
    18ce:	80 91 4a 38 	lds	r24, 0x384A	; 0x80384a <effect>
    18d2:	90 91 4b 38 	lds	r25, 0x384B	; 0x80384b <effect+0x1>
    18d6:	80 7e       	andi	r24, 0xE0	; 224
    18d8:	99 27       	eor	r25, r25
    18da:	89 2b       	or	r24, r25
    18dc:	39 f4       	brne	.+14     	; 0x18ec <GenerateAudio+0x46>
                auRepAddr = &zero;
    18de:	89 e4       	ldi	r24, 0x49	; 73
    18e0:	98 e3       	ldi	r25, 0x38	; 56
    18e2:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    18e6:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
    18ea:	63 c1       	rjmp	.+710    	; 0x1bb2 <GenerateAudio+0x30c>
                start = 0;
            }

            //Bad answer (buzzer, also used in other games)
            else if ((effect&0xE0)==32){
    18ec:	80 91 4a 38 	lds	r24, 0x384A	; 0x80384a <effect>
    18f0:	90 91 4b 38 	lds	r25, 0x384B	; 0x80384b <effect+0x1>
    18f4:	80 7e       	andi	r24, 0xE0	; 224
    18f6:	99 27       	eor	r25, r25
    18f8:	80 97       	sbiw	r24, 0x20	; 32
    18fa:	61 f5       	brne	.+88     	; 0x1954 <GenerateAudio+0xae>
                static uint8_t auBuffer[17] = {1, 255, 128, 128, 192, 255, 64, 255, 192, 128, 64, 1, 192, 1, 64, 128, 0}; 
                auBuffer[2] = floatAround(0x80, 5, 0x01, 0x00);
    18fc:	20 e0       	ldi	r18, 0x00	; 0
    18fe:	41 e0       	ldi	r20, 0x01	; 1
    1900:	65 e0       	ldi	r22, 0x05	; 5
    1902:	80 e8       	ldi	r24, 0x80	; 128
    1904:	02 dc       	rcall	.-2044   	; 0x110a <floatAround>
    1906:	80 93 25 38 	sts	0x3825, r24	; 0x803825 <auBuffer.4058+0x2>

                if (start == 0) {
    190a:	80 91 68 38 	lds	r24, 0x3868	; 0x803868 <start.4056>
    190e:	81 11       	cpse	r24, r1
    1910:	14 c0       	rjmp	.+40     	; 0x193a <GenerateAudio+0x94>
}

//Play a sample 
uint8_t Play(uint8_t * auBuffer, uint8_t repeat, uint16_t pitch, uint8_t volume)
{
    TCB1_CCMP = pitch;
    1912:	80 e0       	ldi	r24, 0x00	; 0
    1914:	91 e2       	ldi	r25, 0x21	; 33
    1916:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    191a:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
    if (repeat) auRepAddr = auBuffer;
    191e:	83 e2       	ldi	r24, 0x23	; 35
    1920:	98 e3       	ldi	r25, 0x38	; 56
    1922:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    1926:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
    else auSmpAddr = auBuffer;
    auVolume = volume;
    192a:	8f ef       	ldi	r24, 0xFF	; 255
    192c:	80 93 ca 3a 	sts	0x3ACA, r24	; 0x803aca <auVolume>
            else if ((effect&0xE0)==32){
                static uint8_t auBuffer[17] = {1, 255, 128, 128, 192, 255, 64, 255, 192, 128, 64, 1, 192, 1, 64, 128, 0}; 
                auBuffer[2] = floatAround(0x80, 5, 0x01, 0x00);

                if (start == 0) {
                    start = Play(&auBuffer[0], 1, 0x2100, 0xff);
    1930:	c0 93 68 38 	sts	0x3868, r28	; 0x803868 <start.4056>
                    duration = 8;
    1934:	88 e0       	ldi	r24, 0x08	; 8
    1936:	80 93 67 38 	sts	0x3867, r24	; 0x803867 <duration.4057>
                }

                if (duration == 0) FadeOut(4, start);
    193a:	80 91 67 38 	lds	r24, 0x3867	; 0x803867 <duration.4057>
    193e:	81 11       	cpse	r24, r1
    1940:	04 c0       	rjmp	.+8      	; 0x194a <GenerateAudio+0xa4>
    1942:	60 91 68 38 	lds	r22, 0x3868	; 0x803868 <start.4056>
    1946:	84 e0       	ldi	r24, 0x04	; 4
    1948:	7f df       	rcall	.-258    	; 0x1848 <FadeOut>
                floatSpeed(1, 0x2000, 0x2200);
    194a:	40 e0       	ldi	r20, 0x00	; 0
    194c:	52 e2       	ldi	r21, 0x22	; 34
    194e:	60 e0       	ldi	r22, 0x00	; 0
    1950:	70 e2       	ldi	r23, 0x20	; 32
    1952:	79 c1       	rjmp	.+754    	; 0x1c46 <GenerateAudio+0x3a0>
            }

            //Good (bell)
            else if ((effect&0xE0)==64){   //64
    1954:	80 91 4a 38 	lds	r24, 0x384A	; 0x80384a <effect>
    1958:	90 91 4b 38 	lds	r25, 0x384B	; 0x80384b <effect+0x1>
    195c:	80 7e       	andi	r24, 0xE0	; 224
    195e:	99 27       	eor	r25, r25
    1960:	80 34       	cpi	r24, 0x40	; 64
    1962:	91 05       	cpc	r25, r1
    1964:	c1 f5       	brne	.+112    	; 0x19d6 <GenerateAudio+0x130>
                static uint8_t auBuffer[3] = {255, 1, 0};

                if (start == 0) {
    1966:	80 91 68 38 	lds	r24, 0x3868	; 0x803868 <start.4056>
    196a:	81 11       	cpse	r24, r1
    196c:	14 c0       	rjmp	.+40     	; 0x1996 <GenerateAudio+0xf0>
}

//Play a sample 
uint8_t Play(uint8_t * auBuffer, uint8_t repeat, uint16_t pitch, uint8_t volume)
{
    TCB1_CCMP = pitch;
    196e:	80 e0       	ldi	r24, 0x00	; 0
    1970:	9a e0       	ldi	r25, 0x0A	; 10
    1972:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    1976:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
    if (repeat) auRepAddr = auBuffer;
    197a:	80 e2       	ldi	r24, 0x20	; 32
    197c:	98 e3       	ldi	r25, 0x38	; 56
    197e:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    1982:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
    else auSmpAddr = auBuffer;
    auVolume = volume;
    1986:	8f ef       	ldi	r24, 0xFF	; 255
    1988:	80 93 ca 3a 	sts	0x3ACA, r24	; 0x803aca <auVolume>
            //Good (bell)
            else if ((effect&0xE0)==64){   //64
                static uint8_t auBuffer[3] = {255, 1, 0};

                if (start == 0) {
                    start = Play(&auBuffer[0], 1, 0x0a00, 0xff);
    198c:	c0 93 68 38 	sts	0x3868, r28	; 0x803868 <start.4056>
                    duration = 6;
    1990:	86 e0       	ldi	r24, 0x06	; 6
    1992:	80 93 67 38 	sts	0x3867, r24	; 0x803867 <duration.4057>
                }

                if (duration == 0) FadeOut(4, start);
    1996:	80 91 67 38 	lds	r24, 0x3867	; 0x803867 <duration.4057>
    199a:	81 11       	cpse	r24, r1
    199c:	04 c0       	rjmp	.+8      	; 0x19a6 <GenerateAudio+0x100>
    199e:	60 91 68 38 	lds	r22, 0x3868	; 0x803868 <start.4056>
    19a2:	84 e0       	ldi	r24, 0x04	; 4
    19a4:	51 df       	rcall	.-350    	; 0x1848 <FadeOut>
                if (buttonMark){
    19a6:	80 91 52 38 	lds	r24, 0x3852	; 0x803852 <buttonMark>
    19aa:	88 23       	and	r24, r24
    19ac:	09 f4       	brne	.+2      	; 0x19b0 <GenerateAudio+0x10a>
    19ae:	50 c1       	rjmp	.+672    	; 0x1c50 <GenerateAudio+0x3aa>
                    TCB1_CCMP -= 0x080;                    
    19b0:	80 91 5c 0a 	lds	r24, 0x0A5C	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    19b4:	90 91 5d 0a 	lds	r25, 0x0A5D	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
    19b8:	80 58       	subi	r24, 0x80	; 128
    19ba:	91 09       	sbc	r25, r1
    19bc:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    19c0:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
                    if (auVolume == 0) effect = 0;
    19c4:	80 91 ca 3a 	lds	r24, 0x3ACA	; 0x803aca <auVolume>
    19c8:	81 11       	cpse	r24, r1
    19ca:	42 c1       	rjmp	.+644    	; 0x1c50 <GenerateAudio+0x3aa>
    19cc:	10 92 4a 38 	sts	0x384A, r1	; 0x80384a <effect>
    19d0:	10 92 4b 38 	sts	0x384B, r1	; 0x80384b <effect+0x1>
    19d4:	3d c1       	rjmp	.+634    	; 0x1c50 <GenerateAudio+0x3aa>
                }
            }

            //Rain storm with whistling wind and ghostly 
            else if (((effect&0xE0)==128)||((effect&0xE0)==96)){
    19d6:	80 91 4a 38 	lds	r24, 0x384A	; 0x80384a <effect>
    19da:	90 91 4b 38 	lds	r25, 0x384B	; 0x80384b <effect+0x1>
    19de:	80 7e       	andi	r24, 0xE0	; 224
    19e0:	99 27       	eor	r25, r25
    19e2:	80 38       	cpi	r24, 0x80	; 128
    19e4:	91 05       	cpc	r25, r1
    19e6:	51 f0       	breq	.+20     	; 0x19fc <GenerateAudio+0x156>
    19e8:	80 91 4a 38 	lds	r24, 0x384A	; 0x80384a <effect>
    19ec:	90 91 4b 38 	lds	r25, 0x384B	; 0x80384b <effect+0x1>
    19f0:	80 7e       	andi	r24, 0xE0	; 224
    19f2:	99 27       	eor	r25, r25
    19f4:	80 36       	cpi	r24, 0x60	; 96
    19f6:	91 05       	cpc	r25, r1
    19f8:	09 f0       	breq	.+2      	; 0x19fc <GenerateAudio+0x156>
    19fa:	55 c0       	rjmp	.+170    	; 0x1aa6 <GenerateAudio+0x200>
                static uint8_t auBuffer[7];
                auBuffer[6]= 0;        
    19fc:	10 92 66 38 	sts	0x3866, r1	; 0x803866 <auBuffer.4060+0x6>
                auRepAddr = &auBuffer[0];
    1a00:	80 e6       	ldi	r24, 0x60	; 96
    1a02:	98 e3       	ldi	r25, 0x38	; 56
    1a04:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    1a08:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
    1a0c:	8c 01       	movw	r16, r24

                //Noise is to be generated fast, outside of buttonMark loop
                for (uint8_t x=1; x<6; ++x){
    1a0e:	c1 e0       	ldi	r28, 0x01	; 1
                    if ((x>0) && (x!=3)) {
                        auBuffer[x] = floatAround(0x80, 6-((effect&0xa0)>>5), 0x01, 0x00);
    1a10:	d6 e0       	ldi	r29, 0x06	; 6
                auBuffer[6]= 0;        
                auRepAddr = &auBuffer[0];

                //Noise is to be generated fast, outside of buttonMark loop
                for (uint8_t x=1; x<6; ++x){
                    if ((x>0) && (x!=3)) {
    1a12:	c3 30       	cpi	r28, 0x03	; 3
    1a14:	99 f0       	breq	.+38     	; 0x1a3c <GenerateAudio+0x196>
                        auBuffer[x] = floatAround(0x80, 6-((effect&0xa0)>>5), 0x01, 0x00);
    1a16:	80 91 4a 38 	lds	r24, 0x384A	; 0x80384a <effect>
    1a1a:	90 91 4b 38 	lds	r25, 0x384B	; 0x80384b <effect+0x1>
    1a1e:	80 7a       	andi	r24, 0xA0	; 160
    1a20:	99 27       	eor	r25, r25
    1a22:	35 e0       	ldi	r19, 0x05	; 5
    1a24:	96 95       	lsr	r25
    1a26:	87 95       	ror	r24
    1a28:	3a 95       	dec	r19
    1a2a:	e1 f7       	brne	.-8      	; 0x1a24 <GenerateAudio+0x17e>
    1a2c:	6d 2f       	mov	r22, r29
    1a2e:	68 1b       	sub	r22, r24
    1a30:	20 e0       	ldi	r18, 0x00	; 0
    1a32:	41 e0       	ldi	r20, 0x01	; 1
    1a34:	80 e8       	ldi	r24, 0x80	; 128
    1a36:	69 db       	rcall	.-2350   	; 0x110a <floatAround>
    1a38:	f8 01       	movw	r30, r16
    1a3a:	81 83       	std	Z+1, r24	; 0x01
                static uint8_t auBuffer[7];
                auBuffer[6]= 0;        
                auRepAddr = &auBuffer[0];

                //Noise is to be generated fast, outside of buttonMark loop
                for (uint8_t x=1; x<6; ++x){
    1a3c:	cf 5f       	subi	r28, 0xFF	; 255
    1a3e:	0f 5f       	subi	r16, 0xFF	; 255
    1a40:	1f 4f       	sbci	r17, 0xFF	; 255
    1a42:	c6 30       	cpi	r28, 0x06	; 6
    1a44:	31 f7       	brne	.-52     	; 0x1a12 <GenerateAudio+0x16c>
                    if ((x>0) && (x!=3)) {
                        auBuffer[x] = floatAround(0x80, 6-((effect&0xa0)>>5), 0x01, 0x00);
                    }
                }

                if (buttonMark){
    1a46:	80 91 52 38 	lds	r24, 0x3852	; 0x803852 <buttonMark>
    1a4a:	88 23       	and	r24, r24
    1a4c:	09 f4       	brne	.+2      	; 0x1a50 <GenerateAudio+0x1aa>
    1a4e:	00 c1       	rjmp	.+512    	; 0x1c50 <GenerateAudio+0x3aa>
                    //"Floating" speed for howl (and noise, but that's hardly audible)
                    if (effect & 128) floatSpeed(6, 0x0800, 0x2000); 
    1a50:	80 91 4a 38 	lds	r24, 0x384A	; 0x80384a <effect>
    1a54:	90 91 4b 38 	lds	r25, 0x384B	; 0x80384b <effect+0x1>
    1a58:	87 ff       	sbrs	r24, 7
    1a5a:	06 c0       	rjmp	.+12     	; 0x1a68 <GenerateAudio+0x1c2>
    1a5c:	40 e0       	ldi	r20, 0x00	; 0
    1a5e:	50 e2       	ldi	r21, 0x20	; 32
    1a60:	60 e0       	ldi	r22, 0x00	; 0
    1a62:	78 e0       	ldi	r23, 0x08	; 8
    1a64:	86 e0       	ldi	r24, 0x06	; 6
    1a66:	05 c0       	rjmp	.+10     	; 0x1a72 <GenerateAudio+0x1cc>
                    else              floatSpeed(5, 0x0280, 0x0400);
    1a68:	40 e0       	ldi	r20, 0x00	; 0
    1a6a:	54 e0       	ldi	r21, 0x04	; 4
    1a6c:	60 e8       	ldi	r22, 0x80	; 128
    1a6e:	72 e0       	ldi	r23, 0x02	; 2
    1a70:	85 e0       	ldi	r24, 0x05	; 5
    1a72:	1d db       	rcall	.-2502   	; 0x10ae <floatSpeed>
            
                    //"Floating" volume and wind howl during 8 bit rainstorm needs some randomness
                    auVolume = floatAround(auVolume, 2, 0x10, 0xA0);
    1a74:	80 91 ca 3a 	lds	r24, 0x3ACA	; 0x803aca <auVolume>
    1a78:	20 ea       	ldi	r18, 0xA0	; 160
    1a7a:	40 e1       	ldi	r20, 0x10	; 16
    1a7c:	62 e0       	ldi	r22, 0x02	; 2
    1a7e:	45 db       	rcall	.-2422   	; 0x110a <floatAround>
    1a80:	80 93 ca 3a 	sts	0x3ACA, r24	; 0x803aca <auVolume>
                    auBuffer[0] = floatAround(auBuffer[0], 2, 0xD0-effect, 0x90);
    1a84:	80 91 4a 38 	lds	r24, 0x384A	; 0x80384a <effect>
    1a88:	90 91 4b 38 	lds	r25, 0x384B	; 0x80384b <effect+0x1>
    1a8c:	40 ed       	ldi	r20, 0xD0	; 208
    1a8e:	48 1b       	sub	r20, r24
    1a90:	20 e9       	ldi	r18, 0x90	; 144
    1a92:	62 e0       	ldi	r22, 0x02	; 2
    1a94:	80 91 60 38 	lds	r24, 0x3860	; 0x803860 <auBuffer.4060>
    1a98:	38 db       	rcall	.-2448   	; 0x110a <floatAround>
    1a9a:	80 93 60 38 	sts	0x3860, r24	; 0x803860 <auBuffer.4060>
                    auBuffer[3] = 0xFF-auBuffer[0];  //Inverse value of wind[0] produces a whistle
    1a9e:	80 95       	com	r24
    1aa0:	80 93 63 38 	sts	0x3863, r24	; 0x803863 <auBuffer.4060+0x3>
    1aa4:	d5 c0       	rjmp	.+426    	; 0x1c50 <GenerateAudio+0x3aa>
                }
            }

            //AAAhhhh failed sound effect, too tired...
            else if ((effect&0xE0)==192){ //128//192
    1aa6:	80 91 4a 38 	lds	r24, 0x384A	; 0x80384a <effect>
    1aaa:	90 91 4b 38 	lds	r25, 0x384B	; 0x80384b <effect+0x1>
    1aae:	80 7e       	andi	r24, 0xE0	; 224
    1ab0:	99 27       	eor	r25, r25
    1ab2:	80 3c       	cpi	r24, 0xC0	; 192
    1ab4:	91 05       	cpc	r25, r1
    1ab6:	09 f4       	brne	.+2      	; 0x1aba <GenerateAudio+0x214>
    1ab8:	cb c0       	rjmp	.+406    	; 0x1c50 <GenerateAudio+0x3aa>
                FadeOut(1, start);         
                */
            }

            //Bleeps
            else if ((effect&0xE0)==160){
    1aba:	80 91 4a 38 	lds	r24, 0x384A	; 0x80384a <effect>
    1abe:	90 91 4b 38 	lds	r25, 0x384B	; 0x80384b <effect+0x1>
    1ac2:	80 7e       	andi	r24, 0xE0	; 224
    1ac4:	99 27       	eor	r25, r25
    1ac6:	80 3a       	cpi	r24, 0xA0	; 160
    1ac8:	91 05       	cpc	r25, r1
    1aca:	81 f5       	brne	.+96     	; 0x1b2c <GenerateAudio+0x286>
                static uint8_t auBuffer[6] = {255, 192, 128, 64 ,1 ,0};
                
                start = Play(&auBuffer[0], 1, TCB1_CCMP, auVolume);
    1acc:	80 91 ca 3a 	lds	r24, 0x3ACA	; 0x803aca <auVolume>
    1ad0:	20 91 5c 0a 	lds	r18, 0x0A5C	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    1ad4:	30 91 5d 0a 	lds	r19, 0x0A5D	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
}

//Play a sample 
uint8_t Play(uint8_t * auBuffer, uint8_t repeat, uint16_t pitch, uint8_t volume)
{
    TCB1_CCMP = pitch;
    1ad8:	20 93 5c 0a 	sts	0x0A5C, r18	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    1adc:	30 93 5d 0a 	sts	0x0A5D, r19	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
    if (repeat) auRepAddr = auBuffer;
    1ae0:	2a e1       	ldi	r18, 0x1A	; 26
    1ae2:	38 e3       	ldi	r19, 0x38	; 56
    1ae4:	20 93 03 38 	sts	0x3803, r18	; 0x803803 <auRepAddr>
    1ae8:	30 93 04 38 	sts	0x3804, r19	; 0x803804 <auRepAddr+0x1>
    else auSmpAddr = auBuffer;
    auVolume = volume;
    1aec:	80 93 ca 3a 	sts	0x3ACA, r24	; 0x803aca <auVolume>

            //Bleeps
            else if ((effect&0xE0)==160){
                static uint8_t auBuffer[6] = {255, 192, 128, 64 ,1 ,0};
                
                start = Play(&auBuffer[0], 1, TCB1_CCMP, auVolume);
    1af0:	c0 93 68 38 	sts	0x3868, r28	; 0x803868 <start.4056>

                FadeOut(0, start);
    1af4:	61 e0       	ldi	r22, 0x01	; 1
    1af6:	80 e0       	ldi	r24, 0x00	; 0
                if (buttonMark){
    1af8:	a7 de       	rcall	.-690    	; 0x1848 <FadeOut>
    1afa:	80 91 52 38 	lds	r24, 0x3852	; 0x803852 <buttonMark>
    1afe:	88 23       	and	r24, r24
    1b00:	09 f4       	brne	.+2      	; 0x1b04 <GenerateAudio+0x25e>
                    TCB1_CCMP = 0x0400 + (lfsr()<<5);
    1b02:	a6 c0       	rjmp	.+332    	; 0x1c50 <GenerateAudio+0x3aa>
    1b04:	b5 da       	rcall	.-2710   	; 0x1070 <lfsr>
    1b06:	f0 e2       	ldi	r31, 0x20	; 32
    1b08:	8f 9f       	mul	r24, r31
    1b0a:	c0 01       	movw	r24, r0
    1b0c:	11 24       	eor	r1, r1
    1b0e:	9c 5f       	subi	r25, 0xFC	; 252
    1b10:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    1b14:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
    1b18:	ca e1       	ldi	r28, 0x1A	; 26
                    for(uint8_t x=0; x<5; ++x){
                        auBuffer[x]=lfsr()|0x01;
    1b1a:	d8 e3       	ldi	r29, 0x38	; 56
    1b1c:	a9 da       	rcall	.-2734   	; 0x1070 <lfsr>
    1b1e:	81 60       	ori	r24, 0x01	; 1
    1b20:	89 93       	st	Y+, r24
                start = Play(&auBuffer[0], 1, TCB1_CCMP, auVolume);

                FadeOut(0, start);
                if (buttonMark){
                    TCB1_CCMP = 0x0400 + (lfsr()<<5);
                    for(uint8_t x=0; x<5; ++x){
    1b22:	28 e3       	ldi	r18, 0x38	; 56
    1b24:	cf 31       	cpi	r28, 0x1F	; 31
    1b26:	d2 07       	cpc	r29, r18
    1b28:	c9 f7       	brne	.-14     	; 0x1b1c <GenerateAudio+0x276>
    1b2a:	92 c0       	rjmp	.+292    	; 0x1c50 <GenerateAudio+0x3aa>
                    }
                }
            }

            //Footsteps
            else if ((effect&0xE0)==224){//224){
    1b2c:	80 91 4a 38 	lds	r24, 0x384A	; 0x80384a <effect>
    1b30:	90 91 4b 38 	lds	r25, 0x384B	; 0x80384b <effect+0x1>
    1b34:	80 7e       	andi	r24, 0xE0	; 224
    1b36:	99 27       	eor	r25, r25
    1b38:	80 3e       	cpi	r24, 0xE0	; 224
    1b3a:	91 05       	cpc	r25, r1
    1b3c:	09 f0       	breq	.+2      	; 0x1b40 <GenerateAudio+0x29a>
    1b3e:	88 c0       	rjmp	.+272    	; 0x1c50 <GenerateAudio+0x3aa>
                static uint8_t auBuffer[8] = {64, 200, 240, 128, 64, 32, 16, 0};
                static uint8_t interval = 6;

                
                if (start == 0) {
    1b40:	80 91 68 38 	lds	r24, 0x3868	; 0x803868 <start.4056>
    1b44:	81 11       	cpse	r24, r1
    1b46:	19 c0       	rjmp	.+50     	; 0x1b7a <GenerateAudio+0x2d4>
                    auRepAddr = &auBuffer[6];
    1b48:	88 e1       	ldi	r24, 0x18	; 24
    1b4a:	98 e3       	ldi	r25, 0x38	; 56
    1b4c:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    1b50:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
                    start = Play(&auBuffer[0], 0, 0x6000, auVolume);
    1b54:	80 91 ca 3a 	lds	r24, 0x3ACA	; 0x803aca <auVolume>
}

//Play a sample 
uint8_t Play(uint8_t * auBuffer, uint8_t repeat, uint16_t pitch, uint8_t volume)
{
    TCB1_CCMP = pitch;
    1b58:	20 e0       	ldi	r18, 0x00	; 0
    1b5a:	30 e6       	ldi	r19, 0x60	; 96
    1b5c:	20 93 5c 0a 	sts	0x0A5C, r18	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    1b60:	30 93 5d 0a 	sts	0x0A5D, r19	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
    if (repeat) auRepAddr = auBuffer;
    else auSmpAddr = auBuffer;
    1b64:	22 e1       	ldi	r18, 0x12	; 18
    1b66:	38 e3       	ldi	r19, 0x38	; 56
    1b68:	20 93 05 38 	sts	0x3805, r18	; 0x803805 <auSmpAddr>
    1b6c:	30 93 06 38 	sts	0x3806, r19	; 0x803806 <auSmpAddr+0x1>
    auVolume = volume;
    1b70:	80 93 ca 3a 	sts	0x3ACA, r24	; 0x803aca <auVolume>
                static uint8_t interval = 6;

                
                if (start == 0) {
                    auRepAddr = &auBuffer[6];
                    start = Play(&auBuffer[0], 0, 0x6000, auVolume);
    1b74:	81 e0       	ldi	r24, 0x01	; 1
    1b76:	80 93 68 38 	sts	0x3868, r24	; 0x803868 <start.4056>
                }

                FadeOut(0, start);
    1b7a:	60 91 68 38 	lds	r22, 0x3868	; 0x803868 <start.4056>
    1b7e:	80 e0       	ldi	r24, 0x00	; 0
    1b80:	63 de       	rcall	.-826    	; 0x1848 <FadeOut>
                if (buttonMark){
    1b82:	80 91 52 38 	lds	r24, 0x3852	; 0x803852 <buttonMark>
    1b86:	88 23       	and	r24, r24
    1b88:	09 f4       	brne	.+2      	; 0x1b8c <GenerateAudio+0x2e6>
    1b8a:	62 c0       	rjmp	.+196    	; 0x1c50 <GenerateAudio+0x3aa>
                    --interval;
    1b8c:	80 91 11 38 	lds	r24, 0x3811	; 0x803811 <interval.4071>
    1b90:	81 50       	subi	r24, 0x01	; 1
    1b92:	80 93 11 38 	sts	0x3811, r24	; 0x803811 <interval.4071>
                    if (interval == 0){
    1b96:	81 11       	cpse	r24, r1
    1b98:	5b c0       	rjmp	.+182    	; 0x1c50 <GenerateAudio+0x3aa>
                        TCB1_CCMP += 0x0300;
    1b9a:	80 91 5c 0a 	lds	r24, 0x0A5C	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    1b9e:	90 91 5d 0a 	lds	r25, 0x0A5D	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
    1ba2:	9d 5f       	subi	r25, 0xFD	; 253
    1ba4:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    1ba8:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
                        interval = 6;
    1bac:	86 e0       	ldi	r24, 0x06	; 6
    1bae:	80 93 11 38 	sts	0x3811, r24	; 0x803811 <interval.4071>
                        start = 0;
    1bb2:	10 92 68 38 	sts	0x3868, r1	; 0x803868 <start.4056>
    1bb6:	4c c0       	rjmp	.+152    	; 0x1c50 <GenerateAudio+0x3aa>
                    }
                }
            }

        } else if ((effect&0xff00)==0x0100) {
    1bb8:	80 91 4a 38 	lds	r24, 0x384A	; 0x80384a <effect>
    1bbc:	90 91 4b 38 	lds	r25, 0x384B	; 0x80384b <effect+0x1>
    1bc0:	88 27       	eor	r24, r24
    1bc2:	81 15       	cp	r24, r1
    1bc4:	91 40       	sbci	r25, 0x01	; 1
    1bc6:	09 f0       	breq	.+2      	; 0x1bca <GenerateAudio+0x324>
    1bc8:	43 c0       	rjmp	.+134    	; 0x1c50 <GenerateAudio+0x3aa>
            if ((effect&0xE0) <= 0x90) {
    1bca:	80 91 4a 38 	lds	r24, 0x384A	; 0x80384a <effect>
    1bce:	90 91 4b 38 	lds	r25, 0x384B	; 0x80384b <effect+0x1>
    1bd2:	80 7e       	andi	r24, 0xE0	; 224
    1bd4:	99 27       	eor	r25, r25
    1bd6:	81 39       	cpi	r24, 0x91	; 145
    1bd8:	91 05       	cpc	r25, r1
    1bda:	d0 f5       	brcc	.+116    	; 0x1c50 <GenerateAudio+0x3aa>
                
                static uint8_t auBuffer[3] = {255, 1, 0};
                static uint16_t freq;

                if (start == 0) {
    1bdc:	80 91 68 38 	lds	r24, 0x3868	; 0x803868 <start.4056>
    1be0:	81 11       	cpse	r24, r1
    1be2:	22 c0       	rjmp	.+68     	; 0x1c28 <GenerateAudio+0x382>
                    freq = ((effect&0xE0)+1)<<6;
    1be4:	80 91 4a 38 	lds	r24, 0x384A	; 0x80384a <effect>
    1be8:	90 91 4b 38 	lds	r25, 0x384B	; 0x80384b <effect+0x1>
    1bec:	80 7e       	andi	r24, 0xE0	; 224
    1bee:	99 27       	eor	r25, r25
    1bf0:	01 96       	adiw	r24, 0x01	; 1
    1bf2:	26 e0       	ldi	r18, 0x06	; 6
    1bf4:	88 0f       	add	r24, r24
    1bf6:	99 1f       	adc	r25, r25
    1bf8:	2a 95       	dec	r18
    1bfa:	e1 f7       	brne	.-8      	; 0x1bf4 <GenerateAudio+0x34e>
    1bfc:	80 93 5e 38 	sts	0x385E, r24	; 0x80385e <freq.4073>
    1c00:	90 93 5f 38 	sts	0x385F, r25	; 0x80385f <freq.4073+0x1>
}

//Play a sample 
uint8_t Play(uint8_t * auBuffer, uint8_t repeat, uint16_t pitch, uint8_t volume)
{
    TCB1_CCMP = pitch;
    1c04:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    1c08:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
    if (repeat) auRepAddr = auBuffer;
    1c0c:	8e e0       	ldi	r24, 0x0E	; 14
    1c0e:	98 e3       	ldi	r25, 0x38	; 56
    1c10:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    1c14:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
    else auSmpAddr = auBuffer;
    auVolume = volume;
    1c18:	8f ef       	ldi	r24, 0xFF	; 255
    1c1a:	80 93 ca 3a 	sts	0x3ACA, r24	; 0x803aca <auVolume>
                static uint8_t auBuffer[3] = {255, 1, 0};
                static uint16_t freq;

                if (start == 0) {
                    freq = ((effect&0xE0)+1)<<6;
                    start = Play(&auBuffer[0], 1, freq, 0xff);
    1c1e:	c0 93 68 38 	sts	0x3868, r28	; 0x803868 <start.4056>
                    duration = 3;
    1c22:	83 e0       	ldi	r24, 0x03	; 3
    1c24:	80 93 67 38 	sts	0x3867, r24	; 0x803867 <duration.4057>
                }

                if (duration == 0) FadeOut(7, start);
    1c28:	80 91 67 38 	lds	r24, 0x3867	; 0x803867 <duration.4057>
    1c2c:	81 11       	cpse	r24, r1
    1c2e:	04 c0       	rjmp	.+8      	; 0x1c38 <GenerateAudio+0x392>
    1c30:	60 91 68 38 	lds	r22, 0x3868	; 0x803868 <start.4056>
    1c34:	87 e0       	ldi	r24, 0x07	; 7
                floatSpeed(1, freq+0x0200, freq+0x0300);
    1c36:	08 de       	rcall	.-1008   	; 0x1848 <FadeOut>
    1c38:	60 91 5e 38 	lds	r22, 0x385E	; 0x80385e <freq.4073>
    1c3c:	70 91 5f 38 	lds	r23, 0x385F	; 0x80385f <freq.4073+0x1>
    1c40:	ab 01       	movw	r20, r22
    1c42:	5d 5f       	subi	r21, 0xFD	; 253
    1c44:	7e 5f       	subi	r23, 0xFE	; 254
    1c46:	81 e0       	ldi	r24, 0x01	; 1
    1c48:	32 da       	rcall	.-2972   	; 0x10ae <floatSpeed>
    1c4a:	02 c0       	rjmp	.+4      	; 0x1c50 <GenerateAudio+0x3aa>
            }
        }

    //No headphone, output can do other things like trying to find another bagder.
    } else {
        detHdPh = 0;
    1c4c:	10 92 d4 3a 	sts	0x3AD4, r1	; 0x803ad4 <detHdPh>
    }

    //Buttonmark is used for timing slow things.
    if (buttonMark && duration) --duration;
    1c50:	80 91 52 38 	lds	r24, 0x3852	; 0x803852 <buttonMark>
    1c54:	88 23       	and	r24, r24
    1c56:	39 f0       	breq	.+14     	; 0x1c66 <GenerateAudio+0x3c0>
    1c58:	80 91 67 38 	lds	r24, 0x3867	; 0x803867 <duration.4057>
    1c5c:	88 23       	and	r24, r24
    1c5e:	19 f0       	breq	.+6      	; 0x1c66 <GenerateAudio+0x3c0>
    1c60:	81 50       	subi	r24, 0x01	; 1
    1c62:	80 93 67 38 	sts	0x3867, r24	; 0x803867 <duration.4057>

    return buttonMark;
    1c66:	80 91 52 38 	lds	r24, 0x3852	; 0x803852 <buttonMark>
}
    1c6a:	df 91       	pop	r29
    1c6c:	cf 91       	pop	r28
    1c6e:	1f 91       	pop	r17
    1c70:	0f 91       	pop	r16
    1c72:	08 95       	ret

00001c74 <getClock>:

//Tick, tock
uint16_t getClock() {
    uint16_t tmp = RTC_CNT;
    1c74:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
    1c78:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
    return 60 * minuteMark + (tmp>>9);
    1c7c:	20 91 53 38 	lds	r18, 0x3853	; 0x803853 <minuteMark>
    1c80:	89 2f       	mov	r24, r25
    1c82:	99 27       	eor	r25, r25
    1c84:	86 95       	lsr	r24
}
    1c86:	3c e3       	ldi	r19, 0x3C	; 60
    1c88:	23 9f       	mul	r18, r19
    1c8a:	80 0d       	add	r24, r0
    1c8c:	91 1d       	adc	r25, r1
    1c8e:	11 24       	eor	r1, r1
    1c90:	08 95       	ret

00001c92 <idleTimeout>:

//Timeout for going back to things and for repeating sequences
uint8_t idleTimeout(uint16_t lastActive, uint16_t maxIdle) {
    1c92:	0f 93       	push	r16
    1c94:	1f 93       	push	r17
    1c96:	cf 93       	push	r28
    1c98:	df 93       	push	r29
    1c9a:	8c 01       	movw	r16, r24
    1c9c:	eb 01       	movw	r28, r22
    uint16_t curClock;

    curClock = getClock();
    1c9e:	ea df       	rcall	.-44     	; 0x1c74 <getClock>
    1ca0:	9c 01       	movw	r18, r24
    if (curClock < lastActive)
    1ca2:	80 17       	cp	r24, r16
    1ca4:	91 07       	cpc	r25, r17
    1ca6:	08 f4       	brcc	.+2      	; 0x1caa <idleTimeout+0x18>
        curClock += 256 * 60;
    1ca8:	34 5c       	subi	r19, 0xC4	; 196

    return (curClock > (lastActive + maxIdle));
    1caa:	c0 0f       	add	r28, r16
    1cac:	d1 1f       	adc	r29, r17
    1cae:	81 e0       	ldi	r24, 0x01	; 1
    1cb0:	c2 17       	cp	r28, r18
    1cb2:	d3 07       	cpc	r29, r19
    1cb4:	08 f0       	brcs	.+2      	; 0x1cb8 <idleTimeout+0x26>
    1cb6:	80 e0       	ldi	r24, 0x00	; 0
}
    1cb8:	df 91       	pop	r29
    1cba:	cf 91       	pop	r28
    1cbc:	1f 91       	pop	r17
    1cbe:	0f 91       	pop	r16
    1cc0:	08 95       	ret

00001cc2 <SelfTest>:

//Checks the most important hardware features before starting up the first time.
uint8_t SelfTest(){
    1cc2:	a4 e0       	ldi	r26, 0x04	; 4
    1cc4:	b0 e0       	ldi	r27, 0x00	; 0
    1cc6:	e7 e6       	ldi	r30, 0x67	; 103
    1cc8:	fe e0       	ldi	r31, 0x0E	; 14
    1cca:	0c 94 63 1f 	jmp	0x3ec6	; 0x3ec6 <__prologue_saves__+0x12>
    uint8_t tstVal[4] = {0, 0, 0, 0};
    1cce:	19 82       	std	Y+1, r1	; 0x01
    1cd0:	1a 82       	std	Y+2, r1	; 0x02
    1cd2:	1b 82       	std	Y+3, r1	; 0x03
    1cd4:	1c 82       	std	Y+4, r1	; 0x04

    //Wait until we have a value for adcTemp, after that seed random and if virgin, save adcTemp as calibration value for HotSummers
    while (adcTemp == 0) ;
    1cd6:	80 91 02 3b 	lds	r24, 0x3B02	; 0x803b02 <adcTemp>
    1cda:	90 91 03 3b 	lds	r25, 0x3B03	; 0x803b03 <adcTemp+0x1>
    1cde:	89 2b       	or	r24, r25
    1ce0:	d1 f3       	breq	.-12     	; 0x1cd6 <SelfTest+0x14>
    lfsrSeed = (adcPhot + adcTemp + adcHall)<<1 | 0x0001;
    1ce2:	40 91 d1 3a 	lds	r20, 0x3AD1	; 0x803ad1 <adcPhot>
    1ce6:	50 91 d2 3a 	lds	r21, 0x3AD2	; 0x803ad2 <adcPhot+0x1>
    1cea:	80 91 02 3b 	lds	r24, 0x3B02	; 0x803b02 <adcTemp>
    1cee:	90 91 03 3b 	lds	r25, 0x3B03	; 0x803b03 <adcTemp+0x1>
    1cf2:	20 91 cf 3a 	lds	r18, 0x3ACF	; 0x803acf <adcHall>
    1cf6:	30 91 d0 3a 	lds	r19, 0x3AD0	; 0x803ad0 <adcHall+0x1>
    1cfa:	84 0f       	add	r24, r20
    1cfc:	95 1f       	adc	r25, r21
    1cfe:	82 0f       	add	r24, r18
    1d00:	93 1f       	adc	r25, r19
    1d02:	88 0f       	add	r24, r24
    1d04:	99 1f       	adc	r25, r25
    1d06:	81 60       	ori	r24, 0x01	; 1
    1d08:	80 93 6c 38 	sts	0x386C, r24	; 0x80386c <lfsrSeed>
    1d0c:	90 93 6d 38 	sts	0x386D, r25	; 0x80386d <lfsrSeed+0x1>

    EERead(BOOTCHK, &tstVal[0], 4);
    1d10:	44 e0       	ldi	r20, 0x04	; 4
    1d12:	be 01       	movw	r22, r28
    1d14:	6f 5f       	subi	r22, 0xFF	; 255
    1d16:	7f 4f       	sbci	r23, 0xFF	; 255
    1d18:	84 e1       	ldi	r24, 0x14	; 20
    1d1a:	c8 d8       	rcall	.-3696   	; 0xeac <EERead>
    //already checked and ok, skip test, can be reset by using "ikillu" command.
    if (tstVal[0] == 0xA5) {
    1d1c:	89 81       	ldd	r24, Y+1	; 0x01
    1d1e:	85 3a       	cpi	r24, 0xA5	; 165
    1d20:	a1 f4       	brne	.+40     	; 0x1d4a <SelfTest+0x88>
        calTemp =  tstVal[1]<<8;
    1d22:	8a 81       	ldd	r24, Y+2	; 0x02
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	98 2f       	mov	r25, r24
    1d28:	88 27       	eor	r24, r24
    1d2a:	80 93 d5 3a 	sts	0x3AD5, r24	; 0x803ad5 <calTemp>
    1d2e:	90 93 d6 3a 	sts	0x3AD6, r25	; 0x803ad6 <calTemp+0x1>
        calTemp |= tstVal[2];
    1d32:	80 91 d5 3a 	lds	r24, 0x3AD5	; 0x803ad5 <calTemp>
    1d36:	90 91 d6 3a 	lds	r25, 0x3AD6	; 0x803ad6 <calTemp+0x1>
    1d3a:	2b 81       	ldd	r18, Y+3	; 0x03
    1d3c:	82 2b       	or	r24, r18
    1d3e:	80 93 d5 3a 	sts	0x3AD5, r24	; 0x803ad5 <calTemp>
    1d42:	90 93 d6 3a 	sts	0x3AD6, r25	; 0x803ad6 <calTemp+0x1>
        return 0; 
    1d46:	b1 2c       	mov	r11, r1
    1d48:	7c c0       	rjmp	.+248    	; 0x1e42 <SelfTest+0x180>
    } 

    //Old data in EEPROM, wipe!
    if (tstVal[3] != 0xff) return 1;
    1d4a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d4c:	8f 3f       	cpi	r24, 0xFF	; 255
    1d4e:	09 f0       	breq	.+2      	; 0x1d52 <SelfTest+0x90>
    1d50:	76 c0       	rjmp	.+236    	; 0x1e3e <SelfTest+0x17c>

    //Red BADGER, CAT, EYEs and SCARAB LED on 100% = error
    iLED[BADGER] = 255;
    1d52:	00 91 37 bf 	lds	r16, 0xBF37	; 0x80bf37 <__bss_end+0x8410>
    1d56:	10 e0       	ldi	r17, 0x00	; 0
    1d58:	08 52       	subi	r16, 0x28	; 40
    1d5a:	15 4c       	sbci	r17, 0xC5	; 197
    1d5c:	d8 01       	movw	r26, r16
    1d5e:	8c 93       	st	X, r24
    iLED[CAT] = 255;
    1d60:	e0 91 36 bf 	lds	r30, 0xBF36	; 0x80bf36 <__bss_end+0x840f>
    1d64:	f0 e0       	ldi	r31, 0x00	; 0
    1d66:	e8 52       	subi	r30, 0x28	; 40
    1d68:	f5 4c       	sbci	r31, 0xC5	; 197
    1d6a:	80 83       	st	Z, r24
    iLED[EYE[R][R]] = 255;    
    1d6c:	c0 90 44 bf 	lds	r12, 0xBF44	; 0x80bf44 <__bss_end+0x841d>
    1d70:	2c 2d       	mov	r18, r12
    1d72:	30 e0       	ldi	r19, 0x00	; 0
    1d74:	a9 01       	movw	r20, r18
    1d76:	48 52       	subi	r20, 0x28	; 40
    1d78:	55 4c       	sbci	r21, 0xC5	; 197
    1d7a:	6a 01       	movw	r12, r20
    1d7c:	da 01       	movw	r26, r20
    1d7e:	8c 93       	st	X, r24
    iLED[EYE[R][L]] = 255;
    1d80:	e0 90 45 bf 	lds	r14, 0xBF45	; 0x80bf45 <__bss_end+0x841e>
    1d84:	2e 2d       	mov	r18, r14
    1d86:	30 e0       	ldi	r19, 0x00	; 0
    1d88:	a9 01       	movw	r20, r18
    1d8a:	48 52       	subi	r20, 0x28	; 40
    1d8c:	55 4c       	sbci	r21, 0xC5	; 197
    1d8e:	7a 01       	movw	r14, r20
    1d90:	da 01       	movw	r26, r20
    1d92:	8c 93       	st	X, r24
    iLED[SCARAB[R]] = 255;
    1d94:	a0 91 38 bf 	lds	r26, 0xBF38	; 0x80bf38 <__bss_end+0x8411>
    1d98:	b0 e0       	ldi	r27, 0x00	; 0
    1d9a:	a8 52       	subi	r26, 0x28	; 40
    1d9c:	b5 4c       	sbci	r27, 0xC5	; 197
    1d9e:	8c 93       	st	X, r24

    //Light sensor OK, scarab off
    tstVal[0] = adcPhot&0xff;
    1da0:	80 91 d1 3a 	lds	r24, 0x3AD1	; 0x803ad1 <adcPhot>
    1da4:	90 91 d2 3a 	lds	r25, 0x3AD2	; 0x803ad2 <adcPhot+0x1>
    1da8:	89 83       	std	Y+1, r24	; 0x01
    while (tstVal[0] == (adcPhot&0xff)) ;
    1daa:	99 27       	eor	r25, r25
    1dac:	20 91 d1 3a 	lds	r18, 0x3AD1	; 0x803ad1 <adcPhot>
    1db0:	30 91 d2 3a 	lds	r19, 0x3AD2	; 0x803ad2 <adcPhot+0x1>
    1db4:	33 27       	eor	r19, r19
    1db6:	28 17       	cp	r18, r24
    1db8:	39 07       	cpc	r19, r25
    1dba:	c1 f3       	breq	.-16     	; 0x1dac <SelfTest+0xea>
    iLED[SCARAB[R]] = 0x00;
    1dbc:	1c 92       	st	X, r1

    //Buttons OK (none pressed / shorted), cat forehead off
    while ((adcBtns>>4) < 200) ;
    1dbe:	80 91 cb 3a 	lds	r24, 0x3ACB	; 0x803acb <adcBtns>
    1dc2:	90 91 cc 3a 	lds	r25, 0x3ACC	; 0x803acc <adcBtns+0x1>
    1dc6:	80 38       	cpi	r24, 0x80	; 128
    1dc8:	9c 40       	sbci	r25, 0x0C	; 12
    1dca:	c8 f3       	brcs	.-14     	; 0x1dbe <SelfTest+0xfc>
    iLED[CAT] = 0x00;
    1dcc:	10 82       	st	Z, r1

    //Right game ROM version, right eye off
    ExtEERead(0x34D2, 4, 0, (uint8_t *)&tstVal[0]);
    1dce:	9e 01       	movw	r18, r28
    1dd0:	2f 5f       	subi	r18, 0xFF	; 255
    1dd2:	3f 4f       	sbci	r19, 0xFF	; 255
    1dd4:	40 e0       	ldi	r20, 0x00	; 0
    1dd6:	64 e0       	ldi	r22, 0x04	; 4
    1dd8:	82 ed       	ldi	r24, 0xD2	; 210
    1dda:	94 e3       	ldi	r25, 0x34	; 52
    1ddc:	b9 d8       	rcall	.-3726   	; 0xf50 <ExtEERead>
    if ((tstVal[0] != 0x02) || (tstVal[1] != 0xfe) || (tstVal[2] != 0x00) || (tstVal[3] != 0x54)){  //Newestest ROM @ 0x34D2: 0x02, 0xfe, 0x00, 0x54
    1dde:	89 81       	ldd	r24, Y+1	; 0x01
    1de0:	82 30       	cpi	r24, 0x02	; 2
    1de2:	49 f4       	brne	.+18     	; 0x1df6 <SelfTest+0x134>
    1de4:	8a 81       	ldd	r24, Y+2	; 0x02
    1de6:	8e 3f       	cpi	r24, 0xFE	; 254
    1de8:	31 f4       	brne	.+12     	; 0x1df6 <SelfTest+0x134>
    1dea:	bb 80       	ldd	r11, Y+3	; 0x03
    1dec:	b1 10       	cpse	r11, r1
    1dee:	03 c0       	rjmp	.+6      	; 0x1df6 <SelfTest+0x134>
    1df0:	8c 81       	ldd	r24, Y+4	; 0x04
    1df2:	84 35       	cpi	r24, 0x54	; 84
    1df4:	09 f0       	breq	.+2      	; 0x1df8 <SelfTest+0x136>
    1df6:	ff cf       	rjmp	.-2      	; 0x1df6 <SelfTest+0x134>
        while(1);
    }
    iLED[EYE[R][R]] = 0x00;
    1df8:	f6 01       	movw	r30, r12
    
    //Audio in/out OK, left eye off
    SelectAuIn();
    1dfa:	10 82       	st	Z, r1
    1dfc:	fc d8       	rcall	.-3592   	; 0xff6 <SelectAuIn>
    while ((auIn < 0x78) || (auIn > 0x88)) ;
    1dfe:	80 91 d7 3a 	lds	r24, 0x3AD7	; 0x803ad7 <auIn>
    1e02:	88 37       	cpi	r24, 0x78	; 120
    1e04:	e0 f3       	brcs	.-8      	; 0x1dfe <SelfTest+0x13c>
    1e06:	80 91 d7 3a 	lds	r24, 0x3AD7	; 0x803ad7 <auIn>
    1e0a:	89 38       	cpi	r24, 0x89	; 137
    1e0c:	c0 f7       	brcc	.-16     	; 0x1dfe <SelfTest+0x13c>
    iLED[EYE[R][L]] = 0x00;
    1e0e:	d7 01       	movw	r26, r14
    1e10:	1c 92       	st	X, r1
    
    //All ok!
    tstVal[0] = 0xA5;
    1e12:	85 ea       	ldi	r24, 0xA5	; 165
    1e14:	89 83       	std	Y+1, r24	; 0x01
    tstVal[1] = adcTemp>>8;
    1e16:	80 91 02 3b 	lds	r24, 0x3B02	; 0x803b02 <adcTemp>
    1e1a:	90 91 03 3b 	lds	r25, 0x3B03	; 0x803b03 <adcTemp+0x1>
    1e1e:	9a 83       	std	Y+2, r25	; 0x02
    tstVal[2] = adcTemp&0xff;
    1e20:	80 91 02 3b 	lds	r24, 0x3B02	; 0x803b02 <adcTemp>
    1e24:	90 91 03 3b 	lds	r25, 0x3B03	; 0x803b03 <adcTemp+0x1>
    1e28:	8b 83       	std	Y+3, r24	; 0x03

    EEWrite(BOOTCHK, &tstVal[0], 3);
    1e2a:	43 e0       	ldi	r20, 0x03	; 3
    1e2c:	be 01       	movw	r22, r28
    1e2e:	6f 5f       	subi	r22, 0xFF	; 255
    1e30:	7f 4f       	sbci	r23, 0xFF	; 255
    1e32:	84 e1       	ldi	r24, 0x14	; 20
    1e34:	4b d8       	rcall	.-3946   	; 0xecc <EEWrite>
    iLED[BADGER] = 0x08;
    1e36:	88 e0       	ldi	r24, 0x08	; 8
    1e38:	f8 01       	movw	r30, r16
    1e3a:	80 83       	st	Z, r24
    return 0;
    1e3c:	02 c0       	rjmp	.+4      	; 0x1e42 <SelfTest+0x180>
        calTemp |= tstVal[2];
        return 0; 
    } 

    //Old data in EEPROM, wipe!
    if (tstVal[3] != 0xff) return 1;
    1e3e:	bb 24       	eor	r11, r11
    1e40:	b3 94       	inc	r11
    tstVal[2] = adcTemp&0xff;

    EEWrite(BOOTCHK, &tstVal[0], 3);
    iLED[BADGER] = 0x08;
    return 0;
}
    1e42:	8b 2d       	mov	r24, r11
    1e44:	24 96       	adiw	r28, 0x04	; 4
    1e46:	e9 e0       	ldi	r30, 0x09	; 9
    1e48:	0c 94 7c 1f 	jmp	0x3ef8	; 0x3ef8 <__epilogue_restores__+0x12>

00001e4c <simonLed>:

/**
 * Set the wing LED blocks to selected option
 * @param val
 */
void simonLed(uint8_t val) {
    1e4c:	cf 93       	push	r28
    1e4e:	c8 2f       	mov	r28, r24
    WingBar(0,0);
    1e50:	60 e0       	ldi	r22, 0x00	; 0
    1e52:	80 e0       	ldi	r24, 0x00	; 0
    1e54:	1e db       	rcall	.-2500   	; 0x1492 <WingBar>
    if (val==0)
    1e56:	cc 23       	and	r28, r28
    1e58:	51 f1       	breq	.+84     	; 0x1eae <simonLed+0x62>
        return;

    if ((effect & 0xffe0)==0)
    1e5a:	80 91 4a 38 	lds	r24, 0x384A	; 0x80384a <effect>
    1e5e:	90 91 4b 38 	lds	r25, 0x384B	; 0x80384b <effect+0x1>
    1e62:	80 7e       	andi	r24, 0xE0	; 224
    1e64:	89 2b       	or	r24, r25
    1e66:	51 f4       	brne	.+20     	; 0x1e7c <simonLed+0x30>
        effect = 0x13f + ((val-1)<<5);
    1e68:	20 e2       	ldi	r18, 0x20	; 32
    1e6a:	c2 9f       	mul	r28, r18
    1e6c:	c0 01       	movw	r24, r0
    1e6e:	11 24       	eor	r1, r1
    1e70:	81 5e       	subi	r24, 0xE1	; 225
    1e72:	9e 4f       	sbci	r25, 0xFE	; 254
    1e74:	80 93 4a 38 	sts	0x384A, r24	; 0x80384a <effect>
    1e78:	90 93 4b 38 	sts	0x384B, r25	; 0x80384b <effect+0x1>

    if (val == 1) {                     //
    1e7c:	c1 30       	cpi	r28, 0x01	; 1
    1e7e:	19 f4       	brne	.+6      	; 0x1e86 <simonLed+0x3a>
        iLED[WING[L][4]] = dimValue;
    1e80:	e0 91 43 bf 	lds	r30, 0xBF43	; 0x80bf43 <__bss_end+0x841c>
    1e84:	0e c0       	rjmp	.+28     	; 0x1ea2 <simonLed+0x56>
    } else if (val == 2) {              // I
    1e86:	c2 30       	cpi	r28, 0x02	; 2
    1e88:	19 f4       	brne	.+6      	; 0x1e90 <simonLed+0x44>
        iLED[WING[R][4]] = dimValue;
    1e8a:	e0 91 3e bf 	lds	r30, 0xBF3E	; 0x80bf3e <__bss_end+0x8417>
    1e8e:	09 c0       	rjmp	.+18     	; 0x1ea2 <simonLed+0x56>
    } else if (val == 3) {              // II
    1e90:	c3 30       	cpi	r28, 0x03	; 3
    1e92:	19 f4       	brne	.+6      	; 0x1e9a <simonLed+0x4e>
        iLED[WING[L][2]] = dimValue;
    1e94:	e0 91 41 bf 	lds	r30, 0xBF41	; 0x80bf41 <__bss_end+0x841a>
    1e98:	04 c0       	rjmp	.+8      	; 0x1ea2 <simonLed+0x56>
    } else if (val == 4) {              // III
    1e9a:	c4 30       	cpi	r28, 0x04	; 4
    1e9c:	41 f4       	brne	.+16     	; 0x1eae <simonLed+0x62>
        iLED[WING[R][2]] = dimValue;
    1e9e:	e0 91 3c bf 	lds	r30, 0xBF3C	; 0x80bf3c <__bss_end+0x8415>
    1ea2:	f0 e0       	ldi	r31, 0x00	; 0
    1ea4:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1ea8:	e8 52       	subi	r30, 0x28	; 40
    1eaa:	f5 4c       	sbci	r31, 0xC5	; 197
    1eac:	80 83       	st	Z, r24
    }
}
    1eae:	cf 91       	pop	r28
    1eb0:	08 95       	ret

00001eb2 <BastetDictates>:

/**
 * Main game loop
 * @return 0
 */
uint8_t BastetDictates() {
    1eb2:	0f 93       	push	r16
    1eb4:	1f 93       	push	r17
    1eb6:	cf 93       	push	r28
    1eb8:	df 93       	push	r29
    if ((TEXT != gameNow) && (BASTET != gameNow))
    1eba:	80 91 4c 38 	lds	r24, 0x384C	; 0x80384c <gameNow>
    1ebe:	88 23       	and	r24, r24
    1ec0:	21 f0       	breq	.+8      	; 0x1eca <BastetDictates+0x18>
    1ec2:	82 30       	cpi	r24, 0x02	; 2
    1ec4:	09 f0       	breq	.+2      	; 0x1ec8 <BastetDictates+0x16>
    1ec6:	6b c1       	rjmp	.+726    	; 0x219e <BastetDictates+0x2ec>
    1ec8:	0a c0       	rjmp	.+20     	; 0x1ede <BastetDictates+0x2c>
        return 0;
    }
    */

    if (TEXT == gameNow)
        if (buttonState!=0xff) {
    1eca:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <buttonState>
    1ece:	8f 3f       	cpi	r24, 0xFF	; 255
    1ed0:	31 f0       	breq	.+12     	; 0x1ede <BastetDictates+0x2c>
            WingBar(0,0);
    1ed2:	60 e0       	ldi	r22, 0x00	; 0
    1ed4:	80 e0       	ldi	r24, 0x00	; 0
    1ed6:	dd da       	rcall	.-2630   	; 0x1492 <WingBar>
            gameNow = BASTET;
    1ed8:	82 e0       	ldi	r24, 0x02	; 2
    1eda:	80 93 4c 38 	sts	0x384C, r24	; 0x80384c <gameNow>
        }

    if (BASTET_BOOT == simonGameState) {
    1ede:	80 91 6e 38 	lds	r24, 0x386E	; 0x80386e <simonGameState>
    1ee2:	81 11       	cpse	r24, r1
    1ee4:	0d c0       	rjmp	.+26     	; 0x1f00 <BastetDictates+0x4e>
    1ee6:	c4 e7       	ldi	r28, 0x74	; 116
    1ee8:	d8 e3       	ldi	r29, 0x38	; 56
    1eea:	00 e8       	ldi	r16, 0x80	; 128
        for (uint8_t i = 0; i < BASTET_LENGTH; i++) {
            simonState[i] = (lfsr() % 4);
    1eec:	18 e3       	ldi	r17, 0x38	; 56
    1eee:	c0 d8       	rcall	.-3712   	; 0x1070 <lfsr>
    1ef0:	83 70       	andi	r24, 0x03	; 3
    1ef2:	89 93       	st	Y+, r24
            WingBar(0,0);
            gameNow = BASTET;
        }

    if (BASTET_BOOT == simonGameState) {
        for (uint8_t i = 0; i < BASTET_LENGTH; i++) {
    1ef4:	0c 17       	cp	r16, r28
    1ef6:	1d 07       	cpc	r17, r29
    1ef8:	d1 f7       	brne	.-12     	; 0x1eee <BastetDictates+0x3c>
            simonState[i] = (lfsr() % 4);
        }
        simonGameState = BASTET_GAME_START;
    1efa:	81 e0       	ldi	r24, 0x01	; 1
    1efc:	80 93 6e 38 	sts	0x386E, r24	; 0x80386e <simonGameState>
    }

    if (BASTET_GAME_START == simonGameState && BASTET == gameNow) {
    1f00:	80 91 6e 38 	lds	r24, 0x386E	; 0x80386e <simonGameState>
    1f04:	81 30       	cpi	r24, 0x01	; 1
    1f06:	91 f4       	brne	.+36     	; 0x1f2c <BastetDictates+0x7a>
    1f08:	80 91 4c 38 	lds	r24, 0x384C	; 0x80384c <gameNow>
    1f0c:	82 30       	cpi	r24, 0x02	; 2
    1f0e:	71 f4       	brne	.+28     	; 0x1f2c <BastetDictates+0x7a>
        simonGameState = BASTET_GAME_INTRO;
    1f10:	80 93 6e 38 	sts	0x386E, r24	; 0x80386e <simonGameState>
        simonPos = 0;
    1f14:	10 92 73 38 	sts	0x3873, r1	; 0x803873 <simonPos>
        simonInputPos = 0;
    1f18:	10 92 72 38 	sts	0x3872, r1	; 0x803872 <simonInputPos>
        simonTimer = 0;
    1f1c:	10 92 71 38 	sts	0x3871, r1	; 0x803871 <simonTimer>
        simonCounter = 0;
    1f20:	10 92 6f 38 	sts	0x386F, r1	; 0x80386f <simonCounter>
        effect = 0;
    1f24:	10 92 4a 38 	sts	0x384A, r1	; 0x80384a <effect>
    1f28:	10 92 4b 38 	sts	0x384B, r1	; 0x80384b <effect+0x1>
    }

    if (BASTET_GAME_INTRO == simonGameState) {
    1f2c:	80 91 6e 38 	lds	r24, 0x386E	; 0x80386e <simonGameState>
    1f30:	82 30       	cpi	r24, 0x02	; 2
    1f32:	51 f5       	brne	.+84     	; 0x1f88 <BastetDictates+0xd6>
        if (simonTimer > 3) {   // ±? seconds
    1f34:	80 91 71 38 	lds	r24, 0x3871	; 0x803871 <simonTimer>
    1f38:	84 30       	cpi	r24, 0x04	; 4
    1f3a:	38 f0       	brcs	.+14     	; 0x1f4a <BastetDictates+0x98>
            simonCounter++;
    1f3c:	80 91 6f 38 	lds	r24, 0x386F	; 0x80386f <simonCounter>
    1f40:	8f 5f       	subi	r24, 0xFF	; 255
    1f42:	80 93 6f 38 	sts	0x386F, r24	; 0x80386f <simonCounter>
            simonTimer = 0;
    1f46:	10 92 71 38 	sts	0x3871, r1	; 0x803871 <simonTimer>
        }
        if (simonCounter > 5) {
    1f4a:	e0 91 6f 38 	lds	r30, 0x386F	; 0x80386f <simonCounter>
    1f4e:	e6 30       	cpi	r30, 0x06	; 6
    1f50:	58 f0       	brcs	.+22     	; 0x1f68 <BastetDictates+0xb6>
            simonGameState = BASTET_GAME_SHOW_PATTERN;
    1f52:	83 e0       	ldi	r24, 0x03	; 3
    1f54:	80 93 6e 38 	sts	0x386E, r24	; 0x80386e <simonGameState>
            simonTimer = 0;
    1f58:	10 92 71 38 	sts	0x3871, r1	; 0x803871 <simonTimer>
            simonCounter = 0;
    1f5c:	10 92 6f 38 	sts	0x386F, r1	; 0x80386f <simonCounter>
            SetHackerLeds(0,0);
    1f60:	60 e0       	ldi	r22, 0x00	; 0
    1f62:	80 e0       	ldi	r24, 0x00	; 0
    1f64:	d4 da       	rcall	.-2648   	; 0x150e <SetHackerLeds>
            return 0;
    1f66:	1b c1       	rjmp	.+566    	; 0x219e <BastetDictates+0x2ec>
        }
        iLED[HCKR[R][simonCounter]] = dimValue;
    1f68:	f0 e0       	ldi	r31, 0x00	; 0
    1f6a:	e8 5b       	subi	r30, 0xB8	; 184
    1f6c:	f0 44       	sbci	r31, 0x40	; 64
    1f6e:	a0 81       	ld	r26, Z
    1f70:	b0 e0       	ldi	r27, 0x00	; 0
    1f72:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1f76:	a8 52       	subi	r26, 0x28	; 40
    1f78:	b5 4c       	sbci	r27, 0xC5	; 197
    1f7a:	8c 93       	st	X, r24
        iLED[HCKR[G][simonCounter]] = 0;
    1f7c:	e6 81       	ldd	r30, Z+6	; 0x06
    1f7e:	f0 e0       	ldi	r31, 0x00	; 0
    1f80:	e8 52       	subi	r30, 0x28	; 40
    1f82:	f5 4c       	sbci	r31, 0xC5	; 197
    1f84:	10 82       	st	Z, r1
    1f86:	2a c0       	rjmp	.+84     	; 0x1fdc <BastetDictates+0x12a>
    }

    if (BASTET_GAME_SHOW_PATTERN == simonGameState) {
    1f88:	83 30       	cpi	r24, 0x03	; 3
    1f8a:	41 f5       	brne	.+80     	; 0x1fdc <BastetDictates+0x12a>
        if (simonTimer > 8) {   // ±.6 second
    1f8c:	80 91 71 38 	lds	r24, 0x3871	; 0x803871 <simonTimer>
    1f90:	89 30       	cpi	r24, 0x09	; 9
    1f92:	38 f0       	brcs	.+14     	; 0x1fa2 <BastetDictates+0xf0>
            simonCounter++;
    1f94:	80 91 6f 38 	lds	r24, 0x386F	; 0x80386f <simonCounter>
    1f98:	8f 5f       	subi	r24, 0xFF	; 255
    1f9a:	80 93 6f 38 	sts	0x386F, r24	; 0x80386f <simonCounter>
            simonTimer = 0;
    1f9e:	10 92 71 38 	sts	0x3871, r1	; 0x803871 <simonTimer>
        }
        if (simonCounter > simonPos) {
    1fa2:	e0 91 6f 38 	lds	r30, 0x386F	; 0x80386f <simonCounter>
    1fa6:	80 91 73 38 	lds	r24, 0x3873	; 0x803873 <simonPos>
    1faa:	8e 17       	cp	r24, r30
    1fac:	40 f4       	brcc	.+16     	; 0x1fbe <BastetDictates+0x10c>
            simonInputPos = 0;
    1fae:	10 92 72 38 	sts	0x3872, r1	; 0x803872 <simonInputPos>
            simonGameState = BASTET_GAME_INPUT;
    1fb2:	85 e0       	ldi	r24, 0x05	; 5
    1fb4:	80 93 6e 38 	sts	0x386E, r24	; 0x80386e <simonGameState>
            simonLed(0);
    1fb8:	80 e0       	ldi	r24, 0x00	; 0
    1fba:	48 df       	rcall	.-368    	; 0x1e4c <simonLed>
    1fbc:	98 c0       	rjmp	.+304    	; 0x20ee <BastetDictates+0x23c>
            simonTimer = 0;
            return 0;
        }
        if (simonTimer > 7 ) {
    1fbe:	80 91 71 38 	lds	r24, 0x3871	; 0x803871 <simonTimer>
    1fc2:	88 30       	cpi	r24, 0x08	; 8
    1fc4:	10 f0       	brcs	.+4      	; 0x1fca <BastetDictates+0x118>
            simonLed(0);
    1fc6:	80 e0       	ldi	r24, 0x00	; 0
    1fc8:	08 c0       	rjmp	.+16     	; 0x1fda <BastetDictates+0x128>
        } else if (simonTimer > 5) {
    1fca:	86 30       	cpi	r24, 0x06	; 6
    1fcc:	08 f4       	brcc	.+2      	; 0x1fd0 <BastetDictates+0x11e>
    1fce:	92 c0       	rjmp	.+292    	; 0x20f4 <BastetDictates+0x242>
            simonLed(simonState[simonCounter] + 1);
    1fd0:	f0 e0       	ldi	r31, 0x00	; 0
    1fd2:	ec 58       	subi	r30, 0x8C	; 140
    1fd4:	f7 4c       	sbci	r31, 0xC7	; 199
    1fd6:	80 81       	ld	r24, Z
    1fd8:	8f 5f       	subi	r24, 0xFF	; 255
    1fda:	38 df       	rcall	.-400    	; 0x1e4c <simonLed>
        }
    }

    if (BASTET_GAME_INPUT == simonGameState) {
    1fdc:	c0 91 6e 38 	lds	r28, 0x386E	; 0x80386e <simonGameState>
    1fe0:	c5 30       	cpi	r28, 0x05	; 5
    1fe2:	09 f0       	breq	.+2      	; 0x1fe6 <BastetDictates+0x134>
    1fe4:	87 c0       	rjmp	.+270    	; 0x20f4 <BastetDictates+0x242>
        //Button pressed
        if (lastButtonState != buttonState && (buttonState+1) > 0) {
    1fe6:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <buttonState>
    1fea:	90 91 07 38 	lds	r25, 0x3807	; 0x803807 <lastButtonState>
    1fee:	98 17       	cp	r25, r24
    1ff0:	09 f4       	brne	.+2      	; 0x1ff4 <BastetDictates+0x142>
    1ff2:	72 c0       	rjmp	.+228    	; 0x20d8 <BastetDictates+0x226>
            if (simonWait == 0 && buttonState < 4) {
    1ff4:	90 91 70 38 	lds	r25, 0x3870	; 0x803870 <simonWait>
    1ff8:	91 11       	cpse	r25, r1
    1ffa:	70 c0       	rjmp	.+224    	; 0x20dc <BastetDictates+0x22a>
    1ffc:	84 30       	cpi	r24, 0x04	; 4
    1ffe:	08 f0       	brcs	.+2      	; 0x2002 <BastetDictates+0x150>
    2000:	6d c0       	rjmp	.+218    	; 0x20dc <BastetDictates+0x22a>
                simonWait = 1;
    2002:	91 e0       	ldi	r25, 0x01	; 1
    2004:	90 93 70 38 	sts	0x3870, r25	; 0x803870 <simonWait>
                simonTimer = 0;
    2008:	10 92 71 38 	sts	0x3871, r1	; 0x803871 <simonTimer>
                simonLed(buttonState+1);
    200c:	8f 5f       	subi	r24, 0xFF	; 255
    200e:	1e df       	rcall	.-452    	; 0x1e4c <simonLed>
                simonGameState = BASTET_GAME_WAIT_LEDS;
    2010:	84 e0       	ldi	r24, 0x04	; 4
    2012:	80 93 6e 38 	sts	0x386E, r24	; 0x80386e <simonGameState>
                simonNextGameState = BASTET_GAME_INPUT;
    2016:	c0 93 3d 38 	sts	0x383D, r28	; 0x80383d <simonNextGameState>

                if (simonState[simonInputPos] == buttonState) {
    201a:	80 91 72 38 	lds	r24, 0x3872	; 0x803872 <simonInputPos>
    201e:	e8 2f       	mov	r30, r24
    2020:	f0 e0       	ldi	r31, 0x00	; 0
    2022:	ec 58       	subi	r30, 0x8C	; 140
    2024:	f7 4c       	sbci	r31, 0xC7	; 199
    2026:	20 81       	ld	r18, Z
    2028:	90 91 08 38 	lds	r25, 0x3808	; 0x803808 <buttonState>
    202c:	29 13       	cpse	r18, r25
    202e:	1d c0       	rjmp	.+58     	; 0x206a <BastetDictates+0x1b8>
                    simonInputPos++;
    2030:	8f 5f       	subi	r24, 0xFF	; 255
    2032:	80 93 72 38 	sts	0x3872, r24	; 0x803872 <simonInputPos>
                    if (simonInputPos > simonPos) {
    2036:	e0 91 73 38 	lds	r30, 0x3873	; 0x803873 <simonPos>
    203a:	e8 17       	cp	r30, r24
    203c:	a8 f5       	brcc	.+106    	; 0x20a8 <BastetDictates+0x1f6>
                        simonPos++;
    203e:	ef 5f       	subi	r30, 0xFF	; 255
    2040:	e0 93 73 38 	sts	0x3873, r30	; 0x803873 <simonPos>
                        simonTimer = 0;
    2044:	10 92 71 38 	sts	0x3871, r1	; 0x803871 <simonTimer>
                        simonCounter = 0;
    2048:	10 92 6f 38 	sts	0x386F, r1	; 0x80386f <simonCounter>
                        if (simonPos > 1) { // BASTET_LENGTH = 12
    204c:	e1 30       	cpi	r30, 0x01	; 1
    204e:	59 f0       	breq	.+22     	; 0x2066 <BastetDictates+0x1b4>
                            iLED[HCKR[G][(simonPos / 2) - 1]] = dimValue;
    2050:	e6 95       	lsr	r30
    2052:	f0 e0       	ldi	r31, 0x00	; 0
    2054:	e8 5b       	subi	r30, 0xB8	; 184
    2056:	f0 44       	sbci	r31, 0x40	; 64
    2058:	e5 81       	ldd	r30, Z+5	; 0x05
    205a:	f0 e0       	ldi	r31, 0x00	; 0
    205c:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    2060:	e8 52       	subi	r30, 0x28	; 40
    2062:	f5 4c       	sbci	r31, 0xC5	; 197
    2064:	80 83       	st	Z, r24
                        }
                        simonNextGameState = BASTET_GAME_SHOW_PATTERN;
    2066:	83 e0       	ldi	r24, 0x03	; 3
    2068:	1d c0       	rjmp	.+58     	; 0x20a4 <BastetDictates+0x1f2>
                    }
                } else {
                    effect = 32|1;
    206a:	81 e2       	ldi	r24, 0x21	; 33
    206c:	90 e0       	ldi	r25, 0x00	; 0
    206e:	80 93 4a 38 	sts	0x384A, r24	; 0x80384a <effect>
    2072:	90 93 4b 38 	sts	0x384B, r25	; 0x80384b <effect+0x1>
    2076:	a8 e4       	ldi	r26, 0x48	; 72
    2078:	bf eb       	ldi	r27, 0xBF	; 191
    207a:	8e e4       	ldi	r24, 0x4E	; 78
    207c:	9f eb       	ldi	r25, 0xBF	; 191
                    for (uint8_t n=0; n<6; n++){
                        iLED[HCKR[R][n]] = dimValue;
    207e:	ed 91       	ld	r30, X+
    2080:	f0 e0       	ldi	r31, 0x00	; 0
    2082:	20 91 0c 38 	lds	r18, 0x380C	; 0x80380c <dimValue>
    2086:	e8 52       	subi	r30, 0x28	; 40
    2088:	f5 4c       	sbci	r31, 0xC5	; 197
    208a:	20 83       	st	Z, r18
                        }
                        simonNextGameState = BASTET_GAME_SHOW_PATTERN;
                    }
                } else {
                    effect = 32|1;
                    for (uint8_t n=0; n<6; n++){
    208c:	8a 17       	cp	r24, r26
    208e:	9b 07       	cpc	r25, r27
    2090:	b1 f7       	brne	.-20     	; 0x207e <BastetDictates+0x1cc>
                        iLED[HCKR[R][n]] = dimValue;
                    }
                    simonInputPos = 0;
    2092:	10 92 72 38 	sts	0x3872, r1	; 0x803872 <simonInputPos>
                    simonPos = 0;
    2096:	10 92 73 38 	sts	0x3873, r1	; 0x803873 <simonPos>
                    simonTimer = 0;
    209a:	10 92 71 38 	sts	0x3871, r1	; 0x803871 <simonTimer>
                    simonCounter = 0;
    209e:	10 92 6f 38 	sts	0x386F, r1	; 0x80386f <simonCounter>
                    simonNextGameState = BASTET_GAME_OUTRO;
    20a2:	86 e0       	ldi	r24, 0x06	; 6
    20a4:	80 93 3d 38 	sts	0x383D, r24	; 0x80383d <simonNextGameState>
                }

                if (simonInputPos >= BASTET_LENGTH || simonPos >= BASTET_LENGTH) { // beetje dubbel
    20a8:	80 91 72 38 	lds	r24, 0x3872	; 0x803872 <simonInputPos>
    20ac:	8c 30       	cpi	r24, 0x0C	; 12
    20ae:	20 f4       	brcc	.+8      	; 0x20b8 <BastetDictates+0x206>
    20b0:	80 91 73 38 	lds	r24, 0x3873	; 0x803873 <simonPos>
    20b4:	8c 30       	cpi	r24, 0x0C	; 12
    20b6:	90 f0       	brcs	.+36     	; 0x20dc <BastetDictates+0x22a>
                    effect = 64|2;
    20b8:	82 e4       	ldi	r24, 0x42	; 66
    20ba:	90 e0       	ldi	r25, 0x00	; 0
    20bc:	80 93 4a 38 	sts	0x384A, r24	; 0x80384a <effect>
    20c0:	90 93 4b 38 	sts	0x384B, r25	; 0x80384b <effect+0x1>
                    UpdateState(BASTET_COMPLETED);
    20c4:	8a e7       	ldi	r24, 0x7A	; 122
    20c6:	da d8       	rcall	.-3660   	; 0x127c <UpdateState>
                    simonTimer = 0;
    20c8:	10 92 71 38 	sts	0x3871, r1	; 0x803871 <simonTimer>
                    simonCounter = 0;
    20cc:	10 92 6f 38 	sts	0x386F, r1	; 0x80386f <simonCounter>
                    simonNextGameState = BASTET_GAME_OVER;
    20d0:	87 e0       	ldi	r24, 0x07	; 7
    20d2:	80 93 3d 38 	sts	0x383D, r24	; 0x80383d <simonNextGameState>
    20d6:	02 c0       	rjmp	.+4      	; 0x20dc <BastetDictates+0x22a>
                }
            }
        
        //Button released, next or reset!
        } else {
            simonWait = 0;
    20d8:	10 92 70 38 	sts	0x3870, r1	; 0x803870 <simonWait>
        }

        if (simonTimer == 75) {    // did you forget about Bastet?
    20dc:	80 91 71 38 	lds	r24, 0x3871	; 0x803871 <simonTimer>
    20e0:	8b 34       	cpi	r24, 0x4B	; 75
    20e2:	41 f4       	brne	.+16     	; 0x20f4 <BastetDictates+0x242>
            simonGameState = BASTET_GAME_SHOW_PATTERN;
    20e4:	83 e0       	ldi	r24, 0x03	; 3
    20e6:	80 93 6e 38 	sts	0x386E, r24	; 0x80386e <simonGameState>
            simonCounter = 0;
    20ea:	10 92 6f 38 	sts	0x386F, r1	; 0x80386f <simonCounter>
            simonTimer = 0;
    20ee:	10 92 71 38 	sts	0x3871, r1	; 0x803871 <simonTimer>
            return 0;
    20f2:	55 c0       	rjmp	.+170    	; 0x219e <BastetDictates+0x2ec>
        }
    }

    if (BASTET_GAME_WAIT_LEDS == simonGameState) {
    20f4:	80 91 6e 38 	lds	r24, 0x386E	; 0x80386e <simonGameState>
    20f8:	84 30       	cpi	r24, 0x04	; 4
        if (simonTimer >= 3) {
    20fa:	81 f4       	brne	.+32     	; 0x211c <BastetDictates+0x26a>
    20fc:	80 91 71 38 	lds	r24, 0x3871	; 0x803871 <simonTimer>
    2100:	83 30       	cpi	r24, 0x03	; 3
            // on to next state after ±.2 second
            simonLed(0);  // LEDs off
    2102:	60 f0       	brcs	.+24     	; 0x211c <BastetDictates+0x26a>
    2104:	80 e0       	ldi	r24, 0x00	; 0
    2106:	a2 de       	rcall	.-700    	; 0x1e4c <simonLed>
            simonWait = 0;
    2108:	10 92 70 38 	sts	0x3870, r1	; 0x803870 <simonWait>
            simonTimer = 0;
    210c:	10 92 71 38 	sts	0x3871, r1	; 0x803871 <simonTimer>
            simonCounter = 0;
    2110:	10 92 6f 38 	sts	0x386F, r1	; 0x80386f <simonCounter>
            simonGameState = simonNextGameState;
    2114:	80 91 3d 38 	lds	r24, 0x383D	; 0x80383d <simonNextGameState>
    2118:	80 93 6e 38 	sts	0x386E, r24	; 0x80386e <simonGameState>
        }
    }

    if (BASTET_GAME_OUTRO == simonGameState) {
    211c:	80 91 6e 38 	lds	r24, 0x386E	; 0x80386e <simonGameState>
    2120:	86 30       	cpi	r24, 0x06	; 6
    2122:	61 f5       	brne	.+88     	; 0x217c <BastetDictates+0x2ca>
        if (simonTimer > 3) {
    2124:	80 91 71 38 	lds	r24, 0x3871	; 0x803871 <simonTimer>
    2128:	84 30       	cpi	r24, 0x04	; 4
    212a:	38 f0       	brcs	.+14     	; 0x213a <BastetDictates+0x288>
            simonCounter++;
    212c:	80 91 6f 38 	lds	r24, 0x386F	; 0x80386f <simonCounter>
    2130:	8f 5f       	subi	r24, 0xFF	; 255
    2132:	80 93 6f 38 	sts	0x386F, r24	; 0x80386f <simonCounter>
            simonTimer = 0;
    2136:	10 92 71 38 	sts	0x3871, r1	; 0x803871 <simonTimer>
        }
        if (simonCounter > 5) {
    213a:	80 91 6f 38 	lds	r24, 0x386F	; 0x80386f <simonCounter>
    213e:	86 30       	cpi	r24, 0x06	; 6
    2140:	60 f0       	brcs	.+24     	; 0x215a <BastetDictates+0x2a8>
            simonTimer = 0;
    2142:	10 92 71 38 	sts	0x3871, r1	; 0x803871 <simonTimer>
            simonCounter = 0;
    2146:	10 92 6f 38 	sts	0x386F, r1	; 0x80386f <simonCounter>
            simonGameState = BASTET_GAME_OVER;
    214a:	87 e0       	ldi	r24, 0x07	; 7
    214c:	80 93 6e 38 	sts	0x386E, r24	; 0x80386e <simonGameState>
            effect = 0;
    2150:	10 92 4a 38 	sts	0x384A, r1	; 0x80384a <effect>
    2154:	10 92 4b 38 	sts	0x384B, r1	; 0x80384b <effect+0x1>
            return 0;
    2158:	22 c0       	rjmp	.+68     	; 0x219e <BastetDictates+0x2ec>
        }
        iLED[HCKR[R][5-simonCounter]] = 0;
    215a:	e5 e0       	ldi	r30, 0x05	; 5
    215c:	f0 e0       	ldi	r31, 0x00	; 0
    215e:	e8 1b       	sub	r30, r24
    2160:	f1 09       	sbc	r31, r1
    2162:	e8 5b       	subi	r30, 0xB8	; 184
    2164:	f0 44       	sbci	r31, 0x40	; 64
    2166:	a0 81       	ld	r26, Z
    2168:	b0 e0       	ldi	r27, 0x00	; 0
    216a:	a8 52       	subi	r26, 0x28	; 40
    216c:	b5 4c       	sbci	r27, 0xC5	; 197
    216e:	1c 92       	st	X, r1
        iLED[HCKR[G][5-simonCounter]] = 0;
    2170:	e6 81       	ldd	r30, Z+6	; 0x06
    2172:	f0 e0       	ldi	r31, 0x00	; 0
    2174:	e8 52       	subi	r30, 0x28	; 40
    2176:	f5 4c       	sbci	r31, 0xC5	; 197
    2178:	10 82       	st	Z, r1
    217a:	0c c0       	rjmp	.+24     	; 0x2194 <BastetDictates+0x2e2>
    }

    if (BASTET_GAME_OVER == simonGameState) {
    217c:	87 30       	cpi	r24, 0x07	; 7
    217e:	51 f4       	brne	.+20     	; 0x2194 <BastetDictates+0x2e2>
        simonInputPos = 0;
    2180:	10 92 72 38 	sts	0x3872, r1	; 0x803872 <simonInputPos>
        simonPos = 0;
    2184:	10 92 73 38 	sts	0x3873, r1	; 0x803873 <simonPos>
        simonGameState = BASTET_BOOT; // BASTET_GAME_START for stale "field" ツ
    2188:	10 92 6e 38 	sts	0x386E, r1	; 0x80386e <simonGameState>
        gameNow = TEXT;
    218c:	10 92 4c 38 	sts	0x384C, r1	; 0x80384c <gameNow>
        simonLed(0);
    2190:	80 e0       	ldi	r24, 0x00	; 0
    2192:	5c de       	rcall	.-840    	; 0x1e4c <simonLed>
    }

    ++simonTimer;
    2194:	80 91 71 38 	lds	r24, 0x3871	; 0x803871 <simonTimer>
    2198:	8f 5f       	subi	r24, 0xFF	; 255
    219a:	80 93 71 38 	sts	0x3871, r24	; 0x803871 <simonTimer>
    return 0;
}
    219e:	80 e0       	ldi	r24, 0x00	; 0
    21a0:	df 91       	pop	r29
    21a2:	cf 91       	pop	r28
    21a4:	1f 91       	pop	r17
    21a6:	0f 91       	pop	r16
    21a8:	08 95       	ret

000021aa <Cheat>:

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    reactStr[1][number]=length;
    reactStr[2][number]=type;
    21aa:	a2 e1       	ldi	r26, 0x12	; 18
    21ac:	b0 e0       	ldi	r27, 0x00	; 0
    21ae:	eb ed       	ldi	r30, 0xDB	; 219
    21b0:	f0 e1       	ldi	r31, 0x10	; 16
    21b2:	0c 94 69 1f 	jmp	0x3ed2	; 0x3ed2 <__prologue_saves__+0x1e>
    21b6:	8a 8b       	std	Y+18, r24	; 0x12
    21b8:	80 e1       	ldi	r24, 0x10	; 16
    21ba:	ea e1       	ldi	r30, 0x1A	; 26
    21bc:	ff eb       	ldi	r31, 0xBF	; 191
    21be:	de 01       	movw	r26, r28
    21c0:	11 96       	adiw	r26, 0x01	; 1
    21c2:	01 90       	ld	r0, Z+
    21c4:	0d 92       	st	X+, r0
    21c6:	8a 95       	dec	r24
    21c8:	e1 f7       	brne	.-8      	; 0x21c2 <Cheat+0x18>
    21ca:	fe 01       	movw	r30, r28
    21cc:	31 96       	adiw	r30, 0x01	; 1
    21ce:	90 e0       	ldi	r25, 0x00	; 0
    21d0:	8f ef       	ldi	r24, 0xFF	; 255
    21d2:	21 91       	ld	r18, Z+
    21d4:	31 91       	ld	r19, Z+
    21d6:	26 17       	cp	r18, r22
    21d8:	37 07       	cpc	r19, r23
    21da:	09 f4       	brne	.+2      	; 0x21de <Cheat+0x34>
    21dc:	89 2f       	mov	r24, r25
    21de:	9f 5f       	subi	r25, 0xFF	; 255
    21e0:	98 30       	cpi	r25, 0x08	; 8
    21e2:	b9 f7       	brne	.-18     	; 0x21d2 <Cheat+0x28>
    21e4:	88 30       	cpi	r24, 0x08	; 8
    21e6:	10 f0       	brcs	.+4      	; 0x21ec <Cheat+0x42>
    21e8:	80 e0       	ldi	r24, 0x00	; 0
    21ea:	14 c0       	rjmp	.+40     	; 0x2214 <Cheat+0x6a>
    21ec:	18 e1       	ldi	r17, 0x18	; 24
    21ee:	18 0f       	add	r17, r24
    21f0:	41 e0       	ldi	r20, 0x01	; 1
    21f2:	be 01       	movw	r22, r28
    21f4:	6f 5e       	subi	r22, 0xEF	; 239
    21f6:	7f 4f       	sbci	r23, 0xFF	; 255
    21f8:	81 2f       	mov	r24, r17
    21fa:	0e 94 56 07 	call	0xeac	; 0xeac <EERead>
    21fe:	89 89       	ldd	r24, Y+17	; 0x11
    2200:	8f 3f       	cpi	r24, 0xFF	; 255
    2202:	91 f7       	brne	.-28     	; 0x21e8 <Cheat+0x3e>
    2204:	41 e0       	ldi	r20, 0x01	; 1
    2206:	be 01       	movw	r22, r28
    2208:	6e 5e       	subi	r22, 0xEE	; 238
    220a:	7f 4f       	sbci	r23, 0xFF	; 255
    220c:	81 2f       	mov	r24, r17
    220e:	0e 94 66 07 	call	0xecc	; 0xecc <EEWrite>
    2212:	81 e0       	ldi	r24, 0x01	; 1
    2214:	62 96       	adiw	r28, 0x12	; 18
    2216:	e3 e0       	ldi	r30, 0x03	; 3
    2218:	0c 94 82 1f 	jmp	0x3f04	; 0x3f04 <__epilogue_restores__+0x1e>

0000221c <UnflipData>:
    221c:	26 2f       	mov	r18, r22
    221e:	fb 01       	movw	r30, r22
    2220:	35 e5       	ldi	r19, 0x55	; 85
    2222:	9e 2f       	mov	r25, r30
    2224:	92 1b       	sub	r25, r18
    2226:	98 17       	cp	r25, r24
    2228:	28 f4       	brcc	.+10     	; 0x2234 <UnflipData+0x18>
    222a:	90 81       	ld	r25, Z
    222c:	92 95       	swap	r25
    222e:	93 27       	eor	r25, r19
    2230:	91 93       	st	Z+, r25
    2232:	f7 cf       	rjmp	.-18     	; 0x2222 <UnflipData+0x6>
    2234:	08 95       	ret

00002236 <ClearTxAfter>:
    2236:	8f 5f       	subi	r24, 0xFF	; 255
    2238:	88 30       	cpi	r24, 0x08	; 8
    223a:	30 f4       	brcc	.+12     	; 0x2248 <ClearTxAfter+0x12>
    223c:	e8 2f       	mov	r30, r24
    223e:	f0 e0       	ldi	r31, 0x00	; 0
    2240:	e6 5a       	subi	r30, 0xA6	; 166
    2242:	f5 4c       	sbci	r31, 0xC5	; 197
    2244:	10 82       	st	Z, r1
    2246:	f7 cf       	rjmp	.-18     	; 0x2236 <ClearTxAfter>
    2248:	08 95       	ret

0000224a <StartsWith>:
    224a:	ac 01       	movw	r20, r24
    224c:	90 e0       	ldi	r25, 0x00	; 0
    224e:	e9 2f       	mov	r30, r25
    2250:	f0 e0       	ldi	r31, 0x00	; 0
    2252:	da 01       	movw	r26, r20
    2254:	ae 0f       	add	r26, r30
    2256:	bf 1f       	adc	r27, r31
    2258:	3c 91       	ld	r19, X
    225a:	e6 0f       	add	r30, r22
    225c:	f7 1f       	adc	r31, r23
    225e:	31 11       	cpse	r19, r1
    2260:	05 c0       	rjmp	.+10     	; 0x226c <StartsWith+0x22>
    2262:	81 e0       	ldi	r24, 0x01	; 1
    2264:	90 81       	ld	r25, Z
    2266:	99 23       	and	r25, r25
    2268:	49 f0       	breq	.+18     	; 0x227c <StartsWith+0x32>
    226a:	07 c0       	rjmp	.+14     	; 0x227a <StartsWith+0x30>
    226c:	20 81       	ld	r18, Z
    226e:	22 23       	and	r18, r18
    2270:	c1 f3       	breq	.-16     	; 0x2262 <StartsWith+0x18>
    2272:	32 13       	cpse	r19, r18
    2274:	02 c0       	rjmp	.+4      	; 0x227a <StartsWith+0x30>
    2276:	9f 5f       	subi	r25, 0xFF	; 255
    2278:	ea cf       	rjmp	.-44     	; 0x224e <StartsWith+0x4>
    227a:	80 e0       	ldi	r24, 0x00	; 0
    227c:	08 95       	ret

0000227e <PrepareSending>:
    227e:	cf 93       	push	r28
    2280:	df 93       	push	r29
    2282:	fc 01       	movw	r30, r24
    2284:	61 15       	cp	r22, r1
    2286:	71 05       	cpc	r23, r1
    2288:	59 f1       	breq	.+86     	; 0x22e0 <PrepareSending+0x62>
    228a:	a2 e6       	ldi	r26, 0x62	; 98
    228c:	ba e3       	ldi	r27, 0x3A	; 58
    228e:	ca e5       	ldi	r28, 0x5A	; 90
    2290:	da e3       	ldi	r29, 0x3A	; 58
    2292:	80 e0       	ldi	r24, 0x00	; 0
    2294:	9f ef       	ldi	r25, 0xFF	; 255
    2296:	6f 3f       	cpi	r22, 0xFF	; 255
    2298:	71 05       	cpc	r23, r1
    229a:	69 f0       	breq	.+26     	; 0x22b6 <PrepareSending+0x38>
    229c:	60 f0       	brcs	.+24     	; 0x22b6 <PrepareSending+0x38>
    229e:	ed 93       	st	X+, r30
    22a0:	fd 93       	st	X+, r31
    22a2:	99 93       	st	Y+, r25
    22a4:	e1 50       	subi	r30, 0x01	; 1
    22a6:	ff 4f       	sbci	r31, 0xFF	; 255
    22a8:	6f 5f       	subi	r22, 0xFF	; 255
    22aa:	71 09       	sbc	r23, r1
    22ac:	8f 5f       	subi	r24, 0xFF	; 255
    22ae:	87 30       	cpi	r24, 0x07	; 7
    22b0:	91 f7       	brne	.-28     	; 0x2296 <PrepareSending+0x18>
    22b2:	81 e0       	ldi	r24, 0x01	; 1
    22b4:	1e c0       	rjmp	.+60     	; 0x22f2 <PrepareSending+0x74>
    22b6:	28 2f       	mov	r18, r24
    22b8:	30 e0       	ldi	r19, 0x00	; 0
    22ba:	d9 01       	movw	r26, r18
    22bc:	aa 0f       	add	r26, r26
    22be:	bb 1f       	adc	r27, r27
    22c0:	ae 59       	subi	r26, 0x9E	; 158
    22c2:	b5 4c       	sbci	r27, 0xC5	; 197
    22c4:	ed 93       	st	X+, r30
    22c6:	fc 93       	st	X, r31
    22c8:	6f 3f       	cpi	r22, 0xFF	; 255
    22ca:	71 05       	cpc	r23, r1
    22cc:	11 f4       	brne	.+4      	; 0x22d2 <PrepareSending+0x54>
    22ce:	6e ef       	ldi	r22, 0xFE	; 254
    22d0:	70 e0       	ldi	r23, 0x00	; 0
    22d2:	f9 01       	movw	r30, r18
    22d4:	e6 5a       	subi	r30, 0xA6	; 166
    22d6:	f5 4c       	sbci	r31, 0xC5	; 197
    22d8:	60 83       	st	Z, r22
    22da:	40 93 58 3a 	sts	0x3A58, r20	; 0x803a58 <txTypeNow>
    22de:	05 c0       	rjmp	.+10     	; 0x22ea <PrepareSending+0x6c>
    22e0:	10 92 62 3a 	sts	0x3A62, r1	; 0x803a62 <txAddrList>
    22e4:	10 92 63 3a 	sts	0x3A63, r1	; 0x803a63 <txAddrList+0x1>
    22e8:	80 e0       	ldi	r24, 0x00	; 0
    22ea:	a5 df       	rcall	.-182    	; 0x2236 <ClearTxAfter>
    22ec:	10 92 59 3a 	sts	0x3A59, r1	; 0x803a59 <txAddrNow>
    22f0:	80 e0       	ldi	r24, 0x00	; 0
    22f2:	df 91       	pop	r29
    22f4:	cf 91       	pop	r28
    22f6:	08 95       	ret

000022f8 <SetStandardResponse>:
}

//
uint8_t SetStandardResponse(uint8_t custStrEnd){
    22f8:	cf 93       	push	r28
    22fa:	df 93       	push	r29
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    22fc:	28 2f       	mov	r18, r24
    22fe:	30 e0       	ldi	r19, 0x00	; 0
    2300:	f9 01       	movw	r30, r18
    2302:	ee 0f       	add	r30, r30
    2304:	ff 1f       	adc	r31, r31
    2306:	e3 5d       	subi	r30, 0xD3	; 211
    2308:	f6 4c       	sbci	r31, 0xC6	; 198
    230a:	a9 e5       	ldi	r26, 0x59	; 89
    230c:	ba e7       	ldi	r27, 0x7A	; 122
    230e:	a0 83       	st	Z, r26
    2310:	b1 83       	std	Z+1, r27	; 0x01
    reactStr[1][number]=length;
    2312:	f9 01       	movw	r30, r18
    2314:	ee 0f       	add	r30, r30
    2316:	ff 1f       	adc	r31, r31
    2318:	e3 59       	subi	r30, 0x93	; 147
    231a:	f6 4c       	sbci	r31, 0xC6	; 198
    231c:	62 e0       	ldi	r22, 0x02	; 2
    231e:	70 e0       	ldi	r23, 0x00	; 0
    2320:	60 83       	st	Z, r22
    2322:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    2324:	22 0f       	add	r18, r18
    2326:	33 1f       	adc	r19, r19
    2328:	f9 01       	movw	r30, r18
    232a:	e3 55       	subi	r30, 0x53	; 83
    232c:	f6 4c       	sbci	r31, 0xC6	; 198
    232e:	41 e0       	ldi	r20, 0x01	; 1
    2330:	50 e0       	ldi	r21, 0x00	; 0
    2332:	40 83       	st	Z, r20
    2334:	51 83       	std	Z+1, r21	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2336:	21 e0       	ldi	r18, 0x01	; 1
    2338:	28 0f       	add	r18, r24
    233a:	30 e0       	ldi	r19, 0x00	; 0
    233c:	f9 01       	movw	r30, r18
    233e:	ee 0f       	add	r30, r30
    2340:	ff 1f       	adc	r31, r31
    2342:	e3 5d       	subi	r30, 0xD3	; 211
    2344:	f6 4c       	sbci	r31, 0xC6	; 198
    2346:	c2 e6       	ldi	r28, 0x62	; 98
    2348:	da e7       	ldi	r29, 0x7A	; 122
    234a:	c0 83       	st	Z, r28
    234c:	d1 83       	std	Z+1, r29	; 0x01
    reactStr[1][number]=length;
    234e:	f9 01       	movw	r30, r18
    2350:	ee 0f       	add	r30, r30
    2352:	ff 1f       	adc	r31, r31
    2354:	e3 59       	subi	r30, 0x93	; 147
    2356:	f6 4c       	sbci	r31, 0xC6	; 198
    2358:	cc e0       	ldi	r28, 0x0C	; 12
    235a:	d0 e0       	ldi	r29, 0x00	; 0
    235c:	c0 83       	st	Z, r28
    235e:	d1 83       	std	Z+1, r29	; 0x01
    reactStr[2][number]=type;
    2360:	22 0f       	add	r18, r18
    2362:	33 1f       	adc	r19, r19
    2364:	f9 01       	movw	r30, r18
    2366:	e3 55       	subi	r30, 0x53	; 83
    2368:	f6 4c       	sbci	r31, 0xC6	; 198
    236a:	40 83       	st	Z, r20
    236c:	51 83       	std	Z+1, r21	; 0x01
//
uint8_t SetStandardResponse(uint8_t custStrEnd){

    SetResponse(custStrEnd++, A_LF, 2, TEASER);
    SetResponse(custStrEnd++, A_LOCATION, L_LOCATION, TEASER);
    reactStr[0][custStrEnd++] = CURR_LOC;
    236e:	e2 e0       	ldi	r30, 0x02	; 2
    2370:	e8 0f       	add	r30, r24
    2372:	f0 e0       	ldi	r31, 0x00	; 0
    2374:	ee 0f       	add	r30, r30
    2376:	ff 1f       	adc	r31, r31
    2378:	e3 5d       	subi	r30, 0xD3	; 211
    237a:	f6 4c       	sbci	r31, 0xC6	; 198
    237c:	20 ef       	ldi	r18, 0xF0	; 240
    237e:	3f ef       	ldi	r19, 0xFF	; 255
    2380:	20 83       	st	Z, r18
    2382:	31 83       	std	Z+1, r19	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2384:	23 e0       	ldi	r18, 0x03	; 3
    2386:	28 0f       	add	r18, r24
    2388:	30 e0       	ldi	r19, 0x00	; 0
    238a:	f9 01       	movw	r30, r18
    238c:	ee 0f       	add	r30, r30
    238e:	ff 1f       	adc	r31, r31
    2390:	e3 5d       	subi	r30, 0xD3	; 211
    2392:	f6 4c       	sbci	r31, 0xC6	; 198
    2394:	a0 83       	st	Z, r26
    2396:	b1 83       	std	Z+1, r27	; 0x01
    reactStr[1][number]=length;
    2398:	f9 01       	movw	r30, r18
    239a:	ee 0f       	add	r30, r30
    239c:	ff 1f       	adc	r31, r31
    239e:	e3 59       	subi	r30, 0x93	; 147
    23a0:	f6 4c       	sbci	r31, 0xC6	; 198
    23a2:	60 83       	st	Z, r22
    23a4:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    23a6:	22 0f       	add	r18, r18
    23a8:	33 1f       	adc	r19, r19
    23aa:	f9 01       	movw	r30, r18
    23ac:	e3 55       	subi	r30, 0x53	; 83
    23ae:	f6 4c       	sbci	r31, 0xC6	; 198
    23b0:	40 83       	st	Z, r20
    23b2:	51 83       	std	Z+1, r21	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    23b4:	24 e0       	ldi	r18, 0x04	; 4
    23b6:	28 0f       	add	r18, r24
    23b8:	30 e0       	ldi	r19, 0x00	; 0
    23ba:	f9 01       	movw	r30, r18
    23bc:	ee 0f       	add	r30, r30
    23be:	ff 1f       	adc	r31, r31
    23c0:	e3 5d       	subi	r30, 0xD3	; 211
    23c2:	f6 4c       	sbci	r31, 0xC6	; 198
    23c4:	a5 e5       	ldi	r26, 0x55	; 85
    23c6:	ba e7       	ldi	r27, 0x7A	; 122
    23c8:	a0 83       	st	Z, r26
    23ca:	b1 83       	std	Z+1, r27	; 0x01
    reactStr[1][number]=length;
    23cc:	f9 01       	movw	r30, r18
    23ce:	ee 0f       	add	r30, r30
    23d0:	ff 1f       	adc	r31, r31
    23d2:	e3 59       	subi	r30, 0x93	; 147
    23d4:	f6 4c       	sbci	r31, 0xC6	; 198
    23d6:	60 83       	st	Z, r22
    23d8:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    23da:	22 0f       	add	r18, r18
    23dc:	33 1f       	adc	r19, r19
    23de:	f9 01       	movw	r30, r18
    23e0:	e3 55       	subi	r30, 0x53	; 83
    23e2:	f6 4c       	sbci	r31, 0xC6	; 198
    23e4:	40 83       	st	Z, r20
    23e6:	51 83       	std	Z+1, r21	; 0x01
    reactStr[0][custStrEnd++] = CURR_LOC;
    SetResponse(custStrEnd++, A_LF, 2, TEASER);
    SetResponse(custStrEnd++, A_PROMPT, L_PROMPT, TEASER);

    return custStrEnd;
}
    23e8:	8b 5f       	subi	r24, 0xFB	; 251
    23ea:	df 91       	pop	r29
    23ec:	cf 91       	pop	r28
    23ee:	08 95       	ret

000023f0 <PopulateObject>:

//Get all the relevant data and string addresses of an object
void PopulateObject(uint16_t offset, object_model_t *object){
    23f0:	af 92       	push	r10
    23f2:	bf 92       	push	r11
    23f4:	df 92       	push	r13
    23f6:	ef 92       	push	r14
    23f8:	ff 92       	push	r15
    23fa:	0f 93       	push	r16
    23fc:	1f 93       	push	r17
    23fe:	cf 93       	push	r28
    2400:	df 93       	push	r29
    2402:	cd b7       	in	r28, 0x3d	; 61
    2404:	de b7       	in	r29, 0x3e	; 62
    2406:	2c 97       	sbiw	r28, 0x0c	; 12
    2408:	cd bf       	out	0x3d, r28	; 61
    240a:	de bf       	out	0x3e, r29	; 62
    240c:	7c 01       	movw	r14, r24
    240e:	8b 01       	movw	r16, r22
    uint16_t parStr;
    offset += L_BOILER;

    //Fill things with fixed distance to offset
    uint8_t data[OFF_STRINGFLDS];
    ExtEERead(offset, OFF_STRINGFLDS, GAME, &data[0]);
    2410:	9e 01       	movw	r18, r28
    2412:	2f 5f       	subi	r18, 0xFF	; 255
    2414:	3f 4f       	sbci	r19, 0xFF	; 255
    2416:	40 e0       	ldi	r20, 0x00	; 0
    2418:	6c e0       	ldi	r22, 0x0C	; 12
    241a:	80 96       	adiw	r24, 0x20	; 32
    241c:	0e 94 a8 07 	call	0xf50	; 0xf50 <ExtEERead>
    object->addrNextObj = (data[OFF_NEXTOBJ]<<8|data[OFF_NEXTOBJ+1])+L_BOILER;
    2420:	89 81       	ldd	r24, Y+1	; 0x01
    2422:	9a 81       	ldd	r25, Y+2	; 0x02
    2424:	98 27       	eor	r25, r24
    2426:	89 27       	eor	r24, r25
    2428:	98 27       	eor	r25, r24
    242a:	80 96       	adiw	r24, 0x20	; 32
    242c:	f8 01       	movw	r30, r16
    242e:	80 83       	st	Z, r24
    2430:	91 83       	std	Z+1, r25	; 0x01
    object->addrNextLvl = (data[OFF_NEXTLVL]<<8|data[OFF_NEXTLVL+1])+L_BOILER;
    2432:	8b 81       	ldd	r24, Y+3	; 0x03
    2434:	9c 81       	ldd	r25, Y+4	; 0x04
    2436:	98 27       	eor	r25, r24
    2438:	89 27       	eor	r24, r25
    243a:	98 27       	eor	r25, r24
    243c:	80 96       	adiw	r24, 0x20	; 32
    243e:	82 83       	std	Z+2, r24	; 0x02
    2440:	93 83       	std	Z+3, r25	; 0x03
    2442:	de 01       	movw	r26, r28
    2444:	15 96       	adiw	r26, 0x05	; 5
    2446:	34 96       	adiw	r30, 0x04	; 4
    2448:	c8 01       	movw	r24, r16
    244a:	0c 96       	adiw	r24, 0x0c	; 12
    for (uint8_t x=0; x<BYTE_FIELDS_LEN; ++x){
        object->byteField[x]=data[x+OFF_BYTEFLDS];
    244c:	2d 91       	ld	r18, X+
    244e:	21 93       	st	Z+, r18
    //Fill things with fixed distance to offset
    uint8_t data[OFF_STRINGFLDS];
    ExtEERead(offset, OFF_STRINGFLDS, GAME, &data[0]);
    object->addrNextObj = (data[OFF_NEXTOBJ]<<8|data[OFF_NEXTOBJ+1])+L_BOILER;
    object->addrNextLvl = (data[OFF_NEXTLVL]<<8|data[OFF_NEXTLVL+1])+L_BOILER;
    for (uint8_t x=0; x<BYTE_FIELDS_LEN; ++x){
    2450:	e8 17       	cp	r30, r24
    2452:	f9 07       	cpc	r31, r25
    2454:	d9 f7       	brne	.-10     	; 0x244c <PopulateObject+0x5c>
        object->byteField[x]=data[x+OFF_BYTEFLDS];
    }

    //Find out where all of the strings begin and how long they are
    offset += OFF_STRINGFLDS;
    2456:	fc e2       	ldi	r31, 0x2C	; 44
    2458:	ef 0e       	add	r14, r31
    245a:	f1 1c       	adc	r15, r1
    245c:	58 01       	movw	r10, r16
    for(uint8_t x=0; x<STRING_FIELDS_LEN; ++x){
    245e:	d1 2c       	mov	r13, r1
        
        //Determine length
        ExtEERead(offset, 3, GAME, &data[0]);
    2460:	9e 01       	movw	r18, r28
    2462:	2f 5f       	subi	r18, 0xFF	; 255
    2464:	3f 4f       	sbci	r19, 0xFF	; 255
    2466:	40 e0       	ldi	r20, 0x00	; 0
    2468:	63 e0       	ldi	r22, 0x03	; 3
    246a:	c7 01       	movw	r24, r14
    246c:	0e 94 a8 07 	call	0xf50	; 0xf50 <ExtEERead>
    2470:	89 81       	ldd	r24, Y+1	; 0x01
    2472:	9a 81       	ldd	r25, Y+2	; 0x02
    2474:	98 27       	eor	r25, r24
    2476:	89 27       	eor	r24, r25
    2478:	98 27       	eor	r25, r24
        parStr = (data[0]<<8|data[1]);
        offset += 2;
    247a:	97 01       	movw	r18, r14
    247c:	2e 5f       	subi	r18, 0xFE	; 254
    247e:	3f 4f       	sbci	r19, 0xFF	; 255
        if (x >= OPEN_ACL_MSG){
    2480:	43 e0       	ldi	r20, 0x03	; 3
    2482:	4d 15       	cp	r20, r13
    2484:	80 f4       	brcc	.+32     	; 0x24a6 <PopulateObject+0xb6>
            object->lenStr[x]= parStr-1;
    2486:	ac 01       	movw	r20, r24
    2488:	41 50       	subi	r20, 0x01	; 1
    248a:	51 09       	sbc	r21, r1
    248c:	f8 01       	movw	r30, r16
    248e:	42 8f       	std	Z+26, r20	; 0x1a
    2490:	53 8f       	std	Z+27, r21	; 0x1b
            object->addrStr[x]=offset+1;
    2492:	f3 e0       	ldi	r31, 0x03	; 3
    2494:	ef 0e       	add	r14, r31
    2496:	f1 1c       	adc	r15, r1
    2498:	f8 01       	movw	r30, r16
    249a:	e4 86       	std	Z+12, r14	; 0x0c
    249c:	f5 86       	std	Z+13, r15	; 0x0d
            object->effect[x-OPEN_ACL_MSG] = data[2];
    249e:	4b 81       	ldd	r20, Y+3	; 0x03
    24a0:	f5 01       	movw	r30, r10
    24a2:	44 a3       	std	Z+36, r20	; 0x24
    24a4:	05 c0       	rjmp	.+10     	; 0x24b0 <PopulateObject+0xc0>
        } else {
            object->lenStr[x]= parStr;
    24a6:	f8 01       	movw	r30, r16
    24a8:	82 8f       	std	Z+26, r24	; 0x1a
    24aa:	93 8f       	std	Z+27, r25	; 0x1b
            object->addrStr[x]=offset;
    24ac:	24 87       	std	Z+12, r18	; 0x0c
    24ae:	35 87       	std	Z+13, r19	; 0x0d
        }
        
        //Determine string start location for next field
        offset += parStr;
    24b0:	7c 01       	movw	r14, r24
    24b2:	e2 0e       	add	r14, r18
    24b4:	f3 1e       	adc	r15, r19
        object->byteField[x]=data[x+OFF_BYTEFLDS];
    }

    //Find out where all of the strings begin and how long they are
    offset += OFF_STRINGFLDS;
    for(uint8_t x=0; x<STRING_FIELDS_LEN; ++x){
    24b6:	d3 94       	inc	r13
    24b8:	0e 5f       	subi	r16, 0xFE	; 254
    24ba:	1f 4f       	sbci	r17, 0xFF	; 255
    24bc:	ff ef       	ldi	r31, 0xFF	; 255
    24be:	af 1a       	sub	r10, r31
    24c0:	bf 0a       	sbc	r11, r31
    24c2:	47 e0       	ldi	r20, 0x07	; 7
    24c4:	d4 12       	cpse	r13, r20
    24c6:	cc cf       	rjmp	.-104    	; 0x2460 <PopulateObject+0x70>
        }
        
        //Determine string start location for next field
        offset += parStr;
    }    
}
    24c8:	2c 96       	adiw	r28, 0x0c	; 12
    24ca:	cd bf       	out	0x3d, r28	; 61
    24cc:	de bf       	out	0x3e, r29	; 62
    24ce:	df 91       	pop	r29
    24d0:	cf 91       	pop	r28
    24d2:	1f 91       	pop	r17
    24d4:	0f 91       	pop	r16
    24d6:	ff 90       	pop	r15
    24d8:	ef 90       	pop	r14
    24da:	df 90       	pop	r13
    24dc:	bf 90       	pop	r11
    24de:	af 90       	pop	r10
    24e0:	08 95       	ret

000024e2 <CheckLetter>:

//Check if the entered letter corresponds with a name
uint8_t CheckLetter(uint16_t object, uint8_t letter){
    24e2:	a0 e2       	ldi	r26, 0x20	; 32
    24e4:	b0 e0       	ldi	r27, 0x00	; 0
    24e6:	e7 e7       	ldi	r30, 0x77	; 119
    24e8:	f2 e1       	ldi	r31, 0x12	; 18
    24ea:	0c 94 64 1f 	jmp	0x3ec8	; 0x3ec8 <__prologue_saves__+0x14>
    24ee:	c6 2e       	mov	r12, r22
    
    uint8_t found = 0;
    uint8_t data[32];

    object += L_BOILER;
    24f0:	7c 01       	movw	r14, r24
    24f2:	20 e2       	ldi	r18, 0x20	; 32
    24f4:	e2 0e       	add	r14, r18
    24f6:	f1 1c       	adc	r15, r1
    ExtEERead(object+OFF_STRINGFLDS, 2, GAME, &data[0]);
    24f8:	9e 01       	movw	r18, r28
    24fa:	2f 5f       	subi	r18, 0xFF	; 255
    24fc:	3f 4f       	sbci	r19, 0xFF	; 255
    24fe:	40 e0       	ldi	r20, 0x00	; 0
    2500:	62 e0       	ldi	r22, 0x02	; 2
    2502:	8c 96       	adiw	r24, 0x2c	; 44
    2504:	0e 94 a8 07 	call	0xf50	; 0xf50 <ExtEERead>
    uint8_t x = data[1]; //Assuming a name is not longer than 255 characters.
    2508:	1a 81       	ldd	r17, Y+2	; 0x02
}

//Check if the entered letter corresponds with a name
uint8_t CheckLetter(uint16_t object, uint8_t letter){
    
    uint8_t found = 0;
    250a:	d1 2c       	mov	r13, r1

    object += L_BOILER;
    ExtEERead(object+OFF_STRINGFLDS, 2, GAME, &data[0]);
    uint8_t x = data[1]; //Assuming a name is not longer than 255 characters.

    while (x){
    250c:	11 23       	and	r17, r17
    250e:	59 f1       	breq	.+86     	; 0x2566 <CheckLetter+0x84>
    2510:	01 2f       	mov	r16, r17
    2512:	11 32       	cpi	r17, 0x21	; 33
    2514:	08 f0       	brcs	.+2      	; 0x2518 <CheckLetter+0x36>
    2516:	00 e2       	ldi	r16, 0x20	; 32
        uint8_t max;
        if (x>32) max = 32; else max = x;
        ExtEERead(object+OFF_STRINGFLDS+2, max, GAME, &data[0]);
    2518:	9e 01       	movw	r18, r28
    251a:	2f 5f       	subi	r18, 0xFF	; 255
    251c:	3f 4f       	sbci	r19, 0xFF	; 255
    251e:	40 e0       	ldi	r20, 0x00	; 0
    2520:	60 2f       	mov	r22, r16
    2522:	c7 01       	movw	r24, r14
    2524:	0e 96       	adiw	r24, 0x0e	; 14
    2526:	0e 94 a8 07 	call	0xf50	; 0xf50 <ExtEERead>
    252a:	fe 01       	movw	r30, r28
    252c:	31 96       	adiw	r30, 0x01	; 1
        for (uint8_t y=0; y<max; ++y){
    252e:	80 e0       	ldi	r24, 0x00	; 0
            if (found){
    2530:	dd 20       	and	r13, r13
    2532:	61 f0       	breq	.+24     	; 0x254c <CheckLetter+0x6a>
                if ((data[y]|0x20) == letter) return 1; else return 0;
    2534:	e1 e0       	ldi	r30, 0x01	; 1
    2536:	f0 e0       	ldi	r31, 0x00	; 0
    2538:	ec 0f       	add	r30, r28
    253a:	fd 1f       	adc	r31, r29
    253c:	e8 0f       	add	r30, r24
    253e:	f1 1d       	adc	r31, r1
    2540:	90 81       	ld	r25, Z
    2542:	90 62       	ori	r25, 0x20	; 32
    2544:	81 e0       	ldi	r24, 0x01	; 1
    2546:	9c 11       	cpse	r25, r12
    2548:	0e c0       	rjmp	.+28     	; 0x2566 <CheckLetter+0x84>
    254a:	0e c0       	rjmp	.+28     	; 0x2568 <CheckLetter+0x86>
            }
            if (data[y] == '[') found = 1;
    254c:	91 91       	ld	r25, Z+
    254e:	dd 24       	eor	r13, r13
    2550:	d3 94       	inc	r13
    2552:	9b 35       	cpi	r25, 0x5B	; 91
    2554:	09 f0       	breq	.+2      	; 0x2558 <CheckLetter+0x76>
    2556:	d1 2c       	mov	r13, r1

    while (x){
        uint8_t max;
        if (x>32) max = 32; else max = x;
        ExtEERead(object+OFF_STRINGFLDS+2, max, GAME, &data[0]);
        for (uint8_t y=0; y<max; ++y){
    2558:	8f 5f       	subi	r24, 0xFF	; 255
    255a:	80 17       	cp	r24, r16
    255c:	48 f3       	brcs	.-46     	; 0x2530 <CheckLetter+0x4e>
            if (found){
                if ((data[y]|0x20) == letter) return 1; else return 0;
            }
            if (data[y] == '[') found = 1;
        }
        object += max;
    255e:	e0 0e       	add	r14, r16
    2560:	f1 1c       	adc	r15, r1
        x -= max;
    2562:	10 1b       	sub	r17, r16
    2564:	d3 cf       	rjmp	.-90     	; 0x250c <CheckLetter+0x2a>
    }
    return 0;
    2566:	80 e0       	ldi	r24, 0x00	; 0
}
    2568:	a0 96       	adiw	r28, 0x20	; 32
    256a:	e8 e0       	ldi	r30, 0x08	; 8
    256c:	0c 94 7d 1f 	jmp	0x3efa	; 0x3efa <__epilogue_restores__+0x14>

00002570 <FindChild>:

//Returns the child's address if the child is visible and the search letter matches
uint16_t FindChild(uint16_t parent, uint8_t letter, uint16_t start){
    2570:	af 92       	push	r10
    2572:	bf 92       	push	r11
    2574:	df 92       	push	r13
    2576:	ef 92       	push	r14
    2578:	ff 92       	push	r15
    257a:	0f 93       	push	r16
    257c:	1f 93       	push	r17
    257e:	cf 93       	push	r28
    2580:	df 93       	push	r29
    2582:	00 d0       	rcall	.+0      	; 0x2584 <FindChild+0x14>
    2584:	00 d0       	rcall	.+0      	; 0x2586 <FindChild+0x16>
    2586:	cd b7       	in	r28, 0x3d	; 61
    2588:	de b7       	in	r29, 0x3e	; 62
    258a:	d6 2e       	mov	r13, r22
    258c:	5a 01       	movw	r10, r20
    
    uint16_t child = parent;
    uint8_t data[4];

    ExtEERead(child+L_BOILER, 4, GAME, &data[0]);
    258e:	9e 01       	movw	r18, r28
    2590:	2f 5f       	subi	r18, 0xFF	; 255
    2592:	3f 4f       	sbci	r19, 0xFF	; 255
    2594:	40 e0       	ldi	r20, 0x00	; 0
    2596:	64 e0       	ldi	r22, 0x04	; 4
    2598:	80 96       	adiw	r24, 0x20	; 32
    259a:	0e 94 a8 07 	call	0xf50	; 0xf50 <ExtEERead>
    259e:	e9 80       	ldd	r14, Y+1	; 0x01
    25a0:	fa 80       	ldd	r15, Y+2	; 0x02
    25a2:	fe 24       	eor	r15, r14
    25a4:	ef 24       	eor	r14, r15
    25a6:	fe 24       	eor	r15, r14
    25a8:	0b 81       	ldd	r16, Y+3	; 0x03
    25aa:	1c 81       	ldd	r17, Y+4	; 0x04
    25ac:	10 27       	eor	r17, r16
    25ae:	01 27       	eor	r16, r17
    25b0:	10 27       	eor	r17, r16
    parent = (data[0]<<8|data[1]);    //Next object on parent level
    child =  (data[2]<<8|data[3]);    //First object on child level

    //As long as the child is within the parent's range
    while (parent>child){
    25b2:	0e 15       	cp	r16, r14
    25b4:	1f 05       	cpc	r17, r15
    25b6:	48 f5       	brcc	.+82     	; 0x260a <FindChild+0x9a>

        //If child's address is higher than the start address, perform search for letter
        if (child>start){
    25b8:	a0 16       	cp	r10, r16
    25ba:	b1 06       	cpc	r11, r17
    25bc:	60 f0       	brcs	.+24     	; 0x25d6 <FindChild+0x66>
                if ((letter == 0)||(CheckLetter(child, letter))) return child;
            }
        }

        //Not visible or name not right
        ExtEERead(child+L_BOILER, 2, GAME, &data[0]);
    25be:	9e 01       	movw	r18, r28
    25c0:	2f 5f       	subi	r18, 0xFF	; 255
    25c2:	3f 4f       	sbci	r19, 0xFF	; 255
    25c4:	40 e0       	ldi	r20, 0x00	; 0
    25c6:	62 e0       	ldi	r22, 0x02	; 2
    25c8:	c8 01       	movw	r24, r16
    25ca:	80 96       	adiw	r24, 0x20	; 32
    25cc:	0e 94 a8 07 	call	0xf50	; 0xf50 <ExtEERead>
    25d0:	09 81       	ldd	r16, Y+1	; 0x01
    25d2:	1a 81       	ldd	r17, Y+2	; 0x02
    25d4:	eb cf       	rjmp	.-42     	; 0x25ac <FindChild+0x3c>
    //As long as the child is within the parent's range
    while (parent>child){

        //If child's address is higher than the start address, perform search for letter
        if (child>start){
            ExtEERead(child+OFF_BYTEFLDS+VISIBLE_ACL+L_BOILER, 1, GAME, &data[0]);
    25d6:	9e 01       	movw	r18, r28
    25d8:	2f 5f       	subi	r18, 0xFF	; 255
    25da:	3f 4f       	sbci	r19, 0xFF	; 255
    25dc:	40 e0       	ldi	r20, 0x00	; 0
    25de:	61 e0       	ldi	r22, 0x01	; 1
    25e0:	c8 01       	movw	r24, r16
    25e2:	85 96       	adiw	r24, 0x25	; 37
    25e4:	0e 94 a8 07 	call	0xf50	; 0xf50 <ExtEERead>
            if ((data[0] == 0)||(CheckState(data[0]))) {
    25e8:	89 81       	ldd	r24, Y+1	; 0x01
    25ea:	81 11       	cpse	r24, r1
    25ec:	03 c0       	rjmp	.+6      	; 0x25f4 <FindChild+0x84>
                if ((letter == 0)||(CheckLetter(child, letter))) return child;
    25ee:	d1 10       	cpse	r13, r1
    25f0:	06 c0       	rjmp	.+12     	; 0x25fe <FindChild+0x8e>
    25f2:	0e c0       	rjmp	.+28     	; 0x2610 <FindChild+0xa0>
    while (parent>child){

        //If child's address is higher than the start address, perform search for letter
        if (child>start){
            ExtEERead(child+OFF_BYTEFLDS+VISIBLE_ACL+L_BOILER, 1, GAME, &data[0]);
            if ((data[0] == 0)||(CheckState(data[0]))) {
    25f4:	0e 94 5f 09 	call	0x12be	; 0x12be <CheckState>
    25f8:	81 11       	cpse	r24, r1
    25fa:	f9 cf       	rjmp	.-14     	; 0x25ee <FindChild+0x7e>
    25fc:	e0 cf       	rjmp	.-64     	; 0x25be <FindChild+0x4e>
                if ((letter == 0)||(CheckLetter(child, letter))) return child;
    25fe:	6d 2d       	mov	r22, r13
    2600:	c8 01       	movw	r24, r16
    2602:	6f df       	rcall	.-290    	; 0x24e2 <CheckLetter>
    2604:	88 23       	and	r24, r24
    2606:	d9 f2       	breq	.-74     	; 0x25be <FindChild+0x4e>
    2608:	03 c0       	rjmp	.+6      	; 0x2610 <FindChild+0xa0>

        //Not visible or name not right
        ExtEERead(child+L_BOILER, 2, GAME, &data[0]);
        child = (data[0]<<8|data[1]);    //Next object on child level
        
    } return 0;
    260a:	80 e0       	ldi	r24, 0x00	; 0
    260c:	90 e0       	ldi	r25, 0x00	; 0
    260e:	01 c0       	rjmp	.+2      	; 0x2612 <FindChild+0xa2>
    2610:	c8 01       	movw	r24, r16
}
    2612:	24 96       	adiw	r28, 0x04	; 4
    2614:	cd bf       	out	0x3d, r28	; 61
    2616:	de bf       	out	0x3e, r29	; 62
    2618:	df 91       	pop	r29
    261a:	cf 91       	pop	r28
    261c:	1f 91       	pop	r17
    261e:	0f 91       	pop	r16
    2620:	ff 90       	pop	r15
    2622:	ef 90       	pop	r14
    2624:	df 90       	pop	r13
    2626:	bf 90       	pop	r11
    2628:	af 90       	pop	r10
    262a:	08 95       	ret

0000262c <InpOkChk>:

//Allow only a(A) to z(Z) and 0 to 9 as input
uint8_t InpOkChk(uint8_t test){
    test |= 0x20;
    262c:	80 62       	ori	r24, 0x20	; 32
    if ((test>='a')&&(test<='z')) return 1;
    262e:	9f e9       	ldi	r25, 0x9F	; 159
    2630:	98 0f       	add	r25, r24
    2632:	9a 31       	cpi	r25, 0x1A	; 26
    2634:	38 f0       	brcs	.+14     	; 0x2644 <InpOkChk+0x18>
    2636:	90 ed       	ldi	r25, 0xD0	; 208
    2638:	98 0f       	add	r25, r24
    263a:	81 e0       	ldi	r24, 0x01	; 1
    263c:	9a 30       	cpi	r25, 0x0A	; 10
    263e:	18 f0       	brcs	.+6      	; 0x2646 <InpOkChk+0x1a>
    2640:	80 e0       	ldi	r24, 0x00	; 0
    2642:	08 95       	ret
    2644:	81 e0       	ldi	r24, 0x01	; 1
    if ((test>='0')&&(test<='9')) return 1;
    return 0;
}
    2646:	08 95       	ret

00002648 <CleanInput>:

//Cleans input of garbage and returns length of cleaned input "o->d2  !\0" becomes "od2\0"
uint8_t CleanInput(uint8_t *data){
    2648:	0f 93       	push	r16
    264a:	1f 93       	push	r17
    264c:	cf 93       	push	r28
    264e:	df 93       	push	r29
    2650:	8c 01       	movw	r16, r24
    uint8_t cnt = 0;
    for (uint8_t x=0; data[x]!=0; ++x){
    2652:	d0 e0       	ldi	r29, 0x00	; 0
    return 0;
}

//Cleans input of garbage and returns length of cleaned input "o->d2  !\0" becomes "od2\0"
uint8_t CleanInput(uint8_t *data){
    uint8_t cnt = 0;
    2654:	c0 e0       	ldi	r28, 0x00	; 0
    for (uint8_t x=0; data[x]!=0; ++x){
    2656:	f8 01       	movw	r30, r16
    2658:	ed 0f       	add	r30, r29
    265a:	f1 1d       	adc	r31, r1
    265c:	80 81       	ld	r24, Z
    265e:	2c 2f       	mov	r18, r28
    2660:	30 e0       	ldi	r19, 0x00	; 0
    2662:	88 23       	and	r24, r24
    2664:	61 f0       	breq	.+24     	; 0x267e <CleanInput+0x36>
        data[cnt] = data[x];
    2666:	d8 01       	movw	r26, r16
    2668:	a2 0f       	add	r26, r18
    266a:	b3 1f       	adc	r27, r19
    266c:	8c 93       	st	X, r24
        if (data[x] == 0x1b) break; //Escape characters are not supported!
    266e:	80 81       	ld	r24, Z
    2670:	8b 31       	cpi	r24, 0x1B	; 27
    2672:	29 f0       	breq	.+10     	; 0x267e <CleanInput+0x36>
        if (InpOkChk(data[x])) ++cnt;
    2674:	db df       	rcall	.-74     	; 0x262c <InpOkChk>
    2676:	81 11       	cpse	r24, r1
    2678:	cf 5f       	subi	r28, 0xFF	; 255
}

//Cleans input of garbage and returns length of cleaned input "o->d2  !\0" becomes "od2\0"
uint8_t CleanInput(uint8_t *data){
    uint8_t cnt = 0;
    for (uint8_t x=0; data[x]!=0; ++x){
    267a:	df 5f       	subi	r29, 0xFF	; 255
    267c:	ec cf       	rjmp	.-40     	; 0x2656 <CleanInput+0xe>
        data[cnt] = data[x];
        if (data[x] == 0x1b) break; //Escape characters are not supported!
        if (InpOkChk(data[x])) ++cnt;
    }
    data[cnt] = 0;
    267e:	f8 01       	movw	r30, r16
    2680:	e2 0f       	add	r30, r18
    2682:	f3 1f       	adc	r31, r19
    2684:	10 82       	st	Z, r1
    return cnt;
}
    2686:	8c 2f       	mov	r24, r28
    2688:	df 91       	pop	r29
    268a:	cf 91       	pop	r28
    268c:	1f 91       	pop	r17
    268e:	0f 91       	pop	r16
    2690:	08 95       	ret

00002692 <CheckSend>:

//Send routine, optimized for low memory usage
uint8_t CheckSend(){
    2692:	cf 93       	push	r28
    /*if (effect == 0){
        effect = currObj.byteField[EFFECTS];
    }*/

    //Check if more string(part)s have to be sent to the serial output if previous send operation is completed
    if ((txAddrNow < TXLISTLEN) && serTxDone){
    2694:	20 91 59 3a 	lds	r18, 0x3A59	; 0x803a59 <txAddrNow>
    2698:	28 30       	cpi	r18, 0x08	; 8
    269a:	08 f0       	brcs	.+2      	; 0x269e <CheckSend+0xc>
    269c:	49 c0       	rjmp	.+146    	; 0x2730 <CheckSend+0x9e>
    269e:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <serTxDone>
    26a2:	88 23       	and	r24, r24
    26a4:	09 f4       	brne	.+2      	; 0x26a8 <CheckSend+0x16>
    26a6:	44 c0       	rjmp	.+136    	; 0x2730 <CheckSend+0x9e>
        if (txStrLen[txAddrNow] == 0){
    26a8:	82 2f       	mov	r24, r18
    26aa:	90 e0       	ldi	r25, 0x00	; 0
    26ac:	fc 01       	movw	r30, r24
    26ae:	e6 5a       	subi	r30, 0xA6	; 166
    26b0:	f5 4c       	sbci	r31, 0xC5	; 197
    26b2:	e0 81       	ld	r30, Z
    26b4:	e1 11       	cpse	r30, r1
    26b6:	06 c0       	rjmp	.+12     	; 0x26c4 <CheckSend+0x32>
            txPart = 0;
    26b8:	10 92 18 39 	sts	0x3918, r1	; 0x803918 <txPart.3917>
            txAddrNow = TXLISTLEN;
    26bc:	88 e0       	ldi	r24, 0x08	; 8
    26be:	80 93 59 3a 	sts	0x3A59, r24	; 0x803a59 <txAddrNow>
    26c2:	2e c0       	rjmp	.+92     	; 0x2720 <CheckSend+0x8e>
        } else if (txPart < txStrLen[txAddrNow]){
    26c4:	50 91 18 39 	lds	r21, 0x3918	; 0x803918 <txPart.3917>
    26c8:	5e 17       	cp	r21, r30
    26ca:	60 f5       	brcc	.+88     	; 0x2724 <CheckSend+0x92>
            EEreadLength = txStrLen[txAddrNow]-txPart;
    26cc:	ce 2f       	mov	r28, r30
    26ce:	c5 1b       	sub	r28, r21
    26d0:	c1 32       	cpi	r28, 0x21	; 33
    26d2:	08 f0       	brcs	.+2      	; 0x26d6 <CheckSend+0x44>
    26d4:	c0 e2       	ldi	r28, 0x20	; 32
            if (EEreadLength>=TXLEN) EEreadLength = TXLEN-1;
            ExtEERead(txAddrList[txAddrNow]+txPart, EEreadLength, txTypeNow, &txBuffer[0]);
    26d6:	88 0f       	add	r24, r24
    26d8:	99 1f       	adc	r25, r25
    26da:	fc 01       	movw	r30, r24
    26dc:	ee 59       	subi	r30, 0x9E	; 158
    26de:	f5 4c       	sbci	r31, 0xC5	; 197
    26e0:	80 81       	ld	r24, Z
    26e2:	91 81       	ldd	r25, Z+1	; 0x01
    26e4:	26 e0       	ldi	r18, 0x06	; 6
    26e6:	3b e3       	ldi	r19, 0x3B	; 59
    26e8:	40 91 58 3a 	lds	r20, 0x3A58	; 0x803a58 <txTypeNow>
    26ec:	6c 2f       	mov	r22, r28
    26ee:	85 0f       	add	r24, r21
    26f0:	91 1d       	adc	r25, r1
    26f2:	0e 94 a8 07 	call	0xf50	; 0xf50 <ExtEERead>
            txPart += EEreadLength;
    26f6:	80 91 18 39 	lds	r24, 0x3918	; 0x803918 <txPart.3917>
    26fa:	8c 0f       	add	r24, r28
    26fc:	80 93 18 39 	sts	0x3918, r24	; 0x803918 <txPart.3917>
            txBuffer[EEreadLength] = 0; //Add string terminator after piece to send to plug memory leak
    2700:	ec 2f       	mov	r30, r28
    2702:	f0 e0       	ldi	r31, 0x00	; 0
    2704:	ea 5f       	subi	r30, 0xFA	; 250
    2706:	f4 4c       	sbci	r31, 0xC4	; 196
    2708:	10 82       	st	Z, r1
            if ((txBuffer[0] == 0) && (EEreadLength)) txBuffer[0] = 0xDB; //Block character when data wrong.
    270a:	80 91 06 3b 	lds	r24, 0x3B06	; 0x803b06 <txBuffer>
    270e:	81 11       	cpse	r24, r1
    2710:	03 c0       	rjmp	.+6      	; 0x2718 <CheckSend+0x86>
    2712:	8b ed       	ldi	r24, 0xDB	; 219
    2714:	80 93 06 3b 	sts	0x3B06, r24	; 0x803b06 <txBuffer>
            SerSend(&txBuffer[0]);
    2718:	86 e0       	ldi	r24, 0x06	; 6
    271a:	9b e3       	ldi	r25, 0x3B	; 59
    271c:	0e 94 ca 07 	call	0xf94	; 0xf94 <SerSend>
        } else {
            txPart = 0;
            ++txAddrNow;
        }
    } else if (serTxDone) return 0; //All is sent!
    return 1; //Still sending, do not change the data in the tx variables
    2720:	81 e0       	ldi	r24, 0x01	; 1
    2722:	0b c0       	rjmp	.+22     	; 0x273a <CheckSend+0xa8>
            txPart += EEreadLength;
            txBuffer[EEreadLength] = 0; //Add string terminator after piece to send to plug memory leak
            if ((txBuffer[0] == 0) && (EEreadLength)) txBuffer[0] = 0xDB; //Block character when data wrong.
            SerSend(&txBuffer[0]);
        } else {
            txPart = 0;
    2724:	10 92 18 39 	sts	0x3918, r1	; 0x803918 <txPart.3917>
            ++txAddrNow;
    2728:	2f 5f       	subi	r18, 0xFF	; 255
    272a:	20 93 59 3a 	sts	0x3A59, r18	; 0x803a59 <txAddrNow>
    272e:	f8 cf       	rjmp	.-16     	; 0x2720 <CheckSend+0x8e>
        }
    } else if (serTxDone) return 0; //All is sent!
    2730:	90 91 09 38 	lds	r25, 0x3809	; 0x803809 <serTxDone>
    2734:	81 e0       	ldi	r24, 0x01	; 1
    2736:	91 11       	cpse	r25, r1
    2738:	80 e0       	ldi	r24, 0x00	; 0
    return 1; //Still sending, do not change the data in the tx variables
}
    273a:	cf 91       	pop	r28
    273c:	08 95       	ret

0000273e <CheckResponse>:

//Send another part of the response and play the effect afterwards
uint8_t CheckResponse(){
    273e:	cf 93       	push	r28
    2740:	df 93       	push	r29
    static uint8_t number = 0;
    if (responseList){
    2742:	c0 91 2c 39 	lds	r28, 0x392C	; 0x80392c <responseList>
    2746:	cc 23       	and	r28, r28
    2748:	b1 f1       	breq	.+108    	; 0x27b6 <CheckResponse+0x78>
        --responseList;
    274a:	c1 50       	subi	r28, 0x01	; 1
    274c:	c0 93 2c 39 	sts	0x392C, r28	; 0x80392c <responseList>
        if (reactStr[0][number] == CURR_LOC) {
    2750:	d0 91 17 39 	lds	r29, 0x3917	; 0x803917 <number.3921>
    2754:	2d 2f       	mov	r18, r29
    2756:	30 e0       	ldi	r19, 0x00	; 0
    2758:	f9 01       	movw	r30, r18
    275a:	ee 0f       	add	r30, r30
    275c:	ff 1f       	adc	r31, r31
    275e:	e3 5d       	subi	r30, 0xD3	; 211
    2760:	f6 4c       	sbci	r31, 0xC6	; 198
    2762:	80 81       	ld	r24, Z
    2764:	91 81       	ldd	r25, Z+1	; 0x01
    2766:	80 3f       	cpi	r24, 0xF0	; 240
    2768:	4f ef       	ldi	r20, 0xFF	; 255
    276a:	94 07       	cpc	r25, r20
    276c:	51 f4       	brne	.+20     	; 0x2782 <CheckResponse+0x44>
            PrepareSending(currObj.addrStr[NAME], currObj.lenStr[NAME], GAME);
    276e:	60 91 47 3a 	lds	r22, 0x3A47	; 0x803a47 <currObj+0x1a>
    2772:	70 91 48 3a 	lds	r23, 0x3A48	; 0x803a48 <currObj+0x1b>
    2776:	40 e0       	ldi	r20, 0x00	; 0
    2778:	80 91 39 3a 	lds	r24, 0x3A39	; 0x803a39 <currObj+0xc>
    277c:	90 91 3a 3a 	lds	r25, 0x3A3A	; 0x803a3a <currObj+0xd>
    2780:	0d c0       	rjmp	.+26     	; 0x279c <CheckResponse+0x5e>
        } else {
            PrepareSending(reactStr[0][number], reactStr[1][number], reactStr[2][number]);
    2782:	d9 01       	movw	r26, r18
    2784:	aa 0f       	add	r26, r26
    2786:	bb 1f       	adc	r27, r27
    2788:	a3 55       	subi	r26, 0x53	; 83
    278a:	b6 4c       	sbci	r27, 0xC6	; 198
    278c:	22 0f       	add	r18, r18
    278e:	33 1f       	adc	r19, r19
    2790:	f9 01       	movw	r30, r18
    2792:	e3 59       	subi	r30, 0x93	; 147
    2794:	f6 4c       	sbci	r31, 0xC6	; 198
    2796:	60 81       	ld	r22, Z
    2798:	71 81       	ldd	r23, Z+1	; 0x01
    279a:	4c 91       	ld	r20, X
    279c:	70 dd       	rcall	.-1312   	; 0x227e <PrepareSending>
        }
        ++number;
    279e:	df 5f       	subi	r29, 0xFF	; 255
    27a0:	d0 93 17 39 	sts	0x3917, r29	; 0x803917 <number.3921>

        if (responseList == 0) {
    27a4:	c1 11       	cpse	r28, r1
    27a6:	06 c0       	rjmp	.+12     	; 0x27b4 <CheckResponse+0x76>
            //effect = currObj.byteField[EFFECTS];
            RXCNT = 0;
    27a8:	1d ba       	out	0x1d, r1	; 29
            serRxDone = 0;
    27aa:	10 92 55 38 	sts	0x3855, r1	; 0x803855 <serRxDone>
            number = 0;
    27ae:	10 92 17 39 	sts	0x3917, r1	; 0x803917 <number.3921>
    27b2:	01 c0       	rjmp	.+2      	; 0x27b6 <CheckResponse+0x78>
            return 0;
        }
        return 1;
    27b4:	c1 e0       	ldi	r28, 0x01	; 1
    }
    return 0;
}
    27b6:	8c 2f       	mov	r24, r28
    27b8:	df 91       	pop	r29
    27ba:	cf 91       	pop	r28
    27bc:	08 95       	ret

000027be <CheckInput>:

//User input check (and validation)
uint8_t CheckInput(uint8_t *data){
    27be:	a9 e0       	ldi	r26, 0x09	; 9
    27c0:	b0 e0       	ldi	r27, 0x00	; 0
    27c2:	e5 ee       	ldi	r30, 0xE5	; 229
    27c4:	f3 e1       	ldi	r31, 0x13	; 19
    27c6:	0c 94 5d 1f 	jmp	0x3eba	; 0x3eba <__prologue_saves__+0x6>
    27ca:	8c 01       	movw	r16, r24
    
    //Load game data after reboot
    if (currDepth == 0xff) {
    27cc:	80 91 3e 38 	lds	r24, 0x383E	; 0x80383e <currDepth>
    27d0:	8f 3f       	cpi	r24, 0xFF	; 255
    27d2:	49 f4       	brne	.+18     	; 0x27e6 <CheckInput+0x28>
        //Start at first location
        PopulateObject(route[0], &currObj);
    27d4:	6d e2       	ldi	r22, 0x2D	; 45
    27d6:	7a e3       	ldi	r23, 0x3A	; 58
    27d8:	80 91 ed 39 	lds	r24, 0x39ED	; 0x8039ed <route>
    27dc:	90 91 ee 39 	lds	r25, 0x39EE	; 0x8039ee <route+0x1>
    27e0:	07 de       	rcall	.-1010   	; 0x23f0 <PopulateObject>
        currDepth = 0;
    27e2:	10 92 3e 38 	sts	0x383E, r1	; 0x80383e <currDepth>
    }

    if (serRxDone){
    27e6:	80 91 55 38 	lds	r24, 0x3855	; 0x803855 <serRxDone>
    27ea:	88 23       	and	r24, r24
    27ec:	09 f4       	brne	.+2      	; 0x27f0 <CheckInput+0x32>
    27ee:	c0 c1       	rjmp	.+896    	; 0x2b70 <CheckInput+0x3b2>

        //Special input requested from user by game
        if (specialInput[0]){
    27f0:	80 91 1c 39 	lds	r24, 0x391C	; 0x80391c <specialInput>
    27f4:	88 23       	and	r24, r24
    27f6:	09 f4       	brne	.+2      	; 0x27fa <CheckInput+0x3c>
    27f8:	4f c0       	rjmp	.+158    	; 0x2898 <CheckInput+0xda>
            specialPassed = 0;
    27fa:	10 92 1b 39 	sts	0x391B, r1	; 0x80391b <specialPassed>
            data[0] = 'a';
    27fe:	81 e6       	ldi	r24, 0x61	; 97
    2800:	f8 01       	movw	r30, r16
    2802:	80 83       	st	Z, r24
            
            //Normal code challenge
            if (StartsWith((uint8_t *)&serRx[0], &specialInput[0])) {
    2804:	6c e1       	ldi	r22, 0x1C	; 28
    2806:	79 e3       	ldi	r23, 0x39	; 57
    2808:	87 e8       	ldi	r24, 0x87	; 135
    280a:	9a e3       	ldi	r25, 0x3A	; 58
    280c:	1e dd       	rcall	.-1476   	; 0x224a <StartsWith>
    280e:	f8 2e       	mov	r15, r24
    2810:	88 23       	and	r24, r24
    2812:	21 f0       	breq	.+8      	; 0x281c <CheckInput+0x5e>
                specialPassed = 1;
    2814:	81 e0       	ldi	r24, 0x01	; 1
    2816:	80 93 1b 39 	sts	0x391B, r24	; 0x80391b <specialPassed>
    281a:	04 c0       	rjmp	.+8      	; 0x2824 <CheckInput+0x66>

            //Special challenge 1
            } else if ((specialInput[0] == '1')&&(specialInput[2] == 0)) {
    281c:	80 91 1c 39 	lds	r24, 0x391C	; 0x80391c <specialInput>
    2820:	81 33       	cpi	r24, 0x31	; 49
    2822:	11 f0       	breq	.+4      	; 0x2828 <CheckInput+0x6a>
                responseList = SetStandardResponse((3*MAX_CHEATS));
                return 1;
            }
        } 
        //Data received, but not any of the commands above
        return 0;
    2824:	f1 2c       	mov	r15, r1
    2826:	a6 c1       	rjmp	.+844    	; 0x2b74 <CheckInput+0x3b6>
            //Normal code challenge
            if (StartsWith((uint8_t *)&serRx[0], &specialInput[0])) {
                specialPassed = 1;

            //Special challenge 1
            } else if ((specialInput[0] == '1')&&(specialInput[2] == 0)) {
    2828:	80 91 1e 39 	lds	r24, 0x391E	; 0x80391e <specialInput+0x2>
    282c:	81 11       	cpse	r24, r1
    282e:	fa cf       	rjmp	.-12     	; 0x2824 <CheckInput+0x66>
                uint8_t inputLen = CleanInput((uint8_t *)&serRx[0]);
    2830:	87 e8       	ldi	r24, 0x87	; 135
    2832:	9a e3       	ldi	r25, 0x3A	; 58
    2834:	09 df       	rcall	.-494    	; 0x2648 <CleanInput>
                specialPassed = 2;
    2836:	92 e0       	ldi	r25, 0x02	; 2
    2838:	90 93 1b 39 	sts	0x391B, r25	; 0x80391b <specialPassed>
                data[1] = 0;
    283c:	f8 01       	movw	r30, r16
    283e:	11 82       	std	Z+1, r1	; 0x01

                if (inputLen >= 2) {
    2840:	82 30       	cpi	r24, 0x02	; 2
    2842:	80 f3       	brcs	.-32     	; 0x2824 <CheckInput+0x66>
                    if ((serRx[0] >= '1') && (serRx[0] <= '4')) {
    2844:	80 91 87 3a 	lds	r24, 0x3A87	; 0x803a87 <serRx>
    2848:	81 33       	cpi	r24, 0x31	; 49
    284a:	60 f3       	brcs	.-40     	; 0x2824 <CheckInput+0x66>
    284c:	80 91 87 3a 	lds	r24, 0x3A87	; 0x803a87 <serRx>
    2850:	85 33       	cpi	r24, 0x35	; 53
    2852:	40 f7       	brcc	.-48     	; 0x2824 <CheckInput+0x66>
                        serRx[1] |= 0x20;
    2854:	80 91 88 3a 	lds	r24, 0x3A88	; 0x803a88 <serRx+0x1>
    2858:	80 62       	ori	r24, 0x20	; 32
    285a:	80 93 88 3a 	sts	0x3A88, r24	; 0x803a88 <serRx+0x1>
                        if ((serRx[1] == 'a')||(serRx[1] == 'e')||(serRx[1] == 'f')||(serRx[1] == 'w')) {
    285e:	80 91 88 3a 	lds	r24, 0x3A88	; 0x803a88 <serRx+0x1>
    2862:	81 36       	cpi	r24, 0x61	; 97
    2864:	61 f0       	breq	.+24     	; 0x287e <CheckInput+0xc0>
    2866:	80 91 88 3a 	lds	r24, 0x3A88	; 0x803a88 <serRx+0x1>
    286a:	85 36       	cpi	r24, 0x65	; 101
    286c:	41 f0       	breq	.+16     	; 0x287e <CheckInput+0xc0>
    286e:	80 91 88 3a 	lds	r24, 0x3A88	; 0x803a88 <serRx+0x1>
    2872:	86 36       	cpi	r24, 0x66	; 102
    2874:	21 f0       	breq	.+8      	; 0x287e <CheckInput+0xc0>
    2876:	80 91 88 3a 	lds	r24, 0x3A88	; 0x803a88 <serRx+0x1>
    287a:	87 37       	cpi	r24, 0x77	; 119
    287c:	99 f6       	brne	.-90     	; 0x2824 <CheckInput+0x66>
                            data[1] = specialInput[1]+0x11;
    287e:	80 91 1d 39 	lds	r24, 0x391D	; 0x80391d <specialInput+0x1>
    2882:	8f 5e       	subi	r24, 0xEF	; 239
    2884:	f8 01       	movw	r30, r16
    2886:	81 83       	std	Z+1, r24	; 0x01
                            data[2] = serRx[0];
    2888:	80 91 87 3a 	lds	r24, 0x3A87	; 0x803a87 <serRx>
    288c:	82 83       	std	Z+2, r24	; 0x02
                            data[3] = serRx[1];
    288e:	80 91 88 3a 	lds	r24, 0x3A88	; 0x803a88 <serRx+0x1>
    2892:	83 83       	std	Z+3, r24	; 0x03
                            data[4] = 0;
    2894:	14 82       	std	Z+4, r1	; 0x04
    2896:	6e c1       	rjmp	.+732    	; 0x2b74 <CheckInput+0x3b6>
        } else {
      
            //SetResponse(0, A_LF, 4, TEASER);

            //Change status bit
            if ((serRx[0] == '#')&&(RXCNT == 6)){
    2898:	80 91 87 3a 	lds	r24, 0x3A87	; 0x803a87 <serRx>
    289c:	83 32       	cpi	r24, 0x23	; 35
    289e:	89 f5       	brne	.+98     	; 0x2902 <CheckInput+0x144>
    28a0:	8d b3       	in	r24, 0x1d	; 29
    28a2:	86 30       	cpi	r24, 0x06	; 6
    28a4:	71 f5       	brne	.+92     	; 0x2902 <CheckInput+0x144>
    28a6:	81 e0       	ldi	r24, 0x01	; 1
    28a8:	90 e0       	ldi	r25, 0x00	; 0
    28aa:	10 e0       	ldi	r17, 0x00	; 0
                uint8_t bitNr = 0;

                for (uint8_t x=1; x<4; ++x) {
                    serRx[x] -= '0';
    28ac:	fc 01       	movw	r30, r24
    28ae:	e9 57       	subi	r30, 0x79	; 121
    28b0:	f5 4c       	sbci	r31, 0xC5	; 197
    28b2:	20 81       	ld	r18, Z
    28b4:	20 53       	subi	r18, 0x30	; 48
    28b6:	20 83       	st	Z, r18
                    bitNr *= 10;
    28b8:	11 0f       	add	r17, r17
    28ba:	21 2f       	mov	r18, r17
    28bc:	22 0f       	add	r18, r18
    28be:	22 0f       	add	r18, r18
    28c0:	12 0f       	add	r17, r18
                    if (serRx[1] > 2) break;
    28c2:	20 91 88 3a 	lds	r18, 0x3A88	; 0x803a88 <serRx+0x1>
    28c6:	23 30       	cpi	r18, 0x03	; 3
    28c8:	48 f4       	brcc	.+18     	; 0x28dc <CheckInput+0x11e>
                    if (serRx[x] < 10) {
    28ca:	20 81       	ld	r18, Z
    28cc:	2a 30       	cpi	r18, 0x0A	; 10
    28ce:	b8 f4       	brcc	.+46     	; 0x28fe <CheckInput+0x140>
                        bitNr += serRx[x];
    28d0:	20 81       	ld	r18, Z
    28d2:	12 0f       	add	r17, r18
    28d4:	01 96       	adiw	r24, 0x01	; 1

            //Change status bit
            if ((serRx[0] == '#')&&(RXCNT == 6)){
                uint8_t bitNr = 0;

                for (uint8_t x=1; x<4; ++x) {
    28d6:	84 30       	cpi	r24, 0x04	; 4
    28d8:	91 05       	cpc	r25, r1
    28da:	41 f7       	brne	.-48     	; 0x28ac <CheckInput+0xee>
                        continue;
                    }
                    bitNr = 0;
                    break;
                }
                if ((bitNr)&&(bitNr!=128)) {
    28dc:	81 2f       	mov	r24, r17
    28de:	8f 77       	andi	r24, 0x7F	; 127
    28e0:	71 f0       	breq	.+28     	; 0x28fe <CheckInput+0x140>
                    if (Cheat(0xff-bitNr, serRx[4]<<8|serRx[5])) UpdateState(bitNr);
    28e2:	80 91 8b 3a 	lds	r24, 0x3A8B	; 0x803a8b <serRx+0x4>
    28e6:	60 91 8c 3a 	lds	r22, 0x3A8C	; 0x803a8c <serRx+0x5>
    28ea:	70 e0       	ldi	r23, 0x00	; 0
    28ec:	78 2b       	or	r23, r24
    28ee:	81 2f       	mov	r24, r17
    28f0:	80 95       	com	r24
    28f2:	5b dc       	rcall	.-1866   	; 0x21aa <Cheat>
    28f4:	88 23       	and	r24, r24
    28f6:	19 f0       	breq	.+6      	; 0x28fe <CheckInput+0x140>
    28f8:	81 2f       	mov	r24, r17
    28fa:	0e 94 3e 09 	call	0x127c	; 0x127c <UpdateState>
                }
                
                responseList = SetStandardResponse(1);
    28fe:	81 e0       	ldi	r24, 0x01	; 1
    2900:	34 c1       	rjmp	.+616    	; 0x2b6a <CheckInput+0x3ac>
    2902:	d8 01       	movw	r26, r16
    2904:	80 e0       	ldi	r24, 0x00	; 0
    2906:	90 e0       	ldi	r25, 0x00	; 0
                return 1;            
            }
            
            //Read up to the \0 character and convert to lower case.
            for (uint8_t x=0; x<RXLEN; ++x){
                if ((serRx[x]<'A')||(serRx[x]>'Z')) data[x]=serRx[x]; else data[x]=serRx[x]|0x20;
    2908:	fc 01       	movw	r30, r24
    290a:	e9 57       	subi	r30, 0x79	; 121
    290c:	f5 4c       	sbci	r31, 0xC5	; 197
    290e:	20 81       	ld	r18, Z
    2910:	21 34       	cpi	r18, 0x41	; 65
    2912:	18 f0       	brcs	.+6      	; 0x291a <CheckInput+0x15c>
    2914:	20 81       	ld	r18, Z
    2916:	2b 35       	cpi	r18, 0x5B	; 91
    2918:	10 f0       	brcs	.+4      	; 0x291e <CheckInput+0x160>
    291a:	20 81       	ld	r18, Z
    291c:	02 c0       	rjmp	.+4      	; 0x2922 <CheckInput+0x164>
    291e:	20 81       	ld	r18, Z
    2920:	20 62       	ori	r18, 0x20	; 32
    2922:	2c 93       	st	X, r18
                if (serRx[x] == 0) {
    2924:	20 81       	ld	r18, Z
    2926:	21 11       	cpse	r18, r1
    2928:	05 c0       	rjmp	.+10     	; 0x2934 <CheckInput+0x176>
                    data[x] = 0;
    292a:	f8 01       	movw	r30, r16
    292c:	e8 0f       	add	r30, r24
    292e:	f1 1d       	adc	r31, r1
    2930:	10 82       	st	Z, r1
                    break;
    2932:	05 c0       	rjmp	.+10     	; 0x293e <CheckInput+0x180>
    2934:	01 96       	adiw	r24, 0x01	; 1
    2936:	11 96       	adiw	r26, 0x01	; 1
                
                return 1;            
            }
            
            //Read up to the \0 character and convert to lower case.
            for (uint8_t x=0; x<RXLEN; ++x){
    2938:	81 34       	cpi	r24, 0x41	; 65
    293a:	91 05       	cpc	r25, r1
    293c:	29 f7       	brne	.-54     	; 0x2908 <CheckInput+0x14a>
                    break;
                }
            }

            //No text
            if (serRx[0] == 0){
    293e:	80 91 87 3a 	lds	r24, 0x3A87	; 0x803a87 <serRx>
                data[0] = 0;
    2942:	f8 01       	movw	r30, r16
                    break;
                }
            }

            //No text
            if (serRx[0] == 0){
    2944:	81 11       	cpse	r24, r1
    2946:	05 c0       	rjmp	.+10     	; 0x2952 <CheckInput+0x194>
                data[0] = 0;
    2948:	10 82       	st	Z, r1
                RXCNT = 0;
    294a:	1d ba       	out	0x1d, r1	; 29
                serRxDone = 0;
    294c:	10 92 55 38 	sts	0x3855, r1	; 0x803855 <serRxDone>
    2950:	0f c1       	rjmp	.+542    	; 0x2b70 <CheckInput+0x3b2>
                return 1;
            }

            //Help text
            if ((data[0] == '?')||(data[0] == 'h')){
    2952:	80 81       	ld	r24, Z
    2954:	8f 33       	cpi	r24, 0x3F	; 63
    2956:	11 f0       	breq	.+4      	; 0x295c <CheckInput+0x19e>
    2958:	88 36       	cpi	r24, 0x68	; 104
    295a:	49 f4       	brne	.+18     	; 0x296e <CheckInput+0x1b0>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    295c:	83 e9       	ldi	r24, 0x93	; 147
    295e:	9b e7       	ldi	r25, 0x7B	; 123
    2960:	80 93 2f 39 	sts	0x392F, r24	; 0x80392f <reactStr+0x2>
    2964:	90 93 30 39 	sts	0x3930, r25	; 0x803930 <reactStr+0x3>
    reactStr[1][number]=length;
    2968:	8d e6       	ldi	r24, 0x6D	; 109
    296a:	94 e0       	ldi	r25, 0x04	; 4
    296c:	59 c0       	rjmp	.+178    	; 0x2a20 <CheckInput+0x262>
                responseList = SetStandardResponse(2);
                return 1;
            }        
        
            //Alphabet text
            if (data[0] == 'a'){
    296e:	81 36       	cpi	r24, 0x61	; 97
    2970:	49 f4       	brne	.+18     	; 0x2984 <CheckInput+0x1c6>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2972:	8e e6       	ldi	r24, 0x6E	; 110
    2974:	9a e7       	ldi	r25, 0x7A	; 122
    2976:	80 93 2f 39 	sts	0x392F, r24	; 0x80392f <reactStr+0x2>
    297a:	90 93 30 39 	sts	0x3930, r25	; 0x803930 <reactStr+0x3>
    reactStr[1][number]=length;
    297e:	85 e2       	ldi	r24, 0x25	; 37
    2980:	91 e0       	ldi	r25, 0x01	; 1
    2982:	4e c0       	rjmp	.+156    	; 0x2a20 <CheckInput+0x262>
                responseList = SetStandardResponse(2);
                return 1;
            }

            //Whoami text
            if (data[0] == 'w'){
    2984:	87 37       	cpi	r24, 0x77	; 119
    2986:	09 f0       	breq	.+2      	; 0x298a <CheckInput+0x1cc>
    2988:	41 c0       	rjmp	.+130    	; 0x2a0c <CheckInput+0x24e>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    298a:	8d e8       	ldi	r24, 0x8D	; 141
    298c:	96 e7       	ldi	r25, 0x76	; 118
    298e:	80 93 2f 39 	sts	0x392F, r24	; 0x80392f <reactStr+0x2>
    2992:	90 93 30 39 	sts	0x3930, r25	; 0x803930 <reactStr+0x3>
    reactStr[1][number]=length;
    2996:	82 e1       	ldi	r24, 0x12	; 18
    2998:	90 e0       	ldi	r25, 0x00	; 0
    299a:	80 93 6f 39 	sts	0x396F, r24	; 0x80396f <reactStr+0x42>
    299e:	90 93 70 39 	sts	0x3970, r25	; 0x803970 <reactStr+0x43>
    reactStr[2][number]=type;
    29a2:	21 e0       	ldi	r18, 0x01	; 1
    29a4:	30 e0       	ldi	r19, 0x00	; 0
    29a6:	20 93 af 39 	sts	0x39AF, r18	; 0x8039af <reactStr+0x82>
    29aa:	30 93 b0 39 	sts	0x39B0, r19	; 0x8039b0 <reactStr+0x83>
            }

            //Whoami text
            if (data[0] == 'w'){
                SetResponse(1, A_HELLO, L_HELLO, TEASER);
                SetResponse(2, names[0][whoami-1], names[1][whoami-1], TEASER);
    29ae:	80 91 4d 38 	lds	r24, 0x384D	; 0x80384d <whoami>
    29b2:	90 e0       	ldi	r25, 0x00	; 0
    29b4:	fc 01       	movw	r30, r24
    29b6:	ee 0f       	add	r30, r30
    29b8:	ff 1f       	adc	r31, r31
    29ba:	e0 56       	subi	r30, 0x60	; 96
    29bc:	f0 44       	sbci	r31, 0x40	; 64
    29be:	40 81       	ld	r20, Z
    29c0:	51 81       	ldd	r21, Z+1	; 0x01
    29c2:	88 0f       	add	r24, r24
    29c4:	99 1f       	adc	r25, r25
    29c6:	fc 01       	movw	r30, r24
    29c8:	e8 56       	subi	r30, 0x68	; 104
    29ca:	f0 44       	sbci	r31, 0x40	; 64
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    29cc:	80 81       	ld	r24, Z
    29ce:	91 81       	ldd	r25, Z+1	; 0x01
    29d0:	80 93 31 39 	sts	0x3931, r24	; 0x803931 <reactStr+0x4>
    29d4:	90 93 32 39 	sts	0x3932, r25	; 0x803932 <reactStr+0x5>
    reactStr[1][number]=length;
    29d8:	40 93 71 39 	sts	0x3971, r20	; 0x803971 <reactStr+0x44>
    29dc:	50 93 72 39 	sts	0x3972, r21	; 0x803972 <reactStr+0x45>
    reactStr[2][number]=type;
    29e0:	20 93 b1 39 	sts	0x39B1, r18	; 0x8039b1 <reactStr+0x84>
    29e4:	30 93 b2 39 	sts	0x39B2, r19	; 0x8039b2 <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    29e8:	8f e5       	ldi	r24, 0x5F	; 95
    29ea:	96 e7       	ldi	r25, 0x76	; 118
    29ec:	80 93 33 39 	sts	0x3933, r24	; 0x803933 <reactStr+0x6>
    29f0:	90 93 34 39 	sts	0x3934, r25	; 0x803934 <reactStr+0x7>
    reactStr[1][number]=length;
    29f4:	8a e1       	ldi	r24, 0x1A	; 26
    29f6:	90 e0       	ldi	r25, 0x00	; 0
    29f8:	80 93 73 39 	sts	0x3973, r24	; 0x803973 <reactStr+0x46>
    29fc:	90 93 74 39 	sts	0x3974, r25	; 0x803974 <reactStr+0x47>
    reactStr[2][number]=type;
    2a00:	20 93 b3 39 	sts	0x39B3, r18	; 0x8039b3 <reactStr+0x86>
    2a04:	30 93 b4 39 	sts	0x39B4, r19	; 0x8039b4 <reactStr+0x87>
            //Whoami text
            if (data[0] == 'w'){
                SetResponse(1, A_HELLO, L_HELLO, TEASER);
                SetResponse(2, names[0][whoami-1], names[1][whoami-1], TEASER);
                SetResponse(3, A_PLEASED, L_PLEASED, TEASER);
                responseList = SetStandardResponse(4);
    2a08:	84 e0       	ldi	r24, 0x04	; 4
    2a0a:	af c0       	rjmp	.+350    	; 0x2b6a <CheckInput+0x3ac>
                return 1;
            }

            //Quit text
            if (data[0] == 'q'){
    2a0c:	81 37       	cpi	r24, 0x71	; 113
    2a0e:	a1 f4       	brne	.+40     	; 0x2a38 <CheckInput+0x27a>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2a10:	80 e0       	ldi	r24, 0x00	; 0
    2a12:	9a e7       	ldi	r25, 0x7A	; 122
    2a14:	80 93 2f 39 	sts	0x392F, r24	; 0x80392f <reactStr+0x2>
    2a18:	90 93 30 39 	sts	0x3930, r25	; 0x803930 <reactStr+0x3>
    reactStr[1][number]=length;
    2a1c:	85 e5       	ldi	r24, 0x55	; 85
    2a1e:	90 e0       	ldi	r25, 0x00	; 0
    2a20:	80 93 6f 39 	sts	0x396F, r24	; 0x80396f <reactStr+0x42>
    2a24:	90 93 70 39 	sts	0x3970, r25	; 0x803970 <reactStr+0x43>
    reactStr[2][number]=type;
    2a28:	81 e0       	ldi	r24, 0x01	; 1
    2a2a:	90 e0       	ldi	r25, 0x00	; 0
    2a2c:	80 93 af 39 	sts	0x39AF, r24	; 0x8039af <reactStr+0x82>
    2a30:	90 93 b0 39 	sts	0x39B0, r25	; 0x8039b0 <reactStr+0x83>
            }

            //Quit text
            if (data[0] == 'q'){
                SetResponse(1, A_QUIT, L_QUIT, TEASER);
                responseList = SetStandardResponse(2);
    2a34:	82 e0       	ldi	r24, 0x02	; 2
                return 1;
            }

            //Fake cheat = reset badge! (Disable (comment) to get a few bytes needed for inverting pins for PFET modded badge)
            if (StartsWith(&data[0], "iddqd")){
    2a36:	99 c0       	rjmp	.+306    	; 0x2b6a <CheckInput+0x3ac>
    2a38:	66 e7       	ldi	r22, 0x76	; 118
    2a3a:	7f eb       	ldi	r23, 0xBF	; 191
    2a3c:	c8 01       	movw	r24, r16
    2a3e:	05 dc       	rcall	.-2038   	; 0x224a <StartsWith>
    2a40:	88 23       	and	r24, r24
    2a42:	d1 f0       	breq	.+52     	; 0x2a78 <CheckInput+0x2ba>
            
                //Wipe, but not the cheat data, hidden easter egg in ext. eeprom. ;)
                WipeAfterBoot(0);
    2a44:	80 e0       	ldi	r24, 0x00	; 0
    2a46:	0e 94 7e 09 	call	0x12fc	; 0x12fc <WipeAfterBoot>
                SaveGameState();
    2a4a:	0e 94 b7 08 	call	0x116e	; 0x116e <SaveGameState>

                uint8_t cheat[] = "Gotcha! ";
    2a4e:	89 e0       	ldi	r24, 0x09	; 9
    2a50:	e9 e8       	ldi	r30, 0x89	; 137
    2a52:	ff eb       	ldi	r31, 0xBF	; 191
    2a54:	de 01       	movw	r26, r28
    2a56:	11 96       	adiw	r26, 0x01	; 1
    2a58:	01 90       	ld	r0, Z+
    2a5a:	0d 92       	st	X+, r0
    2a5c:	8a 95       	dec	r24
    2a5e:	e1 f7       	brne	.-8      	; 0x2a58 <CheckInput+0x29a>
                SerSpeed(60);
    2a60:	8c e3       	ldi	r24, 0x3C	; 60
    2a62:	0e 94 db 07 	call	0xfb6	; 0xfb6 <SerSpeed>
                while(1){
                    if (serTxDone) SerSend(&cheat[0]);
    2a66:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <serTxDone>
    2a6a:	88 23       	and	r24, r24
    2a6c:	e1 f3       	breq	.-8      	; 0x2a66 <CheckInput+0x2a8>
    2a6e:	ce 01       	movw	r24, r28
    2a70:	01 96       	adiw	r24, 0x01	; 1
    2a72:	0e 94 ca 07 	call	0xf94	; 0xf94 <SerSend>
                }
            }
            
            //Cheat reset
            if (StartsWith(&data[0], "ikillu")){
    2a76:	f7 cf       	rjmp	.-18     	; 0x2a66 <CheckInput+0x2a8>
    2a78:	6c e7       	ldi	r22, 0x7C	; 124
    2a7a:	7f eb       	ldi	r23, 0xBF	; 191
    2a7c:	c8 01       	movw	r24, r16
    2a7e:	e5 db       	rcall	.-2102   	; 0x224a <StartsWith>
    2a80:	88 23       	and	r24, r24
    2a82:	d1 f0       	breq	.+52     	; 0x2ab8 <CheckInput+0x2fa>
                
                //Full wipe, including cheats, for badge.team use only!
                WipeAfterBoot(1);
    2a84:	81 e0       	ldi	r24, 0x01	; 1
    2a86:	0e 94 7e 09 	call	0x12fc	; 0x12fc <WipeAfterBoot>
                SaveGameState();
    2a8a:	0e 94 b7 08 	call	0x116e	; 0x116e <SaveGameState>

                uint8_t cheat[] = "Reset! ";
    2a8e:	88 e0       	ldi	r24, 0x08	; 8
    2a90:	e2 e9       	ldi	r30, 0x92	; 146
    2a92:	ff eb       	ldi	r31, 0xBF	; 191
    2a94:	de 01       	movw	r26, r28
    2a96:	11 96       	adiw	r26, 0x01	; 1
    2a98:	01 90       	ld	r0, Z+
    2a9a:	0d 92       	st	X+, r0
    2a9c:	8a 95       	dec	r24
    2a9e:	e1 f7       	brne	.-8      	; 0x2a98 <CheckInput+0x2da>
                SerSpeed(60);
    2aa0:	8c e3       	ldi	r24, 0x3C	; 60
    2aa2:	0e 94 db 07 	call	0xfb6	; 0xfb6 <SerSpeed>
                while(1){
                    if (serTxDone) SerSend(&cheat[0]);
    2aa6:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <serTxDone>
    2aaa:	88 23       	and	r24, r24
    2aac:	e1 f3       	breq	.-8      	; 0x2aa6 <CheckInput+0x2e8>
    2aae:	ce 01       	movw	r24, r28
    2ab0:	01 96       	adiw	r24, 0x01	; 1
    2ab2:	0e 94 ca 07 	call	0xf94	; 0xf94 <SerSend>
                }
            }

            //Show used cheat codes
            if (StartsWith(&data[0], "cheat")){
    2ab6:	f7 cf       	rjmp	.-18     	; 0x2aa6 <CheckInput+0x2e8>
    2ab8:	63 e8       	ldi	r22, 0x83	; 131
    2aba:	7f eb       	ldi	r23, 0xBF	; 191
    2abc:	c8 01       	movw	r24, r16
    2abe:	c5 db       	rcall	.-2166   	; 0x224a <StartsWith>
    2ac0:	88 23       	and	r24, r24
    2ac2:	09 f4       	brne	.+2      	; 0x2ac6 <CheckInput+0x308>
    2ac4:	af ce       	rjmp	.-674    	; 0x2824 <CheckInput+0x66>
    2ac6:	8d e2       	ldi	r24, 0x2D	; 45
    2ac8:	c8 2e       	mov	r12, r24
    2aca:	89 e3       	ldi	r24, 0x39	; 57
    2acc:	d8 2e       	mov	r13, r24
    2ace:	9d e6       	ldi	r25, 0x6D	; 109
    2ad0:	e9 2e       	mov	r14, r25
    2ad2:	99 e3       	ldi	r25, 0x39	; 57
    2ad4:	f9 2e       	mov	r15, r25
    2ad6:	0d ea       	ldi	r16, 0xAD	; 173
    2ad8:	19 e3       	ldi	r17, 0x39	; 57
    2ada:	28 e1       	ldi	r18, 0x18	; 24
    2adc:	52 2e       	mov	r5, r18
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    reactStr[1][number]=length;
    2ade:	aa 24       	eor	r10, r10
    2ae0:	a3 94       	inc	r10
    2ae2:	b1 2c       	mov	r11, r1
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2ae4:	47 e5       	ldi	r20, 0x57	; 87
    2ae6:	84 2e       	mov	r8, r20
    2ae8:	4a e7       	ldi	r20, 0x7A	; 122
    2aea:	94 2e       	mov	r9, r20
    reactStr[1][number]=length;
    2aec:	52 e0       	ldi	r21, 0x02	; 2
    2aee:	65 2e       	mov	r6, r21
    2af0:	71 2c       	mov	r7, r1
            if (StartsWith(&data[0], "cheat")){
                uint8_t bit;
                for (uint8_t x=0; x<MAX_CHEATS; ++x){
                    
                    //Set up sending out number
                    EERead(CHEATS+x, &bit, 1);
    2af2:	41 e0       	ldi	r20, 0x01	; 1
    2af4:	be 01       	movw	r22, r28
    2af6:	6f 5f       	subi	r22, 0xFF	; 255
    2af8:	7f 4f       	sbci	r23, 0xFF	; 255
    2afa:	85 2d       	mov	r24, r5
    2afc:	0e 94 56 07 	call	0xeac	; 0xeac <EERead>
                    bit = 0xff-bit;
    2b00:	89 81       	ldd	r24, Y+1	; 0x01
    2b02:	80 95       	com	r24
    2b04:	89 83       	std	Y+1, r24	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2b06:	28 2f       	mov	r18, r24
    2b08:	22 95       	swap	r18
    2b0a:	2f 70       	andi	r18, 0x0F	; 15
    2b0c:	30 e0       	ldi	r19, 0x00	; 0
    2b0e:	23 57       	subi	r18, 0x73	; 115
    2b10:	3b 48       	sbci	r19, 0x8B	; 139
    2b12:	f6 01       	movw	r30, r12
    2b14:	20 83       	st	Z, r18
    2b16:	31 83       	std	Z+1, r19	; 0x01
    reactStr[1][number]=length;
    2b18:	f7 01       	movw	r30, r14
    2b1a:	a0 82       	st	Z, r10
    2b1c:	b1 82       	std	Z+1, r11	; 0x01
    reactStr[2][number]=type;
    2b1e:	f8 01       	movw	r30, r16
    2b20:	a0 82       	st	Z, r10
    2b22:	b1 82       	std	Z+1, r11	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2b24:	8f 70       	andi	r24, 0x0F	; 15
    2b26:	90 e0       	ldi	r25, 0x00	; 0
    2b28:	83 57       	subi	r24, 0x73	; 115
    2b2a:	9b 48       	sbci	r25, 0x8B	; 139
    2b2c:	f6 01       	movw	r30, r12
    2b2e:	82 83       	std	Z+2, r24	; 0x02
    2b30:	93 83       	std	Z+3, r25	; 0x03
    reactStr[1][number]=length;
    2b32:	f7 01       	movw	r30, r14
    2b34:	a2 82       	std	Z+2, r10	; 0x02
    2b36:	b3 82       	std	Z+3, r11	; 0x03
    reactStr[2][number]=type;
    2b38:	f8 01       	movw	r30, r16
    2b3a:	a2 82       	std	Z+2, r10	; 0x02
    2b3c:	b3 82       	std	Z+3, r11	; 0x03
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2b3e:	f6 01       	movw	r30, r12
    2b40:	84 82       	std	Z+4, r8	; 0x04
    2b42:	95 82       	std	Z+5, r9	; 0x05
    reactStr[1][number]=length;
    2b44:	f7 01       	movw	r30, r14
    2b46:	64 82       	std	Z+4, r6	; 0x04
    2b48:	75 82       	std	Z+5, r7	; 0x05
    reactStr[2][number]=type;
    2b4a:	f8 01       	movw	r30, r16
    2b4c:	a4 82       	std	Z+4, r10	; 0x04
    2b4e:	b5 82       	std	Z+5, r11	; 0x05
    2b50:	53 94       	inc	r5
    2b52:	f6 e0       	ldi	r31, 0x06	; 6
    2b54:	cf 0e       	add	r12, r31
    2b56:	d1 1c       	adc	r13, r1
    2b58:	86 e0       	ldi	r24, 0x06	; 6
    2b5a:	e8 0e       	add	r14, r24
    2b5c:	f1 1c       	adc	r15, r1
    2b5e:	0a 5f       	subi	r16, 0xFA	; 250
            }

            //Show used cheat codes
            if (StartsWith(&data[0], "cheat")){
                uint8_t bit;
                for (uint8_t x=0; x<MAX_CHEATS; ++x){
    2b60:	1f 4f       	sbci	r17, 0xFF	; 255
    2b62:	e0 e2       	ldi	r30, 0x20	; 32
    2b64:	5e 12       	cpse	r5, r30
                    //SetResponse(x*4, A_HEXPREFIX, L_HEXPREFIX, TEASER);
                    SetResponse(x*3, A_DIGITS+(bit>>4), 1, TEASER);               
                    SetResponse(x*3+1, A_DIGITS+(bit%16), 1, TEASER);
                    SetResponse(x*3+2, A_COMMA, L_COMMA, TEASER);
                }
                responseList = SetStandardResponse((3*MAX_CHEATS));
    2b66:	c5 cf       	rjmp	.-118    	; 0x2af2 <CheckInput+0x334>
    2b68:	88 e1       	ldi	r24, 0x18	; 24
    2b6a:	c6 db       	rcall	.-2164   	; 0x22f8 <SetStandardResponse>
    2b6c:	80 93 2c 39 	sts	0x392C, r24	; 0x80392c <responseList>
        //Data received, but not any of the commands above
        return 0;
    }

    //Serial input not available yet
    return 1;
    2b70:	ff 24       	eor	r15, r15
    2b72:	f3 94       	inc	r15
}
    2b74:	8f 2d       	mov	r24, r15
    2b76:	29 96       	adiw	r28, 0x09	; 9
    2b78:	ef e0       	ldi	r30, 0x0F	; 15
    2b7a:	0c 94 76 1f 	jmp	0x3eec	; 0x3eec <__epilogue_restores__+0x6>

00002b7e <ShowInventory>:

uint8_t ShowInventory(uint8_t elements){
    2b7e:	ab e2       	ldi	r26, 0x2B	; 43
    2b80:	b0 e0       	ldi	r27, 0x00	; 0
    2b82:	e5 ec       	ldi	r30, 0xC5	; 197
    2b84:	f5 e1       	ldi	r31, 0x15	; 21
    2b86:	0c 94 61 1f 	jmp	0x3ec2	; 0x3ec2 <__prologue_saves__+0xe>
    object_model_t actObj1;

    SetResponse(elements++, A_NOWCARRING, L_NOWCARRING, TEASER);
    2b8a:	99 24       	eor	r9, r9
    2b8c:	93 94       	inc	r9
    2b8e:	98 0e       	add	r9, r24
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2b90:	90 e0       	ldi	r25, 0x00	; 0
    2b92:	fc 01       	movw	r30, r24
    2b94:	ee 0f       	add	r30, r30
    2b96:	ff 1f       	adc	r31, r31
    2b98:	e3 5d       	subi	r30, 0xD3	; 211
    2b9a:	f6 4c       	sbci	r31, 0xC6	; 198
    2b9c:	2c ec       	ldi	r18, 0xCC	; 204
    2b9e:	37 e7       	ldi	r19, 0x77	; 119
    2ba0:	20 83       	st	Z, r18
    2ba2:	31 83       	std	Z+1, r19	; 0x01
    reactStr[1][number]=length;
    2ba4:	fc 01       	movw	r30, r24
    2ba6:	ee 0f       	add	r30, r30
    2ba8:	ff 1f       	adc	r31, r31
    2baa:	e3 59       	subi	r30, 0x93	; 147
    2bac:	f6 4c       	sbci	r31, 0xC6	; 198
    2bae:	26 e1       	ldi	r18, 0x16	; 22
    2bb0:	30 e0       	ldi	r19, 0x00	; 0
    2bb2:	20 83       	st	Z, r18
    2bb4:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    2bb6:	88 0f       	add	r24, r24
    2bb8:	99 1f       	adc	r25, r25
    2bba:	fc 01       	movw	r30, r24
    2bbc:	e3 55       	subi	r30, 0x53	; 83
    2bbe:	f6 4c       	sbci	r31, 0xC6	; 198
    2bc0:	81 e0       	ldi	r24, 0x01	; 1
    2bc2:	90 e0       	ldi	r25, 0x00	; 0
    2bc4:	80 83       	st	Z, r24
    2bc6:	91 83       	std	Z+1, r25	; 0x01
    2bc8:	0e e4       	ldi	r16, 0x4E	; 78
    2bca:	18 e3       	ldi	r17, 0x38	; 56
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2bcc:	37 e5       	ldi	r19, 0x57	; 87
    2bce:	e3 2e       	mov	r14, r19
    2bd0:	3a e7       	ldi	r19, 0x7A	; 122
    2bd2:	f3 2e       	mov	r15, r19
    reactStr[1][number]=length;
    2bd4:	42 e0       	ldi	r20, 0x02	; 2
    2bd6:	c4 2e       	mov	r12, r20
    2bd8:	d1 2c       	mov	r13, r1
    reactStr[2][number]=type;
    2bda:	aa 24       	eor	r10, r10
    2bdc:	a3 94       	inc	r10
    2bde:	b1 2c       	mov	r11, r1
    object_model_t actObj1;

    SetResponse(elements++, A_NOWCARRING, L_NOWCARRING, TEASER);

    for (uint8_t x=0; x<2; ++x) {
        if (inventory[x]) {
    2be0:	f8 01       	movw	r30, r16
    2be2:	81 91       	ld	r24, Z+
    2be4:	91 91       	ld	r25, Z+
    2be6:	8f 01       	movw	r16, r30
    2be8:	00 97       	sbiw	r24, 0x00	; 0
    2bea:	c9 f1       	breq	.+114    	; 0x2c5e <ShowInventory+0xe0>
            PopulateObject(inventory[x], &actObj1);
    2bec:	be 01       	movw	r22, r28
    2bee:	6f 5f       	subi	r22, 0xFF	; 255
    2bf0:	7f 4f       	sbci	r23, 0xFF	; 255
    2bf2:	fe db       	rcall	.-2052   	; 0x23f0 <PopulateObject>
            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    2bf4:	2b 8d       	ldd	r18, Y+27	; 0x1b
    2bf6:	3c 8d       	ldd	r19, Y+28	; 0x1c
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2bf8:	89 2d       	mov	r24, r9
    2bfa:	90 e0       	ldi	r25, 0x00	; 0
    2bfc:	fc 01       	movw	r30, r24
    2bfe:	ee 0f       	add	r30, r30
    2c00:	ff 1f       	adc	r31, r31
    2c02:	e3 5d       	subi	r30, 0xD3	; 211
    2c04:	f6 4c       	sbci	r31, 0xC6	; 198
    2c06:	4d 85       	ldd	r20, Y+13	; 0x0d
    2c08:	5e 85       	ldd	r21, Y+14	; 0x0e
    2c0a:	40 83       	st	Z, r20
    2c0c:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    2c0e:	fc 01       	movw	r30, r24
    2c10:	ee 0f       	add	r30, r30
    2c12:	ff 1f       	adc	r31, r31
    2c14:	e3 59       	subi	r30, 0x93	; 147
    2c16:	f6 4c       	sbci	r31, 0xC6	; 198
    2c18:	20 83       	st	Z, r18
    2c1a:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    2c1c:	88 0f       	add	r24, r24
    2c1e:	99 1f       	adc	r25, r25
    2c20:	fc 01       	movw	r30, r24
    2c22:	e3 55       	subi	r30, 0x53	; 83
    2c24:	f6 4c       	sbci	r31, 0xC6	; 198
    2c26:	10 82       	st	Z, r1
    2c28:	11 82       	std	Z+1, r1	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2c2a:	81 e0       	ldi	r24, 0x01	; 1
    2c2c:	89 0d       	add	r24, r9
    2c2e:	90 e0       	ldi	r25, 0x00	; 0
    2c30:	93 94       	inc	r9
    2c32:	93 94       	inc	r9
    2c34:	fc 01       	movw	r30, r24
    2c36:	ee 0f       	add	r30, r30
    2c38:	ff 1f       	adc	r31, r31
    2c3a:	e3 5d       	subi	r30, 0xD3	; 211
    2c3c:	f6 4c       	sbci	r31, 0xC6	; 198
    2c3e:	e0 82       	st	Z, r14
    2c40:	f1 82       	std	Z+1, r15	; 0x01
    reactStr[1][number]=length;
    2c42:	fc 01       	movw	r30, r24
    2c44:	ee 0f       	add	r30, r30
    2c46:	ff 1f       	adc	r31, r31
    2c48:	e3 59       	subi	r30, 0x93	; 147
    2c4a:	f6 4c       	sbci	r31, 0xC6	; 198
    2c4c:	c0 82       	st	Z, r12
    2c4e:	d1 82       	std	Z+1, r13	; 0x01
    reactStr[2][number]=type;
    2c50:	88 0f       	add	r24, r24
    2c52:	99 1f       	adc	r25, r25
    2c54:	fc 01       	movw	r30, r24
    2c56:	e3 55       	subi	r30, 0x53	; 83
    2c58:	f6 4c       	sbci	r31, 0xC6	; 198
    2c5a:	a0 82       	st	Z, r10
    2c5c:	b1 82       	std	Z+1, r11	; 0x01
uint8_t ShowInventory(uint8_t elements){
    object_model_t actObj1;

    SetResponse(elements++, A_NOWCARRING, L_NOWCARRING, TEASER);

    for (uint8_t x=0; x<2; ++x) {
    2c5e:	f8 e3       	ldi	r31, 0x38	; 56
    2c60:	02 35       	cpi	r16, 0x52	; 82
    2c62:	1f 07       	cpc	r17, r31
    2c64:	09 f0       	breq	.+2      	; 0x2c68 <ShowInventory+0xea>
    2c66:	bc cf       	rjmp	.-136    	; 0x2be0 <ShowInventory+0x62>
        }
    }
    elements -= 1;
            
    return elements;
}
    2c68:	8f ef       	ldi	r24, 0xFF	; 255
    2c6a:	89 0d       	add	r24, r9
    2c6c:	ab 96       	adiw	r28, 0x2b	; 43
    2c6e:	eb e0       	ldi	r30, 0x0B	; 11
    2c70:	0c 94 7a 1f 	jmp	0x3ef4	; 0x3ef4 <__epilogue_restores__+0xe>

00002c74 <ProcessInput>:

//The game logic!
uint8_t ProcessInput(uint8_t *data){
    2c74:	a8 e0       	ldi	r26, 0x08	; 8
    2c76:	b0 e0       	ldi	r27, 0x00	; 0
    2c78:	e0 e4       	ldi	r30, 0x40	; 64
    2c7a:	f6 e1       	ldi	r31, 0x16	; 22
    2c7c:	0c 94 5e 1f 	jmp	0x3ebc	; 0x3ebc <__prologue_saves__+0x8>
    2c80:	3c 01       	movw	r6, r24
    static object_model_t actObj1, actObj2;
    uint8_t elements = 1;

    CleanInput(&data[0]);
    2c82:	e2 dc       	rcall	.-1596   	; 0x2648 <CleanInput>
    uint8_t inputLen = CleanInput(&data[0]);
    2c84:	c3 01       	movw	r24, r6
    2c86:	e0 dc       	rcall	.-1600   	; 0x2648 <CleanInput>
    2c88:	f8 2e       	mov	r15, r24
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2c8a:	29 e5       	ldi	r18, 0x59	; 89
    2c8c:	3a e7       	ldi	r19, 0x7A	; 122
    2c8e:	20 93 2d 39 	sts	0x392D, r18	; 0x80392d <reactStr>
    2c92:	30 93 2e 39 	sts	0x392E, r19	; 0x80392e <reactStr+0x1>
    reactStr[1][number]=length;
    2c96:	84 e0       	ldi	r24, 0x04	; 4
    2c98:	90 e0       	ldi	r25, 0x00	; 0
    2c9a:	80 93 6d 39 	sts	0x396D, r24	; 0x80396d <reactStr+0x40>
    2c9e:	90 93 6e 39 	sts	0x396E, r25	; 0x80396e <reactStr+0x41>
    reactStr[2][number]=type;
    2ca2:	01 e0       	ldi	r16, 0x01	; 1
    2ca4:	10 e0       	ldi	r17, 0x00	; 0
    2ca6:	00 93 ad 39 	sts	0x39AD, r16	; 0x8039ad <reactStr+0x80>
    2caa:	10 93 ae 39 	sts	0x39AE, r17	; 0x8039ae <reactStr+0x81>

    CleanInput(&data[0]);
    uint8_t inputLen = CleanInput(&data[0]);
    SetResponse(0, A_LF, 4, TEASER);

    if (inputLen) {
    2cae:	ff 20       	and	r15, r15
    2cb0:	09 f4       	brne	.+2      	; 0x2cb4 <ProcessInput+0x40>
    2cb2:	54 c7       	rjmp	.+3752   	; 0x3b5c <ProcessInput+0xee8>

        //eXit to previous location
        if (data[0] == 'x'){
    2cb4:	d3 01       	movw	r26, r6
    2cb6:	8c 91       	ld	r24, X
    2cb8:	88 37       	cpi	r24, 0x78	; 120
    2cba:	09 f0       	breq	.+2      	; 0x2cbe <ProcessInput+0x4a>
    2cbc:	45 c0       	rjmp	.+138    	; 0x2d48 <ProcessInput+0xd4>

            //Standing in the Lobby?
            if ((route[currDepth] == 0)||(currDepth == 0)){
    2cbe:	80 91 3e 38 	lds	r24, 0x383E	; 0x80383e <currDepth>
    2cc2:	e8 2f       	mov	r30, r24
    2cc4:	f0 e0       	ldi	r31, 0x00	; 0
    2cc6:	ee 0f       	add	r30, r30
    2cc8:	ff 1f       	adc	r31, r31
    2cca:	e3 51       	subi	r30, 0x13	; 19
    2ccc:	f6 4c       	sbci	r31, 0xC6	; 198
    2cce:	20 81       	ld	r18, Z
    2cd0:	31 81       	ldd	r19, Z+1	; 0x01
    2cd2:	23 2b       	or	r18, r19
    2cd4:	11 f0       	breq	.+4      	; 0x2cda <ProcessInput+0x66>
    2cd6:	81 11       	cpse	r24, r1
    2cd8:	03 c0       	rjmp	.+6      	; 0x2ce0 <ProcessInput+0x6c>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2cda:	84 e4       	ldi	r24, 0x44	; 68
    2cdc:	96 e7       	ldi	r25, 0x76	; 118
    2cde:	13 c5       	rjmp	.+2598   	; 0x3706 <ProcessInput+0xa92>
            //Standing in the Lobby?
            if ((route[currDepth] == 0)||(currDepth == 0)){
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            
            //Is there a way to go back?
            } else if (CheckState(currObj.byteField[OPEN_ACL])){
    2ce0:	80 91 33 3a 	lds	r24, 0x3A33	; 0x803a33 <currObj+0x6>
    2ce4:	0e 94 5f 09 	call	0x12be	; 0x12be <CheckState>
    2ce8:	88 23       	and	r24, r24
    2cea:	b9 f0       	breq	.+46     	; 0x2d1a <ProcessInput+0xa6>
                --currDepth;
    2cec:	e0 91 3e 38 	lds	r30, 0x383E	; 0x80383e <currDepth>
    2cf0:	e1 50       	subi	r30, 0x01	; 1
    2cf2:	e0 93 3e 38 	sts	0x383E, r30	; 0x80383e <currDepth>
                PopulateObject(route[currDepth], &currObj);
    2cf6:	f0 e0       	ldi	r31, 0x00	; 0
    2cf8:	ee 0f       	add	r30, r30
    2cfa:	ff 1f       	adc	r31, r31
    2cfc:	e3 51       	subi	r30, 0x13	; 19
    2cfe:	f6 4c       	sbci	r31, 0xC6	; 198
    2d00:	6d e2       	ldi	r22, 0x2D	; 45
    2d02:	7a e3       	ldi	r23, 0x3A	; 58
    2d04:	80 81       	ld	r24, Z
    2d06:	91 81       	ldd	r25, Z+1	; 0x01
    2d08:	73 db       	rcall	.-2330   	; 0x23f0 <PopulateObject>
                effect = currObj.byteField[EFFECTS];
    2d0a:	80 91 31 3a 	lds	r24, 0x3A31	; 0x803a31 <currObj+0x4>
    2d0e:	90 e0       	ldi	r25, 0x00	; 0
    2d10:	80 93 4a 38 	sts	0x384A, r24	; 0x80384a <effect>
    2d14:	90 93 4b 38 	sts	0x384B, r25	; 0x80384b <effect+0x1>
    2d18:	2a c2       	rjmp	.+1108   	; 0x316e <ProcessInput+0x4fa>
            
            //No way out, print denied message of location
            } else {
                SetResponse(elements++, currObj.addrStr[OPEN_ACL_MSG], currObj.lenStr[OPEN_ACL_MSG], GAME);
    2d1a:	80 91 4f 3a 	lds	r24, 0x3A4F	; 0x803a4f <currObj+0x22>
    2d1e:	90 91 50 3a 	lds	r25, 0x3A50	; 0x803a50 <currObj+0x23>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2d22:	20 91 41 3a 	lds	r18, 0x3A41	; 0x803a41 <currObj+0x14>
    2d26:	30 91 42 3a 	lds	r19, 0x3A42	; 0x803a42 <currObj+0x15>
    2d2a:	20 93 2f 39 	sts	0x392F, r18	; 0x80392f <reactStr+0x2>
    2d2e:	30 93 30 39 	sts	0x3930, r19	; 0x803930 <reactStr+0x3>
    reactStr[1][number]=length;
    2d32:	80 93 6f 39 	sts	0x396F, r24	; 0x80396f <reactStr+0x42>
    2d36:	90 93 70 39 	sts	0x3970, r25	; 0x803970 <reactStr+0x43>
    reactStr[2][number]=type;
    2d3a:	10 92 af 39 	sts	0x39AF, r1	; 0x8039af <reactStr+0x82>
    2d3e:	10 92 b0 39 	sts	0x39B0, r1	; 0x8039b0 <reactStr+0x83>
                effect = currObj.byteField[EFFECTS];
            
            //No way out, print denied message of location
            } else {
                SetResponse(elements++, currObj.addrStr[OPEN_ACL_MSG], currObj.lenStr[OPEN_ACL_MSG], GAME);
                effect = currObj.effect[0];               
    2d42:	80 91 55 3a 	lds	r24, 0x3A55	; 0x803a55 <currObj+0x28>
    2d46:	a9 c5       	rjmp	.+2898   	; 0x389a <ProcessInput+0xc26>
            }   
        
        //Enter locations or Open objects    
        } else if ((data[0] == 'e')||(data[0] == 'o')) {
    2d48:	85 36       	cpi	r24, 0x65	; 101
    2d4a:	19 f0       	breq	.+6      	; 0x2d52 <ProcessInput+0xde>
    2d4c:	8f 36       	cpi	r24, 0x6F	; 111
    2d4e:	09 f0       	breq	.+2      	; 0x2d52 <ProcessInput+0xde>
    2d50:	de c0       	rjmp	.+444    	; 0x2f0e <ProcessInput+0x29a>
                
            //Not possible, too many/little characters
            if (inputLen != 2){
    2d52:	b2 e0       	ldi	r27, 0x02	; 2
    2d54:	fb 12       	cpse	r15, r27
    2d56:	c1 cf       	rjmp	.-126    	; 0x2cda <ProcessInput+0x66>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                uint8_t canDo = 0;
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
    2d58:	00 91 3e 38 	lds	r16, 0x383E	; 0x80383e <currDepth>
    2d5c:	10 e0       	ldi	r17, 0x00	; 0
    2d5e:	f8 01       	movw	r30, r16
    2d60:	ee 0f       	add	r30, r30
    2d62:	ff 1f       	adc	r31, r31
    2d64:	e3 51       	subi	r30, 0x13	; 19
    2d66:	f6 4c       	sbci	r31, 0xC6	; 198
    2d68:	40 e0       	ldi	r20, 0x00	; 0
    2d6a:	50 e0       	ldi	r21, 0x00	; 0
    2d6c:	d3 01       	movw	r26, r6
    2d6e:	11 96       	adiw	r26, 0x01	; 1
    2d70:	6c 91       	ld	r22, X
    2d72:	80 81       	ld	r24, Z
    2d74:	91 81       	ldd	r25, Z+1	; 0x01
    2d76:	fc db       	rcall	.-2056   	; 0x2570 <FindChild>
    2d78:	00 0f       	add	r16, r16
    2d7a:	11 1f       	adc	r17, r17
    2d7c:	f8 01       	movw	r30, r16
    2d7e:	e1 51       	subi	r30, 0x11	; 17
    2d80:	f6 4c       	sbci	r31, 0xC6	; 198
    2d82:	80 83       	st	Z, r24
    2d84:	91 83       	std	Z+1, r25	; 0x01
                    
                //Child found?
                if (route[currDepth+1]) {
    2d86:	90 91 3e 38 	lds	r25, 0x383E	; 0x80383e <currDepth>
    2d8a:	29 2f       	mov	r18, r25
    2d8c:	30 e0       	ldi	r19, 0x00	; 0
    2d8e:	f9 01       	movw	r30, r18
    2d90:	ee 0f       	add	r30, r30
    2d92:	ff 1f       	adc	r31, r31
    2d94:	e1 51       	subi	r30, 0x11	; 17
    2d96:	f6 4c       	sbci	r31, 0xC6	; 198
    2d98:	40 81       	ld	r20, Z
    2d9a:	51 81       	ldd	r21, Z+1	; 0x01
    2d9c:	41 15       	cp	r20, r1
    2d9e:	51 05       	cpc	r21, r1
    2da0:	21 f0       	breq	.+8      	; 0x2daa <ProcessInput+0x136>
                    PopulateObject(route[currDepth+1], &actObj1);
    2da2:	6c ee       	ldi	r22, 0xEC	; 236
    2da4:	78 e3       	ldi	r23, 0x38	; 56
    2da6:	ca 01       	movw	r24, r20
    2da8:	1c c0       	rjmp	.+56     	; 0x2de2 <ProcessInput+0x16e>
                    canDo = 1;
                //No child, maybe a step back, letter ok?
                } else if (currDepth) {
    2daa:	99 23       	and	r25, r25
    2dac:	09 f4       	brne	.+2      	; 0x2db0 <ProcessInput+0x13c>
    2dae:	dc c6       	rjmp	.+3512   	; 0x3b68 <ProcessInput+0xef4>
                    if (CheckLetter(route[currDepth-1], data[1])) {
    2db0:	22 0f       	add	r18, r18
    2db2:	33 1f       	adc	r19, r19
    2db4:	f9 01       	movw	r30, r18
    2db6:	e5 51       	subi	r30, 0x15	; 21
    2db8:	f6 4c       	sbci	r31, 0xC6	; 198
    2dba:	d3 01       	movw	r26, r6
    2dbc:	11 96       	adiw	r26, 0x01	; 1
    2dbe:	6c 91       	ld	r22, X
    2dc0:	80 81       	ld	r24, Z
    2dc2:	91 81       	ldd	r25, Z+1	; 0x01
    2dc4:	8e db       	rcall	.-2276   	; 0x24e2 <CheckLetter>
    2dc6:	88 23       	and	r24, r24
    2dc8:	09 f4       	brne	.+2      	; 0x2dcc <ProcessInput+0x158>
    2dca:	ce c6       	rjmp	.+3484   	; 0x3b68 <ProcessInput+0xef4>
                        PopulateObject(route[currDepth-1], &actObj1);
    2dcc:	e0 91 3e 38 	lds	r30, 0x383E	; 0x80383e <currDepth>
    2dd0:	f0 e0       	ldi	r31, 0x00	; 0
    2dd2:	ee 0f       	add	r30, r30
    2dd4:	ff 1f       	adc	r31, r31
    2dd6:	e5 51       	subi	r30, 0x15	; 21
    2dd8:	f6 4c       	sbci	r31, 0xC6	; 198
    2dda:	6c ee       	ldi	r22, 0xEC	; 236
    2ddc:	78 e3       	ldi	r23, 0x38	; 56
    2dde:	80 81       	ld	r24, Z
    2de0:	91 81       	ldd	r25, Z+1	; 0x01
    2de2:	06 db       	rcall	.-2548   	; 0x23f0 <PopulateObject>
                    }
                }

                //The candidate is found! Let's check if the action is legit
                if (canDo) {
                    if ((data[0] == 'e') && ((actObj1.byteField[ACTION_MASK]&ENTER)==0)) {
    2de4:	d3 01       	movw	r26, r6
    2de6:	8c 91       	ld	r24, X
    2de8:	85 36       	cpi	r24, 0x65	; 101
    2dea:	c1 f4       	brne	.+48     	; 0x2e1c <ProcessInput+0x1a8>
    2dec:	80 91 f4 38 	lds	r24, 0x38F4	; 0x8038f4 <actObj1.3956+0x8>
    2df0:	80 fd       	sbrc	r24, 0
    2df2:	1d c0       	rjmp	.+58     	; 0x2e2e <ProcessInput+0x1ba>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2df4:	8d e9       	ldi	r24, 0x9D	; 157
    2df6:	99 e7       	ldi	r25, 0x79	; 121
    2df8:	80 93 2f 39 	sts	0x392F, r24	; 0x80392f <reactStr+0x2>
    2dfc:	90 93 30 39 	sts	0x3930, r25	; 0x803930 <reactStr+0x3>
    reactStr[1][number]=length;
    2e00:	8e e1       	ldi	r24, 0x1E	; 30
    2e02:	90 e0       	ldi	r25, 0x00	; 0
    2e04:	80 93 6f 39 	sts	0x396F, r24	; 0x80396f <reactStr+0x42>
    2e08:	90 93 70 39 	sts	0x3970, r25	; 0x803970 <reactStr+0x43>
    reactStr[2][number]=type;
    2e0c:	81 e0       	ldi	r24, 0x01	; 1
    2e0e:	90 e0       	ldi	r25, 0x00	; 0
    2e10:	80 93 af 39 	sts	0x39AF, r24	; 0x8039af <reactStr+0x82>
    2e14:	90 93 b0 39 	sts	0x39B0, r25	; 0x8039b0 <reactStr+0x83>
                }

                //The candidate is found! Let's check if the action is legit
                if (canDo) {
                    if ((data[0] == 'e') && ((actObj1.byteField[ACTION_MASK]&ENTER)==0)) {
                        SetResponse(elements++, A_CANTENTER, L_CANTENTER, TEASER);
    2e18:	12 e0       	ldi	r17, 0x02	; 2
    2e1a:	97 c6       	rjmp	.+3374   	; 0x3b4a <ProcessInput+0xed6>
                    } else if ((data[0] == 'o') && ((actObj1.byteField[ACTION_MASK]&OPEN)==0)) {
    2e1c:	8f 36       	cpi	r24, 0x6F	; 111
    2e1e:	39 f4       	brne	.+14     	; 0x2e2e <ProcessInput+0x1ba>
    2e20:	80 91 f4 38 	lds	r24, 0x38F4	; 0x8038f4 <actObj1.3956+0x8>
    2e24:	81 fd       	sbrc	r24, 1
    2e26:	03 c0       	rjmp	.+6      	; 0x2e2e <ProcessInput+0x1ba>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2e28:	82 e8       	ldi	r24, 0x82	; 130
    2e2a:	99 e7       	ldi	r25, 0x79	; 121
    2e2c:	6c c4       	rjmp	.+2264   	; 0x3706 <ProcessInput+0xa92>
                        SetResponse(elements++, A_CANTENTER, L_CANTENTER, TEASER);
                    } else if ((data[0] == 'o') && ((actObj1.byteField[ACTION_MASK]&OPEN)==0)) {
                        SetResponse(elements++, A_CANTOPEN, L_CANTOPEN, TEASER);
                    
                    //Action legit, permission granted?
                    } else if (CheckState(actObj1.byteField[OPEN_ACL])) {
    2e2e:	80 91 f2 38 	lds	r24, 0x38F2	; 0x8038f2 <actObj1.3956+0x6>
    2e32:	0e 94 5f 09 	call	0x12be	; 0x12be <CheckState>
    2e36:	e0 91 3e 38 	lds	r30, 0x383E	; 0x80383e <currDepth>
    2e3a:	88 23       	and	r24, r24
    2e3c:	09 f4       	brne	.+2      	; 0x2e40 <ProcessInput+0x1cc>
    2e3e:	49 c0       	rjmp	.+146    	; 0x2ed2 <ProcessInput+0x25e>
                            
                        //Yes! Check if we must move forward or backwards.
                        if (route[currDepth+1]) ++currDepth; else --currDepth;
    2e40:	ae 2f       	mov	r26, r30
    2e42:	b0 e0       	ldi	r27, 0x00	; 0
    2e44:	aa 0f       	add	r26, r26
    2e46:	bb 1f       	adc	r27, r27
    2e48:	a1 51       	subi	r26, 0x11	; 17
    2e4a:	b6 4c       	sbci	r27, 0xC6	; 198
    2e4c:	8d 91       	ld	r24, X+
    2e4e:	9c 91       	ld	r25, X
    2e50:	89 2b       	or	r24, r25
    2e52:	11 f0       	breq	.+4      	; 0x2e58 <ProcessInput+0x1e4>
    2e54:	ef 5f       	subi	r30, 0xFF	; 255
    2e56:	01 c0       	rjmp	.+2      	; 0x2e5a <ProcessInput+0x1e6>
    2e58:	e1 50       	subi	r30, 0x01	; 1
    2e5a:	e0 93 3e 38 	sts	0x383E, r30	; 0x80383e <currDepth>
                        PopulateObject(route[currDepth], &currObj);
    2e5e:	e0 91 3e 38 	lds	r30, 0x383E	; 0x80383e <currDepth>
    2e62:	f0 e0       	ldi	r31, 0x00	; 0
    2e64:	ee 0f       	add	r30, r30
    2e66:	ff 1f       	adc	r31, r31
    2e68:	e3 51       	subi	r30, 0x13	; 19
    2e6a:	f6 4c       	sbci	r31, 0xC6	; 198
    2e6c:	6d e2       	ldi	r22, 0x2D	; 45
    2e6e:	7a e3       	ldi	r23, 0x3A	; 58
    2e70:	80 81       	ld	r24, Z
    2e72:	91 81       	ldd	r25, Z+1	; 0x01
    2e74:	bd da       	rcall	.-2694   	; 0x23f0 <PopulateObject>
                        SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
    2e76:	80 91 49 3a 	lds	r24, 0x3A49	; 0x803a49 <currObj+0x1c>
    2e7a:	90 91 4a 3a 	lds	r25, 0x3A4A	; 0x803a4a <currObj+0x1d>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2e7e:	20 91 3b 3a 	lds	r18, 0x3A3B	; 0x803a3b <currObj+0xe>
    2e82:	30 91 3c 3a 	lds	r19, 0x3A3C	; 0x803a3c <currObj+0xf>
    2e86:	20 93 2f 39 	sts	0x392F, r18	; 0x80392f <reactStr+0x2>
    2e8a:	30 93 30 39 	sts	0x3930, r19	; 0x803930 <reactStr+0x3>
    reactStr[1][number]=length;
    2e8e:	80 93 6f 39 	sts	0x396F, r24	; 0x80396f <reactStr+0x42>
    2e92:	90 93 70 39 	sts	0x3970, r25	; 0x803970 <reactStr+0x43>
    reactStr[2][number]=type;
    2e96:	10 92 af 39 	sts	0x39AF, r1	; 0x8039af <reactStr+0x82>
    2e9a:	10 92 b0 39 	sts	0x39B0, r1	; 0x8039b0 <reactStr+0x83>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2e9e:	89 e5       	ldi	r24, 0x59	; 89
    2ea0:	9a e7       	ldi	r25, 0x7A	; 122
    2ea2:	80 93 31 39 	sts	0x3931, r24	; 0x803931 <reactStr+0x4>
    2ea6:	90 93 32 39 	sts	0x3932, r25	; 0x803932 <reactStr+0x5>
    reactStr[1][number]=length;
    2eaa:	82 e0       	ldi	r24, 0x02	; 2
    2eac:	90 e0       	ldi	r25, 0x00	; 0
    2eae:	80 93 71 39 	sts	0x3971, r24	; 0x803971 <reactStr+0x44>
    2eb2:	90 93 72 39 	sts	0x3972, r25	; 0x803972 <reactStr+0x45>
    reactStr[2][number]=type;
    2eb6:	81 e0       	ldi	r24, 0x01	; 1
    2eb8:	90 e0       	ldi	r25, 0x00	; 0
    2eba:	80 93 b1 39 	sts	0x39B1, r24	; 0x8039b1 <reactStr+0x84>
    2ebe:	90 93 b2 39 	sts	0x39B2, r25	; 0x8039b2 <reactStr+0x85>
                        //Yes! Check if we must move forward or backwards.
                        if (route[currDepth+1]) ++currDepth; else --currDepth;
                        PopulateObject(route[currDepth], &currObj);
                        SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
                        SetResponse(elements++, A_LF, 2, TEASER);
                        effect = currObj.byteField[EFFECTS];
    2ec2:	80 91 31 3a 	lds	r24, 0x3A31	; 0x803a31 <currObj+0x4>
    2ec6:	90 e0       	ldi	r25, 0x00	; 0
    2ec8:	80 93 4a 38 	sts	0x384A, r24	; 0x80384a <effect>
    2ecc:	90 93 4b 38 	sts	0x384B, r25	; 0x80384b <effect+0x1>
    2ed0:	07 c4       	rjmp	.+2062   	; 0x36e0 <ProcessInput+0xa6c>
                                                  
                    //Not granted!
                    } else {
                        route[currDepth+1] = 0;
    2ed2:	f0 e0       	ldi	r31, 0x00	; 0
    2ed4:	ee 0f       	add	r30, r30
    2ed6:	ff 1f       	adc	r31, r31
    2ed8:	e1 51       	subi	r30, 0x11	; 17
    2eda:	f6 4c       	sbci	r31, 0xC6	; 198
    2edc:	10 82       	st	Z, r1
    2ede:	11 82       	std	Z+1, r1	; 0x01
                        SetResponse(elements++, actObj1.addrStr[OPEN_ACL_MSG], actObj1.lenStr[OPEN_ACL_MSG], GAME);
    2ee0:	80 91 0e 39 	lds	r24, 0x390E	; 0x80390e <actObj1.3956+0x22>
    2ee4:	90 91 0f 39 	lds	r25, 0x390F	; 0x80390f <actObj1.3956+0x23>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2ee8:	20 91 00 39 	lds	r18, 0x3900	; 0x803900 <actObj1.3956+0x14>
    2eec:	30 91 01 39 	lds	r19, 0x3901	; 0x803901 <actObj1.3956+0x15>
    2ef0:	20 93 2f 39 	sts	0x392F, r18	; 0x80392f <reactStr+0x2>
    2ef4:	30 93 30 39 	sts	0x3930, r19	; 0x803930 <reactStr+0x3>
    reactStr[1][number]=length;
    2ef8:	80 93 6f 39 	sts	0x396F, r24	; 0x80396f <reactStr+0x42>
    2efc:	90 93 70 39 	sts	0x3970, r25	; 0x803970 <reactStr+0x43>
    reactStr[2][number]=type;
    2f00:	10 92 af 39 	sts	0x39AF, r1	; 0x8039af <reactStr+0x82>
    2f04:	10 92 b0 39 	sts	0x39B0, r1	; 0x8039b0 <reactStr+0x83>
                                                  
                    //Not granted!
                    } else {
                        route[currDepth+1] = 0;
                        SetResponse(elements++, actObj1.addrStr[OPEN_ACL_MSG], actObj1.lenStr[OPEN_ACL_MSG], GAME);
                        effect = actObj1.effect[0];              
    2f08:	80 91 14 39 	lds	r24, 0x3914	; 0x803914 <actObj1.3956+0x28>
    2f0c:	c6 c4       	rjmp	.+2444   	; 0x389a <ProcessInput+0xc26>
                    SetResponse(elements++, A_DONTSEE, L_DONTSEE, TEASER);                
                }
            }

        //Look around or at objects
        } else if (data[0] == 'l') {
    2f0e:	8c 36       	cpi	r24, 0x6C	; 108
    2f10:	09 f0       	breq	.+2      	; 0x2f14 <ProcessInput+0x2a0>
    2f12:	59 c1       	rjmp	.+690    	; 0x31c6 <ProcessInput+0x552>
    2f14:	e0 91 3e 38 	lds	r30, 0x383E	; 0x80383e <currDepth>
            if (inputLen == 1) {
    2f18:	b1 e0       	ldi	r27, 0x01	; 1
    2f1a:	fb 12       	cpse	r15, r27
    2f1c:	f1 c0       	rjmp	.+482    	; 0x3100 <ProcessInput+0x48c>

                //Show info about this area first
                SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
    2f1e:	80 91 49 3a 	lds	r24, 0x3A49	; 0x803a49 <currObj+0x1c>
    2f22:	90 91 4a 3a 	lds	r25, 0x3A4A	; 0x803a4a <currObj+0x1d>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2f26:	40 91 3b 3a 	lds	r20, 0x3A3B	; 0x803a3b <currObj+0xe>
    2f2a:	50 91 3c 3a 	lds	r21, 0x3A3C	; 0x803a3c <currObj+0xf>
    2f2e:	40 93 2f 39 	sts	0x392F, r20	; 0x80392f <reactStr+0x2>
    2f32:	50 93 30 39 	sts	0x3930, r21	; 0x803930 <reactStr+0x3>
    reactStr[1][number]=length;
    2f36:	80 93 6f 39 	sts	0x396F, r24	; 0x80396f <reactStr+0x42>
    2f3a:	90 93 70 39 	sts	0x3970, r25	; 0x803970 <reactStr+0x43>
    reactStr[2][number]=type;
    2f3e:	10 92 af 39 	sts	0x39AF, r1	; 0x8039af <reactStr+0x82>
    2f42:	10 92 b0 39 	sts	0x39B0, r1	; 0x8039b0 <reactStr+0x83>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2f46:	20 93 31 39 	sts	0x3931, r18	; 0x803931 <reactStr+0x4>
    2f4a:	30 93 32 39 	sts	0x3932, r19	; 0x803932 <reactStr+0x5>
    reactStr[1][number]=length;
    2f4e:	82 e0       	ldi	r24, 0x02	; 2
    2f50:	90 e0       	ldi	r25, 0x00	; 0
    2f52:	80 93 71 39 	sts	0x3971, r24	; 0x803971 <reactStr+0x44>
    2f56:	90 93 72 39 	sts	0x3972, r25	; 0x803972 <reactStr+0x45>
    reactStr[2][number]=type;
    2f5a:	00 93 b1 39 	sts	0x39B1, r16	; 0x8039b1 <reactStr+0x84>
    2f5e:	10 93 b2 39 	sts	0x39B2, r17	; 0x8039b2 <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2f62:	8b ee       	ldi	r24, 0xEB	; 235
    2f64:	99 e7       	ldi	r25, 0x79	; 121
    2f66:	80 93 33 39 	sts	0x3933, r24	; 0x803933 <reactStr+0x6>
    2f6a:	90 93 34 39 	sts	0x3934, r25	; 0x803934 <reactStr+0x7>
    reactStr[1][number]=length;
    2f6e:	85 e1       	ldi	r24, 0x15	; 21
    2f70:	90 e0       	ldi	r25, 0x00	; 0
    2f72:	80 93 73 39 	sts	0x3973, r24	; 0x803973 <reactStr+0x46>
    2f76:	90 93 74 39 	sts	0x3974, r25	; 0x803974 <reactStr+0x47>
    reactStr[2][number]=type;
    2f7a:	00 93 b3 39 	sts	0x39B3, r16	; 0x8039b3 <reactStr+0x86>
    2f7e:	10 93 b4 39 	sts	0x39B4, r17	; 0x8039b4 <reactStr+0x87>
                SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
                SetResponse(elements++, A_LF, 2, TEASER);
                SetResponse(elements++, A_LOOK, L_LOOK, TEASER);

                //Check the visible children first
                route[currDepth+1] = 0;
    2f82:	f0 e0       	ldi	r31, 0x00	; 0
    2f84:	ee 0f       	add	r30, r30
    2f86:	ff 1f       	adc	r31, r31
    2f88:	e1 51       	subi	r30, 0x11	; 17
    2f8a:	f6 4c       	sbci	r31, 0xC6	; 198
    2f8c:	10 82       	st	Z, r1
    2f8e:	11 82       	std	Z+1, r1	; 0x01
            if (inputLen == 1) {

                //Show info about this area first
                SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
                SetResponse(elements++, A_LF, 2, TEASER);
                SetResponse(elements++, A_LOOK, L_LOOK, TEASER);
    2f90:	14 e0       	ldi	r17, 0x04	; 4
    2f92:	91 2e       	mov	r9, r17
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2f94:	07 e5       	ldi	r16, 0x57	; 87
    2f96:	e0 2e       	mov	r14, r16
    2f98:	0a e7       	ldi	r16, 0x7A	; 122
    2f9a:	f0 2e       	mov	r15, r16
    reactStr[1][number]=length;
    2f9c:	82 e0       	ldi	r24, 0x02	; 2
    2f9e:	c8 2e       	mov	r12, r24
    2fa0:	d1 2c       	mov	r13, r1
    reactStr[2][number]=type;
    2fa2:	aa 24       	eor	r10, r10
    2fa4:	a3 94       	inc	r10
    2fa6:	b1 2c       	mov	r11, r1
                SetResponse(elements++, A_LOOK, L_LOOK, TEASER);

                //Check the visible children first
                route[currDepth+1] = 0;
                do{
                    route[currDepth+1] = FindChild(route[currDepth], 0, route[currDepth+1]);
    2fa8:	80 91 3e 38 	lds	r24, 0x383E	; 0x80383e <currDepth>
    2fac:	90 e0       	ldi	r25, 0x00	; 0
    2fae:	8c 01       	movw	r16, r24
    2fb0:	00 0f       	add	r16, r16
    2fb2:	11 1f       	adc	r17, r17
    2fb4:	01 51       	subi	r16, 0x11	; 17
    2fb6:	16 4c       	sbci	r17, 0xC6	; 198
    2fb8:	f8 01       	movw	r30, r16
    2fba:	40 81       	ld	r20, Z
    2fbc:	51 81       	ldd	r21, Z+1	; 0x01
    2fbe:	88 0f       	add	r24, r24
    2fc0:	99 1f       	adc	r25, r25
    2fc2:	fc 01       	movw	r30, r24
    2fc4:	e3 51       	subi	r30, 0x13	; 19
    2fc6:	f6 4c       	sbci	r31, 0xC6	; 198
    2fc8:	60 e0       	ldi	r22, 0x00	; 0
    2fca:	80 81       	ld	r24, Z
    2fcc:	91 81       	ldd	r25, Z+1	; 0x01
    2fce:	d0 da       	rcall	.-2656   	; 0x2570 <FindChild>
    2fd0:	d8 01       	movw	r26, r16
    2fd2:	8d 93       	st	X+, r24
    2fd4:	9c 93       	st	X, r25
                    if (route[currDepth+1]) {
    2fd6:	e0 91 3e 38 	lds	r30, 0x383E	; 0x80383e <currDepth>
    2fda:	f0 e0       	ldi	r31, 0x00	; 0
    2fdc:	ee 0f       	add	r30, r30
    2fde:	ff 1f       	adc	r31, r31
    2fe0:	e1 51       	subi	r30, 0x11	; 17
    2fe2:	f6 4c       	sbci	r31, 0xC6	; 198
    2fe4:	80 81       	ld	r24, Z
    2fe6:	91 81       	ldd	r25, Z+1	; 0x01
    2fe8:	00 97       	sbiw	r24, 0x00	; 0
    2fea:	09 f4       	brne	.+2      	; 0x2fee <ProcessInput+0x37a>
    2fec:	4a c0       	rjmp	.+148    	; 0x3082 <ProcessInput+0x40e>
                        if ((route[currDepth+1] != inventory[0])&&(route[currDepth+1] != inventory[1])) {
    2fee:	20 91 4e 38 	lds	r18, 0x384E	; 0x80384e <inventory>
    2ff2:	30 91 4f 38 	lds	r19, 0x384F	; 0x80384f <inventory+0x1>
    2ff6:	82 17       	cp	r24, r18
    2ff8:	93 07       	cpc	r25, r19
    2ffa:	09 f4       	brne	.+2      	; 0x2ffe <ProcessInput+0x38a>
    2ffc:	42 c0       	rjmp	.+132    	; 0x3082 <ProcessInput+0x40e>
    2ffe:	20 91 50 38 	lds	r18, 0x3850	; 0x803850 <inventory+0x2>
    3002:	30 91 51 38 	lds	r19, 0x3851	; 0x803851 <inventory+0x3>
    3006:	82 17       	cp	r24, r18
    3008:	93 07       	cpc	r25, r19
                            PopulateObject(route[currDepth+1], &actObj1);
    300a:	d9 f1       	breq	.+118    	; 0x3082 <ProcessInput+0x40e>
    300c:	6c ee       	ldi	r22, 0xEC	; 236
    300e:	78 e3       	ldi	r23, 0x38	; 56
    3010:	ef d9       	rcall	.-3106   	; 0x23f0 <PopulateObject>
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
    3012:	80 91 06 39 	lds	r24, 0x3906	; 0x803906 <actObj1.3956+0x1a>
    3016:	90 91 07 39 	lds	r25, 0x3907	; 0x803907 <actObj1.3956+0x1b>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    301a:	e9 2d       	mov	r30, r9
    301c:	f0 e0       	ldi	r31, 0x00	; 0
    301e:	df 01       	movw	r26, r30
    3020:	aa 0f       	add	r26, r26
    3022:	bb 1f       	adc	r27, r27
    3024:	a3 5d       	subi	r26, 0xD3	; 211
    3026:	b6 4c       	sbci	r27, 0xC6	; 198
    3028:	20 91 f8 38 	lds	r18, 0x38F8	; 0x8038f8 <actObj1.3956+0xc>
    302c:	30 91 f9 38 	lds	r19, 0x38F9	; 0x8038f9 <actObj1.3956+0xd>
    3030:	2d 93       	st	X+, r18
    3032:	3c 93       	st	X, r19
    reactStr[1][number]=length;
    3034:	df 01       	movw	r26, r30
    3036:	aa 0f       	add	r26, r26
    3038:	bb 1f       	adc	r27, r27
    303a:	a3 59       	subi	r26, 0x93	; 147
    303c:	b6 4c       	sbci	r27, 0xC6	; 198
    303e:	8d 93       	st	X+, r24
    3040:	9c 93       	st	X, r25
    reactStr[2][number]=type;
    3042:	ee 0f       	add	r30, r30
    3044:	ff 1f       	adc	r31, r31
    3046:	e3 55       	subi	r30, 0x53	; 83
    3048:	f6 4c       	sbci	r31, 0xC6	; 198
    304a:	10 82       	st	Z, r1
    304c:	11 82       	std	Z+1, r1	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    304e:	81 e0       	ldi	r24, 0x01	; 1
    3050:	89 0d       	add	r24, r9
    3052:	90 e0       	ldi	r25, 0x00	; 0
    3054:	93 94       	inc	r9
    3056:	93 94       	inc	r9
    3058:	fc 01       	movw	r30, r24
    305a:	ee 0f       	add	r30, r30
    305c:	ff 1f       	adc	r31, r31
    305e:	e3 5d       	subi	r30, 0xD3	; 211
    3060:	f6 4c       	sbci	r31, 0xC6	; 198
    3062:	e0 82       	st	Z, r14
    3064:	f1 82       	std	Z+1, r15	; 0x01
    reactStr[1][number]=length;
    3066:	fc 01       	movw	r30, r24
    3068:	ee 0f       	add	r30, r30
    306a:	ff 1f       	adc	r31, r31
    306c:	e3 59       	subi	r30, 0x93	; 147
    306e:	f6 4c       	sbci	r31, 0xC6	; 198
    3070:	c0 82       	st	Z, r12
    3072:	d1 82       	std	Z+1, r13	; 0x01
    reactStr[2][number]=type;
    3074:	88 0f       	add	r24, r24
    3076:	99 1f       	adc	r25, r25
    3078:	fc 01       	movw	r30, r24
    307a:	e3 55       	subi	r30, 0x53	; 83
    307c:	f6 4c       	sbci	r31, 0xC6	; 198
    307e:	a0 82       	st	Z, r10
    3080:	b1 82       	std	Z+1, r11	; 0x01
                            PopulateObject(route[currDepth+1], &actObj1);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
                            SetResponse(elements++, A_COMMA, L_COMMA, TEASER);
                        }
                    }
                }while (route[currDepth+1]);
    3082:	20 91 3e 38 	lds	r18, 0x383E	; 0x80383e <currDepth>
    3086:	82 2f       	mov	r24, r18
    3088:	90 e0       	ldi	r25, 0x00	; 0
    308a:	fc 01       	movw	r30, r24
    308c:	ee 0f       	add	r30, r30
    308e:	ff 1f       	adc	r31, r31
    3090:	e1 51       	subi	r30, 0x11	; 17
    3092:	f6 4c       	sbci	r31, 0xC6	; 198
    3094:	40 81       	ld	r20, Z
    3096:	51 81       	ldd	r21, Z+1	; 0x01
    3098:	45 2b       	or	r20, r21
    309a:	09 f0       	breq	.+2      	; 0x309e <ProcessInput+0x42a>
    309c:	85 cf       	rjmp	.-246    	; 0x2fa8 <ProcessInput+0x334>

                //Look back if not on level 0
                if (currDepth) {
    309e:	22 23       	and	r18, r18
    30a0:	61 f1       	breq	.+88     	; 0x30fa <ProcessInput+0x486>
                    PopulateObject(route[currDepth-1], &actObj1);
    30a2:	88 0f       	add	r24, r24
    30a4:	99 1f       	adc	r25, r25
    30a6:	fc 01       	movw	r30, r24
    30a8:	e5 51       	subi	r30, 0x15	; 21
    30aa:	f6 4c       	sbci	r31, 0xC6	; 198
    30ac:	6c ee       	ldi	r22, 0xEC	; 236
    30ae:	78 e3       	ldi	r23, 0x38	; 56
    30b0:	80 81       	ld	r24, Z
    30b2:	91 81       	ldd	r25, Z+1	; 0x01
    30b4:	9d d9       	rcall	.-3270   	; 0x23f0 <PopulateObject>
                    SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
    30b6:	20 91 06 39 	lds	r18, 0x3906	; 0x803906 <actObj1.3956+0x1a>
    30ba:	30 91 07 39 	lds	r19, 0x3907	; 0x803907 <actObj1.3956+0x1b>
    30be:	11 e0       	ldi	r17, 0x01	; 1
    30c0:	19 0d       	add	r17, r9
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    30c2:	89 2d       	mov	r24, r9
    30c4:	90 e0       	ldi	r25, 0x00	; 0
    30c6:	fc 01       	movw	r30, r24
    30c8:	ee 0f       	add	r30, r30
    30ca:	ff 1f       	adc	r31, r31
    30cc:	e3 5d       	subi	r30, 0xD3	; 211
    30ce:	f6 4c       	sbci	r31, 0xC6	; 198
    30d0:	40 91 f8 38 	lds	r20, 0x38F8	; 0x8038f8 <actObj1.3956+0xc>
    30d4:	50 91 f9 38 	lds	r21, 0x38F9	; 0x8038f9 <actObj1.3956+0xd>
    30d8:	40 83       	st	Z, r20
    30da:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    30dc:	fc 01       	movw	r30, r24
    30de:	ee 0f       	add	r30, r30
    30e0:	ff 1f       	adc	r31, r31
    30e2:	e3 59       	subi	r30, 0x93	; 147
    30e4:	f6 4c       	sbci	r31, 0xC6	; 198
    30e6:	20 83       	st	Z, r18
    30e8:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    30ea:	88 0f       	add	r24, r24
    30ec:	99 1f       	adc	r25, r25
    30ee:	fc 01       	movw	r30, r24
    30f0:	e3 55       	subi	r30, 0x53	; 83
    30f2:	f6 4c       	sbci	r31, 0xC6	; 198
    30f4:	10 82       	st	Z, r1
    30f6:	11 82       	std	Z+1, r1	; 0x01
    30f8:	28 c5       	rjmp	.+2640   	; 0x3b4a <ProcessInput+0xed6>

                //Look back if not on level 0
                if (currDepth) {
                    PopulateObject(route[currDepth-1], &actObj1);
                    SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
                } else elements-=1;
    30fa:	1f ef       	ldi	r17, 0xFF	; 255
    30fc:	19 0d       	add	r17, r9
    30fe:	25 c5       	rjmp	.+2634   	; 0x3b4a <ProcessInput+0xed6>

            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
    3100:	ee 2e       	mov	r14, r30
    3102:	f1 2c       	mov	r15, r1
    3104:	f7 01       	movw	r30, r14
    3106:	ee 0f       	add	r30, r30
    3108:	ff 1f       	adc	r31, r31
    310a:	e3 51       	subi	r30, 0x13	; 19
    310c:	f6 4c       	sbci	r31, 0xC6	; 198
    310e:	40 e0       	ldi	r20, 0x00	; 0
    3110:	50 e0       	ldi	r21, 0x00	; 0
    3112:	d3 01       	movw	r26, r6
    3114:	11 96       	adiw	r26, 0x01	; 1
    3116:	6c 91       	ld	r22, X
    3118:	80 81       	ld	r24, Z
    311a:	91 81       	ldd	r25, Z+1	; 0x01
    311c:	29 da       	rcall	.-2990   	; 0x2570 <FindChild>
    311e:	f7 01       	movw	r30, r14
    3120:	ee 0f       	add	r30, r30
    3122:	ff 1f       	adc	r31, r31
    3124:	e1 51       	subi	r30, 0x11	; 17
    3126:	f6 4c       	sbci	r31, 0xC6	; 198
    3128:	80 83       	st	Z, r24
    312a:	91 83       	std	Z+1, r25	; 0x01
                if (route[currDepth+1]) {
    312c:	90 91 3e 38 	lds	r25, 0x383E	; 0x80383e <currDepth>
    3130:	29 2f       	mov	r18, r25
    3132:	30 e0       	ldi	r19, 0x00	; 0
    3134:	f9 01       	movw	r30, r18
    3136:	ee 0f       	add	r30, r30
    3138:	ff 1f       	adc	r31, r31
    313a:	e1 51       	subi	r30, 0x11	; 17
    313c:	f6 4c       	sbci	r31, 0xC6	; 198
    313e:	40 81       	ld	r20, Z
    3140:	51 81       	ldd	r21, Z+1	; 0x01
    3142:	41 15       	cp	r20, r1
    3144:	51 05       	cpc	r21, r1
    3146:	21 f0       	breq	.+8      	; 0x3150 <ProcessInput+0x4dc>
                    PopulateObject(route[currDepth+1], &actObj1);
    3148:	6c ee       	ldi	r22, 0xEC	; 236
    314a:	78 e3       	ldi	r23, 0x38	; 56
    314c:	ca 01       	movw	r24, r20
    314e:	1c c0       	rjmp	.+56     	; 0x3188 <ProcessInput+0x514>
                    SetResponse(elements++, actObj1.addrStr[DESC], actObj1.lenStr[DESC],GAME);   
                } else if (currDepth) {
    3150:	99 23       	and	r25, r25
                    if (CheckLetter(route[currDepth-1], data[1])) {
    3152:	81 f1       	breq	.+96     	; 0x31b4 <ProcessInput+0x540>
    3154:	22 0f       	add	r18, r18
    3156:	33 1f       	adc	r19, r19
    3158:	f9 01       	movw	r30, r18
    315a:	e5 51       	subi	r30, 0x15	; 21
    315c:	f6 4c       	sbci	r31, 0xC6	; 198
    315e:	d3 01       	movw	r26, r6
    3160:	11 96       	adiw	r26, 0x01	; 1
    3162:	6c 91       	ld	r22, X
    3164:	80 81       	ld	r24, Z
    3166:	91 81       	ldd	r25, Z+1	; 0x01
    3168:	bc d9       	rcall	.-3208   	; 0x24e2 <CheckLetter>
    316a:	81 11       	cpse	r24, r1
    316c:	02 c0       	rjmp	.+4      	; 0x3172 <ProcessInput+0x4fe>
}

//The game logic!
uint8_t ProcessInput(uint8_t *data){
    static object_model_t actObj1, actObj2;
    uint8_t elements = 1;
    316e:	11 e0       	ldi	r17, 0x01	; 1
                if (route[currDepth+1]) {
                    PopulateObject(route[currDepth+1], &actObj1);
                    SetResponse(elements++, actObj1.addrStr[DESC], actObj1.lenStr[DESC],GAME);   
                } else if (currDepth) {
                    if (CheckLetter(route[currDepth-1], data[1])) {
                        PopulateObject(route[currDepth-1], &actObj1);
    3170:	ec c4       	rjmp	.+2520   	; 0x3b4a <ProcessInput+0xed6>
    3172:	e0 91 3e 38 	lds	r30, 0x383E	; 0x80383e <currDepth>
    3176:	f0 e0       	ldi	r31, 0x00	; 0
    3178:	ee 0f       	add	r30, r30
    317a:	ff 1f       	adc	r31, r31
    317c:	e5 51       	subi	r30, 0x15	; 21
    317e:	f6 4c       	sbci	r31, 0xC6	; 198
    3180:	6c ee       	ldi	r22, 0xEC	; 236
    3182:	78 e3       	ldi	r23, 0x38	; 56
    3184:	80 81       	ld	r24, Z
    3186:	91 81       	ldd	r25, Z+1	; 0x01
    3188:	33 d9       	rcall	.-3482   	; 0x23f0 <PopulateObject>
                        SetResponse(elements++, actObj1.addrStr[DESC], actObj1.lenStr[DESC],GAME);
    318a:	80 91 08 39 	lds	r24, 0x3908	; 0x803908 <actObj1.3956+0x1c>
    318e:	90 91 09 39 	lds	r25, 0x3909	; 0x803909 <actObj1.3956+0x1d>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3192:	20 91 fa 38 	lds	r18, 0x38FA	; 0x8038fa <actObj1.3956+0xe>
    3196:	30 91 fb 38 	lds	r19, 0x38FB	; 0x8038fb <actObj1.3956+0xf>
    319a:	20 93 2f 39 	sts	0x392F, r18	; 0x80392f <reactStr+0x2>
    319e:	30 93 30 39 	sts	0x3930, r19	; 0x803930 <reactStr+0x3>
    reactStr[1][number]=length;
    31a2:	80 93 6f 39 	sts	0x396F, r24	; 0x80396f <reactStr+0x42>
    31a6:	90 93 70 39 	sts	0x3970, r25	; 0x803970 <reactStr+0x43>
    reactStr[2][number]=type;
    31aa:	10 92 af 39 	sts	0x39AF, r1	; 0x8039af <reactStr+0x82>
    31ae:	10 92 b0 39 	sts	0x39B0, r1	; 0x8039b0 <reactStr+0x83>
    31b2:	32 ce       	rjmp	.-924    	; 0x2e18 <ProcessInput+0x1a4>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    31b4:	81 ed       	ldi	r24, 0xD1	; 209
    31b6:	99 e7       	ldi	r25, 0x79	; 121
    31b8:	80 93 2f 39 	sts	0x392F, r24	; 0x80392f <reactStr+0x2>
    31bc:	90 93 30 39 	sts	0x3930, r25	; 0x803930 <reactStr+0x3>
    reactStr[1][number]=length;
    31c0:	8a e1       	ldi	r24, 0x1A	; 26
    31c2:	90 e0       	ldi	r25, 0x00	; 0
    31c4:	c9 c2       	rjmp	.+1426   	; 0x3758 <ProcessInput+0xae4>
                    SetResponse(elements++, A_DONTSEE, L_DONTSEE, TEASER);
                }
            }
        
        //Pick up an object
        } else if (data[0] == 'p') {
    31c6:	80 37       	cpi	r24, 0x70	; 112
    31c8:	09 f0       	breq	.+2      	; 0x31cc <ProcessInput+0x558>
    31ca:	92 c0       	rjmp	.+292    	; 0x32f0 <ProcessInput+0x67c>
            if (inventory[0]&&inventory[1]) {
    31cc:	80 91 4e 38 	lds	r24, 0x384E	; 0x80384e <inventory>
    31d0:	90 91 4f 38 	lds	r25, 0x384F	; 0x80384f <inventory+0x1>
    31d4:	89 2b       	or	r24, r25
    31d6:	79 f0       	breq	.+30     	; 0x31f6 <ProcessInput+0x582>
    31d8:	80 91 50 38 	lds	r24, 0x3850	; 0x803850 <inventory+0x2>
    31dc:	90 91 51 38 	lds	r25, 0x3851	; 0x803851 <inventory+0x3>
    31e0:	89 2b       	or	r24, r25
    31e2:	49 f0       	breq	.+18     	; 0x31f6 <ProcessInput+0x582>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    31e4:	87 e0       	ldi	r24, 0x07	; 7
    31e6:	98 e7       	ldi	r25, 0x78	; 120
    31e8:	80 93 2f 39 	sts	0x392F, r24	; 0x80392f <reactStr+0x2>
    31ec:	90 93 30 39 	sts	0x3930, r25	; 0x803930 <reactStr+0x3>
    reactStr[1][number]=length;
    31f0:	89 e5       	ldi	r24, 0x59	; 89
    31f2:	90 e0       	ldi	r25, 0x00	; 0
    31f4:	b1 c2       	rjmp	.+1378   	; 0x3758 <ProcessInput+0xae4>
        
        //Pick up an object
        } else if (data[0] == 'p') {
            if (inventory[0]&&inventory[1]) {
                SetResponse(elements++, A_CARRYTWO, L_CARRYTWO, TEASER);
            } else if (inputLen != 2) {
    31f6:	b2 e0       	ldi	r27, 0x02	; 2
    31f8:	fb 12       	cpse	r15, r27
    31fa:	6f cd       	rjmp	.-1314   	; 0x2cda <ProcessInput+0x66>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
    31fc:	00 91 3e 38 	lds	r16, 0x383E	; 0x80383e <currDepth>
    3200:	10 e0       	ldi	r17, 0x00	; 0
    3202:	f8 01       	movw	r30, r16
    3204:	ee 0f       	add	r30, r30
    3206:	ff 1f       	adc	r31, r31
    3208:	e3 51       	subi	r30, 0x13	; 19
    320a:	f6 4c       	sbci	r31, 0xC6	; 198
    320c:	40 e0       	ldi	r20, 0x00	; 0
    320e:	50 e0       	ldi	r21, 0x00	; 0
    3210:	d3 01       	movw	r26, r6
    3212:	11 96       	adiw	r26, 0x01	; 1
    3214:	6c 91       	ld	r22, X
    3216:	80 81       	ld	r24, Z
    3218:	91 81       	ldd	r25, Z+1	; 0x01
    321a:	aa d9       	rcall	.-3244   	; 0x2570 <FindChild>
    321c:	00 0f       	add	r16, r16
    321e:	11 1f       	adc	r17, r17
    3220:	f8 01       	movw	r30, r16
    3222:	e1 51       	subi	r30, 0x11	; 17
    3224:	f6 4c       	sbci	r31, 0xC6	; 198
    3226:	80 83       	st	Z, r24
    3228:	91 83       	std	Z+1, r25	; 0x01
                if (route[currDepth+1]) {
    322a:	20 91 3e 38 	lds	r18, 0x383E	; 0x80383e <currDepth>
    322e:	30 e0       	ldi	r19, 0x00	; 0
    3230:	2f 5f       	subi	r18, 0xFF	; 255
    3232:	3f 4f       	sbci	r19, 0xFF	; 255
    3234:	22 0f       	add	r18, r18
    3236:	33 1f       	adc	r19, r19
    3238:	f9 01       	movw	r30, r18
    323a:	e3 51       	subi	r30, 0x13	; 19
    323c:	f6 4c       	sbci	r31, 0xC6	; 198
    323e:	80 81       	ld	r24, Z
    3240:	91 81       	ldd	r25, Z+1	; 0x01
    3242:	00 97       	sbiw	r24, 0x00	; 0
    3244:	09 f4       	brne	.+2      	; 0x3248 <ProcessInput+0x5d4>
    3246:	38 c3       	rjmp	.+1648   	; 0x38b8 <ProcessInput+0xc44>
                    if ((route[currDepth+1] == inventory[0])||(route[currDepth+1] == inventory[1])) {
    3248:	40 91 4e 38 	lds	r20, 0x384E	; 0x80384e <inventory>
    324c:	50 91 4f 38 	lds	r21, 0x384F	; 0x80384f <inventory+0x1>
    3250:	84 17       	cp	r24, r20
    3252:	95 07       	cpc	r25, r21
    3254:	39 f0       	breq	.+14     	; 0x3264 <ProcessInput+0x5f0>
    3256:	40 91 50 38 	lds	r20, 0x3850	; 0x803850 <inventory+0x2>
    325a:	50 91 51 38 	lds	r21, 0x3851	; 0x803851 <inventory+0x3>
    325e:	84 17       	cp	r24, r20
    3260:	95 07       	cpc	r25, r21
    3262:	c1 f4       	brne	.+48     	; 0x3294 <ProcessInput+0x620>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3264:	82 ee       	ldi	r24, 0xE2	; 226
    3266:	97 e7       	ldi	r25, 0x77	; 119
    3268:	80 93 2f 39 	sts	0x392F, r24	; 0x80392f <reactStr+0x2>
    326c:	90 93 30 39 	sts	0x3930, r25	; 0x803930 <reactStr+0x3>
    reactStr[1][number]=length;
    3270:	85 e2       	ldi	r24, 0x25	; 37
    3272:	90 e0       	ldi	r25, 0x00	; 0
    3274:	80 93 6f 39 	sts	0x396F, r24	; 0x80396f <reactStr+0x42>
    3278:	90 93 70 39 	sts	0x3970, r25	; 0x803970 <reactStr+0x43>
    reactStr[2][number]=type;
    327c:	81 e0       	ldi	r24, 0x01	; 1
    327e:	90 e0       	ldi	r25, 0x00	; 0
    3280:	80 93 af 39 	sts	0x39AF, r24	; 0x8039af <reactStr+0x82>
    3284:	90 93 b0 39 	sts	0x39B0, r25	; 0x8039b0 <reactStr+0x83>
            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
                if (route[currDepth+1]) {
                    if ((route[currDepth+1] == inventory[0])||(route[currDepth+1] == inventory[1])) {
                        SetResponse(elements++, A_ALREADYCARRYING, L_ALREADYCARRYING, TEASER);
                        route[currDepth+1] = 0;
    3288:	f9 01       	movw	r30, r18
    328a:	e3 51       	subi	r30, 0x13	; 19
    328c:	f6 4c       	sbci	r31, 0xC6	; 198
    328e:	10 82       	st	Z, r1
    3290:	11 82       	std	Z+1, r1	; 0x01
                    } else {
                        //Put item in the inventory if possible
                        PopulateObject(route[currDepth+1], &actObj1);  
    3292:	c2 cd       	rjmp	.-1148   	; 0x2e18 <ProcessInput+0x1a4>
    3294:	6c ee       	ldi	r22, 0xEC	; 236
    3296:	78 e3       	ldi	r23, 0x38	; 56
    3298:	ab d8       	rcall	.-3754   	; 0x23f0 <PopulateObject>
                        if (CheckState(actObj1.byteField[ACTION_ACL])) {
    329a:	80 91 f3 38 	lds	r24, 0x38F3	; 0x8038f3 <actObj1.3956+0x7>
    329e:	0e 94 5f 09 	call	0x12be	; 0x12be <CheckState>
    32a2:	88 23       	and	r24, r24
    32a4:	09 f4       	brne	.+2      	; 0x32a8 <ProcessInput+0x634>
    32a6:	e3 c2       	rjmp	.+1478   	; 0x386e <ProcessInput+0xbfa>
                            if (actObj1.byteField[ITEM_NR]) {
    32a8:	80 91 f7 38 	lds	r24, 0x38F7	; 0x8038f7 <actObj1.3956+0xb>
    32ac:	88 23       	and	r24, r24
    32ae:	09 f4       	brne	.+2      	; 0x32b2 <ProcessInput+0x63e>
    32b0:	14 cd       	rjmp	.-1496   	; 0x2cda <ProcessInput+0x66>
                                if (inventory[0]) {
    32b2:	80 91 4e 38 	lds	r24, 0x384E	; 0x80384e <inventory>
    32b6:	90 91 4f 38 	lds	r25, 0x384F	; 0x80384f <inventory+0x1>
    32ba:	e0 91 3e 38 	lds	r30, 0x383E	; 0x80383e <currDepth>
                                    inventory[1] = route[currDepth+1];
    32be:	f0 e0       	ldi	r31, 0x00	; 0
    32c0:	ee 0f       	add	r30, r30
    32c2:	ff 1f       	adc	r31, r31
    32c4:	e1 51       	subi	r30, 0x11	; 17
    32c6:	f6 4c       	sbci	r31, 0xC6	; 198
                    } else {
                        //Put item in the inventory if possible
                        PopulateObject(route[currDepth+1], &actObj1);  
                        if (CheckState(actObj1.byteField[ACTION_ACL])) {
                            if (actObj1.byteField[ITEM_NR]) {
                                if (inventory[0]) {
    32c8:	89 2b       	or	r24, r25
    32ca:	39 f0       	breq	.+14     	; 0x32da <ProcessInput+0x666>
                                    inventory[1] = route[currDepth+1];
    32cc:	80 81       	ld	r24, Z
    32ce:	91 81       	ldd	r25, Z+1	; 0x01
    32d0:	80 93 50 38 	sts	0x3850, r24	; 0x803850 <inventory+0x2>
    32d4:	90 93 51 38 	sts	0x3851, r25	; 0x803851 <inventory+0x3>
    32d8:	06 c0       	rjmp	.+12     	; 0x32e6 <ProcessInput+0x672>
                                } else {
                                    inventory[0] = route[currDepth+1];
    32da:	80 81       	ld	r24, Z
    32dc:	91 81       	ldd	r25, Z+1	; 0x01
    32de:	80 93 4e 38 	sts	0x384E, r24	; 0x80384e <inventory>
    32e2:	90 93 4f 38 	sts	0x384F, r25	; 0x80384f <inventory+0x1>
                                }
                                UpdateState(actObj1.byteField[ACTION_STATE]);
    32e6:	80 91 f6 38 	lds	r24, 0x38F6	; 0x8038f6 <actObj1.3956+0xa>
    32ea:	0e 94 3e 09 	call	0x127c	; 0x127c <UpdateState>
    32ee:	2b c0       	rjmp	.+86     	; 0x3346 <ProcessInput+0x6d2>
                } else SetResponse(elements++, A_NOSUCHOBJECT, L_NOSUCHOBJECT, TEASER);
            }
        } else

        //Drop item if in inventory
        if (data[0] == 'd') {
    32f0:	84 36       	cpi	r24, 0x64	; 100
    32f2:	d9 f4       	brne	.+54     	; 0x332a <ProcessInput+0x6b6>
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
    32f4:	80 91 4e 38 	lds	r24, 0x384E	; 0x80384e <inventory>
    32f8:	90 91 4f 38 	lds	r25, 0x384F	; 0x80384f <inventory+0x1>
    32fc:	00 97       	sbiw	r24, 0x00	; 0
    32fe:	09 f0       	breq	.+2      	; 0x3302 <ProcessInput+0x68e>
    3300:	3c c4       	rjmp	.+2168   	; 0x3b7a <ProcessInput+0xf06>
    3302:	80 91 50 38 	lds	r24, 0x3850	; 0x803850 <inventory+0x2>
    3306:	90 91 51 38 	lds	r25, 0x3851	; 0x803851 <inventory+0x3>
    330a:	89 2b       	or	r24, r25
    330c:	49 f4       	brne	.+18     	; 0x3320 <ProcessInput+0x6ac>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    330e:	86 ea       	ldi	r24, 0xA6	; 166
    3310:	97 e7       	ldi	r25, 0x77	; 119
    3312:	80 93 2f 39 	sts	0x392F, r24	; 0x80392f <reactStr+0x2>
    3316:	90 93 30 39 	sts	0x3930, r25	; 0x803930 <reactStr+0x3>
    reactStr[1][number]=length;
    331a:	86 e2       	ldi	r24, 0x26	; 38
    331c:	90 e0       	ldi	r25, 0x00	; 0
    331e:	72 cd       	rjmp	.-1308   	; 0x2e04 <ProcessInput+0x190>

        //Drop item if in inventory
        if (data[0] == 'd') {
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
    3320:	b2 e0       	ldi	r27, 0x02	; 2
    3322:	fb 16       	cp	r15, r27
    3324:	09 f4       	brne	.+2      	; 0x3328 <ProcessInput+0x6b4>
    3326:	8b c4       	rjmp	.+2326   	; 0x3c3e <ProcessInput+0xfca>
    3328:	d8 cc       	rjmp	.-1616   	; 0x2cda <ProcessInput+0x66>
                }
            }
        } 

        //Inventory list
        else if (data[0] == 'i') {
    332a:	89 36       	cpi	r24, 0x69	; 105
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
    332c:	81 f4       	brne	.+32     	; 0x334e <ProcessInput+0x6da>
    332e:	80 91 4e 38 	lds	r24, 0x384E	; 0x80384e <inventory>
    3332:	90 91 4f 38 	lds	r25, 0x384F	; 0x80384f <inventory+0x1>
    3336:	89 2b       	or	r24, r25
    3338:	31 f4       	brne	.+12     	; 0x3346 <ProcessInput+0x6d2>
    333a:	80 91 50 38 	lds	r24, 0x3850	; 0x803850 <inventory+0x2>
    333e:	90 91 51 38 	lds	r25, 0x3851	; 0x803851 <inventory+0x3>
    3342:	89 2b       	or	r24, r25
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
                } else {
                    elements = ShowInventory(elements);
    3344:	21 f3       	breq	.-56     	; 0x330e <ProcessInput+0x69a>
    3346:	81 e0       	ldi	r24, 0x01	; 1
    3348:	1a dc       	rcall	.-1996   	; 0x2b7e <ShowInventory>
    334a:	18 2f       	mov	r17, r24
    334c:	fe c3       	rjmp	.+2044   	; 0x3b4a <ProcessInput+0xed6>
                }        
        
        //Talk, use, give, read
        } else if ((data[0] == 't')||(data[0] == 'u')||(data[0] == 'g')||(data[0] == 'r')) {
    334e:	9c e8       	ldi	r25, 0x8C	; 140
    3350:	98 0f       	add	r25, r24
    3352:	92 30       	cpi	r25, 0x02	; 2
    3354:	28 f0       	brcs	.+10     	; 0x3360 <ProcessInput+0x6ec>
    3356:	87 36       	cpi	r24, 0x67	; 103
    3358:	19 f0       	breq	.+6      	; 0x3360 <ProcessInput+0x6ec>
    335a:	82 37       	cpi	r24, 0x72	; 114
    335c:	09 f0       	breq	.+2      	; 0x3360 <ProcessInput+0x6ec>
    335e:	b5 c2       	rjmp	.+1386   	; 0x38ca <ProcessInput+0xc56>
            if ((inputLen<2)||(inputLen>3)) {
    3360:	8e ef       	ldi	r24, 0xFE	; 254
    3362:	8f 0d       	add	r24, r15
    3364:	82 30       	cpi	r24, 0x02	; 2
    3366:	08 f0       	brcs	.+2      	; 0x336a <ProcessInput+0x6f6>
    3368:	b8 cc       	rjmp	.-1680   	; 0x2cda <ProcessInput+0x66>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);                
            
            //Check for visible person or object first
            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[inputLen-1], 0);
    336a:	e0 91 3e 38 	lds	r30, 0x383E	; 0x80383e <currDepth>
    336e:	0e 2f       	mov	r16, r30
    3370:	10 e0       	ldi	r17, 0x00	; 0
    3372:	d3 01       	movw	r26, r6
    3374:	af 0d       	add	r26, r15
    3376:	b1 1d       	adc	r27, r1
    3378:	11 97       	sbiw	r26, 0x01	; 1
    337a:	f8 01       	movw	r30, r16
    337c:	ee 0f       	add	r30, r30
    337e:	ff 1f       	adc	r31, r31
    3380:	e3 51       	subi	r30, 0x13	; 19
    3382:	f6 4c       	sbci	r31, 0xC6	; 198
    3384:	40 e0       	ldi	r20, 0x00	; 0
    3386:	50 e0       	ldi	r21, 0x00	; 0
    3388:	6c 91       	ld	r22, X
    338a:	80 81       	ld	r24, Z
    338c:	91 81       	ldd	r25, Z+1	; 0x01
    338e:	f0 d8       	rcall	.-3616   	; 0x2570 <FindChild>
    3390:	f8 01       	movw	r30, r16
    3392:	ee 0f       	add	r30, r30
    3394:	ff 1f       	adc	r31, r31
    3396:	e1 51       	subi	r30, 0x11	; 17
    3398:	f6 4c       	sbci	r31, 0xC6	; 198
    339a:	80 83       	st	Z, r24
    339c:	91 83       	std	Z+1, r25	; 0x01
                if (route[currDepth+1]) {
    339e:	e0 91 3e 38 	lds	r30, 0x383E	; 0x80383e <currDepth>
    33a2:	f0 e0       	ldi	r31, 0x00	; 0
    33a4:	ee 0f       	add	r30, r30
    33a6:	ff 1f       	adc	r31, r31
    33a8:	e1 51       	subi	r30, 0x11	; 17
    33aa:	f6 4c       	sbci	r31, 0xC6	; 198
    33ac:	80 81       	ld	r24, Z
    33ae:	91 81       	ldd	r25, Z+1	; 0x01
    33b0:	00 97       	sbiw	r24, 0x00	; 0
    33b2:	09 f4       	brne	.+2      	; 0x33b6 <ProcessInput+0x742>
    33b4:	78 c2       	rjmp	.+1264   	; 0x38a6 <ProcessInput+0xc32>
                    
                    //Give item to person / use item on object 
                    if ((inputLen == 3)&&((data[0] == 'u')||(data[0] == 'g'))) {
    33b6:	f3 e0       	ldi	r31, 0x03	; 3
    33b8:	ff 12       	cpse	r15, r31
    33ba:	60 c1       	rjmp	.+704    	; 0x367c <ProcessInput+0xa08>
    33bc:	d3 01       	movw	r26, r6
    33be:	2c 91       	ld	r18, X
    33c0:	25 37       	cpi	r18, 0x75	; 117
    33c2:	19 f0       	breq	.+6      	; 0x33ca <ProcessInput+0x756>
    33c4:	27 36       	cpi	r18, 0x67	; 103
    33c6:	09 f0       	breq	.+2      	; 0x33ca <ProcessInput+0x756>
    33c8:	59 c1       	rjmp	.+690    	; 0x367c <ProcessInput+0xa08>
    33ca:	00 e0       	ldi	r16, 0x00	; 0
    33cc:	11 e0       	ldi	r17, 0x01	; 1
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    33ce:	41 e6       	ldi	r20, 0x61	; 97
    33d0:	c4 2e       	mov	r12, r20
    33d2:	49 e7       	ldi	r20, 0x79	; 121
    33d4:	d4 2e       	mov	r13, r20
    reactStr[1][number]=length;
    33d6:	51 e2       	ldi	r21, 0x21	; 33
    33d8:	a5 2e       	mov	r10, r21
    33da:	b1 2c       	mov	r11, r1
    reactStr[2][number]=type;
    33dc:	88 24       	eor	r8, r8
    33de:	83 94       	inc	r8
                if (route[currDepth+1]) {
                    
                    //Give item to person / use item on object 
                    if ((inputLen == 3)&&((data[0] == 'u')||(data[0] == 'g'))) {
                        for (uint8_t x=0; x<2; ++x) {
                            if (inventory[x]) { 
    33e0:	91 2c       	mov	r9, r1
    33e2:	e0 2e       	mov	r14, r16
    33e4:	f1 2c       	mov	r15, r1
    33e6:	c7 01       	movw	r24, r14
    33e8:	88 0f       	add	r24, r24
    33ea:	99 1f       	adc	r25, r25
    33ec:	fc 01       	movw	r30, r24
    33ee:	e2 5b       	subi	r30, 0xB2	; 178
    33f0:	f7 4c       	sbci	r31, 0xC7	; 199
    33f2:	7f 01       	movw	r14, r30
    33f4:	80 81       	ld	r24, Z
    33f6:	91 81       	ldd	r25, Z+1	; 0x01
    33f8:	00 97       	sbiw	r24, 0x00	; 0
                                if (CheckLetter(inventory[x], data[1])) {
    33fa:	79 f0       	breq	.+30     	; 0x341a <ProcessInput+0x7a6>
    33fc:	d3 01       	movw	r26, r6
    33fe:	11 96       	adiw	r26, 0x01	; 1
    3400:	6c 91       	ld	r22, X
    3402:	6f d8       	rcall	.-3874   	; 0x24e2 <CheckLetter>
    3404:	88 23       	and	r24, r24
    3406:	49 f0       	breq	.+18     	; 0x341a <ProcessInput+0x7a6>
                                    PopulateObject(inventory[x], &actObj2);
    3408:	61 ec       	ldi	r22, 0xC1	; 193
    340a:	78 e3       	ldi	r23, 0x38	; 56
    340c:	f7 01       	movw	r30, r14
    340e:	80 81       	ld	r24, Z
    3410:	91 81       	ldd	r25, Z+1	; 0x01
    3412:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <PopulateObject>
                                    x = 2;
    3416:	02 e0       	ldi	r16, 0x02	; 2
    3418:	1d c0       	rjmp	.+58     	; 0x3454 <ProcessInput+0x7e0>
                                }
                            }
                            if (x == 1) { 
    341a:	01 30       	cpi	r16, 0x01	; 1
    341c:	d1 f4       	brne	.+52     	; 0x3452 <ProcessInput+0x7de>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    341e:	e1 2f       	mov	r30, r17
    3420:	f0 e0       	ldi	r31, 0x00	; 0
    3422:	df 01       	movw	r26, r30
    3424:	aa 0f       	add	r26, r26
    3426:	bb 1f       	adc	r27, r27
    3428:	a3 5d       	subi	r26, 0xD3	; 211
    342a:	b6 4c       	sbci	r27, 0xC6	; 198
    342c:	cd 92       	st	X+, r12
    342e:	dc 92       	st	X, r13
    reactStr[1][number]=length;
    3430:	df 01       	movw	r26, r30
    3432:	aa 0f       	add	r26, r26
    3434:	bb 1f       	adc	r27, r27
    3436:	a3 59       	subi	r26, 0x93	; 147
    3438:	b6 4c       	sbci	r27, 0xC6	; 198
    343a:	ad 92       	st	X+, r10
    343c:	bc 92       	st	X, r11
    reactStr[2][number]=type;
    343e:	ee 0f       	add	r30, r30
    3440:	ff 1f       	adc	r31, r31
    3442:	e3 55       	subi	r30, 0x53	; 83
    3444:	f6 4c       	sbci	r31, 0xC6	; 198
    3446:	80 82       	st	Z, r8
    3448:	91 82       	std	Z+1, r9	; 0x01
                                    x = 2;
                                }
                            }
                            if (x == 1) { 
                                SetResponse(elements++, A_NOTCARRYING, L_NOTCARRYING, TEASER);
                                data[0] = 0;
    344a:	d3 01       	movw	r26, r6
    344c:	1c 92       	st	X, r1
                                    PopulateObject(inventory[x], &actObj2);
                                    x = 2;
                                }
                            }
                            if (x == 1) { 
                                SetResponse(elements++, A_NOTCARRYING, L_NOTCARRYING, TEASER);
    344e:	1f 5f       	subi	r17, 0xFF	; 255
    3450:	01 c0       	rjmp	.+2      	; 0x3454 <ProcessInput+0x7e0>
    3452:	00 e0       	ldi	r16, 0x00	; 0
                route[currDepth+1] = FindChild(route[currDepth], data[inputLen-1], 0);
                if (route[currDepth+1]) {
                    
                    //Give item to person / use item on object 
                    if ((inputLen == 3)&&((data[0] == 'u')||(data[0] == 'g'))) {
                        for (uint8_t x=0; x<2; ++x) {
    3454:	0f 5f       	subi	r16, 0xFF	; 255
    3456:	01 30       	cpi	r16, 0x01	; 1
    3458:	21 f2       	breq	.-120    	; 0x33e2 <ProcessInput+0x76e>
                                data[0] = 0;
                            }
                        }

                        //Both the item and person/object are found, check if action is legit
                        if (data[0]){
    345a:	f3 01       	movw	r30, r6
    345c:	80 81       	ld	r24, Z
    345e:	88 23       	and	r24, r24
    3460:	09 f4       	brne	.+2      	; 0x3464 <ProcessInput+0x7f0>
    3462:	73 c3       	rjmp	.+1766   	; 0x3b4a <ProcessInput+0xed6>
                            PopulateObject(route[currDepth+1], &actObj1);
    3464:	e0 91 3e 38 	lds	r30, 0x383E	; 0x80383e <currDepth>
    3468:	f0 e0       	ldi	r31, 0x00	; 0
    346a:	ee 0f       	add	r30, r30
    346c:	ff 1f       	adc	r31, r31
    346e:	e1 51       	subi	r30, 0x11	; 17
    3470:	f6 4c       	sbci	r31, 0xC6	; 198
    3472:	6c ee       	ldi	r22, 0xEC	; 236
    3474:	78 e3       	ldi	r23, 0x38	; 56
    3476:	80 81       	ld	r24, Z
    3478:	91 81       	ldd	r25, Z+1	; 0x01
    347a:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <PopulateObject>

                            //Special game
                            if (actObj1.lenStr[ACTION_STR1] == 1) {
    347e:	e0 90 0a 39 	lds	r14, 0x390A	; 0x80390a <actObj1.3956+0x1e>
    3482:	f0 90 0b 39 	lds	r15, 0x390B	; 0x80390b <actObj1.3956+0x1f>
    3486:	f1 e0       	ldi	r31, 0x01	; 1
    3488:	ef 16       	cp	r14, r31
    348a:	f1 04       	cpc	r15, r1
    348c:	09 f0       	breq	.+2      	; 0x3490 <ProcessInput+0x81c>
    348e:	89 c0       	rjmp	.+274    	; 0x35a2 <ProcessInput+0x92e>
                                ExtEERead(actObj1.addrStr[ACTION_STR1], 1, GAME, &data[2]);
    3490:	93 01       	movw	r18, r6
    3492:	2e 5f       	subi	r18, 0xFE	; 254
    3494:	3f 4f       	sbci	r19, 0xFF	; 255
    3496:	40 e0       	ldi	r20, 0x00	; 0
    3498:	61 e0       	ldi	r22, 0x01	; 1
    349a:	80 91 fc 38 	lds	r24, 0x38FC	; 0x8038fc <actObj1.3956+0x10>
    349e:	90 91 fd 38 	lds	r25, 0x38FD	; 0x8038fd <actObj1.3956+0x11>
    34a2:	0e 94 a8 07 	call	0xf50	; 0xf50 <ExtEERead>
                                if (data[2] == '1') {
    34a6:	d3 01       	movw	r26, r6
    34a8:	12 96       	adiw	r26, 0x02	; 2
    34aa:	3c 91       	ld	r19, X
    34ac:	31 33       	cpi	r19, 0x31	; 49
    34ae:	09 f0       	breq	.+2      	; 0x34b2 <ProcessInput+0x83e>
    34b0:	4c c3       	rjmp	.+1688   	; 0x3b4a <ProcessInput+0xed6>
                                    uint8_t item = actObj2.byteField[ITEM_NR];
    34b2:	20 91 cc 38 	lds	r18, 0x38CC	; 0x8038cc <actObj2.3957+0xb>
                                    if ((item < 31)||(item > 34)) {
    34b6:	51 ee       	ldi	r21, 0xE1	; 225
    34b8:	52 0f       	add	r21, r18
    34ba:	41 e0       	ldi	r20, 0x01	; 1
    34bc:	41 0f       	add	r20, r17
    34be:	81 2f       	mov	r24, r17
    34c0:	90 e0       	ldi	r25, 0x00	; 0
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    34c2:	fc 01       	movw	r30, r24
    34c4:	ee 0f       	add	r30, r30
    34c6:	ff 1f       	adc	r31, r31
    34c8:	e3 5d       	subi	r30, 0xD3	; 211
    34ca:	f6 4c       	sbci	r31, 0xC6	; 198
                            //Special game
                            if (actObj1.lenStr[ACTION_STR1] == 1) {
                                ExtEERead(actObj1.addrStr[ACTION_STR1], 1, GAME, &data[2]);
                                if (data[2] == '1') {
                                    uint8_t item = actObj2.byteField[ITEM_NR];
                                    if ((item < 31)||(item > 34)) {
    34cc:	54 30       	cpi	r21, 0x04	; 4
    34ce:	b0 f0       	brcs	.+44     	; 0x34fc <ProcessInput+0x888>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    34d0:	21 e0       	ldi	r18, 0x01	; 1
    34d2:	39 e7       	ldi	r19, 0x79	; 121
    34d4:	20 83       	st	Z, r18
    34d6:	31 83       	std	Z+1, r19	; 0x01
    reactStr[1][number]=length;
    34d8:	fc 01       	movw	r30, r24
    34da:	ee 0f       	add	r30, r30
    34dc:	ff 1f       	adc	r31, r31
    34de:	e3 59       	subi	r30, 0x93	; 147
    34e0:	f6 4c       	sbci	r31, 0xC6	; 198
    34e2:	2a e1       	ldi	r18, 0x1A	; 26
    34e4:	30 e0       	ldi	r19, 0x00	; 0
    34e6:	20 83       	st	Z, r18
    34e8:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    34ea:	88 0f       	add	r24, r24
    34ec:	99 1f       	adc	r25, r25
    34ee:	fc 01       	movw	r30, r24
    34f0:	e3 55       	subi	r30, 0x53	; 83
    34f2:	f6 4c       	sbci	r31, 0xC6	; 198
    34f4:	e0 82       	st	Z, r14
    34f6:	f1 82       	std	Z+1, r15	; 0x01
                            if (actObj1.lenStr[ACTION_STR1] == 1) {
                                ExtEERead(actObj1.addrStr[ACTION_STR1], 1, GAME, &data[2]);
                                if (data[2] == '1') {
                                    uint8_t item = actObj2.byteField[ITEM_NR];
                                    if ((item < 31)||(item > 34)) {
                                        SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
    34f8:	14 2f       	mov	r17, r20
    34fa:	27 c3       	rjmp	.+1614   	; 0x3b4a <ProcessInput+0xed6>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    34fc:	60 e5       	ldi	r22, 0x50	; 80
    34fe:	75 e7       	ldi	r23, 0x75	; 117
    3500:	60 83       	st	Z, r22
    3502:	71 83       	std	Z+1, r23	; 0x01
    reactStr[1][number]=length;
    3504:	fc 01       	movw	r30, r24
    3506:	ee 0f       	add	r30, r30
    3508:	ff 1f       	adc	r31, r31
    350a:	e3 59       	subi	r30, 0x93	; 147
    350c:	f6 4c       	sbci	r31, 0xC6	; 198
    350e:	62 eb       	ldi	r22, 0xB2	; 178
    3510:	70 e0       	ldi	r23, 0x00	; 0
    3512:	60 83       	st	Z, r22
    3514:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    3516:	88 0f       	add	r24, r24
    3518:	99 1f       	adc	r25, r25
    351a:	fc 01       	movw	r30, r24
    351c:	e3 55       	subi	r30, 0x53	; 83
    351e:	f6 4c       	sbci	r31, 0xC6	; 198
    3520:	e0 82       	st	Z, r14
    3522:	f1 82       	std	Z+1, r15	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3524:	84 2f       	mov	r24, r20
    3526:	90 e0       	ldi	r25, 0x00	; 0
    3528:	fc 01       	movw	r30, r24
    352a:	ee 0f       	add	r30, r30
    352c:	ff 1f       	adc	r31, r31
    352e:	e3 5d       	subi	r30, 0xD3	; 211
    3530:	f6 4c       	sbci	r31, 0xC6	; 198
    3532:	49 e5       	ldi	r20, 0x59	; 89
    3534:	5a e7       	ldi	r21, 0x7A	; 122
    3536:	40 83       	st	Z, r20
    3538:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    353a:	fc 01       	movw	r30, r24
    353c:	ee 0f       	add	r30, r30
    353e:	ff 1f       	adc	r31, r31
    3540:	e3 59       	subi	r30, 0x93	; 147
    3542:	f6 4c       	sbci	r31, 0xC6	; 198
    3544:	42 e0       	ldi	r20, 0x02	; 2
    3546:	50 e0       	ldi	r21, 0x00	; 0
    3548:	40 83       	st	Z, r20
    354a:	51 83       	std	Z+1, r21	; 0x01
    reactStr[2][number]=type;
    354c:	88 0f       	add	r24, r24
    354e:	99 1f       	adc	r25, r25
    3550:	fc 01       	movw	r30, r24
    3552:	e3 55       	subi	r30, 0x53	; 83
    3554:	f6 4c       	sbci	r31, 0xC6	; 198
    3556:	e0 82       	st	Z, r14
    3558:	f1 82       	std	Z+1, r15	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    355a:	82 e0       	ldi	r24, 0x02	; 2
    355c:	81 0f       	add	r24, r17
    355e:	90 e0       	ldi	r25, 0x00	; 0
    3560:	1d 5f       	subi	r17, 0xFD	; 253
    3562:	fc 01       	movw	r30, r24
    3564:	ee 0f       	add	r30, r30
    3566:	ff 1f       	adc	r31, r31
    3568:	e3 5d       	subi	r30, 0xD3	; 211
    356a:	f6 4c       	sbci	r31, 0xC6	; 198
    356c:	4d ea       	ldi	r20, 0xAD	; 173
    356e:	58 e7       	ldi	r21, 0x78	; 120
    3570:	40 83       	st	Z, r20
    3572:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    3574:	fc 01       	movw	r30, r24
    3576:	ee 0f       	add	r30, r30
    3578:	ff 1f       	adc	r31, r31
    357a:	e3 59       	subi	r30, 0x93	; 147
    357c:	f6 4c       	sbci	r31, 0xC6	; 198
    357e:	42 e1       	ldi	r20, 0x12	; 18
    3580:	50 e0       	ldi	r21, 0x00	; 0
    3582:	40 83       	st	Z, r20
    3584:	51 83       	std	Z+1, r21	; 0x01
    reactStr[2][number]=type;
    3586:	88 0f       	add	r24, r24
    3588:	99 1f       	adc	r25, r25
    358a:	fc 01       	movw	r30, r24
    358c:	e3 55       	subi	r30, 0x53	; 83
    358e:	f6 4c       	sbci	r31, 0xC6	; 198
    3590:	e0 82       	st	Z, r14
    3592:	f1 82       	std	Z+1, r15	; 0x01
                                        SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                                    } else {
                                        SetResponse(elements++, A_PRIEST, L_PRIEST, TEASER);
                                        SetResponse(elements++, A_LF, 2, TEASER);
                                        SetResponse(elements++, A_RESPONSE, L_RESPONSE, TEASER);
                                        specialInput[0] = '1';
    3594:	30 93 1c 39 	sts	0x391C, r19	; 0x80391c <specialInput>
                                        specialInput[1] = item;
    3598:	20 93 1d 39 	sts	0x391D, r18	; 0x80391d <specialInput+0x1>
                                        specialInput[2] = 0;
    359c:	10 92 1e 39 	sts	0x391E, r1	; 0x80391e <specialInput+0x2>
    35a0:	d4 c2       	rjmp	.+1448   	; 0x3b4a <ProcessInput+0xed6>
                                    }
                                }

                            //Normal "use ... on ..." or "give ... to ..." action
                            } else if (actObj1.byteField[ACTION_ITEM] == actObj2.byteField[ITEM_NR]) {
    35a2:	90 91 f5 38 	lds	r25, 0x38F5	; 0x8038f5 <actObj1.3956+0x9>
    35a6:	80 91 cc 38 	lds	r24, 0x38CC	; 0x8038cc <actObj2.3957+0xb>
    35aa:	98 13       	cpse	r25, r24
    35ac:	2e c0       	rjmp	.+92     	; 0x360a <ProcessInput+0x996>
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    35ae:	20 91 12 39 	lds	r18, 0x3912	; 0x803912 <actObj1.3956+0x26>
    35b2:	30 91 13 39 	lds	r19, 0x3913	; 0x803913 <actObj1.3956+0x27>
    35b6:	01 e0       	ldi	r16, 0x01	; 1
    35b8:	01 0f       	add	r16, r17
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    35ba:	81 2f       	mov	r24, r17
    35bc:	90 e0       	ldi	r25, 0x00	; 0
    35be:	fc 01       	movw	r30, r24
    35c0:	ee 0f       	add	r30, r30
    35c2:	ff 1f       	adc	r31, r31
    35c4:	e3 5d       	subi	r30, 0xD3	; 211
    35c6:	f6 4c       	sbci	r31, 0xC6	; 198
    35c8:	40 91 04 39 	lds	r20, 0x3904	; 0x803904 <actObj1.3956+0x18>
    35cc:	50 91 05 39 	lds	r21, 0x3905	; 0x803905 <actObj1.3956+0x19>
    35d0:	40 83       	st	Z, r20
    35d2:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    35d4:	fc 01       	movw	r30, r24
    35d6:	ee 0f       	add	r30, r30
    35d8:	ff 1f       	adc	r31, r31
    35da:	e3 59       	subi	r30, 0x93	; 147
    35dc:	f6 4c       	sbci	r31, 0xC6	; 198
    35de:	20 83       	st	Z, r18
    35e0:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    35e2:	88 0f       	add	r24, r24
    35e4:	99 1f       	adc	r25, r25
    35e6:	fc 01       	movw	r30, r24
    35e8:	e3 55       	subi	r30, 0x53	; 83
    35ea:	f6 4c       	sbci	r31, 0xC6	; 198
    35ec:	10 82       	st	Z, r1
    35ee:	11 82       	std	Z+1, r1	; 0x01
                                }

                            //Normal "use ... on ..." or "give ... to ..." action
                            } else if (actObj1.byteField[ACTION_ITEM] == actObj2.byteField[ITEM_NR]) {
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                                effect = actObj1.effect[2];
    35f0:	80 91 16 39 	lds	r24, 0x3916	; 0x803916 <actObj1.3956+0x2a>
    35f4:	90 e0       	ldi	r25, 0x00	; 0
    35f6:	80 93 4a 38 	sts	0x384A, r24	; 0x80384a <effect>
    35fa:	90 93 4b 38 	sts	0x384B, r25	; 0x80384b <effect+0x1>
                                UpdateState(actObj1.byteField[ACTION_STATE]);
    35fe:	80 91 f6 38 	lds	r24, 0x38F6	; 0x8038f6 <actObj1.3956+0xa>
    3602:	0e 94 3e 09 	call	0x127c	; 0x127c <UpdateState>
                                    }
                                }

                            //Normal "use ... on ..." or "give ... to ..." action
                            } else if (actObj1.byteField[ACTION_ITEM] == actObj2.byteField[ITEM_NR]) {
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    3606:	10 2f       	mov	r17, r16
    3608:	a0 c2       	rjmp	.+1344   	; 0x3b4a <ProcessInput+0xed6>
                                effect = actObj1.effect[2];
                                UpdateState(actObj1.byteField[ACTION_STATE]);
                                
                            } else {
                                if (data[0] == 'u') {
    360a:	f3 01       	movw	r30, r6
    360c:	80 81       	ld	r24, Z
    360e:	85 37       	cpi	r24, 0x75	; 117
    3610:	99 f4       	brne	.+38     	; 0x3638 <ProcessInput+0x9c4>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3612:	81 2f       	mov	r24, r17
    3614:	90 e0       	ldi	r25, 0x00	; 0
    3616:	fc 01       	movw	r30, r24
    3618:	ee 0f       	add	r30, r30
    361a:	ff 1f       	adc	r31, r31
    361c:	e3 5d       	subi	r30, 0xD3	; 211
    361e:	f6 4c       	sbci	r31, 0xC6	; 198
    3620:	21 e0       	ldi	r18, 0x01	; 1
    3622:	39 e7       	ldi	r19, 0x79	; 121
    3624:	20 83       	st	Z, r18
    3626:	31 83       	std	Z+1, r19	; 0x01
    reactStr[1][number]=length;
    3628:	fc 01       	movw	r30, r24
    362a:	ee 0f       	add	r30, r30
    362c:	ff 1f       	adc	r31, r31
    362e:	e3 59       	subi	r30, 0x93	; 147
    3630:	f6 4c       	sbci	r31, 0xC6	; 198
    3632:	2a e1       	ldi	r18, 0x1A	; 26
    3634:	30 e0       	ldi	r19, 0x00	; 0
    3636:	15 c0       	rjmp	.+42     	; 0x3662 <ProcessInput+0x9ee>
                                UpdateState(actObj1.byteField[ACTION_STATE]);
                                
                            } else {
                                if (data[0] == 'u') {
                                    SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                                } else if (data[0] == 'g') {
    3638:	87 36       	cpi	r24, 0x67	; 103
    363a:	09 f0       	breq	.+2      	; 0x363e <ProcessInput+0x9ca>
    363c:	86 c2       	rjmp	.+1292   	; 0x3b4a <ProcessInput+0xed6>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    363e:	81 2f       	mov	r24, r17
    3640:	90 e0       	ldi	r25, 0x00	; 0
    3642:	fc 01       	movw	r30, r24
    3644:	ee 0f       	add	r30, r30
    3646:	ff 1f       	adc	r31, r31
    3648:	e3 5d       	subi	r30, 0xD3	; 211
    364a:	f6 4c       	sbci	r31, 0xC6	; 198
    364c:	2f e9       	ldi	r18, 0x9F	; 159
    364e:	36 e7       	ldi	r19, 0x76	; 118
    3650:	20 83       	st	Z, r18
    3652:	31 83       	std	Z+1, r19	; 0x01
    reactStr[1][number]=length;
    3654:	fc 01       	movw	r30, r24
    3656:	ee 0f       	add	r30, r30
    3658:	ff 1f       	adc	r31, r31
    365a:	e3 59       	subi	r30, 0x93	; 147
    365c:	f6 4c       	sbci	r31, 0xC6	; 198
    365e:	28 e2       	ldi	r18, 0x28	; 40
    3660:	30 e0       	ldi	r19, 0x00	; 0
    3662:	20 83       	st	Z, r18
    3664:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    3666:	88 0f       	add	r24, r24
    3668:	99 1f       	adc	r25, r25
    366a:	fc 01       	movw	r30, r24
    366c:	e3 55       	subi	r30, 0x53	; 83
    366e:	f6 4c       	sbci	r31, 0xC6	; 198
    3670:	81 e0       	ldi	r24, 0x01	; 1
    3672:	90 e0       	ldi	r25, 0x00	; 0
    3674:	80 83       	st	Z, r24
    3676:	91 83       	std	Z+1, r25	; 0x01
                                
                            } else {
                                if (data[0] == 'u') {
                                    SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                                } else if (data[0] == 'g') {
                                    SetResponse(elements++, A_CANTGIVE, L_CANTGIVE, TEASER);                                    
    3678:	1f 5f       	subi	r17, 0xFF	; 255
    367a:	67 c2       	rjmp	.+1230   	; 0x3b4a <ProcessInput+0xed6>
                            }
                        }
                    
                    //Talk to person, read or use object (without item)                          
                    } else {
                        PopulateObject(route[currDepth+1], &actObj1);
    367c:	6c ee       	ldi	r22, 0xEC	; 236
    367e:	78 e3       	ldi	r23, 0x38	; 56
    3680:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <PopulateObject>
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
    3684:	d3 01       	movw	r26, r6
    3686:	8c 91       	ld	r24, X
    3688:	84 37       	cpi	r24, 0x74	; 116
    368a:	61 f5       	brne	.+88     	; 0x36e4 <ProcessInput+0xa70>
    368c:	80 91 f4 38 	lds	r24, 0x38F4	; 0x8038f4 <actObj1.3956+0x8>
    3690:	83 fd       	sbrc	r24, 3
    3692:	43 c0       	rjmp	.+134    	; 0x371a <ProcessInput+0xaa6>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3694:	8b e1       	ldi	r24, 0x1B	; 27
    3696:	99 e7       	ldi	r25, 0x79	; 121
    3698:	80 93 2f 39 	sts	0x392F, r24	; 0x80392f <reactStr+0x2>
    369c:	90 93 30 39 	sts	0x3930, r25	; 0x803930 <reactStr+0x3>
    reactStr[1][number]=length;
    36a0:	8e e1       	ldi	r24, 0x1E	; 30
    36a2:	90 e0       	ldi	r25, 0x00	; 0
    36a4:	80 93 6f 39 	sts	0x396F, r24	; 0x80396f <reactStr+0x42>
    36a8:	90 93 70 39 	sts	0x3970, r25	; 0x803970 <reactStr+0x43>
    reactStr[2][number]=type;
    36ac:	81 e0       	ldi	r24, 0x01	; 1
    36ae:	90 e0       	ldi	r25, 0x00	; 0
    36b0:	80 93 af 39 	sts	0x39AF, r24	; 0x8039af <reactStr+0x82>
    36b4:	90 93 b0 39 	sts	0x39B0, r25	; 0x8039b0 <reactStr+0x83>
                    //Talk to person, read or use object (without item)                          
                    } else {
                        PopulateObject(route[currDepth+1], &actObj1);
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
                            SetResponse(elements++, A_WHYTALK, L_WHYTALK, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    36b8:	80 91 06 39 	lds	r24, 0x3906	; 0x803906 <actObj1.3956+0x1a>
    36bc:	90 91 07 39 	lds	r25, 0x3907	; 0x803907 <actObj1.3956+0x1b>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    36c0:	20 91 f8 38 	lds	r18, 0x38F8	; 0x8038f8 <actObj1.3956+0xc>
    36c4:	30 91 f9 38 	lds	r19, 0x38F9	; 0x8038f9 <actObj1.3956+0xd>
    36c8:	20 93 31 39 	sts	0x3931, r18	; 0x803931 <reactStr+0x4>
    36cc:	30 93 32 39 	sts	0x3932, r19	; 0x803932 <reactStr+0x5>
    reactStr[1][number]=length;
    36d0:	80 93 71 39 	sts	0x3971, r24	; 0x803971 <reactStr+0x44>
    36d4:	90 93 72 39 	sts	0x3972, r25	; 0x803972 <reactStr+0x45>
    reactStr[2][number]=type;
    36d8:	10 92 b1 39 	sts	0x39B1, r1	; 0x8039b1 <reactStr+0x84>
    36dc:	10 92 b2 39 	sts	0x39B2, r1	; 0x8039b2 <reactStr+0x85>
                    //Talk to person, read or use object (without item)                          
                    } else {
                        PopulateObject(route[currDepth+1], &actObj1);
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
                            SetResponse(elements++, A_WHYTALK, L_WHYTALK, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    36e0:	13 e0       	ldi	r17, 0x03	; 3
    36e2:	33 c2       	rjmp	.+1126   	; 0x3b4a <ProcessInput+0xed6>
                        } else if ((data[0] == 'u')&&((actObj1.byteField[ACTION_MASK]&USE) == 0)) {
    36e4:	85 37       	cpi	r24, 0x75	; 117
    36e6:	39 f4       	brne	.+14     	; 0x36f6 <ProcessInput+0xa82>
    36e8:	80 91 f4 38 	lds	r24, 0x38F4	; 0x8038f4 <actObj1.3956+0x8>
    36ec:	84 fd       	sbrc	r24, 4
    36ee:	15 c0       	rjmp	.+42     	; 0x371a <ProcessInput+0xaa6>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    36f0:	81 e0       	ldi	r24, 0x01	; 1
    36f2:	99 e7       	ldi	r25, 0x79	; 121
    36f4:	3b c2       	rjmp	.+1142   	; 0x3b6c <ProcessInput+0xef8>
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
                            SetResponse(elements++, A_WHYTALK, L_WHYTALK, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                        } else if ((data[0] == 'u')&&((actObj1.byteField[ACTION_MASK]&USE) == 0)) {
                            SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                        } else if ((data[0] == 'r')&&((actObj1.byteField[ACTION_MASK]&READ) == 0)) {
    36f6:	82 37       	cpi	r24, 0x72	; 114
    36f8:	69 f4       	brne	.+26     	; 0x3714 <ProcessInput+0xaa0>
    36fa:	80 91 f4 38 	lds	r24, 0x38F4	; 0x8038f4 <actObj1.3956+0x8>
    36fe:	85 fd       	sbrc	r24, 5
    3700:	0c c0       	rjmp	.+24     	; 0x371a <ProcessInput+0xaa6>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3702:	86 ee       	ldi	r24, 0xE6	; 230
    3704:	98 e7       	ldi	r25, 0x78	; 120
    3706:	80 93 2f 39 	sts	0x392F, r24	; 0x80392f <reactStr+0x2>
    370a:	90 93 30 39 	sts	0x3930, r25	; 0x803930 <reactStr+0x3>
    reactStr[1][number]=length;
    370e:	8b e1       	ldi	r24, 0x1B	; 27
    3710:	90 e0       	ldi	r25, 0x00	; 0
    3712:	78 cb       	rjmp	.-2320   	; 0x2e04 <ProcessInput+0x190>
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                        } else if ((data[0] == 'u')&&((actObj1.byteField[ACTION_MASK]&USE) == 0)) {
                            SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                        } else if ((data[0] == 'r')&&((actObj1.byteField[ACTION_MASK]&READ) == 0)) {
                            SetResponse(elements++, A_CANTREAD, L_CANTREAD, TEASER);
                        } else if (data[0] == 'g'){ 
    3714:	87 36       	cpi	r24, 0x67	; 103
    3716:	09 f4       	brne	.+2      	; 0x371a <ProcessInput+0xaa6>
    3718:	e0 ca       	rjmp	.-2624   	; 0x2cda <ProcessInput+0x66>
                            SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);  
                        } else {

                            //Special game, not enough characters
                            if (actObj1.lenStr[ACTION_STR1] == 1) {
    371a:	00 91 0a 39 	lds	r16, 0x390A	; 0x80390a <actObj1.3956+0x1e>
    371e:	10 91 0b 39 	lds	r17, 0x390B	; 0x80390b <actObj1.3956+0x1f>
    3722:	01 30       	cpi	r16, 0x01	; 1
    3724:	11 05       	cpc	r17, r1
    3726:	09 f5       	brne	.+66     	; 0x376a <ProcessInput+0xaf6>
                                ExtEERead(actObj1.addrStr[ACTION_STR1], 1, GAME, &data[2]);
    3728:	93 01       	movw	r18, r6
    372a:	2e 5f       	subi	r18, 0xFE	; 254
    372c:	3f 4f       	sbci	r19, 0xFF	; 255
    372e:	40 e0       	ldi	r20, 0x00	; 0
    3730:	61 e0       	ldi	r22, 0x01	; 1
    3732:	80 91 fc 38 	lds	r24, 0x38FC	; 0x8038fc <actObj1.3956+0x10>
    3736:	90 91 fd 38 	lds	r25, 0x38FD	; 0x8038fd <actObj1.3956+0x11>
    373a:	0e 94 a8 07 	call	0xf50	; 0xf50 <ExtEERead>
                                if (data[2] == '1') {
    373e:	f3 01       	movw	r30, r6
    3740:	82 81       	ldd	r24, Z+2	; 0x02
    3742:	81 33       	cpi	r24, 0x31	; 49
    3744:	09 f0       	breq	.+2      	; 0x3748 <ProcessInput+0xad4>
    3746:	13 cd       	rjmp	.-1498   	; 0x316e <ProcessInput+0x4fa>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3748:	85 e2       	ldi	r24, 0x25	; 37
    374a:	95 e7       	ldi	r25, 0x75	; 117
    374c:	80 93 2f 39 	sts	0x392F, r24	; 0x80392f <reactStr+0x2>
    3750:	90 93 30 39 	sts	0x3930, r25	; 0x803930 <reactStr+0x3>
    reactStr[1][number]=length;
    3754:	8b e2       	ldi	r24, 0x2B	; 43
    3756:	90 e0       	ldi	r25, 0x00	; 0
    3758:	80 93 6f 39 	sts	0x396F, r24	; 0x80396f <reactStr+0x42>
    375c:	90 93 70 39 	sts	0x3970, r25	; 0x803970 <reactStr+0x43>
    reactStr[2][number]=type;
    3760:	00 93 af 39 	sts	0x39AF, r16	; 0x8039af <reactStr+0x82>
    3764:	10 93 b0 39 	sts	0x39B0, r17	; 0x8039b0 <reactStr+0x83>
    3768:	57 cb       	rjmp	.-2386   	; 0x2e18 <ProcessInput+0x1a4>
                                if (data[2] == '1') {
                                    SetResponse(elements++, A_PLEASEOFFER, L_PLEASEOFFER, TEASER);
                                }

                            //General request
                            } else if (actObj1.lenStr[ACTION_STR1]) {
    376a:	01 15       	cp	r16, r1
    376c:	11 05       	cpc	r17, r1
    376e:	09 f4       	brne	.+2      	; 0x3772 <ProcessInput+0xafe>
    3770:	58 c0       	rjmp	.+176    	; 0x3822 <ProcessInput+0xbae>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3772:	80 91 fc 38 	lds	r24, 0x38FC	; 0x8038fc <actObj1.3956+0x10>
    3776:	90 91 fd 38 	lds	r25, 0x38FD	; 0x8038fd <actObj1.3956+0x11>
    377a:	80 93 2f 39 	sts	0x392F, r24	; 0x80392f <reactStr+0x2>
    377e:	90 93 30 39 	sts	0x3930, r25	; 0x803930 <reactStr+0x3>
    reactStr[1][number]=length;
    3782:	00 93 6f 39 	sts	0x396F, r16	; 0x80396f <reactStr+0x42>
    3786:	10 93 70 39 	sts	0x3970, r17	; 0x803970 <reactStr+0x43>
    reactStr[2][number]=type;
    378a:	10 92 af 39 	sts	0x39AF, r1	; 0x8039af <reactStr+0x82>
    378e:	10 92 b0 39 	sts	0x39B0, r1	; 0x8039b0 <reactStr+0x83>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3792:	89 e5       	ldi	r24, 0x59	; 89
    3794:	9a e7       	ldi	r25, 0x7A	; 122
    3796:	80 93 31 39 	sts	0x3931, r24	; 0x803931 <reactStr+0x4>
    379a:	90 93 32 39 	sts	0x3932, r25	; 0x803932 <reactStr+0x5>
    reactStr[1][number]=length;
    379e:	82 e0       	ldi	r24, 0x02	; 2
    37a0:	90 e0       	ldi	r25, 0x00	; 0
    37a2:	80 93 71 39 	sts	0x3971, r24	; 0x803971 <reactStr+0x44>
    37a6:	90 93 72 39 	sts	0x3972, r25	; 0x803972 <reactStr+0x45>
    reactStr[2][number]=type;
    37aa:	81 e0       	ldi	r24, 0x01	; 1
    37ac:	90 e0       	ldi	r25, 0x00	; 0
    37ae:	80 93 b1 39 	sts	0x39B1, r24	; 0x8039b1 <reactStr+0x84>
    37b2:	90 93 b2 39 	sts	0x39B2, r25	; 0x8039b2 <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    37b6:	2d ea       	ldi	r18, 0xAD	; 173
    37b8:	38 e7       	ldi	r19, 0x78	; 120
    37ba:	20 93 33 39 	sts	0x3933, r18	; 0x803933 <reactStr+0x6>
    37be:	30 93 34 39 	sts	0x3934, r19	; 0x803934 <reactStr+0x7>
    reactStr[1][number]=length;
    37c2:	22 e1       	ldi	r18, 0x12	; 18
    37c4:	30 e0       	ldi	r19, 0x00	; 0
    37c6:	20 93 73 39 	sts	0x3973, r18	; 0x803973 <reactStr+0x46>
    37ca:	30 93 74 39 	sts	0x3974, r19	; 0x803974 <reactStr+0x47>
    reactStr[2][number]=type;
    37ce:	80 93 b3 39 	sts	0x39B3, r24	; 0x8039b3 <reactStr+0x86>
    37d2:	90 93 b4 39 	sts	0x39B4, r25	; 0x8039b4 <reactStr+0x87>
                            //General request
                            } else if (actObj1.lenStr[ACTION_STR1]) {
                                SetResponse(elements++, actObj1.addrStr[ACTION_STR1], actObj1.lenStr[ACTION_STR1], GAME);
                                SetResponse(elements++, A_LF, 2, TEASER);
                                SetResponse(elements++, A_RESPONSE, L_RESPONSE, TEASER);
                                if (actObj1.lenStr[ACTION_STR2]>(INP_LENGTH-1)) actObj1.lenStr[ACTION_STR2] = (INP_LENGTH-1);
    37d6:	80 91 0c 39 	lds	r24, 0x390C	; 0x80390c <actObj1.3956+0x20>
    37da:	90 91 0d 39 	lds	r25, 0x390D	; 0x80390d <actObj1.3956+0x21>
    37de:	40 97       	sbiw	r24, 0x10	; 16
    37e0:	30 f0       	brcs	.+12     	; 0x37ee <ProcessInput+0xb7a>
    37e2:	8f e0       	ldi	r24, 0x0F	; 15
    37e4:	90 e0       	ldi	r25, 0x00	; 0
    37e6:	80 93 0c 39 	sts	0x390C, r24	; 0x80390c <actObj1.3956+0x20>
    37ea:	90 93 0d 39 	sts	0x390D, r25	; 0x80390d <actObj1.3956+0x21>
                                ExtEERead(actObj1.addrStr[ACTION_STR2], actObj1.lenStr[ACTION_STR2], GAME, (uint8_t *)&specialInput[0]);
    37ee:	2c e1       	ldi	r18, 0x1C	; 28
    37f0:	39 e3       	ldi	r19, 0x39	; 57
    37f2:	40 e0       	ldi	r20, 0x00	; 0
    37f4:	60 91 0c 39 	lds	r22, 0x390C	; 0x80390c <actObj1.3956+0x20>
    37f8:	80 91 fe 38 	lds	r24, 0x38FE	; 0x8038fe <actObj1.3956+0x12>
    37fc:	90 91 ff 38 	lds	r25, 0x38FF	; 0x8038ff <actObj1.3956+0x13>
    3800:	0e 94 a8 07 	call	0xf50	; 0xf50 <ExtEERead>
                                UnflipData(actObj1.lenStr[ACTION_STR2], (uint8_t *)&specialInput[0]);
    3804:	6c e1       	ldi	r22, 0x1C	; 28
    3806:	79 e3       	ldi	r23, 0x39	; 57
    3808:	80 91 0c 39 	lds	r24, 0x390C	; 0x80390c <actObj1.3956+0x20>
    380c:	0e 94 0e 11 	call	0x221c	; 0x221c <UnflipData>
                                specialInput[actObj1.lenStr[ACTION_STR2]] = 0;
    3810:	e0 91 0c 39 	lds	r30, 0x390C	; 0x80390c <actObj1.3956+0x20>
    3814:	f0 91 0d 39 	lds	r31, 0x390D	; 0x80390d <actObj1.3956+0x21>
    3818:	e4 5e       	subi	r30, 0xE4	; 228
    381a:	f6 4c       	sbci	r31, 0xC6	; 198
    381c:	10 82       	st	Z, r1

                            //General request
                            } else if (actObj1.lenStr[ACTION_STR1]) {
                                SetResponse(elements++, actObj1.addrStr[ACTION_STR1], actObj1.lenStr[ACTION_STR1], GAME);
                                SetResponse(elements++, A_LF, 2, TEASER);
                                SetResponse(elements++, A_RESPONSE, L_RESPONSE, TEASER);
    381e:	14 e0       	ldi	r17, 0x04	; 4
    3820:	94 c1       	rjmp	.+808    	; 0x3b4a <ProcessInput+0xed6>
                                ExtEERead(actObj1.addrStr[ACTION_STR2], actObj1.lenStr[ACTION_STR2], GAME, (uint8_t *)&specialInput[0]);
                                UnflipData(actObj1.lenStr[ACTION_STR2], (uint8_t *)&specialInput[0]);
                                specialInput[actObj1.lenStr[ACTION_STR2]] = 0;
                            
                            //Normal action    
                            } else if (CheckState(actObj1.byteField[ACTION_ACL])){
    3822:	80 91 f3 38 	lds	r24, 0x38F3	; 0x8038f3 <actObj1.3956+0x7>
    3826:	0e 94 5f 09 	call	0x12be	; 0x12be <CheckState>
    382a:	88 23       	and	r24, r24
    382c:	01 f1       	breq	.+64     	; 0x386e <ProcessInput+0xbfa>
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    382e:	80 91 12 39 	lds	r24, 0x3912	; 0x803912 <actObj1.3956+0x26>
    3832:	90 91 13 39 	lds	r25, 0x3913	; 0x803913 <actObj1.3956+0x27>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3836:	20 91 04 39 	lds	r18, 0x3904	; 0x803904 <actObj1.3956+0x18>
    383a:	30 91 05 39 	lds	r19, 0x3905	; 0x803905 <actObj1.3956+0x19>
    383e:	20 93 2f 39 	sts	0x392F, r18	; 0x80392f <reactStr+0x2>
    3842:	30 93 30 39 	sts	0x3930, r19	; 0x803930 <reactStr+0x3>
    reactStr[1][number]=length;
    3846:	80 93 6f 39 	sts	0x396F, r24	; 0x80396f <reactStr+0x42>
    384a:	90 93 70 39 	sts	0x3970, r25	; 0x803970 <reactStr+0x43>
    reactStr[2][number]=type;
    384e:	10 92 af 39 	sts	0x39AF, r1	; 0x8039af <reactStr+0x82>
    3852:	10 92 b0 39 	sts	0x39B0, r1	; 0x8039b0 <reactStr+0x83>
                                specialInput[actObj1.lenStr[ACTION_STR2]] = 0;
                            
                            //Normal action    
                            } else if (CheckState(actObj1.byteField[ACTION_ACL])){
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                                effect = actObj1.effect[2];
    3856:	80 91 16 39 	lds	r24, 0x3916	; 0x803916 <actObj1.3956+0x2a>
    385a:	90 e0       	ldi	r25, 0x00	; 0
    385c:	80 93 4a 38 	sts	0x384A, r24	; 0x80384a <effect>
    3860:	90 93 4b 38 	sts	0x384B, r25	; 0x80384b <effect+0x1>
                                UpdateState(actObj1.byteField[ACTION_STATE]);
    3864:	80 91 f6 38 	lds	r24, 0x38F6	; 0x8038f6 <actObj1.3956+0xa>
    3868:	0e 94 3e 09 	call	0x127c	; 0x127c <UpdateState>
    386c:	d5 ca       	rjmp	.-2646   	; 0x2e18 <ProcessInput+0x1a4>
                            } else {
                                SetResponse(elements++, actObj1.addrStr[ACTION_ACL_MSG], actObj1.lenStr[ACTION_ACL_MSG], GAME);
    386e:	80 91 10 39 	lds	r24, 0x3910	; 0x803910 <actObj1.3956+0x24>
    3872:	90 91 11 39 	lds	r25, 0x3911	; 0x803911 <actObj1.3956+0x25>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3876:	20 91 02 39 	lds	r18, 0x3902	; 0x803902 <actObj1.3956+0x16>
    387a:	30 91 03 39 	lds	r19, 0x3903	; 0x803903 <actObj1.3956+0x17>
    387e:	20 93 2f 39 	sts	0x392F, r18	; 0x80392f <reactStr+0x2>
    3882:	30 93 30 39 	sts	0x3930, r19	; 0x803930 <reactStr+0x3>
    reactStr[1][number]=length;
    3886:	80 93 6f 39 	sts	0x396F, r24	; 0x80396f <reactStr+0x42>
    388a:	90 93 70 39 	sts	0x3970, r25	; 0x803970 <reactStr+0x43>
    reactStr[2][number]=type;
    388e:	10 92 af 39 	sts	0x39AF, r1	; 0x8039af <reactStr+0x82>
    3892:	10 92 b0 39 	sts	0x39B0, r1	; 0x8039b0 <reactStr+0x83>
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                                effect = actObj1.effect[2];
                                UpdateState(actObj1.byteField[ACTION_STATE]);
                            } else {
                                SetResponse(elements++, actObj1.addrStr[ACTION_ACL_MSG], actObj1.lenStr[ACTION_ACL_MSG], GAME);
                                effect = actObj1.effect[1];
    3896:	80 91 15 39 	lds	r24, 0x3915	; 0x803915 <actObj1.3956+0x29>
    389a:	90 e0       	ldi	r25, 0x00	; 0
    389c:	80 93 4a 38 	sts	0x384A, r24	; 0x80384a <effect>
    38a0:	90 93 4b 38 	sts	0x384B, r25	; 0x80384b <effect+0x1>
    38a4:	b9 ca       	rjmp	.-2702   	; 0x2e18 <ProcessInput+0x1a4>
                        }
                    }

                //Person or object not found
                } else {
                    if ((data[0] == 't')||(data[0] == 'g')){
    38a6:	d3 01       	movw	r26, r6
    38a8:	8c 91       	ld	r24, X
    38aa:	84 37       	cpi	r24, 0x74	; 116
    38ac:	11 f0       	breq	.+4      	; 0x38b2 <ProcessInput+0xc3e>
    38ae:	87 36       	cpi	r24, 0x67	; 103
    38b0:	19 f4       	brne	.+6      	; 0x38b8 <ProcessInput+0xc44>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    38b2:	89 e3       	ldi	r24, 0x39	; 57
    38b4:	99 e7       	ldi	r25, 0x79	; 121
    38b6:	02 c0       	rjmp	.+4      	; 0x38bc <ProcessInput+0xc48>
    38b8:	8d e4       	ldi	r24, 0x4D	; 77
    38ba:	99 e7       	ldi	r25, 0x79	; 121
    38bc:	80 93 2f 39 	sts	0x392F, r24	; 0x80392f <reactStr+0x2>
    38c0:	90 93 30 39 	sts	0x3930, r25	; 0x803930 <reactStr+0x3>
    reactStr[1][number]=length;
    38c4:	84 e1       	ldi	r24, 0x14	; 20
    38c6:	90 e0       	ldi	r25, 0x00	; 0
    38c8:	9d ca       	rjmp	.-2758   	; 0x2e04 <ProcessInput+0x190>
                    }
                }
            }
        
        //Special answer given
        } else if (data[0] == 'a'){
    38ca:	81 36       	cpi	r24, 0x61	; 97
    38cc:	09 f0       	breq	.+2      	; 0x38d0 <ProcessInput+0xc5c>
    38ce:	4f cc       	rjmp	.-1890   	; 0x316e <ProcessInput+0x4fa>
            
            //Priest offerings
            if (specialPassed >= 2) {
    38d0:	80 91 1b 39 	lds	r24, 0x391B	; 0x80391b <specialPassed>
    38d4:	82 30       	cpi	r24, 0x02	; 2
    38d6:	08 f4       	brcc	.+2      	; 0x38da <ProcessInput+0xc66>
    38d8:	c7 c0       	rjmp	.+398    	; 0x3a68 <ProcessInput+0xdf4>
                if (data[1] > 0) {
    38da:	f3 01       	movw	r30, r6
    38dc:	21 81       	ldd	r18, Z+1	; 0x01
    38de:	22 23       	and	r18, r18
    38e0:	09 f4       	brne	.+2      	; 0x38e4 <ProcessInput+0xc70>
    38e2:	af c0       	rjmp	.+350    	; 0x3a42 <ProcessInput+0xdce>

                    //uint8_t  digit[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
                    uint8_t  digit[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    38e4:	ce 01       	movw	r24, r28
    38e6:	01 96       	adiw	r24, 0x01	; 1
    38e8:	7c 01       	movw	r14, r24
    38ea:	88 e0       	ldi	r24, 0x08	; 8
    38ec:	d7 01       	movw	r26, r14
    38ee:	1d 92       	st	X+, r1
    38f0:	8a 95       	dec	r24
    38f2:	e9 f7       	brne	.-6      	; 0x38ee <ProcessInput+0xc7a>
                        answer = ((offering  & 2) << 19) + ((offering  & 1) << 8) + \
                        ((element   & 2) << 15) + ((element   & 1) << 4) + \
                        ((kneelings & 2) << 11) + ((kneelings & 1))
                        answer = answer << (3-person)
                    */
                    data[1]-='0'; // item 31 needs to become something that results in 0 when doing %4
    38f4:	20 53       	subi	r18, 0x30	; 48
    38f6:	21 83       	std	Z+1, r18	; 0x01
                    data[2]-='1';
    38f8:	32 81       	ldd	r19, Z+2	; 0x02
    38fa:	31 53       	subi	r19, 0x31	; 49
    38fc:	32 83       	std	Z+2, r19	; 0x02
                    if (data[3] == 'a') data[3] = 1;
    38fe:	83 81       	ldd	r24, Z+3	; 0x03
    3900:	81 36       	cpi	r24, 0x61	; 97
    3902:	11 f4       	brne	.+4      	; 0x3908 <ProcessInput+0xc94>
    3904:	81 e0       	ldi	r24, 0x01	; 1
    3906:	0c c0       	rjmp	.+24     	; 0x3920 <ProcessInput+0xcac>
                    else if (data[3] == 'e') data[3] = 0;
    3908:	85 36       	cpi	r24, 0x65	; 101
    390a:	19 f4       	brne	.+6      	; 0x3912 <ProcessInput+0xc9e>
    390c:	f3 01       	movw	r30, r6
    390e:	13 82       	std	Z+3, r1	; 0x03
    3910:	08 c0       	rjmp	.+16     	; 0x3922 <ProcessInput+0xcae>
                    else if (data[3] == 'f') data[3] = 3;
    3912:	86 36       	cpi	r24, 0x66	; 102
    3914:	19 f4       	brne	.+6      	; 0x391c <ProcessInput+0xca8>
    3916:	83 e0       	ldi	r24, 0x03	; 3
    3918:	83 83       	std	Z+3, r24	; 0x03
    391a:	03 c0       	rjmp	.+6      	; 0x3922 <ProcessInput+0xcae>
                    else data[3] = 2;
    391c:	82 e0       	ldi	r24, 0x02	; 2
    391e:	f3 01       	movw	r30, r6
    3920:	83 83       	std	Z+3, r24	; 0x03

                    if (data[1] & 2) answer += (1UL << 20);
    3922:	21 fd       	sbrc	r18, 1
    3924:	04 c0       	rjmp	.+8      	; 0x392e <ProcessInput+0xcba>
            if (specialPassed >= 2) {
                if (data[1] > 0) {

                    //uint8_t  digit[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
                    uint8_t  digit[8] = {0, 0, 0, 0, 0, 0, 0, 0};
                    uint32_t answer = 0;
    3926:	80 e0       	ldi	r24, 0x00	; 0
    3928:	90 e0       	ldi	r25, 0x00	; 0
    392a:	dc 01       	movw	r26, r24
    392c:	04 c0       	rjmp	.+8      	; 0x3936 <ProcessInput+0xcc2>
                    if (data[3] == 'a') data[3] = 1;
                    else if (data[3] == 'e') data[3] = 0;
                    else if (data[3] == 'f') data[3] = 3;
                    else data[3] = 2;

                    if (data[1] & 2) answer += (1UL << 20);
    392e:	80 e0       	ldi	r24, 0x00	; 0
    3930:	90 e0       	ldi	r25, 0x00	; 0
    3932:	a0 e1       	ldi	r26, 0x10	; 16
    3934:	b0 e0       	ldi	r27, 0x00	; 0
                    if (data[1] & 1) answer += (1 << 8);
    3936:	20 ff       	sbrs	r18, 0
    3938:	03 c0       	rjmp	.+6      	; 0x3940 <ProcessInput+0xccc>
    393a:	9f 5f       	subi	r25, 0xFF	; 255
    393c:	af 4f       	sbci	r26, 0xFF	; 255
    393e:	bf 4f       	sbci	r27, 0xFF	; 255
                    if (data[3] & 2) answer += (1UL << 16);
    3940:	f3 01       	movw	r30, r6
    3942:	23 81       	ldd	r18, Z+3	; 0x03
    3944:	21 fd       	sbrc	r18, 1
    3946:	11 96       	adiw	r26, 0x01	; 1
                    if (data[3] & 1) answer += (1 << 4);
    3948:	20 ff       	sbrs	r18, 0
    394a:	03 c0       	rjmp	.+6      	; 0x3952 <ProcessInput+0xcde>
    394c:	40 96       	adiw	r24, 0x10	; 16
    394e:	a1 1d       	adc	r26, r1
    3950:	b1 1d       	adc	r27, r1
                    if (data[2] & 2) answer += (1 << 12);
    3952:	31 ff       	sbrs	r19, 1
    3954:	03 c0       	rjmp	.+6      	; 0x395c <ProcessInput+0xce8>
    3956:	90 5f       	subi	r25, 0xF0	; 240
    3958:	af 4f       	sbci	r26, 0xFF	; 255
    395a:	bf 4f       	sbci	r27, 0xFF	; 255
                    if (data[2] & 1) answer += 1;
    395c:	30 ff       	sbrs	r19, 0
    395e:	03 c0       	rjmp	.+6      	; 0x3966 <ProcessInput+0xcf2>
    3960:	01 96       	adiw	r24, 0x01	; 1
    3962:	a1 1d       	adc	r26, r1
    3964:	b1 1d       	adc	r27, r1
                    answer <<= (4 - whoami);            
    3966:	40 91 4d 38 	lds	r20, 0x384D	; 0x80384d <whoami>
    396a:	24 e0       	ldi	r18, 0x04	; 4
    396c:	30 e0       	ldi	r19, 0x00	; 0
    396e:	24 1b       	sub	r18, r20
    3970:	31 09       	sbc	r19, r1
    3972:	04 c0       	rjmp	.+8      	; 0x397c <ProcessInput+0xd08>
    3974:	88 0f       	add	r24, r24
    3976:	99 1f       	adc	r25, r25
    3978:	aa 1f       	adc	r26, r26
    397a:	bb 1f       	adc	r27, r27
    397c:	2a 95       	dec	r18
    397e:	d2 f7       	brpl	.-12     	; 0x3974 <ProcessInput+0xd00>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3980:	28 ec       	ldi	r18, 0xC8	; 200
    3982:	34 e7       	ldi	r19, 0x74	; 116
    3984:	20 93 2f 39 	sts	0x392F, r18	; 0x80392f <reactStr+0x2>
    3988:	30 93 30 39 	sts	0x3930, r19	; 0x803930 <reactStr+0x3>
    reactStr[1][number]=length;
    398c:	20 e2       	ldi	r18, 0x20	; 32
    398e:	30 e0       	ldi	r19, 0x00	; 0
    3990:	20 93 6f 39 	sts	0x396F, r18	; 0x80396f <reactStr+0x42>
    3994:	30 93 70 39 	sts	0x3970, r19	; 0x803970 <reactStr+0x43>
    reactStr[2][number]=type;
    3998:	21 e0       	ldi	r18, 0x01	; 1
    399a:	30 e0       	ldi	r19, 0x00	; 0
    399c:	20 93 af 39 	sts	0x39AF, r18	; 0x8039af <reactStr+0x82>
    39a0:	30 93 b0 39 	sts	0x39B0, r19	; 0x8039b0 <reactStr+0x83>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    39a4:	4d e9       	ldi	r20, 0x9D	; 157
    39a6:	54 e7       	ldi	r21, 0x74	; 116
    39a8:	40 93 31 39 	sts	0x3931, r20	; 0x803931 <reactStr+0x4>
    39ac:	50 93 32 39 	sts	0x3932, r21	; 0x803932 <reactStr+0x5>
    reactStr[1][number]=length;
    39b0:	42 e0       	ldi	r20, 0x02	; 2
    39b2:	50 e0       	ldi	r21, 0x00	; 0
    39b4:	40 93 71 39 	sts	0x3971, r20	; 0x803971 <reactStr+0x44>
    39b8:	50 93 72 39 	sts	0x3972, r21	; 0x803972 <reactStr+0x45>
    reactStr[2][number]=type;
    39bc:	20 93 b1 39 	sts	0x39B1, r18	; 0x8039b1 <reactStr+0x84>
    39c0:	30 93 b2 39 	sts	0x39B2, r19	; 0x8039b2 <reactStr+0x85>

                    SetResponse(elements++, A_YOURPART, L_YOURPART, TEASER);
                    SetResponse(elements++, A_HEXPREFIX, L_HEXPREFIX, TEASER);
                    
                    //Set up sending out number
                    for (n=7; n>=0; --n) {
    39c4:	07 e0       	ldi	r16, 0x07	; 7
                        digit[n] = answer % 16;
    39c6:	f7 01       	movw	r30, r14
    39c8:	e0 0f       	add	r30, r16
    39ca:	f1 1d       	adc	r31, r1
    39cc:	28 2f       	mov	r18, r24
    39ce:	2f 70       	andi	r18, 0x0F	; 15
    39d0:	20 83       	st	Z, r18
                        answer /= 16;
    39d2:	44 e0       	ldi	r20, 0x04	; 4
    39d4:	b6 95       	lsr	r27
    39d6:	a7 95       	ror	r26
    39d8:	97 95       	ror	r25
    39da:	87 95       	ror	r24
    39dc:	4a 95       	dec	r20
    39de:	d1 f7       	brne	.-12     	; 0x39d4 <ProcessInput+0xd60>
                        if (answer == 0) break;
    39e0:	00 97       	sbiw	r24, 0x00	; 0
    39e2:	a1 05       	cpc	r26, r1
    39e4:	b1 05       	cpc	r27, r1
    39e6:	49 f4       	brne	.+18     	; 0x39fa <ProcessInput+0xd86>
    39e8:	2d e2       	ldi	r18, 0x2D	; 45
    39ea:	c2 2e       	mov	r12, r18
    39ec:	29 e3       	ldi	r18, 0x39	; 57
    39ee:	d2 2e       	mov	r13, r18
    39f0:	13 e0       	ldi	r17, 0x03	; 3
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    reactStr[1][number]=length;
    39f2:	aa 24       	eor	r10, r10
    39f4:	a3 94       	inc	r10
    39f6:	b1 2c       	mov	r11, r1
    39f8:	02 c0       	rjmp	.+4      	; 0x39fe <ProcessInput+0xd8a>

                    SetResponse(elements++, A_YOURPART, L_YOURPART, TEASER);
                    SetResponse(elements++, A_HEXPREFIX, L_HEXPREFIX, TEASER);
                    
                    //Set up sending out number
                    for (n=7; n>=0; --n) {
    39fa:	01 50       	subi	r16, 0x01	; 1
                        digit[n] = answer % 16;
                        answer /= 16;
                        if (answer == 0) break;
                    }
    39fc:	e4 cf       	rjmp	.-56     	; 0x39c6 <ProcessInput+0xd52>
    39fe:	b2 e0       	ldi	r27, 0x02	; 2
    3a00:	cb 0e       	add	r12, r27
    3a02:	d1 1c       	adc	r13, r1

                    for (; n<8; ++n) {
    3a04:	08 30       	cpi	r16, 0x08	; 8
    3a06:	08 f0       	brcs	.+2      	; 0x3a0a <ProcessInput+0xd96>
    3a08:	9e c0       	rjmp	.+316    	; 0x3b46 <ProcessInput+0xed2>
                        SetResponse(elements++, A_DIGITS+digit[n], 1, TEASER);
    3a0a:	1f 5f       	subi	r17, 0xFF	; 255
    3a0c:	f7 01       	movw	r30, r14
    3a0e:	e0 0f       	add	r30, r16
    3a10:	f1 1d       	adc	r31, r1
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3a12:	80 81       	ld	r24, Z
    3a14:	90 e0       	ldi	r25, 0x00	; 0
    3a16:	83 57       	subi	r24, 0x73	; 115
    3a18:	9b 48       	sbci	r25, 0x8B	; 139
    3a1a:	d6 01       	movw	r26, r12
    3a1c:	14 96       	adiw	r26, 0x04	; 4
    3a1e:	8d 93       	st	X+, r24
    3a20:	9c 93       	st	X, r25
    3a22:	15 97       	sbiw	r26, 0x05	; 5
    reactStr[1][number]=length;
    3a24:	f6 01       	movw	r30, r12
    3a26:	ec 5b       	subi	r30, 0xBC	; 188
    3a28:	ff 4f       	sbci	r31, 0xFF	; 255
    3a2a:	a0 82       	st	Z, r10
    3a2c:	b1 82       	std	Z+1, r11	; 0x01
    reactStr[2][number]=type;
    3a2e:	e0 5c       	subi	r30, 0xC0	; 192
    3a30:	ff 4f       	sbci	r31, 0xFF	; 255
    3a32:	a0 82       	st	Z, r10
    3a34:	b1 82       	std	Z+1, r11	; 0x01
                        if (answer == 0) break;
                    }

                    for (; n<8; ++n) {
                        SetResponse(elements++, A_DIGITS+digit[n], 1, TEASER);
                        UpdateState(actObj1.byteField[ACTION_STATE]);
    3a36:	80 91 f6 38 	lds	r24, 0x38F6	; 0x8038f6 <actObj1.3956+0xa>
    3a3a:	0e 94 3e 09 	call	0x127c	; 0x127c <UpdateState>
                        digit[n] = answer % 16;
                        answer /= 16;
                        if (answer == 0) break;
                    }

                    for (; n<8; ++n) {
    3a3e:	0f 5f       	subi	r16, 0xFF	; 255
    3a40:	de cf       	rjmp	.-68     	; 0x39fe <ProcessInput+0xd8a>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3a42:	88 ee       	ldi	r24, 0xE8	; 232
    3a44:	94 e7       	ldi	r25, 0x74	; 116
    3a46:	80 93 2f 39 	sts	0x392F, r24	; 0x80392f <reactStr+0x2>
    3a4a:	90 93 30 39 	sts	0x3930, r25	; 0x803930 <reactStr+0x3>
    reactStr[1][number]=length;
    3a4e:	8d e3       	ldi	r24, 0x3D	; 61
    3a50:	90 e0       	ldi	r25, 0x00	; 0
    3a52:	80 93 6f 39 	sts	0x396F, r24	; 0x80396f <reactStr+0x42>
    3a56:	90 93 70 39 	sts	0x3970, r25	; 0x803970 <reactStr+0x43>
    reactStr[2][number]=type;
    3a5a:	81 e0       	ldi	r24, 0x01	; 1
    3a5c:	90 e0       	ldi	r25, 0x00	; 0
    3a5e:	80 93 af 39 	sts	0x39AF, r24	; 0x8039af <reactStr+0x82>
    3a62:	90 93 b0 39 	sts	0x39B0, r25	; 0x8039b0 <reactStr+0x83>
    3a66:	6e c0       	rjmp	.+220    	; 0x3b44 <ProcessInput+0xed0>
    3a68:	e0 91 3e 38 	lds	r30, 0x383E	; 0x80383e <currDepth>
                    SetResponse(elements++, A_BADOFFERING, L_BADOFFERING, TEASER);
                }
            
            //Other questions    
            } else if (specialPassed == 1) {
                PopulateObject(route[currDepth+1], &actObj1);
    3a6c:	f0 e0       	ldi	r31, 0x00	; 0
    3a6e:	ee 0f       	add	r30, r30
    3a70:	ff 1f       	adc	r31, r31
    3a72:	e1 51       	subi	r30, 0x11	; 17
    3a74:	f6 4c       	sbci	r31, 0xC6	; 198
    3a76:	6c ee       	ldi	r22, 0xEC	; 236
    3a78:	78 e3       	ldi	r23, 0x38	; 56
                } else {
                    SetResponse(elements++, A_BADOFFERING, L_BADOFFERING, TEASER);
                }
            
            //Other questions    
            } else if (specialPassed == 1) {
    3a7a:	81 30       	cpi	r24, 0x01	; 1
    3a7c:	09 f0       	breq	.+2      	; 0x3a80 <ProcessInput+0xe0c>
    3a7e:	46 c0       	rjmp	.+140    	; 0x3b0c <ProcessInput+0xe98>
                PopulateObject(route[currDepth+1], &actObj1);
    3a80:	80 81       	ld	r24, Z
    3a82:	91 81       	ldd	r25, Z+1	; 0x01
    3a84:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <PopulateObject>
                if (CheckState(actObj1.byteField[ACTION_ACL])){
    3a88:	80 91 f3 38 	lds	r24, 0x38F3	; 0x8038f3 <actObj1.3956+0x7>
    3a8c:	0e 94 5f 09 	call	0x12be	; 0x12be <CheckState>
    3a90:	88 23       	and	r24, r24
    3a92:	01 f1       	breq	.+64     	; 0x3ad4 <ProcessInput+0xe60>
                    SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    3a94:	80 91 12 39 	lds	r24, 0x3912	; 0x803912 <actObj1.3956+0x26>
    3a98:	90 91 13 39 	lds	r25, 0x3913	; 0x803913 <actObj1.3956+0x27>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3a9c:	20 91 04 39 	lds	r18, 0x3904	; 0x803904 <actObj1.3956+0x18>
    3aa0:	30 91 05 39 	lds	r19, 0x3905	; 0x803905 <actObj1.3956+0x19>
    3aa4:	20 93 2f 39 	sts	0x392F, r18	; 0x80392f <reactStr+0x2>
    3aa8:	30 93 30 39 	sts	0x3930, r19	; 0x803930 <reactStr+0x3>
    reactStr[1][number]=length;
    3aac:	80 93 6f 39 	sts	0x396F, r24	; 0x80396f <reactStr+0x42>
    3ab0:	90 93 70 39 	sts	0x3970, r25	; 0x803970 <reactStr+0x43>
    reactStr[2][number]=type;
    3ab4:	10 92 af 39 	sts	0x39AF, r1	; 0x8039af <reactStr+0x82>
    3ab8:	10 92 b0 39 	sts	0x39B0, r1	; 0x8039b0 <reactStr+0x83>
            //Other questions    
            } else if (specialPassed == 1) {
                PopulateObject(route[currDepth+1], &actObj1);
                if (CheckState(actObj1.byteField[ACTION_ACL])){
                    SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                    effect = actObj1.effect[2];
    3abc:	80 91 16 39 	lds	r24, 0x3916	; 0x803916 <actObj1.3956+0x2a>
    3ac0:	90 e0       	ldi	r25, 0x00	; 0
    3ac2:	80 93 4a 38 	sts	0x384A, r24	; 0x80384a <effect>
    3ac6:	90 93 4b 38 	sts	0x384B, r25	; 0x80384b <effect+0x1>
                    UpdateState(actObj1.byteField[ACTION_STATE]);
    3aca:	80 91 f6 38 	lds	r24, 0x38F6	; 0x8038f6 <actObj1.3956+0xa>
    3ace:	0e 94 3e 09 	call	0x127c	; 0x127c <UpdateState>
    3ad2:	38 c0       	rjmp	.+112    	; 0x3b44 <ProcessInput+0xed0>
                } else {
                    SetResponse(elements++, actObj1.addrStr[ACTION_ACL_MSG], actObj1.lenStr[ACTION_ACL_MSG], GAME);
    3ad4:	80 91 10 39 	lds	r24, 0x3910	; 0x803910 <actObj1.3956+0x24>
    3ad8:	90 91 11 39 	lds	r25, 0x3911	; 0x803911 <actObj1.3956+0x25>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3adc:	20 91 02 39 	lds	r18, 0x3902	; 0x803902 <actObj1.3956+0x16>
    3ae0:	30 91 03 39 	lds	r19, 0x3903	; 0x803903 <actObj1.3956+0x17>
    3ae4:	20 93 2f 39 	sts	0x392F, r18	; 0x80392f <reactStr+0x2>
    3ae8:	30 93 30 39 	sts	0x3930, r19	; 0x803930 <reactStr+0x3>
    reactStr[1][number]=length;
    3aec:	80 93 6f 39 	sts	0x396F, r24	; 0x80396f <reactStr+0x42>
    3af0:	90 93 70 39 	sts	0x3970, r25	; 0x803970 <reactStr+0x43>
    reactStr[2][number]=type;
    3af4:	10 92 af 39 	sts	0x39AF, r1	; 0x8039af <reactStr+0x82>
    3af8:	10 92 b0 39 	sts	0x39B0, r1	; 0x8039b0 <reactStr+0x83>
                    SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                    effect = actObj1.effect[2];
                    UpdateState(actObj1.byteField[ACTION_STATE]);
                } else {
                    SetResponse(elements++, actObj1.addrStr[ACTION_ACL_MSG], actObj1.lenStr[ACTION_ACL_MSG], GAME);
                    effect = actObj1.effect[1];
    3afc:	80 91 15 39 	lds	r24, 0x3915	; 0x803915 <actObj1.3956+0x29>
    3b00:	90 e0       	ldi	r25, 0x00	; 0
    3b02:	80 93 4a 38 	sts	0x384A, r24	; 0x80384a <effect>
    3b06:	90 93 4b 38 	sts	0x384B, r25	; 0x80384b <effect+0x1>
    3b0a:	1c c0       	rjmp	.+56     	; 0x3b44 <ProcessInput+0xed0>
                }

            } else {
                PopulateObject(route[currDepth+1], &actObj1);
    3b0c:	80 81       	ld	r24, Z
    3b0e:	91 81       	ldd	r25, Z+1	; 0x01
    3b10:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <PopulateObject>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3b14:	80 e6       	ldi	r24, 0x60	; 96
    3b16:	98 e7       	ldi	r25, 0x78	; 120
    3b18:	80 93 2f 39 	sts	0x392F, r24	; 0x80392f <reactStr+0x2>
    3b1c:	90 93 30 39 	sts	0x3930, r25	; 0x803930 <reactStr+0x3>
    reactStr[1][number]=length;
    3b20:	8d e4       	ldi	r24, 0x4D	; 77
    3b22:	90 e0       	ldi	r25, 0x00	; 0
    3b24:	80 93 6f 39 	sts	0x396F, r24	; 0x80396f <reactStr+0x42>
    3b28:	90 93 70 39 	sts	0x3970, r25	; 0x803970 <reactStr+0x43>
    reactStr[2][number]=type;
    3b2c:	81 e0       	ldi	r24, 0x01	; 1
    3b2e:	90 e0       	ldi	r25, 0x00	; 0
    3b30:	80 93 af 39 	sts	0x39AF, r24	; 0x8039af <reactStr+0x82>
    3b34:	90 93 b0 39 	sts	0x39B0, r25	; 0x8039b0 <reactStr+0x83>
                }

            } else {
                PopulateObject(route[currDepth+1], &actObj1);
                SetResponse(elements++, A_INCORRECT, L_INCORRECT, TEASER);
                PunishmentTime = getClock();
    3b38:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <getClock>
    3b3c:	80 93 19 39 	sts	0x3919, r24	; 0x803919 <PunishmentTime>
    3b40:	90 93 1a 39 	sts	0x391A, r25	; 0x80391a <PunishmentTime+0x1>
                    effect = actObj1.effect[1];
                }

            } else {
                PopulateObject(route[currDepth+1], &actObj1);
                SetResponse(elements++, A_INCORRECT, L_INCORRECT, TEASER);
    3b44:	12 e0       	ldi	r17, 0x02	; 2
                PunishmentTime = getClock();
            }
            specialInput[0] = 0;
    3b46:	10 92 1c 39 	sts	0x391C, r1	; 0x80391c <specialInput>

        }
                    
        //Input handled
        if (specialInput[0]) responseList = elements; else responseList = SetStandardResponse(elements);
    3b4a:	80 91 1c 39 	lds	r24, 0x391C	; 0x80391c <specialInput>
    3b4e:	88 23       	and	r24, r24
    3b50:	19 f0       	breq	.+6      	; 0x3b58 <ProcessInput+0xee4>
    3b52:	10 93 2c 39 	sts	0x392C, r17	; 0x80392c <responseList>
    3b56:	8b c0       	rjmp	.+278    	; 0x3c6e <ProcessInput+0xffa>
    3b58:	81 2f       	mov	r24, r17
    3b5a:	01 c0       	rjmp	.+2      	; 0x3b5e <ProcessInput+0xeea>

    } else {

        responseList = SetStandardResponse(1);
    3b5c:	81 e0       	ldi	r24, 0x01	; 1
    3b5e:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <SetStandardResponse>
    3b62:	80 93 2c 39 	sts	0x392C, r24	; 0x80392c <responseList>
    3b66:	83 c0       	rjmp	.+262    	; 0x3c6e <ProcessInput+0xffa>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3b68:	81 ed       	ldi	r24, 0xD1	; 209
    3b6a:	99 e7       	ldi	r25, 0x79	; 121
    3b6c:	80 93 2f 39 	sts	0x392F, r24	; 0x80392f <reactStr+0x2>
    3b70:	90 93 30 39 	sts	0x3930, r25	; 0x803930 <reactStr+0x3>
    reactStr[1][number]=length;
    3b74:	8a e1       	ldi	r24, 0x1A	; 26
    3b76:	90 e0       	ldi	r25, 0x00	; 0
    3b78:	45 c9       	rjmp	.-3446   	; 0x2e04 <ProcessInput+0x190>

        //Drop item if in inventory
        if (data[0] == 'd') {
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
    3b7a:	f2 e0       	ldi	r31, 0x02	; 2
    3b7c:	ff 12       	cpse	r15, r31
    3b7e:	ad c8       	rjmp	.-3750   	; 0x2cda <ProcessInput+0x66>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
                        if (CheckLetter(inventory[x], data[1])) {
    3b80:	f3 01       	movw	r30, r6
    3b82:	61 81       	ldd	r22, Z+1	; 0x01
    3b84:	0e 94 71 12 	call	0x24e2	; 0x24e2 <CheckLetter>
    3b88:	88 23       	and	r24, r24
    3b8a:	09 f4       	brne	.+2      	; 0x3b8e <ProcessInput+0xf1a>
    3b8c:	58 c0       	rjmp	.+176    	; 0x3c3e <ProcessInput+0xfca>
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
    3b8e:	00 e0       	ldi	r16, 0x00	; 0
    3b90:	10 e0       	ldi	r17, 0x00	; 0
                        if (CheckLetter(inventory[x], data[1])) {
                            PopulateObject(inventory[x], &actObj1);
    3b92:	00 0f       	add	r16, r16
    3b94:	11 1f       	adc	r17, r17
    3b96:	02 5b       	subi	r16, 0xB2	; 178
    3b98:	17 4c       	sbci	r17, 0xC7	; 199
    3b9a:	6c ee       	ldi	r22, 0xEC	; 236
    3b9c:	78 e3       	ldi	r23, 0x38	; 56
    3b9e:	d8 01       	movw	r26, r16
    3ba0:	8d 91       	ld	r24, X+
    3ba2:	9c 91       	ld	r25, X
    3ba4:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <PopulateObject>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3ba8:	86 e9       	ldi	r24, 0x96	; 150
    3baa:	97 e7       	ldi	r25, 0x77	; 119
    3bac:	80 93 2f 39 	sts	0x392F, r24	; 0x80392f <reactStr+0x2>
    3bb0:	90 93 30 39 	sts	0x3930, r25	; 0x803930 <reactStr+0x3>
    reactStr[1][number]=length;
    3bb4:	80 e1       	ldi	r24, 0x10	; 16
    3bb6:	90 e0       	ldi	r25, 0x00	; 0
    3bb8:	80 93 6f 39 	sts	0x396F, r24	; 0x80396f <reactStr+0x42>
    3bbc:	90 93 70 39 	sts	0x3970, r25	; 0x803970 <reactStr+0x43>
    reactStr[2][number]=type;
    3bc0:	81 e0       	ldi	r24, 0x01	; 1
    3bc2:	90 e0       	ldi	r25, 0x00	; 0
    3bc4:	80 93 af 39 	sts	0x39AF, r24	; 0x8039af <reactStr+0x82>
    3bc8:	90 93 b0 39 	sts	0x39B0, r25	; 0x8039b0 <reactStr+0x83>
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
                        if (CheckLetter(inventory[x], data[1])) {
                            PopulateObject(inventory[x], &actObj1);
                            SetResponse(elements++, A_DROPPING, L_DROPPING, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    3bcc:	20 91 06 39 	lds	r18, 0x3906	; 0x803906 <actObj1.3956+0x1a>
    3bd0:	30 91 07 39 	lds	r19, 0x3907	; 0x803907 <actObj1.3956+0x1b>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3bd4:	40 91 f8 38 	lds	r20, 0x38F8	; 0x8038f8 <actObj1.3956+0xc>
    3bd8:	50 91 f9 38 	lds	r21, 0x38F9	; 0x8038f9 <actObj1.3956+0xd>
    3bdc:	40 93 31 39 	sts	0x3931, r20	; 0x803931 <reactStr+0x4>
    3be0:	50 93 32 39 	sts	0x3932, r21	; 0x803932 <reactStr+0x5>
    reactStr[1][number]=length;
    3be4:	20 93 71 39 	sts	0x3971, r18	; 0x803971 <reactStr+0x44>
    3be8:	30 93 72 39 	sts	0x3972, r19	; 0x803972 <reactStr+0x45>
    reactStr[2][number]=type;
    3bec:	10 92 b1 39 	sts	0x39B1, r1	; 0x8039b1 <reactStr+0x84>
    3bf0:	10 92 b2 39 	sts	0x39B2, r1	; 0x8039b2 <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3bf4:	29 e5       	ldi	r18, 0x59	; 89
    3bf6:	3a e7       	ldi	r19, 0x7A	; 122
    3bf8:	20 93 33 39 	sts	0x3933, r18	; 0x803933 <reactStr+0x6>
    3bfc:	30 93 34 39 	sts	0x3934, r19	; 0x803934 <reactStr+0x7>
    reactStr[1][number]=length;
    3c00:	22 e0       	ldi	r18, 0x02	; 2
    3c02:	30 e0       	ldi	r19, 0x00	; 0
    3c04:	20 93 73 39 	sts	0x3973, r18	; 0x803973 <reactStr+0x46>
    3c08:	30 93 74 39 	sts	0x3974, r19	; 0x803974 <reactStr+0x47>
    reactStr[2][number]=type;
    3c0c:	80 93 b3 39 	sts	0x39B3, r24	; 0x8039b3 <reactStr+0x86>
    3c10:	90 93 b4 39 	sts	0x39B4, r25	; 0x8039b4 <reactStr+0x87>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3c14:	29 e5       	ldi	r18, 0x59	; 89
    3c16:	37 e7       	ldi	r19, 0x77	; 119
    3c18:	20 93 35 39 	sts	0x3935, r18	; 0x803935 <reactStr+0x8>
    3c1c:	30 93 36 39 	sts	0x3936, r19	; 0x803936 <reactStr+0x9>
    reactStr[1][number]=length;
    3c20:	2d e3       	ldi	r18, 0x3D	; 61
    3c22:	30 e0       	ldi	r19, 0x00	; 0
    3c24:	20 93 75 39 	sts	0x3975, r18	; 0x803975 <reactStr+0x48>
    3c28:	30 93 76 39 	sts	0x3976, r19	; 0x803976 <reactStr+0x49>
    reactStr[2][number]=type;
    3c2c:	80 93 b5 39 	sts	0x39B5, r24	; 0x8039b5 <reactStr+0x88>
    3c30:	90 93 b6 39 	sts	0x39B6, r25	; 0x8039b6 <reactStr+0x89>
                            PopulateObject(inventory[x], &actObj1);
                            SetResponse(elements++, A_DROPPING, L_DROPPING, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                            SetResponse(elements++, A_LF, 2, TEASER);
                            SetResponse(elements++, A_RETURNING, L_RETURNING, TEASER);
                            inventory[x] = 0;
    3c34:	f8 01       	movw	r30, r16
    3c36:	10 82       	st	Z, r1
    3c38:	11 82       	std	Z+1, r1	; 0x01
                        if (CheckLetter(inventory[x], data[1])) {
                            PopulateObject(inventory[x], &actObj1);
                            SetResponse(elements++, A_DROPPING, L_DROPPING, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                            SetResponse(elements++, A_LF, 2, TEASER);
                            SetResponse(elements++, A_RETURNING, L_RETURNING, TEASER);
    3c3a:	15 e0       	ldi	r17, 0x05	; 5
                            inventory[x] = 0;
                            break;
    3c3c:	86 cf       	rjmp	.-244    	; 0x3b4a <ProcessInput+0xed6>
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
    3c3e:	80 91 50 38 	lds	r24, 0x3850	; 0x803850 <inventory+0x2>
    3c42:	90 91 51 38 	lds	r25, 0x3851	; 0x803851 <inventory+0x3>
    3c46:	00 97       	sbiw	r24, 0x00	; 0
    3c48:	49 f0       	breq	.+18     	; 0x3c5c <ProcessInput+0xfe8>
                        if (CheckLetter(inventory[x], data[1])) {
    3c4a:	f3 01       	movw	r30, r6
    3c4c:	61 81       	ldd	r22, Z+1	; 0x01
    3c4e:	0e 94 71 12 	call	0x24e2	; 0x24e2 <CheckLetter>
    3c52:	88 23       	and	r24, r24
    3c54:	19 f0       	breq	.+6      	; 0x3c5c <ProcessInput+0xfe8>
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
    3c56:	01 e0       	ldi	r16, 0x01	; 1
    3c58:	10 e0       	ldi	r17, 0x00	; 0
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3c5a:	9b cf       	rjmp	.-202    	; 0x3b92 <ProcessInput+0xf1e>
    3c5c:	81 e6       	ldi	r24, 0x61	; 97
    3c5e:	99 e7       	ldi	r25, 0x79	; 121
    3c60:	80 93 2f 39 	sts	0x392F, r24	; 0x80392f <reactStr+0x2>
    3c64:	90 93 30 39 	sts	0x3930, r25	; 0x803930 <reactStr+0x3>
    reactStr[1][number]=length;
    3c68:	81 e2       	ldi	r24, 0x21	; 33
    3c6a:	90 e0       	ldi	r25, 0x00	; 0
    } else {

        responseList = SetStandardResponse(1);
    }

    data[0] = 0;
    3c6c:	cb c8       	rjmp	.-3690   	; 0x2e04 <ProcessInput+0x190>
    3c6e:	f3 01       	movw	r30, r6
    serRxDone = 0;
    3c70:	10 82       	st	Z, r1
    3c72:	10 92 55 38 	sts	0x3855, r1	; 0x803855 <serRxDone>
    RXCNT = 0;    
    return 0;
}
    3c76:	1d ba       	out	0x1d, r1	; 29
    3c78:	80 e0       	ldi	r24, 0x00	; 0
    3c7a:	28 96       	adiw	r28, 0x08	; 8
    3c7c:	ee e0       	ldi	r30, 0x0E	; 14
    3c7e:	37 c1       	rjmp	.+622    	; 0x3eee <__epilogue_restores__+0x8>

00003c80 <TextAdventure>:


//MAIN GAME STRUCTURE
uint8_t TextAdventure(){
    3c80:	cf 93       	push	r28
    static uint8_t serInput[RXLEN];
    uint16_t PunishmentCount;
    
    /* Count down PunishmentTime on WING LEDs */
    if (PunishmentTime != 0) {
    3c82:	80 91 19 39 	lds	r24, 0x3919	; 0x803919 <PunishmentTime>
    3c86:	90 91 1a 39 	lds	r25, 0x391A	; 0x80391a <PunishmentTime+0x1>
    3c8a:	89 2b       	or	r24, r25
    3c8c:	09 f1       	breq	.+66     	; 0x3cd0 <TextAdventure+0x50>
        PunishmentCount = getClock();
    3c8e:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <getClock>
        if (PunishmentCount < PunishmentTime)
    3c92:	20 91 19 39 	lds	r18, 0x3919	; 0x803919 <PunishmentTime>
    3c96:	30 91 1a 39 	lds	r19, 0x391A	; 0x80391a <PunishmentTime+0x1>
    3c9a:	82 17       	cp	r24, r18
    3c9c:	93 07       	cpc	r25, r19
    3c9e:	08 f4       	brcc	.+2      	; 0x3ca2 <TextAdventure+0x22>
            PunishmentCount += 256 * 60;
    3ca0:	94 5c       	subi	r25, 0xC4	; 196
        PunishmentCount -= PunishmentTime;
    3ca2:	ac 01       	movw	r20, r24
    3ca4:	42 1b       	sub	r20, r18
    3ca6:	53 0b       	sbc	r21, r19
    3ca8:	9a 01       	movw	r18, r20
        if (PunishmentCount > 10) {
    3caa:	4b 30       	cpi	r20, 0x0B	; 11
    3cac:	51 05       	cpc	r21, r1
    3cae:	30 f0       	brcs	.+12     	; 0x3cbc <TextAdventure+0x3c>
            PunishmentTime = 0;
    3cb0:	10 92 19 39 	sts	0x3919, r1	; 0x803919 <PunishmentTime>
    3cb4:	10 92 1a 39 	sts	0x391A, r1	; 0x80391a <PunishmentTime+0x1>
            PunishmentCount = 10;
    3cb8:	2a e0       	ldi	r18, 0x0A	; 10
    3cba:	30 e0       	ldi	r19, 0x00	; 0
        }
        if (gameNow == TEXT ) {
    3cbc:	80 91 4c 38 	lds	r24, 0x384C	; 0x80384c <gameNow>
    3cc0:	81 11       	cpse	r24, r1
    3cc2:	06 c0       	rjmp	.+12     	; 0x3cd0 <TextAdventure+0x50>
            WingBar(10-PunishmentCount,5-PunishmentCount);
    3cc4:	65 e0       	ldi	r22, 0x05	; 5
    3cc6:	62 1b       	sub	r22, r18
    3cc8:	8a e0       	ldi	r24, 0x0A	; 10
    3cca:	82 1b       	sub	r24, r18
    3ccc:	0e 94 49 0a 	call	0x1492	; 0x1492 <WingBar>
        }
    }

    //Still sending data to serial?
    if (CheckSend()) return 1;
    3cd0:	0e 94 49 13 	call	0x2692	; 0x2692 <CheckSend>
    3cd4:	88 23       	and	r24, r24
    3cd6:	11 f0       	breq	.+4      	; 0x3cdc <TextAdventure+0x5c>
    3cd8:	c1 e0       	ldi	r28, 0x01	; 1
    3cda:	18 c0       	rjmp	.+48     	; 0x3d0c <TextAdventure+0x8c>

    //Not sending? Process next response part to send, if any.
    if (CheckResponse()) return 1;        
    3cdc:	0e 94 9f 13 	call	0x273e	; 0x273e <CheckResponse>
    3ce0:	c8 2f       	mov	r28, r24
    3ce2:	81 11       	cpse	r24, r1
    3ce4:	f9 cf       	rjmp	.-14     	; 0x3cd8 <TextAdventure+0x58>

    if (PunishmentTime == 0) {
    3ce6:	80 91 19 39 	lds	r24, 0x3919	; 0x803919 <PunishmentTime>
    3cea:	90 91 1a 39 	lds	r25, 0x391A	; 0x80391a <PunishmentTime+0x1>
    3cee:	89 2b       	or	r24, r25
    3cf0:	69 f4       	brne	.+26     	; 0x3d0c <TextAdventure+0x8c>
        //No responses to send, check if there is user input.
        if (CheckInput(&serInput[0])) return 2; 
    3cf2:	80 e8       	ldi	r24, 0x80	; 128
    3cf4:	98 e3       	ldi	r25, 0x38	; 56
    3cf6:	0e 94 df 13 	call	0x27be	; 0x27be <CheckInput>
    3cfa:	c8 2f       	mov	r28, r24
    3cfc:	81 11       	cpse	r24, r1
    3cfe:	05 c0       	rjmp	.+10     	; 0x3d0a <TextAdventure+0x8a>

        //Input found, process and save (changes only)
        ProcessInput(&serInput[0]);
    3d00:	80 e8       	ldi	r24, 0x80	; 128
    3d02:	98 e3       	ldi	r25, 0x38	; 56
    3d04:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <ProcessInput>
    3d08:	01 c0       	rjmp	.+2      	; 0x3d0c <TextAdventure+0x8c>
    //Not sending? Process next response part to send, if any.
    if (CheckResponse()) return 1;        

    if (PunishmentTime == 0) {
        //No responses to send, check if there is user input.
        if (CheckInput(&serInput[0])) return 2; 
    3d0a:	c2 e0       	ldi	r28, 0x02	; 2
        //Input found, process and save (changes only)
        ProcessInput(&serInput[0]);
    }

    return 0;
}
    3d0c:	8c 2f       	mov	r24, r28
    3d0e:	cf 91       	pop	r28
    3d10:	08 95       	ret

00003d12 <main>:


//This is where it begins, inits first and main program in while(1) loop.
int main(void)
{
    Setup();
    3d12:	0e 94 98 03 	call	0x730	; 0x730 <Setup>
    LoadGameState();
    3d16:	0e 94 ba 09 	call	0x1374	; 0x1374 <LoadGameState>
    gameState[0]|=1;
    3d1a:	80 91 73 3a 	lds	r24, 0x3A73	; 0x803a73 <gameState>
    3d1e:	81 60       	ori	r24, 0x01	; 1
    3d20:	80 93 73 3a 	sts	0x3A73, r24	; 0x803a73 <gameState>

    //Check if fine
    if (SelfTest()) {
    3d24:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <SelfTest>
    3d28:	88 23       	and	r24, r24
    3d2a:	21 f0       	breq	.+8      	; 0x3d34 <main+0x22>
        WipeAfterBoot(1);
    3d2c:	81 e0       	ldi	r24, 0x01	; 1
    3d2e:	0e 94 7e 09 	call	0x12fc	; 0x12fc <WipeAfterBoot>
    3d32:	ff cf       	rjmp	.-2      	; 0x3d32 <main+0x20>
    3d34:	c0 91 36 bf 	lds	r28, 0xBF36	; 0x80bf36 <__bss_end+0x840f>
                if (buttonState != 0xff) {
                    iLED[CAT] = dimValue;
                    if ((effect & 0xffe0)==0)
                        effect = 0x13f + (buttonState << 5);
                } else {
                    iLED[CAT] = 0;
    3d38:	d0 e0       	ldi	r29, 0x00	; 0
    3d3a:	c8 52       	subi	r28, 0x28	; 40
    3d3c:	d5 4c       	sbci	r29, 0xC5	; 197
                if (lightsensorSum>>6 < 128) {
                    dimValue = lightsensorSum>>5;
                    if (dimValue < 8)
                        dimValue = 8;
                } else {
                    dimValue = 255;
    3d3e:	1f ef       	ldi	r17, 0xFF	; 255
                lightsensorSum -= (lightsensorSum>>6);
                lightsensorSum += adcPhot>>4;
                if (lightsensorSum>>6 < 128) {
                    dimValue = lightsensorSum>>5;
                    if (dimValue < 8)
                        dimValue = 8;
    3d40:	08 e0       	ldi	r16, 0x08	; 8

    //Startup
    } else {

        while (TRUE) {
            if (GenerateAudio()) {
    3d42:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <GenerateAudio>
    3d46:	88 23       	and	r24, r24
    3d48:	e1 f3       	breq	.-8      	; 0x3d42 <main+0x30>

                //Some sound effects and button readout 
                lastButtonState = buttonState;
    3d4a:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <buttonState>
    3d4e:	80 93 07 38 	sts	0x3807, r24	; 0x803807 <lastButtonState>
                buttonState = CheckButtons();
    3d52:	0e 94 0a 08 	call	0x1014	; 0x1014 <CheckButtons>
    3d56:	80 93 08 38 	sts	0x3808, r24	; 0x803808 <buttonState>
                if (buttonState != 0xff) {
    3d5a:	8f 3f       	cpi	r24, 0xFF	; 255
    3d5c:	a9 f0       	breq	.+42     	; 0x3d88 <main+0x76>
                    iLED[CAT] = dimValue;
    3d5e:	90 91 0c 38 	lds	r25, 0x380C	; 0x80380c <dimValue>
    3d62:	98 83       	st	Y, r25
                    if ((effect & 0xffe0)==0)
    3d64:	20 91 4a 38 	lds	r18, 0x384A	; 0x80384a <effect>
    3d68:	30 91 4b 38 	lds	r19, 0x384B	; 0x80384b <effect+0x1>
    3d6c:	20 7e       	andi	r18, 0xE0	; 224
    3d6e:	23 2b       	or	r18, r19
    3d70:	61 f4       	brne	.+24     	; 0x3d8a <main+0x78>
                        effect = 0x13f + (buttonState << 5);
    3d72:	20 e2       	ldi	r18, 0x20	; 32
    3d74:	82 9f       	mul	r24, r18
    3d76:	c0 01       	movw	r24, r0
    3d78:	11 24       	eor	r1, r1
    3d7a:	81 5c       	subi	r24, 0xC1	; 193
    3d7c:	9e 4f       	sbci	r25, 0xFE	; 254
    3d7e:	80 93 4a 38 	sts	0x384A, r24	; 0x80384a <effect>
    3d82:	90 93 4b 38 	sts	0x384B, r25	; 0x80384b <effect+0x1>
    3d86:	01 c0       	rjmp	.+2      	; 0x3d8a <main+0x78>
                } else {
                    iLED[CAT] = 0;
    3d88:	18 82       	st	Y, r1
                }
                --buttonMark;
    3d8a:	80 91 52 38 	lds	r24, 0x3852	; 0x803852 <buttonMark>
    3d8e:	81 50       	subi	r24, 0x01	; 1
    3d90:	80 93 52 38 	sts	0x3852, r24	; 0x803852 <buttonMark>

                //Switch between audio port input (badge to badge comms) and onboard temperature sensor
                if (VREF_CTRLA == 0x12) SelectAuIn(); else SelectTSens();
    3d94:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    3d98:	82 31       	cpi	r24, 0x12	; 18
    3d9a:	19 f4       	brne	.+6      	; 0x3da2 <main+0x90>
    3d9c:	0e 94 fb 07 	call	0xff6	; 0xff6 <SelectAuIn>
    3da0:	02 c0       	rjmp	.+4      	; 0x3da6 <main+0x94>
    3da2:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <SelectTSens>

                //Victory dance when the game is completed
                if ((gameNow == TEXT) &&
    3da6:	80 91 4c 38 	lds	r24, 0x384C	; 0x80384c <gameNow>
    3daa:	81 11       	cpse	r24, r1
    3dac:	19 c0       	rjmp	.+50     	; 0x3de0 <main+0xce>
    3dae:	80 91 7d 3a 	lds	r24, 0x3A7D	; 0x803a7d <gameState+0xa>
    3db2:	81 11       	cpse	r24, r1
    3db4:	15 c0       	rjmp	.+42     	; 0x3de0 <main+0xce>
                     (gameState[10] == 0) &&    // No "all ones" EEPROM failure (due to glitching etc.) detected
                     CheckState(122) &&         // Finished BastetDictates
    3db6:	8a e7       	ldi	r24, 0x7A	; 122
    3db8:	0e 94 5f 09 	call	0x12be	; 0x12be <CheckState>
                //Switch between audio port input (badge to badge comms) and onboard temperature sensor
                if (VREF_CTRLA == 0x12) SelectAuIn(); else SelectTSens();

                //Victory dance when the game is completed
                if ((gameNow == TEXT) &&
                     (gameState[10] == 0) &&    // No "all ones" EEPROM failure (due to glitching etc.) detected
    3dbc:	88 23       	and	r24, r24
    3dbe:	81 f0       	breq	.+32     	; 0x3de0 <main+0xce>
                     CheckState(122) &&         // Finished BastetDictates
                     CheckState(123) &&         // Finished Lanyard
    3dc0:	8b e7       	ldi	r24, 0x7B	; 123
    3dc2:	0e 94 5f 09 	call	0x12be	; 0x12be <CheckState>
                if (VREF_CTRLA == 0x12) SelectAuIn(); else SelectTSens();

                //Victory dance when the game is completed
                if ((gameNow == TEXT) &&
                     (gameState[10] == 0) &&    // No "all ones" EEPROM failure (due to glitching etc.) detected
                     CheckState(122) &&         // Finished BastetDictates
    3dc6:	88 23       	and	r24, r24
    3dc8:	59 f0       	breq	.+22     	; 0x3de0 <main+0xce>
                     CheckState(123) &&         // Finished Lanyard
                     CheckState(124) &&         // Connected to 3 others
    3dca:	8c e7       	ldi	r24, 0x7C	; 124
    3dcc:	0e 94 5f 09 	call	0x12be	; 0x12be <CheckState>

                //Victory dance when the game is completed
                if ((gameNow == TEXT) &&
                     (gameState[10] == 0) &&    // No "all ones" EEPROM failure (due to glitching etc.) detected
                     CheckState(122) &&         // Finished BastetDictates
                     CheckState(123) &&         // Finished Lanyard
    3dd0:	88 23       	and	r24, r24
    3dd2:	31 f0       	breq	.+12     	; 0x3de0 <main+0xce>
                     CheckState(124) &&         // Connected to 3 others
                     CheckState(127)) {         // Finished the text adventure (implies state 125 and 126)
    3dd4:	8f e7       	ldi	r24, 0x7F	; 127
    3dd6:	0e 94 5f 09 	call	0x12be	; 0x12be <CheckState>
                //Victory dance when the game is completed
                if ((gameNow == TEXT) &&
                     (gameState[10] == 0) &&    // No "all ones" EEPROM failure (due to glitching etc.) detected
                     CheckState(122) &&         // Finished BastetDictates
                     CheckState(123) &&         // Finished Lanyard
                     CheckState(124) &&         // Connected to 3 others
    3dda:	81 11       	cpse	r24, r1
                     CheckState(127)) {         // Finished the text adventure (implies state 125 and 126)
                
                    //Completed!!!
                    VictoryDance();
    3ddc:	0e 94 9a 0a 	call	0x1534	; 0x1534 <VictoryDance>
                }

                //Light effects
                GenerateBlinks();
    3de0:	0e 94 c3 0a 	call	0x1586	; 0x1586 <GenerateBlinks>

                //Main game, to complete: Finish sub-game MagnetMaze and MakeFriends too.
                TextAdventure();
    3de4:	4d df       	rcall	.-358    	; 0x3c80 <TextAdventure>

                //Other games & user interaction checks
                MagnetMaze();
    3de6:	0e 94 9b 02 	call	0x536	; 0x536 <MagnetMaze>
                LanyardCode();
    3dea:	0e 94 9e 01 	call	0x33c	; 0x33c <LanyardCode>
                BastetDictates();
    3dee:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <BastetDictates>
                MakeFriends();
    3df2:	0e 94 8d 00 	call	0x11a	; 0x11a <MakeFriends>

                //Save progress
                SaveGameState();
    3df6:	0e 94 b7 08 	call	0x116e	; 0x116e <SaveGameState>

                //Check light sensor status (added hysteresis to preserve writing cycles to internal EEPROM)
                if (adcPhot < 10) UpdateState(116);
    3dfa:	80 91 d1 3a 	lds	r24, 0x3AD1	; 0x803ad1 <adcPhot>
    3dfe:	90 91 d2 3a 	lds	r25, 0x3AD2	; 0x803ad2 <adcPhot+0x1>
    3e02:	0a 97       	sbiw	r24, 0x0a	; 10
    3e04:	18 f4       	brcc	.+6      	; 0x3e0c <main+0xfa>
    3e06:	84 e7       	ldi	r24, 0x74	; 116
    3e08:	0e 94 3e 09 	call	0x127c	; 0x127c <UpdateState>
                if (adcPhot > 100) UpdateState(128+116);
    3e0c:	80 91 d1 3a 	lds	r24, 0x3AD1	; 0x803ad1 <adcPhot>
    3e10:	90 91 d2 3a 	lds	r25, 0x3AD2	; 0x803ad2 <adcPhot+0x1>
    3e14:	85 36       	cpi	r24, 0x65	; 101
    3e16:	91 05       	cpc	r25, r1
    3e18:	18 f0       	brcs	.+6      	; 0x3e20 <main+0x10e>
    3e1a:	84 ef       	ldi	r24, 0xF4	; 244
    3e1c:	0e 94 3e 09 	call	0x127c	; 0x127c <UpdateState>

                lightsensorSum -= (lightsensorSum>>6);
    3e20:	20 91 0a 38 	lds	r18, 0x380A	; 0x80380a <lightsensorSum>
    3e24:	30 91 0b 38 	lds	r19, 0x380B	; 0x80380b <lightsensorSum+0x1>
    3e28:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <lightsensorSum>
    3e2c:	90 91 0b 38 	lds	r25, 0x380B	; 0x80380b <lightsensorSum+0x1>
    3e30:	46 e0       	ldi	r20, 0x06	; 6
    3e32:	36 95       	lsr	r19
    3e34:	27 95       	ror	r18
    3e36:	4a 95       	dec	r20
    3e38:	e1 f7       	brne	.-8      	; 0x3e32 <main+0x120>
    3e3a:	82 1b       	sub	r24, r18
    3e3c:	93 0b       	sbc	r25, r19
    3e3e:	80 93 0a 38 	sts	0x380A, r24	; 0x80380a <lightsensorSum>
    3e42:	90 93 0b 38 	sts	0x380B, r25	; 0x80380b <lightsensorSum+0x1>
                lightsensorSum += adcPhot>>4;
    3e46:	80 91 d1 3a 	lds	r24, 0x3AD1	; 0x803ad1 <adcPhot>
    3e4a:	90 91 d2 3a 	lds	r25, 0x3AD2	; 0x803ad2 <adcPhot+0x1>
    3e4e:	20 91 0a 38 	lds	r18, 0x380A	; 0x80380a <lightsensorSum>
    3e52:	30 91 0b 38 	lds	r19, 0x380B	; 0x80380b <lightsensorSum+0x1>
    3e56:	54 e0       	ldi	r21, 0x04	; 4
    3e58:	96 95       	lsr	r25
    3e5a:	87 95       	ror	r24
    3e5c:	5a 95       	dec	r21
    3e5e:	e1 f7       	brne	.-8      	; 0x3e58 <main+0x146>
    3e60:	82 0f       	add	r24, r18
    3e62:	93 1f       	adc	r25, r19
    3e64:	80 93 0a 38 	sts	0x380A, r24	; 0x80380a <lightsensorSum>
    3e68:	90 93 0b 38 	sts	0x380B, r25	; 0x80380b <lightsensorSum+0x1>
                if (lightsensorSum>>6 < 128) {
    3e6c:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <lightsensorSum>
    3e70:	90 91 0b 38 	lds	r25, 0x380B	; 0x80380b <lightsensorSum+0x1>
    3e74:	81 15       	cp	r24, r1
    3e76:	90 42       	sbci	r25, 0x20	; 32
    3e78:	90 f4       	brcc	.+36     	; 0x3e9e <main+0x18c>
                    dimValue = lightsensorSum>>5;
    3e7a:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <lightsensorSum>
    3e7e:	90 91 0b 38 	lds	r25, 0x380B	; 0x80380b <lightsensorSum+0x1>
    3e82:	25 e0       	ldi	r18, 0x05	; 5
    3e84:	96 95       	lsr	r25
    3e86:	87 95       	ror	r24
    3e88:	2a 95       	dec	r18
    3e8a:	e1 f7       	brne	.-8      	; 0x3e84 <main+0x172>
    3e8c:	80 93 0c 38 	sts	0x380C, r24	; 0x80380c <dimValue>
                    if (dimValue < 8)
    3e90:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    3e94:	88 30       	cpi	r24, 0x08	; 8
    3e96:	28 f4       	brcc	.+10     	; 0x3ea2 <main+0x190>
                        dimValue = 8;
    3e98:	00 93 0c 38 	sts	0x380C, r16	; 0x80380c <dimValue>
    3e9c:	02 c0       	rjmp	.+4      	; 0x3ea2 <main+0x190>
                } else {
                    dimValue = 255;
    3e9e:	10 93 0c 38 	sts	0x380C, r17	; 0x80380c <dimValue>
                }

                //Check temperature
                HotSummer();
    3ea2:	0e 94 e7 09 	call	0x13ce	; 0x13ce <HotSummer>
    3ea6:	4d cf       	rjmp	.-358    	; 0x3d42 <main+0x30>

00003ea8 <__tablejump2__>:
    3ea8:	ee 0f       	add	r30, r30
    3eaa:	ff 1f       	adc	r31, r31
    3eac:	05 90       	lpm	r0, Z+
    3eae:	f4 91       	lpm	r31, Z
    3eb0:	e0 2d       	mov	r30, r0
    3eb2:	09 94       	ijmp

00003eb4 <__prologue_saves__>:
    3eb4:	2f 92       	push	r2
    3eb6:	3f 92       	push	r3
    3eb8:	4f 92       	push	r4
    3eba:	5f 92       	push	r5
    3ebc:	6f 92       	push	r6
    3ebe:	7f 92       	push	r7
    3ec0:	8f 92       	push	r8
    3ec2:	9f 92       	push	r9
    3ec4:	af 92       	push	r10
    3ec6:	bf 92       	push	r11
    3ec8:	cf 92       	push	r12
    3eca:	df 92       	push	r13
    3ecc:	ef 92       	push	r14
    3ece:	ff 92       	push	r15
    3ed0:	0f 93       	push	r16
    3ed2:	1f 93       	push	r17
    3ed4:	cf 93       	push	r28
    3ed6:	df 93       	push	r29
    3ed8:	cd b7       	in	r28, 0x3d	; 61
    3eda:	de b7       	in	r29, 0x3e	; 62
    3edc:	ca 1b       	sub	r28, r26
    3ede:	db 0b       	sbc	r29, r27
    3ee0:	cd bf       	out	0x3d, r28	; 61
    3ee2:	de bf       	out	0x3e, r29	; 62
    3ee4:	09 94       	ijmp

00003ee6 <__epilogue_restores__>:
    3ee6:	2a 88       	ldd	r2, Y+18	; 0x12
    3ee8:	39 88       	ldd	r3, Y+17	; 0x11
    3eea:	48 88       	ldd	r4, Y+16	; 0x10
    3eec:	5f 84       	ldd	r5, Y+15	; 0x0f
    3eee:	6e 84       	ldd	r6, Y+14	; 0x0e
    3ef0:	7d 84       	ldd	r7, Y+13	; 0x0d
    3ef2:	8c 84       	ldd	r8, Y+12	; 0x0c
    3ef4:	9b 84       	ldd	r9, Y+11	; 0x0b
    3ef6:	aa 84       	ldd	r10, Y+10	; 0x0a
    3ef8:	b9 84       	ldd	r11, Y+9	; 0x09
    3efa:	c8 84       	ldd	r12, Y+8	; 0x08
    3efc:	df 80       	ldd	r13, Y+7	; 0x07
    3efe:	ee 80       	ldd	r14, Y+6	; 0x06
    3f00:	fd 80       	ldd	r15, Y+5	; 0x05
    3f02:	0c 81       	ldd	r16, Y+4	; 0x04
    3f04:	1b 81       	ldd	r17, Y+3	; 0x03
    3f06:	aa 81       	ldd	r26, Y+2	; 0x02
    3f08:	b9 81       	ldd	r27, Y+1	; 0x01
    3f0a:	ce 0f       	add	r28, r30
    3f0c:	d1 1d       	adc	r29, r1
    3f0e:	cd bf       	out	0x3d, r28	; 61
    3f10:	de bf       	out	0x3e, r29	; 62
    3f12:	ed 01       	movw	r28, r26
    3f14:	08 95       	ret

00003f16 <_exit>:
    3f16:	f8 94       	cli

00003f18 <__stop_program>:
    3f18:	ff cf       	rjmp	.-2      	; 0x3f18 <__stop_program>
