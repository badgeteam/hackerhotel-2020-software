
ISR_IO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00803800  00003da0  00003e54  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003c9e  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000102  0000bc9e  00003c9e  00003d52  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          000002ea  0080382a  0080382a  00003e7e  2**0
                  ALLOC
  4 .comment      00000030  00000000  00000000  00003e7e  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003eb0  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000320  00000000  00000000  00003ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00006c27  00000000  00000000  00004210  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000028e4  00000000  00000000  0000ae37  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003ac6  00000000  00000000  0000d71b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000097c  00000000  00000000  000111e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001a3a  00000000  00000000  00011b60  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00004527  00000000  00000000  0001359a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000390  00000000  00000000  00017ac1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	3d c0       	rjmp	.+122    	; 0x7c <__ctors_end>
       2:	00 00       	nop
       4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
       6:	00 00       	nop
       8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
       a:	00 00       	nop
       c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
       e:	00 00       	nop
      10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
      12:	00 00       	nop
      14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
      16:	00 00       	nop
      18:	0c 94 62 08 	jmp	0x10c4	; 0x10c4 <__vector_6>
      1c:	0c 94 ac 08 	jmp	0x1158	; 0x1158 <__vector_7>
      20:	84 c6       	rjmp	.+3336   	; 0xd2a <__vector_8>
      22:	00 00       	nop
      24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
      26:	00 00       	nop
      28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
      32:	00 00       	nop
      34:	cb c6       	rjmp	.+3478   	; 0xdcc <__vector_13>
      36:	00 00       	nop
      38:	fc c6       	rjmp	.+3576   	; 0xe32 <__vector_14>
      3a:	00 00       	nop
      3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
      42:	00 00       	nop
      44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
      46:	00 00       	nop
      48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	ba c7       	rjmp	.+3956   	; 0xfc6 <__vector_20>
      52:	00 00       	nop
      54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
      56:	00 00       	nop
      58:	ed c7       	rjmp	.+4058   	; 0x1034 <__vector_22>
      5a:	00 00       	nop
      5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
      62:	00 00       	nop
      64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
      66:	00 00       	nop
      68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	35 c7       	rjmp	.+3690   	; 0xed8 <__vector_27>
      6e:	00 00       	nop
      70:	8e c7       	rjmp	.+3868   	; 0xf8e <__vector_28>
      72:	00 00       	nop
      74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
      76:	00 00       	nop
      78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
	...

0000007c <__ctors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	cd bf       	out	0x3d, r28	; 61
      84:	df e3       	ldi	r29, 0x3F	; 63
      86:	de bf       	out	0x3e, r29	; 62

00000088 <__do_copy_data>:
      88:	18 e3       	ldi	r17, 0x38	; 56
      8a:	a0 e0       	ldi	r26, 0x00	; 0
      8c:	b8 e3       	ldi	r27, 0x38	; 56
      8e:	e0 ea       	ldi	r30, 0xA0	; 160
      90:	fd e3       	ldi	r31, 0x3D	; 61
      92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
      94:	05 90       	lpm	r0, Z+
      96:	0d 92       	st	X+, r0
      98:	aa 32       	cpi	r26, 0x2A	; 42
      9a:	b1 07       	cpc	r27, r17
      9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
      9e:	2b e3       	ldi	r18, 0x3B	; 59
      a0:	aa e2       	ldi	r26, 0x2A	; 42
      a2:	b8 e3       	ldi	r27, 0x38	; 56
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	a4 31       	cpi	r26, 0x14	; 20
      aa:	b2 07       	cpc	r27, r18
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 4c 1d 	call	0x3a98	; 0x3a98 <main>
      b2:	0c 94 4d 1e 	jmp	0x3c9a	; 0x3c9a <_exit>

000000b6 <__bad_interrupt>:
      b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <chkVolt250>:
#include <main_def.h>
#include <resources.h>
#include <I2C.h>

//Returns measured voltage * 4 (2V returns 8) if it is in the expected range (DELTA)
uint8_t chkVolt250(){
      b8:	85 e1       	ldi	r24, 0x15	; 21
      ba:	90 e0       	ldi	r25, 0x00	; 0
      bc:	44 e0       	ldi	r20, 0x04	; 4
      be:	48 0f       	add	r20, r24
    static uint8_t avgVolt = 0;
        
    for (uint8_t x=25; x<250; x+=25) {
        if ((auIn[0] > (x-DELTA)) && (auIn[0] < (x+DELTA))) {
      c0:	20 91 bc 3a 	lds	r18, 0x3ABC	; 0x803abc <auIn>
      c4:	30 e0       	ldi	r19, 0x00	; 0
      c6:	28 17       	cp	r18, r24
      c8:	39 07       	cpc	r19, r25
      ca:	64 f0       	brlt	.+24     	; 0xe4 <chkVolt250+0x2c>
      cc:	20 91 bc 3a 	lds	r18, 0x3ABC	; 0x803abc <auIn>
      d0:	30 e0       	ldi	r19, 0x00	; 0
      d2:	bc 01       	movw	r22, r24
      d4:	68 5f       	subi	r22, 0xF8	; 248
      d6:	7f 4f       	sbci	r23, 0xFF	; 255
      d8:	62 17       	cp	r22, r18
      da:	73 07       	cpc	r23, r19
      dc:	1c f0       	brlt	.+6      	; 0xe4 <chkVolt250+0x2c>
            avgVolt = x;
      de:	40 93 2e 38 	sts	0x382E, r20	; 0x80382e <avgVolt.3768>
            break;
      e2:	04 c0       	rjmp	.+8      	; 0xec <chkVolt250+0x34>
      e4:	49 96       	adiw	r24, 0x19	; 25

//Returns measured voltage * 4 (2V returns 8) if it is in the expected range (DELTA)
uint8_t chkVolt250(){
    static uint8_t avgVolt = 0;
        
    for (uint8_t x=25; x<250; x+=25) {
      e6:	86 3f       	cpi	r24, 0xF6	; 246
      e8:	91 05       	cpc	r25, r1
      ea:	41 f7       	brne	.-48     	; 0xbc <chkVolt250+0x4>
        if ((auIn[0] > (x-DELTA)) && (auIn[0] < (x+DELTA))) {
            avgVolt = x;
            break;
        }
    }
    return avgVolt/25;
      ec:	80 91 2e 38 	lds	r24, 0x382E	; 0x80382e <avgVolt.3768>
      f0:	69 e1       	ldi	r22, 0x19	; 25
      f2:	0c 94 f8 1d 	jmp	0x3bf0	; 0x3bf0 <__udivmodqi4>
}
      f6:	08 95       	ret

000000f8 <MakeFriends>:

// Main game loop
uint8_t MakeFriends(){
      f8:	ef 92       	push	r14
      fa:	ff 92       	push	r15
      fc:	0f 93       	push	r16
      fe:	1f 93       	push	r17
     100:	cf 93       	push	r28
     102:	df 93       	push	r29
     104:	c4 e6       	ldi	r28, 0x64	; 100
    static uint8_t chkTmr = 0;
    static uint8_t jackIn = 0;
    static uint8_t candidate = 0;

    //Check if badge has found 3 friends
    uint8_t foundAll = 1;
     106:	d1 e0       	ldi	r29, 0x01	; 1
    for (uint8_t x=0; x<4; x++){
        if (CheckState(100+x) == 0) foundAll = 0;
     108:	8c 2f       	mov	r24, r28
     10a:	0e 94 bf 0a 	call	0x157e	; 0x157e <CheckState>
     10e:	81 11       	cpse	r24, r1
     110:	01 c0       	rjmp	.+2      	; 0x114 <MakeFriends+0x1c>
     112:	d0 e0       	ldi	r29, 0x00	; 0
     114:	cf 5f       	subi	r28, 0xFF	; 255
    static uint8_t jackIn = 0;
    static uint8_t candidate = 0;

    //Check if badge has found 3 friends
    uint8_t foundAll = 1;
    for (uint8_t x=0; x<4; x++){
     116:	c8 36       	cpi	r28, 0x68	; 104
     118:	b9 f7       	brne	.-18     	; 0x108 <MakeFriends+0x10>
        if (CheckState(100+x) == 0) foundAll = 0;
    }
    if (foundAll) UpdateState(124);
     11a:	dd 23       	and	r29, r29
     11c:	19 f0       	breq	.+6      	; 0x124 <MakeFriends+0x2c>
     11e:	8c e7       	ldi	r24, 0x7C	; 124
     120:	0e 94 b5 0a 	call	0x156a	; 0x156a <UpdateState>


    //Checking for headphones
    if (detHdPh) return 0;
     124:	80 91 b9 3a 	lds	r24, 0x3AB9	; 0x803ab9 <detHdPh>
     128:	81 11       	cpse	r24, r1
     12a:	1e c1       	rjmp	.+572    	; 0x368 <MakeFriends+0x270>

    //Audio off, set voltage level (setDAC[0]*10mV)
    if (progress == NO_OTHER) {
     12c:	80 91 2d 38 	lds	r24, 0x382D	; 0x80382d <progress.3775>
     130:	81 11       	cpse	r24, r1
     132:	11 c0       	rjmp	.+34     	; 0x156 <MakeFriends+0x5e>
        setDAC[0] = whoami * 50;
     134:	90 91 39 38 	lds	r25, 0x3839	; 0x803839 <whoami>
     138:	22 e3       	ldi	r18, 0x32	; 50
     13a:	92 9f       	mul	r25, r18
     13c:	90 2d       	mov	r25, r0
     13e:	11 24       	eor	r1, r1
     140:	90 93 00 38 	sts	0x3800, r25	; 0x803800 <__data_start>
        auRepAddr = &setDAC[0];
     144:	20 e0       	ldi	r18, 0x00	; 0
     146:	38 e3       	ldi	r19, 0x38	; 56
     148:	20 93 05 38 	sts	0x3805, r18	; 0x803805 <auRepAddr>
     14c:	30 93 06 38 	sts	0x3806, r19	; 0x803806 <auRepAddr+0x1>
        auVolume = 255;
     150:	9f ef       	ldi	r25, 0xFF	; 255
     152:	90 93 b0 3a 	sts	0x3AB0, r25	; 0x803ab0 <auVolume>
    }

    //Check for other badges
    if ((auIn[0] < (setDAC[0] - DELTA)) || (auIn[0] > (setDAC[0] + DELTA)) ||((progress > FIRST_CONTACT))) {
     156:	40 91 bc 3a 	lds	r20, 0x3ABC	; 0x803abc <auIn>
     15a:	20 91 00 38 	lds	r18, 0x3800	; 0x803800 <__data_start>
     15e:	30 e0       	ldi	r19, 0x00	; 0
     160:	50 e0       	ldi	r21, 0x00	; 0
     162:	b9 01       	movw	r22, r18
     164:	65 50       	subi	r22, 0x05	; 5
     166:	71 09       	sbc	r23, r1
     168:	46 17       	cp	r20, r22
     16a:	57 07       	cpc	r21, r23
     16c:	64 f0       	brlt	.+24     	; 0x186 <MakeFriends+0x8e>
     16e:	40 91 bc 3a 	lds	r20, 0x3ABC	; 0x803abc <auIn>
     172:	50 e0       	ldi	r21, 0x00	; 0
     174:	2b 5f       	subi	r18, 0xFB	; 251
     176:	3f 4f       	sbci	r19, 0xFF	; 255
     178:	24 17       	cp	r18, r20
     17a:	35 07       	cpc	r19, r21
     17c:	24 f0       	brlt	.+8      	; 0x186 <MakeFriends+0x8e>
     17e:	82 30       	cpi	r24, 0x02	; 2
     180:	08 f0       	brcs	.+2      	; 0x184 <MakeFriends+0x8c>
     182:	40 c0       	rjmp	.+128    	; 0x204 <MakeFriends+0x10c>
     184:	ef c0       	rjmp	.+478    	; 0x364 <MakeFriends+0x26c>
        if (progress == NO_OTHER) {
     186:	81 11       	cpse	r24, r1
     188:	0a c0       	rjmp	.+20     	; 0x19e <MakeFriends+0xa6>
            ++chkTmr;
     18a:	80 91 2c 38 	lds	r24, 0x382C	; 0x80382c <chkTmr.3777>
     18e:	8f 5f       	subi	r24, 0xFF	; 255
     190:	80 93 2c 38 	sts	0x382C, r24	; 0x80382c <chkTmr.3777>
            if (chkTmr >= 8) {
     194:	88 30       	cpi	r24, 0x08	; 8
     196:	08 f4       	brcc	.+2      	; 0x19a <MakeFriends+0xa2>
     198:	e7 c0       	rjmp	.+462    	; 0x368 <MakeFriends+0x270>
                progress = FIRST_CONTACT;
     19a:	81 e0       	ldi	r24, 0x01	; 1
     19c:	81 c0       	rjmp	.+258    	; 0x2a0 <MakeFriends+0x1a8>
                chkTmr = 0;
            }
        }

        //Candidate found, check ranges
        else if (progress == FIRST_CONTACT) {
     19e:	81 30       	cpi	r24, 0x01	; 1
     1a0:	89 f5       	brne	.+98     	; 0x204 <MakeFriends+0x10c>
            jackIn = chkVolt250();
     1a2:	8a df       	rcall	.-236    	; 0xb8 <chkVolt250>
     1a4:	80 93 2b 38 	sts	0x382B, r24	; 0x80382b <jackIn.3778>
            if (jackIn) {
     1a8:	88 23       	and	r24, r24
     1aa:	49 f1       	breq	.+82     	; 0x1fe <MakeFriends+0x106>
                ++chkTmr;
     1ac:	90 91 2c 38 	lds	r25, 0x382C	; 0x80382c <chkTmr.3777>
     1b0:	9f 5f       	subi	r25, 0xFF	; 255
     1b2:	90 93 2c 38 	sts	0x382C, r25	; 0x80382c <chkTmr.3777>
                if (chkTmr >= SHORT_WAIT){
     1b6:	98 30       	cpi	r25, 0x08	; 8
     1b8:	08 f4       	brcc	.+2      	; 0x1bc <MakeFriends+0xc4>
     1ba:	d6 c0       	rjmp	.+428    	; 0x368 <MakeFriends+0x270>
                    if ((whoami == 1)&&((jackIn == 3)||(jackIn == 4)||(jackIn == 5))) {
     1bc:	90 91 39 38 	lds	r25, 0x3839	; 0x803839 <whoami>
     1c0:	91 30       	cpi	r25, 0x01	; 1
     1c2:	29 f4       	brne	.+10     	; 0x1ce <MakeFriends+0xd6>
     1c4:	83 50       	subi	r24, 0x03	; 3
     1c6:	83 30       	cpi	r24, 0x03	; 3
     1c8:	b8 f4       	brcc	.+46     	; 0x1f8 <MakeFriends+0x100>
                        progress = SECOND_LOVE; 
     1ca:	82 e0       	ldi	r24, 0x02	; 2
     1cc:	69 c0       	rjmp	.+210    	; 0x2a0 <MakeFriends+0x1a8>
                    } else if ((whoami == 2)&&((jackIn == 3)||(jackIn == 5)||(jackIn == 6))) {
     1ce:	92 30       	cpi	r25, 0x02	; 2
     1d0:	31 f4       	brne	.+12     	; 0x1de <MakeFriends+0xe6>
     1d2:	83 30       	cpi	r24, 0x03	; 3
     1d4:	d1 f3       	breq	.-12     	; 0x1ca <MakeFriends+0xd2>
     1d6:	85 50       	subi	r24, 0x05	; 5
     1d8:	82 30       	cpi	r24, 0x02	; 2
     1da:	70 f4       	brcc	.+28     	; 0x1f8 <MakeFriends+0x100>
     1dc:	f6 cf       	rjmp	.-20     	; 0x1ca <MakeFriends+0xd2>
                        progress = SECOND_LOVE;
                    } else  if ((whoami == 3)&&((jackIn == 4)||(jackIn == 5)||(jackIn == 7))) {
     1de:	93 30       	cpi	r25, 0x03	; 3
     1e0:	39 f4       	brne	.+14     	; 0x1f0 <MakeFriends+0xf8>
     1e2:	9c ef       	ldi	r25, 0xFC	; 252
     1e4:	98 0f       	add	r25, r24
     1e6:	92 30       	cpi	r25, 0x02	; 2
     1e8:	80 f3       	brcs	.-32     	; 0x1ca <MakeFriends+0xd2>
     1ea:	87 30       	cpi	r24, 0x07	; 7
     1ec:	29 f4       	brne	.+10     	; 0x1f8 <MakeFriends+0x100>
     1ee:	ed cf       	rjmp	.-38     	; 0x1ca <MakeFriends+0xd2>
                        progress = SECOND_LOVE;
                    } else if ((whoami == 4)&&((jackIn == 5)||(jackIn == 6)||(jackIn == 7))) {
     1f0:	94 30       	cpi	r25, 0x04	; 4
     1f2:	11 f4       	brne	.+4      	; 0x1f8 <MakeFriends+0x100>
     1f4:	85 50       	subi	r24, 0x05	; 5
     1f6:	e7 cf       	rjmp	.-50     	; 0x1c6 <MakeFriends+0xce>
                        progress = SECOND_LOVE;
                    } else progress = NO_OTHER;
     1f8:	10 92 2d 38 	sts	0x382D, r1	; 0x80382d <progress.3775>
     1fc:	53 c0       	rjmp	.+166    	; 0x2a4 <MakeFriends+0x1ac>
                    chkTmr = 0;
                }
            } else {
                chkTmr = 0;
     1fe:	10 92 2c 38 	sts	0x382C, r1	; 0x80382c <chkTmr.3777>
     202:	b0 c0       	rjmp	.+352    	; 0x364 <MakeFriends+0x26c>
                progress = NO_OTHER;
            }
        }

        //Wait for the other badge (and a bit longer)
        else if (progress == SECOND_LOVE){
     204:	82 30       	cpi	r24, 0x02	; 2
     206:	09 f0       	breq	.+2      	; 0x20a <MakeFriends+0x112>
     208:	50 c0       	rjmp	.+160    	; 0x2aa <MakeFriends+0x1b2>
            ++chkTmr;
     20a:	80 91 2c 38 	lds	r24, 0x382C	; 0x80382c <chkTmr.3777>
     20e:	8f 5f       	subi	r24, 0xFF	; 255
     210:	80 93 2c 38 	sts	0x382C, r24	; 0x80382c <chkTmr.3777>
     214:	ca ec       	ldi	r28, 0xCA	; 202
     216:	dc eb       	ldi	r29, 0xBC	; 188
     218:	7e 01       	movw	r14, r28
            for (uint8_t x=0; x<5; ++x){
                iLED[WING[L][x]] = (lfsr() > 127)?dimValue:0;
     21a:	0d 81       	ldd	r16, Y+5	; 0x05
     21c:	10 e0       	ldi	r17, 0x00	; 0
     21e:	0e 94 91 09 	call	0x1322	; 0x1322 <lfsr>
     222:	87 ff       	sbrs	r24, 7
     224:	03 c0       	rjmp	.+6      	; 0x22c <MakeFriends+0x134>
     226:	80 91 0b 38 	lds	r24, 0x380B	; 0x80380b <dimValue>
     22a:	01 c0       	rjmp	.+2      	; 0x22e <MakeFriends+0x136>
     22c:	80 e0       	ldi	r24, 0x00	; 0
     22e:	f8 01       	movw	r30, r16
     230:	ec 53       	subi	r30, 0x3C	; 60
     232:	f5 4c       	sbci	r31, 0xC5	; 197
     234:	80 83       	st	Z, r24
     236:	21 96       	adiw	r28, 0x01	; 1
                iLED[WING[R][x]] = (lfsr() > 127)?dimValue:0;
     238:	f7 01       	movw	r30, r14
     23a:	00 81       	ld	r16, Z
     23c:	10 e0       	ldi	r17, 0x00	; 0
     23e:	0e 94 91 09 	call	0x1322	; 0x1322 <lfsr>
     242:	87 ff       	sbrs	r24, 7
     244:	03 c0       	rjmp	.+6      	; 0x24c <MakeFriends+0x154>
     246:	80 91 0b 38 	lds	r24, 0x380B	; 0x80380b <dimValue>
     24a:	01 c0       	rjmp	.+2      	; 0x24e <MakeFriends+0x156>
     24c:	80 e0       	ldi	r24, 0x00	; 0
     24e:	f8 01       	movw	r30, r16
     250:	ec 53       	subi	r30, 0x3C	; 60
     252:	f5 4c       	sbci	r31, 0xC5	; 197
     254:	80 83       	st	Z, r24
        }

        //Wait for the other badge (and a bit longer)
        else if (progress == SECOND_LOVE){
            ++chkTmr;
            for (uint8_t x=0; x<5; ++x){
     256:	fc eb       	ldi	r31, 0xBC	; 188
     258:	cf 3c       	cpi	r28, 0xCF	; 207
     25a:	df 07       	cpc	r29, r31
     25c:	e9 f6       	brne	.-70     	; 0x218 <MakeFriends+0x120>
                iLED[WING[L][x]] = (lfsr() > 127)?dimValue:0;
                iLED[WING[R][x]] = (lfsr() > 127)?dimValue:0;
            }
            if (chkTmr >= SHORT_WAIT) {
     25e:	80 91 2c 38 	lds	r24, 0x382C	; 0x80382c <chkTmr.3777>
     262:	88 30       	cpi	r24, 0x08	; 8
     264:	40 f0       	brcs	.+16     	; 0x276 <MakeFriends+0x17e>
                setDAC[0] = floatAround(0x80, 8, 100, 255); 
     266:	2f ef       	ldi	r18, 0xFF	; 255
     268:	44 e6       	ldi	r20, 0x64	; 100
     26a:	68 e0       	ldi	r22, 0x08	; 8
     26c:	80 e8       	ldi	r24, 0x80	; 128
     26e:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <floatAround>
     272:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__data_start>
            }
            //The badge with the lowest voltage will now go to 2.5V (impedance check, for people tricking the things with a power supply)
            if (chkTmr >= LONG_WAIT){
     276:	80 91 2c 38 	lds	r24, 0x382C	; 0x80382c <chkTmr.3777>
     27a:	8a 3f       	cpi	r24, 0xFA	; 250
     27c:	08 f4       	brcc	.+2      	; 0x280 <MakeFriends+0x188>
     27e:	74 c0       	rjmp	.+232    	; 0x368 <MakeFriends+0x270>
                candidate = jackIn-whoami;
     280:	90 91 39 38 	lds	r25, 0x3839	; 0x803839 <whoami>
     284:	80 91 2b 38 	lds	r24, 0x382B	; 0x80382b <jackIn.3778>
     288:	89 1b       	sub	r24, r25
     28a:	80 93 2a 38 	sts	0x382A, r24	; 0x80382a <__data_end>
                if (candidate > whoami) setDAC[0] = 250; else setDAC[0] = 0;
     28e:	98 17       	cp	r25, r24
     290:	20 f4       	brcc	.+8      	; 0x29a <MakeFriends+0x1a2>
     292:	8a ef       	ldi	r24, 0xFA	; 250
     294:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__data_start>
     298:	02 c0       	rjmp	.+4      	; 0x29e <MakeFriends+0x1a6>
     29a:	10 92 00 38 	sts	0x3800, r1	; 0x803800 <__data_start>
                progress = THIRD_KISS;
     29e:	83 e0       	ldi	r24, 0x03	; 3
     2a0:	80 93 2d 38 	sts	0x382D, r24	; 0x80382d <progress.3775>
                chkTmr = 0;
     2a4:	10 92 2c 38 	sts	0x382C, r1	; 0x80382c <chkTmr.3777>
     2a8:	5f c0       	rjmp	.+190    	; 0x368 <MakeFriends+0x270>
            }
        } 
        
        //Wait a bit, check Voltage again, if ok show who you connected with and your own number, save, exit
        else if (progress == THIRD_KISS) {
     2aa:	83 30       	cpi	r24, 0x03	; 3
     2ac:	e1 f5       	brne	.+120    	; 0x326 <MakeFriends+0x22e>
            chkTmr++;
     2ae:	80 91 2c 38 	lds	r24, 0x382C	; 0x80382c <chkTmr.3777>
     2b2:	8f 5f       	subi	r24, 0xFF	; 255
     2b4:	80 93 2c 38 	sts	0x382C, r24	; 0x80382c <chkTmr.3777>
            if (chkTmr >= SHORT_WAIT) {
     2b8:	88 30       	cpi	r24, 0x08	; 8
     2ba:	08 f4       	brcc	.+2      	; 0x2be <MakeFriends+0x1c6>
                if (chkVolt250() == 5) {
     2bc:	55 c0       	rjmp	.+170    	; 0x368 <MakeFriends+0x270>
     2be:	fc de       	rcall	.-520    	; 0xb8 <chkVolt250>
     2c0:	85 30       	cpi	r24, 0x05	; 5
     2c2:	09 f0       	breq	.+2      	; 0x2c6 <MakeFriends+0x1ce>
     2c4:	99 cf       	rjmp	.-206    	; 0x1f8 <MakeFriends+0x100>
                    UpdateState(99+candidate);
     2c6:	80 91 2a 38 	lds	r24, 0x382A	; 0x80382a <__data_end>
     2ca:	8d 59       	subi	r24, 0x9D	; 157
     2cc:	0e 94 b5 0a 	call	0x156a	; 0x156a <UpdateState>
                    UpdateState(99+whoami);
     2d0:	80 91 39 38 	lds	r24, 0x3839	; 0x803839 <whoami>
     2d4:	8d 59       	subi	r24, 0x9D	; 157
     2d6:	0e 94 b5 0a 	call	0x156a	; 0x156a <UpdateState>
                    for (uint8_t x=0; x<5; ++x){
                        iLED[WING[L][x]] = (x<candidate)?dimValue:0;
     2da:	20 91 2a 38 	lds	r18, 0x382A	; 0x80382a <__data_end>
                        iLED[WING[R][x]] = (x<whoami)?dimValue:00;
     2de:	30 91 39 38 	lds	r19, 0x3839	; 0x803839 <whoami>
     2e2:	aa ec       	ldi	r26, 0xCA	; 202
     2e4:	bc eb       	ldi	r27, 0xBC	; 188
            chkTmr++;
            if (chkTmr >= SHORT_WAIT) {
                if (chkVolt250() == 5) {
                    UpdateState(99+candidate);
                    UpdateState(99+whoami);
                    for (uint8_t x=0; x<5; ++x){
     2e6:	80 e0       	ldi	r24, 0x00	; 0
     2e8:	ed 01       	movw	r28, r26
                        iLED[WING[L][x]] = (x<candidate)?dimValue:0;
     2ea:	15 96       	adiw	r26, 0x05	; 5
     2ec:	ec 91       	ld	r30, X
     2ee:	15 97       	sbiw	r26, 0x05	; 5
     2f0:	f0 e0       	ldi	r31, 0x00	; 0
     2f2:	82 17       	cp	r24, r18
     2f4:	18 f4       	brcc	.+6      	; 0x2fc <MakeFriends+0x204>
     2f6:	90 91 0b 38 	lds	r25, 0x380B	; 0x80380b <dimValue>
     2fa:	01 c0       	rjmp	.+2      	; 0x2fe <MakeFriends+0x206>
     2fc:	90 e0       	ldi	r25, 0x00	; 0
     2fe:	ec 53       	subi	r30, 0x3C	; 60
     300:	f5 4c       	sbci	r31, 0xC5	; 197
     302:	90 83       	st	Z, r25
     304:	11 96       	adiw	r26, 0x01	; 1
                        iLED[WING[R][x]] = (x<whoami)?dimValue:00;
     306:	e8 81       	ld	r30, Y
     308:	f0 e0       	ldi	r31, 0x00	; 0
     30a:	83 17       	cp	r24, r19
     30c:	18 f4       	brcc	.+6      	; 0x314 <MakeFriends+0x21c>
     30e:	90 91 0b 38 	lds	r25, 0x380B	; 0x80380b <dimValue>
     312:	01 c0       	rjmp	.+2      	; 0x316 <MakeFriends+0x21e>
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	ec 53       	subi	r30, 0x3C	; 60
     318:	f5 4c       	sbci	r31, 0xC5	; 197
     31a:	90 83       	st	Z, r25
            chkTmr++;
            if (chkTmr >= SHORT_WAIT) {
                if (chkVolt250() == 5) {
                    UpdateState(99+candidate);
                    UpdateState(99+whoami);
                    for (uint8_t x=0; x<5; ++x){
     31c:	8f 5f       	subi	r24, 0xFF	; 255
     31e:	85 30       	cpi	r24, 0x05	; 5
     320:	19 f7       	brne	.-58     	; 0x2e8 <MakeFriends+0x1f0>
                        iLED[WING[L][x]] = (x<candidate)?dimValue:0;
                        iLED[WING[R][x]] = (x<whoami)?dimValue:00;
                    }   
                    progress = FOURTH_BASE;
     322:	84 e0       	ldi	r24, 0x04	; 4
     324:	bd cf       	rjmp	.-134    	; 0x2a0 <MakeFriends+0x1a8>
                } else progress = NO_OTHER;                
                chkTmr = 0;
            }

        //Wait for divorce of force quit
        } else if (progress == FOURTH_BASE) {
     326:	84 30       	cpi	r24, 0x04	; 4
            if (chkVolt250() == 5) {
     328:	f9 f4       	brne	.+62     	; 0x368 <MakeFriends+0x270>
     32a:	c6 de       	rcall	.-628    	; 0xb8 <chkVolt250>
     32c:	85 30       	cpi	r24, 0x05	; 5
     32e:	e1 f4       	brne	.+56     	; 0x368 <MakeFriends+0x270>
                chkTmr++;
     330:	80 91 2c 38 	lds	r24, 0x382C	; 0x80382c <chkTmr.3777>
     334:	8f 5f       	subi	r24, 0xFF	; 255
     336:	80 93 2c 38 	sts	0x382C, r24	; 0x80382c <chkTmr.3777>
                if (chkTmr >= LONG_WAIT) {
     33a:	8a 3f       	cpi	r24, 0xFA	; 250
     33c:	a8 f0       	brcs	.+42     	; 0x368 <MakeFriends+0x270>
     33e:	ea ec       	ldi	r30, 0xCA	; 202
     340:	fc eb       	ldi	r31, 0xBC	; 188
     342:	8f ec       	ldi	r24, 0xCF	; 207
     344:	9c eb       	ldi	r25, 0xBC	; 188
     346:	ef 01       	movw	r28, r30
                    for (uint8_t x=0; x<5; ++x){
                        iLED[WING[L][x]] = 0;
     348:	a5 81       	ldd	r26, Z+5	; 0x05
     34a:	b0 e0       	ldi	r27, 0x00	; 0
     34c:	ac 53       	subi	r26, 0x3C	; 60
     34e:	b5 4c       	sbci	r27, 0xC5	; 197
     350:	1c 92       	st	X, r1
     352:	31 96       	adiw	r30, 0x01	; 1
                        iLED[WING[R][x]] = 0;
     354:	a8 81       	ld	r26, Y
     356:	b0 e0       	ldi	r27, 0x00	; 0
     358:	ac 53       	subi	r26, 0x3C	; 60
     35a:	b5 4c       	sbci	r27, 0xC5	; 197
     35c:	1c 92       	st	X, r1
        //Wait for divorce of force quit
        } else if (progress == FOURTH_BASE) {
            if (chkVolt250() == 5) {
                chkTmr++;
                if (chkTmr >= LONG_WAIT) {
                    for (uint8_t x=0; x<5; ++x){
     35e:	8e 17       	cp	r24, r30
     360:	9f 07       	cpc	r25, r31
     362:	89 f7       	brne	.-30     	; 0x346 <MakeFriends+0x24e>
                    }                    
                }
            }
        }

    } else progress = NO_OTHER;
     364:	10 92 2d 38 	sts	0x382D, r1	; 0x80382d <progress.3775>
      
    return 0;
}
     368:	80 e0       	ldi	r24, 0x00	; 0
     36a:	df 91       	pop	r29
     36c:	cf 91       	pop	r28
     36e:	1f 91       	pop	r17
     370:	0f 91       	pop	r16
     372:	ff 90       	pop	r15
     374:	ef 90       	pop	r14
     376:	08 95       	ret

00000378 <I2C_init>:
// the Atmel device documentation mentions a special command for repeated start TWI_MCMD_REPSTART_gc,
// but this is not used in Atmel's demo code, so we don't use it either

void I2C_rep_start(uint8_t shifted_addr)						    // send repeated start, device_addr + LSB set if READ
{
	TWI0.MADDR = shifted_addr;	
     378:	81 e0       	ldi	r24, 0x01	; 1
     37a:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
     37e:	e6 e2       	ldi	r30, 0x26	; 38
     380:	f4 e0       	ldi	r31, 0x04	; 4
     382:	80 83       	st	Z, r24
     384:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <__TEXT_REGION_LENGTH__+0x700430>
     388:	a1 e2       	ldi	r26, 0x21	; 33
     38a:	b4 e0       	ldi	r27, 0x04	; 4
     38c:	92 e0       	ldi	r25, 0x02	; 2
     38e:	9c 93       	st	X, r25
     390:	90 83       	st	Z, r25
     392:	10 92 31 04 	sts	0x0431, r1	; 0x800431 <__TEXT_REGION_LENGTH__+0x700431>
     396:	e0 e1       	ldi	r30, 0x10	; 16
     398:	f8 e0       	ldi	r31, 0x08	; 8
     39a:	97 e0       	ldi	r25, 0x07	; 7
     39c:	96 83       	std	Z+6, r25	; 0x06
     39e:	98 e0       	ldi	r25, 0x08	; 8
     3a0:	94 83       	std	Z+4, r25	; 0x04
     3a2:	83 83       	std	Z+3, r24	; 0x03
     3a4:	8c 93       	st	X, r24
     3a6:	85 81       	ldd	r24, Z+5	; 0x05
     3a8:	81 60       	ori	r24, 0x01	; 1
     3aa:	85 83       	std	Z+5, r24	; 0x05
     3ac:	85 81       	ldd	r24, Z+5	; 0x05
     3ae:	84 6c       	ori	r24, 0xC4	; 196
     3b0:	85 83       	std	Z+5, r24	; 0x05
     3b2:	08 95       	ret

000003b4 <I2C_recover>:
     3b4:	80 91 14 08 	lds	r24, 0x0814	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     3b8:	88 60       	ori	r24, 0x08	; 8
     3ba:	80 93 14 08 	sts	0x0814, r24	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     3be:	10 92 13 08 	sts	0x0813, r1	; 0x800813 <__TEXT_REGION_LENGTH__+0x700813>
     3c2:	82 e0       	ldi	r24, 0x02	; 2
     3c4:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
     3c8:	99 e0       	ldi	r25, 0x09	; 9
     3ca:	21 e0       	ldi	r18, 0x01	; 1
     3cc:	81 e0       	ldi	r24, 0x01	; 1
     3ce:	20 93 21 04 	sts	0x0421, r18	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
     3d2:	30 e1       	ldi	r19, 0x10	; 16
     3d4:	3a 95       	dec	r19
     3d6:	f1 f7       	brne	.-4      	; 0x3d4 <I2C_recover+0x20>
     3d8:	00 c0       	rjmp	.+0      	; 0x3da <I2C_recover+0x26>
     3da:	20 93 22 04 	sts	0x0422, r18	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
     3de:	30 e1       	ldi	r19, 0x10	; 16
     3e0:	3a 95       	dec	r19
     3e2:	f1 f7       	brne	.-4      	; 0x3e0 <I2C_recover+0x2c>
     3e4:	00 c0       	rjmp	.+0      	; 0x3e6 <I2C_recover+0x32>
     3e6:	91 50       	subi	r25, 0x01	; 1
     3e8:	89 f7       	brne	.-30     	; 0x3cc <I2C_recover+0x18>
     3ea:	28 e0       	ldi	r18, 0x08	; 8
     3ec:	20 93 14 08 	sts	0x0814, r18	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     3f0:	80 93 13 08 	sts	0x0813, r24	; 0x800813 <__TEXT_REGION_LENGTH__+0x700813>
     3f4:	92 e0       	ldi	r25, 0x02	; 2
     3f6:	90 93 21 04 	sts	0x0421, r25	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
     3fa:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     3fe:	91 60       	ori	r25, 0x01	; 1
     400:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     404:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     408:	94 6c       	ori	r25, 0xC4	; 196
     40a:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     40e:	20 93 14 08 	sts	0x0814, r18	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     412:	80 93 13 08 	sts	0x0813, r24	; 0x800813 <__TEXT_REGION_LENGTH__+0x700813>
     416:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
     41a:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     41e:	81 60       	ori	r24, 0x01	; 1
     420:	80 93 15 08 	sts	0x0815, r24	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     424:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     428:	84 6c       	ori	r24, 0xC4	; 196
     42a:	80 93 15 08 	sts	0x0815, r24	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     42e:	08 95       	ret

00000430 <I2C_start>:
     430:	28 2f       	mov	r18, r24
     432:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     436:	90 6c       	ori	r25, 0xC0	; 192
     438:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     43c:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     440:	89 2f       	mov	r24, r25
     442:	84 70       	andi	r24, 0x04	; 4
     444:	92 fd       	sbrc	r25, 2
     446:	03 c0       	rjmp	.+6      	; 0x44e <I2C_start+0x1e>
     448:	20 93 17 08 	sts	0x0817, r18	; 0x800817 <__TEXT_REGION_LENGTH__+0x700817>
     44c:	08 95       	ret
     44e:	84 e0       	ldi	r24, 0x04	; 4
     450:	08 95       	ret

00000452 <I2C_wait_ACK>:
     452:	8c e0       	ldi	r24, 0x0C	; 12
     454:	80 93 5a 3a 	sts	0x3A5A, r24	; 0x803a5a <timeout_I2C>
     458:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     45c:	87 fd       	sbrc	r24, 7
     45e:	0a c0       	rjmp	.+20     	; 0x474 <I2C_wait_ACK+0x22>
     460:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     464:	86 fd       	sbrc	r24, 6
     466:	06 c0       	rjmp	.+12     	; 0x474 <I2C_wait_ACK+0x22>
     468:	80 91 5a 3a 	lds	r24, 0x3A5A	; 0x803a5a <timeout_I2C>
     46c:	81 11       	cpse	r24, r1
     46e:	f4 cf       	rjmp	.-24     	; 0x458 <I2C_wait_ACK+0x6>
     470:	8f ef       	ldi	r24, 0xFF	; 255
     472:	08 95       	ret
     474:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     478:	80 6c       	ori	r24, 0xC0	; 192
     47a:	80 93 15 08 	sts	0x0815, r24	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     47e:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     482:	82 fd       	sbrc	r24, 2
     484:	09 c0       	rjmp	.+18     	; 0x498 <I2C_wait_ACK+0x46>
     486:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     48a:	83 fd       	sbrc	r24, 3
     48c:	07 c0       	rjmp	.+14     	; 0x49c <I2C_wait_ACK+0x4a>
     48e:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     492:	82 95       	swap	r24
     494:	81 70       	andi	r24, 0x01	; 1
     496:	08 95       	ret
     498:	84 e0       	ldi	r24, 0x04	; 4
     49a:	08 95       	ret
     49c:	82 e0       	ldi	r24, 0x02	; 2
     49e:	08 95       	ret

000004a0 <I2C_read>:
}

uint8_t	I2C_read(uint8_t *data, uint8_t ack_flag)					// read data, ack_flag 0: send ACK, 1: send NACK, returns status
{
     4a0:	fc 01       	movw	r30, r24
	timeout_I2C = READ_TIMEOUT;										// reset timeout counter, will be decremented by LED matrix interrupt
     4a2:	8c e0       	ldi	r24, 0x0C	; 12
     4a4:	80 93 5a 3a 	sts	0x3A5A, r24	; 0x803a5a <timeout_I2C>
	if ((TWI0.MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_OWNER_gc)	// if master controls bus
     4a8:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     4ac:	89 2f       	mov	r24, r25
     4ae:	83 70       	andi	r24, 0x03	; 3
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	11 f0       	breq	.+4      	; 0x4b8 <I2C_read+0x18>
		else		TWI0.MCTRLB |= TWI_ACKACT_NACK_gc;				// setup NACK (last byte read)
		*data = TWI0.MDATA;
		if (ack_flag == 0) TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;	// send ACK, more bytes to follow					
		return 0;
	}
	else return 8;													// master does not control bus
     4b4:	88 e0       	ldi	r24, 0x08	; 8
     4b6:	08 95       	ret
uint8_t	I2C_read(uint8_t *data, uint8_t ack_flag)					// read data, ack_flag 0: send ACK, 1: send NACK, returns status
{
	timeout_I2C = READ_TIMEOUT;										// reset timeout counter, will be decremented by LED matrix interrupt
	if ((TWI0.MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_OWNER_gc)	// if master controls bus
	{		
		while (!(TWI0.MSTATUS & TWI_RIF_bm))						// wait for RIF set (data byte received)
     4b8:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     4bc:	97 fd       	sbrc	r25, 7
     4be:	06 c0       	rjmp	.+12     	; 0x4cc <I2C_read+0x2c>
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
     4c0:	90 91 5a 3a 	lds	r25, 0x3A5A	; 0x803a5a <timeout_I2C>
     4c4:	91 11       	cpse	r25, r1
     4c6:	f8 cf       	rjmp	.-16     	; 0x4b8 <I2C_read+0x18>
     4c8:	8f ef       	ldi	r24, 0xFF	; 255
     4ca:	08 95       	ret
		}
		TWI0.MSTATUS |= (TWI_RIF_bm | TWI_WIF_bm);					// clear Read and Write interrupt flags	
     4cc:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     4d0:	90 6c       	ori	r25, 0xC0	; 192
     4d2:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
     4d6:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     4da:	92 fd       	sbrc	r25, 2
     4dc:	1e c0       	rjmp	.+60     	; 0x51a <I2C_read+0x7a>
		if (TWI0.MSTATUS & TWI_ARBLOST_bm) return 2;				// Arbitration Lost, abort
     4de:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     4e2:	93 fd       	sbrc	r25, 3
     4e4:	1d c0       	rjmp	.+58     	; 0x520 <I2C_read+0x80>
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort				
     4e6:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     4ea:	89 2f       	mov	r24, r25
     4ec:	80 71       	andi	r24, 0x10	; 16
     4ee:	94 fd       	sbrc	r25, 4
     4f0:	16 c0       	rjmp	.+44     	; 0x51e <I2C_read+0x7e>
		if (ack_flag == 0) TWI0.MCTRLB &= ~(1 << TWI_ACKACT_bp);	// setup ACK
     4f2:	90 91 14 08 	lds	r25, 0x0814	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     4f6:	61 11       	cpse	r22, r1
     4f8:	02 c0       	rjmp	.+4      	; 0x4fe <I2C_read+0x5e>
     4fa:	9b 7f       	andi	r25, 0xFB	; 251
     4fc:	01 c0       	rjmp	.+2      	; 0x500 <I2C_read+0x60>
		else		TWI0.MCTRLB |= TWI_ACKACT_NACK_gc;				// setup NACK (last byte read)
     4fe:	94 60       	ori	r25, 0x04	; 4
     500:	90 93 14 08 	sts	0x0814, r25	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
		*data = TWI0.MDATA;
     504:	90 91 18 08 	lds	r25, 0x0818	; 0x800818 <__TEXT_REGION_LENGTH__+0x700818>
     508:	90 83       	st	Z, r25
		if (ack_flag == 0) TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;	// send ACK, more bytes to follow					
     50a:	61 11       	cpse	r22, r1
     50c:	09 c0       	rjmp	.+18     	; 0x520 <I2C_read+0x80>
     50e:	90 91 14 08 	lds	r25, 0x0814	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     512:	92 60       	ori	r25, 0x02	; 2
     514:	90 93 14 08 	sts	0x0814, r25	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     518:	08 95       	ret
		while (!(TWI0.MSTATUS & TWI_RIF_bm))						// wait for RIF set (data byte received)
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
		}
		TWI0.MSTATUS |= (TWI_RIF_bm | TWI_WIF_bm);					// clear Read and Write interrupt flags	
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
     51a:	84 e0       	ldi	r24, 0x04	; 4
     51c:	08 95       	ret
		if (TWI0.MSTATUS & TWI_ARBLOST_bm) return 2;				// Arbitration Lost, abort
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort				
     51e:	81 e0       	ldi	r24, 0x01	; 1
		*data = TWI0.MDATA;
		if (ack_flag == 0) TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;	// send ACK, more bytes to follow					
		return 0;
	}
	else return 8;													// master does not control bus
}
     520:	08 95       	ret

00000522 <I2C_write>:

uint8_t I2C_write(uint8_t *data)									// write data, return status
{
     522:	fc 01       	movw	r30, r24
	timeout_I2C = WRITE_TIMEOUT;									// reset timeout counter, will be decremented by LED matrix interrupt
     524:	8c e0       	ldi	r24, 0x0C	; 12
     526:	80 93 5a 3a 	sts	0x3A5A, r24	; 0x803a5a <timeout_I2C>
	if ((TWI0.MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_OWNER_gc)	// if master controls bus
     52a:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     52e:	93 70       	andi	r25, 0x03	; 3
     530:	92 30       	cpi	r25, 0x02	; 2
     532:	b1 f4       	brne	.+44     	; 0x560 <I2C_write+0x3e>
	{
		TWI0.MDATA = *data;		
     534:	80 81       	ld	r24, Z
     536:	80 93 18 08 	sts	0x0818, r24	; 0x800818 <__TEXT_REGION_LENGTH__+0x700818>
		while (!(TWI0.MSTATUS & TWI_WIF_bm))						// wait until WIF set, status register contains ACK/NACK bit
     53a:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     53e:	86 fd       	sbrc	r24, 6
     540:	06 c0       	rjmp	.+12     	; 0x54e <I2C_write+0x2c>
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
     542:	80 91 5a 3a 	lds	r24, 0x3A5A	; 0x803a5a <timeout_I2C>
     546:	81 11       	cpse	r24, r1
     548:	f8 cf       	rjmp	.-16     	; 0x53a <I2C_write+0x18>
     54a:	8f ef       	ldi	r24, 0xFF	; 255
     54c:	08 95       	ret
		}
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
     54e:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     552:	82 fd       	sbrc	r24, 2
     554:	07 c0       	rjmp	.+14     	; 0x564 <I2C_write+0x42>
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort
     556:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
	if ((TWI0.MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_OWNER_gc)	// if master controls bus
	{
		TWI0.MDATA = *data;		
		while (!(TWI0.MSTATUS & TWI_WIF_bm))						// wait until WIF set, status register contains ACK/NACK bit
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
     55a:	82 95       	swap	r24
     55c:	81 70       	andi	r24, 0x01	; 1
     55e:	08 95       	ret
		}
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort
		return 0;													// no error	
	}
	else return 8;													// master does not control bus
     560:	88 e0       	ldi	r24, 0x08	; 8
     562:	08 95       	ret
		TWI0.MDATA = *data;		
		while (!(TWI0.MSTATUS & TWI_WIF_bm))						// wait until WIF set, status register contains ACK/NACK bit
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
		}
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
     564:	84 e0       	ldi	r24, 0x04	; 4
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort
		return 0;													// no error	
	}
	else return 8;													// master does not control bus
}
     566:	08 95       	ret

00000568 <I2C_stop>:

void I2C_stop()
{
	TWI0.MCTRLB |= TWI_MCMD_STOP_gc;
     568:	e0 e1       	ldi	r30, 0x10	; 16
     56a:	f8 e0       	ldi	r31, 0x08	; 8
     56c:	84 81       	ldd	r24, Z+4	; 0x04
     56e:	83 60       	ori	r24, 0x03	; 3
     570:	84 83       	std	Z+4, r24	; 0x04
     572:	08 95       	ret

00000574 <I2C_read_bytes>:
// addr_ptr		address of first array element to transfer
// slave reg	starting slave register
// num_bytes	number of bytes to transfer

uint8_t	I2C_read_bytes(uint8_t slave_addr, uint8_t *reg_ptr, uint8_t reg_len, uint8_t *dat_ptr, uint8_t dat_len)
{
     574:	cf 92       	push	r12
     576:	df 92       	push	r13
     578:	ff 92       	push	r15
     57a:	0f 93       	push	r16
     57c:	1f 93       	push	r17
     57e:	cf 93       	push	r28
     580:	df 93       	push	r29
     582:	6b 01       	movw	r12, r22
     584:	f4 2e       	mov	r15, r20
     586:	e9 01       	movw	r28, r18
	uint8_t status;
	if (dat_len > MAX_LEN) dat_len = MAX_LEN;
	status = I2C_start(slave_addr << 1);							// slave write address, LSB 0
     588:	18 2f       	mov	r17, r24
     58a:	11 0f       	add	r17, r17
     58c:	81 2f       	mov	r24, r17
     58e:	50 df       	rcall	.-352    	; 0x430 <I2C_start>
	if (status != 0) goto error;
     590:	81 11       	cpse	r24, r1
	status = I2C_wait_ACK();										// wait for slave ACK
     592:	2b c0       	rjmp	.+86     	; 0x5ea <I2C_read_bytes+0x76>
     594:	5e df       	rcall	.-324    	; 0x452 <I2C_wait_ACK>
	if (status == 1) {
     596:	81 30       	cpi	r24, 0x01	; 1
		I2C_stop();													// NACK, abort
     598:	19 f4       	brne	.+6      	; 0x5a0 <I2C_read_bytes+0x2c>
     59a:	e6 df       	rcall	.-52     	; 0x568 <I2C_stop>
		return 1;
     59c:	81 e0       	ldi	r24, 0x01	; 1
     59e:	27 c0       	rjmp	.+78     	; 0x5ee <I2C_read_bytes+0x7a>
	}
	if (status != 0) goto error;
     5a0:	81 11       	cpse	r24, r1
     5a2:	23 c0       	rjmp	.+70     	; 0x5ea <I2C_read_bytes+0x76>
    while(reg_len > 0){
     5a4:	ff 20       	and	r15, r15
	    status = I2C_write(reg_ptr);    							// send slave start register
     5a6:	49 f0       	breq	.+18     	; 0x5ba <I2C_read_bytes+0x46>
     5a8:	c6 01       	movw	r24, r12
     5aa:	bb df       	rcall	.-138    	; 0x522 <I2C_write>
	    if (status != 0) goto error;
     5ac:	81 11       	cpse	r24, r1
     5ae:	1d c0       	rjmp	.+58     	; 0x5ea <I2C_read_bytes+0x76>
        ++reg_ptr;
     5b0:	8f ef       	ldi	r24, 0xFF	; 255
     5b2:	c8 1a       	sub	r12, r24
     5b4:	d8 0a       	sbc	r13, r24
        --reg_len;
     5b6:	fa 94       	dec	r15
     5b8:	f5 cf       	rjmp	.-22     	; 0x5a4 <I2C_read_bytes+0x30>
     5ba:	01 34       	cpi	r16, 0x41	; 65
     5bc:	08 f0       	brcs	.+2      	; 0x5c0 <I2C_read_bytes+0x4c>
     5be:	00 e4       	ldi	r16, 0x40	; 64
    }
	I2C_rep_start((slave_addr << 1) + 1);							// slave read address, LSB 1
     5c0:	1f 5f       	subi	r17, 0xFF	; 255
// the Atmel device documentation mentions a special command for repeated start TWI_MCMD_REPSTART_gc,
// but this is not used in Atmel's demo code, so we don't use it either

void I2C_rep_start(uint8_t shifted_addr)						    // send repeated start, device_addr + LSB set if READ
{
	TWI0.MADDR = shifted_addr;	
     5c2:	10 93 17 08 	sts	0x0817, r17	; 0x800817 <__TEXT_REGION_LENGTH__+0x700817>
	    if (status != 0) goto error;
        ++reg_ptr;
        --reg_len;
    }
	I2C_rep_start((slave_addr << 1) + 1);							// slave read address, LSB 1
	while (dat_len > 1) {
     5c6:	02 30       	cpi	r16, 0x02	; 2
		status = I2C_read(dat_ptr, 0);								// first bytes, send ACK
     5c8:	40 f0       	brcs	.+16     	; 0x5da <I2C_read_bytes+0x66>
     5ca:	60 e0       	ldi	r22, 0x00	; 0
     5cc:	ce 01       	movw	r24, r28
     5ce:	68 df       	rcall	.-304    	; 0x4a0 <I2C_read>
		if (status != 0) goto error;
     5d0:	81 11       	cpse	r24, r1
     5d2:	0b c0       	rjmp	.+22     	; 0x5ea <I2C_read_bytes+0x76>
		++dat_ptr;
		--dat_len;
     5d4:	21 96       	adiw	r28, 0x01	; 1
     5d6:	01 50       	subi	r16, 0x01	; 1
	}
	status = I2C_read(dat_ptr, 1);									// single or last byte, send NACK
     5d8:	f6 cf       	rjmp	.-20     	; 0x5c6 <I2C_read_bytes+0x52>
     5da:	61 e0       	ldi	r22, 0x01	; 1
     5dc:	ce 01       	movw	r24, r28
	if (status != 0) goto error;
     5de:	60 df       	rcall	.-320    	; 0x4a0 <I2C_read>
     5e0:	81 11       	cpse	r24, r1
	I2C_stop();
     5e2:	03 c0       	rjmp	.+6      	; 0x5ea <I2C_read_bytes+0x76>
     5e4:	c1 df       	rcall	.-126    	; 0x568 <I2C_stop>
	return 0;
     5e6:	80 e0       	ldi	r24, 0x00	; 0
     5e8:	02 c0       	rjmp	.+4      	; 0x5ee <I2C_read_bytes+0x7a>
	
error:
	I2C_recover();													// clock out possibly stuck slave, reset master
     5ea:	e4 de       	rcall	.-568    	; 0x3b4 <I2C_recover>
     5ec:	8f ef       	ldi	r24, 0xFF	; 255
	return 0xff;													// flag error
     5ee:	df 91       	pop	r29
}
     5f0:	cf 91       	pop	r28
     5f2:	1f 91       	pop	r17
     5f4:	0f 91       	pop	r16
     5f6:	ff 90       	pop	r15
     5f8:	df 90       	pop	r13
     5fa:	cf 90       	pop	r12
     5fc:	08 95       	ret

000005fe <initLanyard>:
uint8_t         lastButtonState = 0xff;
uint8_t         digit = 0xff;
uint16_t        lanyardLastActive = 0;

void initLanyard() {
    lanyardPos      = 0;
     5fe:	10 92 32 38 	sts	0x3832, r1	; 0x803832 <lanyardPos>
    lanyardCnt      = 0;
     602:	10 92 31 38 	sts	0x3831, r1	; 0x803831 <lanyardCnt>
    lanyardState    = TRUE;
     606:	81 e0       	ldi	r24, 0x01	; 1
     608:	80 93 04 38 	sts	0x3804, r24	; 0x803804 <lanyardState>
    lastButtonState = 0xff;
     60c:	8f ef       	ldi	r24, 0xFF	; 255
     60e:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <lastButtonState>
    iLED[CAT]       = 0;
     612:	e0 91 c6 bc 	lds	r30, 0xBCC6	; 0x80bcc6 <__bss_end+0x81b2>
     616:	f0 e0       	ldi	r31, 0x00	; 0
     618:	ec 53       	subi	r30, 0x3C	; 60
     61a:	f5 4c       	sbci	r31, 0xC5	; 197
     61c:	10 82       	st	Z, r1
    iLED[EYE[G][L]] = 0;
     61e:	e0 91 d7 bc 	lds	r30, 0xBCD7	; 0x80bcd7 <__bss_end+0x81c3>
     622:	f0 e0       	ldi	r31, 0x00	; 0
     624:	ec 53       	subi	r30, 0x3C	; 60
     626:	f5 4c       	sbci	r31, 0xC5	; 197
     628:	10 82       	st	Z, r1
    iLED[EYE[G][R]] = 0;
     62a:	e0 91 d6 bc 	lds	r30, 0xBCD6	; 0x80bcd6 <__bss_end+0x81c2>
     62e:	f0 e0       	ldi	r31, 0x00	; 0
     630:	ec 53       	subi	r30, 0x3C	; 60
     632:	f5 4c       	sbci	r31, 0xC5	; 197
     634:	10 82       	st	Z, r1
    iLED[EYE[R][L]] = 0;
     636:	e0 91 d5 bc 	lds	r30, 0xBCD5	; 0x80bcd5 <__bss_end+0x81c1>
     63a:	f0 e0       	ldi	r31, 0x00	; 0
     63c:	ec 53       	subi	r30, 0x3C	; 60
     63e:	f5 4c       	sbci	r31, 0xC5	; 197
     640:	10 82       	st	Z, r1
    iLED[EYE[R][R]] = 0;
     642:	e0 91 d4 bc 	lds	r30, 0xBCD4	; 0x80bcd4 <__bss_end+0x81c0>
     646:	f0 e0       	ldi	r31, 0x00	; 0
     648:	ec 53       	subi	r30, 0x3C	; 60
     64a:	f5 4c       	sbci	r31, 0xC5	; 197
     64c:	10 82       	st	Z, r1
     64e:	ae ed       	ldi	r26, 0xDE	; 222
     650:	bc eb       	ldi	r27, 0xBC	; 188
    for (int i=0; i<6; i++ )
        iLED[HCKR[G][i]] = 0;
     652:	ed 91       	ld	r30, X+
     654:	f0 e0       	ldi	r31, 0x00	; 0
     656:	ec 53       	subi	r30, 0x3C	; 60
     658:	f5 4c       	sbci	r31, 0xC5	; 197
     65a:	10 82       	st	Z, r1
    iLED[CAT]       = 0;
    iLED[EYE[G][L]] = 0;
    iLED[EYE[G][R]] = 0;
    iLED[EYE[R][L]] = 0;
    iLED[EYE[R][R]] = 0;
    for (int i=0; i<6; i++ )
     65c:	8c eb       	ldi	r24, 0xBC	; 188
     65e:	a4 3e       	cpi	r26, 0xE4	; 228
     660:	b8 07       	cpc	r27, r24
     662:	b9 f7       	brne	.-18     	; 0x652 <initLanyard+0x54>
        iLED[HCKR[G][i]] = 0;
}
     664:	08 95       	ret

00000666 <LanyardCode>:

// Main game loop
uint8_t LanyardCode(){
     666:	cf 93       	push	r28
    if (gameNow == LANYARD && idleTimeout(lanyardLastActive,LANYARD_MAX_IDLE)) {
     668:	80 91 38 38 	lds	r24, 0x3838	; 0x803838 <gameNow>
     66c:	83 30       	cpi	r24, 0x03	; 3
     66e:	71 f4       	brne	.+28     	; 0x68c <LanyardCode+0x26>
     670:	6a e0       	ldi	r22, 0x0A	; 10
     672:	70 e0       	ldi	r23, 0x00	; 0
     674:	80 91 2f 38 	lds	r24, 0x382F	; 0x80382f <lanyardLastActive>
     678:	90 91 30 38 	lds	r25, 0x3830	; 0x803830 <lanyardLastActive+0x1>
     67c:	0e 94 ce 0c 	call	0x199c	; 0x199c <idleTimeout>
     680:	88 23       	and	r24, r24
     682:	21 f0       	breq	.+8      	; 0x68c <LanyardCode+0x26>
        /* clean up maze game and go back to text game */
        initLanyard();
     684:	bc df       	rcall	.-136    	; 0x5fe <initLanyard>
        gameNow = TEXT;
     686:	10 92 38 38 	sts	0x3838, r1	; 0x803838 <gameNow>
        return 0;
     68a:	bf c0       	rjmp	.+382    	; 0x80a <LanyardCode+0x1a4>
    }

    if (CheckState(LANYARD_COMPLETED))
     68c:	8b e7       	ldi	r24, 0x7B	; 123
     68e:	77 d7       	rcall	.+3822   	; 0x157e <CheckState>
     690:	81 11       	cpse	r24, r1
     692:	bb c0       	rjmp	.+374    	; 0x80a <LanyardCode+0x1a4>
        return 0;

    if ( gameNow != TEXT && gameNow != LANYARD )
     694:	80 91 38 38 	lds	r24, 0x3838	; 0x803838 <gameNow>
     698:	88 23       	and	r24, r24
     69a:	19 f0       	breq	.+6      	; 0x6a2 <LanyardCode+0x3c>
     69c:	83 30       	cpi	r24, 0x03	; 3
     69e:	09 f0       	breq	.+2      	; 0x6a2 <LanyardCode+0x3c>
     6a0:	b4 c0       	rjmp	.+360    	; 0x80a <LanyardCode+0x1a4>
        return 0;

    /* activate led for buttonstate */
    iLED[CAT] = (buttonState==0xff ? 0 : dimValue);
     6a2:	c0 91 c6 bc 	lds	r28, 0xBCC6	; 0x80bcc6 <__bss_end+0x81b2>
     6a6:	ec 2f       	mov	r30, r28
     6a8:	f0 e0       	ldi	r31, 0x00	; 0
     6aa:	90 91 09 38 	lds	r25, 0x3809	; 0x803809 <buttonState>
     6ae:	9f 3f       	cpi	r25, 0xFF	; 255
     6b0:	19 f0       	breq	.+6      	; 0x6b8 <LanyardCode+0x52>
     6b2:	80 91 0b 38 	lds	r24, 0x380B	; 0x80380b <dimValue>
     6b6:	01 c0       	rjmp	.+2      	; 0x6ba <LanyardCode+0x54>
     6b8:	80 e0       	ldi	r24, 0x00	; 0
     6ba:	ec 53       	subi	r30, 0x3C	; 60
     6bc:	f5 4c       	sbci	r31, 0xC5	; 197
     6be:	80 83       	st	Z, r24

    if ( (buttonState & 0xf0) == 0)
     6c0:	89 2f       	mov	r24, r25
     6c2:	80 7f       	andi	r24, 0xF0	; 240
     6c4:	09 f4       	brne	.+2      	; 0x6c8 <LanyardCode+0x62>
     6c6:	a1 c0       	rjmp	.+322    	; 0x80a <LanyardCode+0x1a4>
        return 0;

    if ((buttonState&0x0f) == (lastButtonState&0x0f))
     6c8:	80 91 03 38 	lds	r24, 0x3803	; 0x803803 <lastButtonState>
     6cc:	89 27       	eor	r24, r25
     6ce:	8f 70       	andi	r24, 0x0F	; 15
     6d0:	09 f4       	brne	.+2      	; 0x6d4 <LanyardCode+0x6e>
     6d2:	9b c0       	rjmp	.+310    	; 0x80a <LanyardCode+0x1a4>
        return 0;

    lanyardLastActive = getClock();
     6d4:	0e 94 bf 0c 	call	0x197e	; 0x197e <getClock>
     6d8:	80 93 2f 38 	sts	0x382F, r24	; 0x80382f <lanyardLastActive>
     6dc:	90 93 30 38 	sts	0x3830, r25	; 0x803830 <lanyardLastActive+0x1>

    if (lastButtonState == 0xff){
     6e0:	80 91 03 38 	lds	r24, 0x3803	; 0x803803 <lastButtonState>
     6e4:	8f 3f       	cpi	r24, 0xFF	; 255
     6e6:	09 f0       	breq	.+2      	; 0x6ea <LanyardCode+0x84>
     6e8:	8c c0       	rjmp	.+280    	; 0x802 <LanyardCode+0x19c>
        switch (buttonState & 0x0f) {
     6ea:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <buttonState>
     6ee:	8f 70       	andi	r24, 0x0F	; 15
     6f0:	82 30       	cpi	r24, 0x02	; 2
     6f2:	61 f0       	breq	.+24     	; 0x70c <LanyardCode+0xa6>
     6f4:	28 f4       	brcc	.+10     	; 0x700 <LanyardCode+0x9a>
     6f6:	81 30       	cpi	r24, 0x01	; 1
     6f8:	69 f4       	brne	.+26     	; 0x714 <LanyardCode+0xae>
            case 0b0001:
                digit = 0;
     6fa:	10 92 02 38 	sts	0x3802, r1	; 0x803802 <digit>
                break;
     6fe:	0d c0       	rjmp	.+26     	; 0x71a <LanyardCode+0xb4>
        return 0;

    lanyardLastActive = getClock();

    if (lastButtonState == 0xff){
        switch (buttonState & 0x0f) {
     700:	84 30       	cpi	r24, 0x04	; 4
     702:	31 f0       	breq	.+12     	; 0x710 <LanyardCode+0xaa>
     704:	88 30       	cpi	r24, 0x08	; 8
     706:	31 f4       	brne	.+12     	; 0x714 <LanyardCode+0xae>
            case 0b0100:
                digit = 3;
                break;

            case 0b1000:
                digit = 2;
     708:	82 e0       	ldi	r24, 0x02	; 2
     70a:	05 c0       	rjmp	.+10     	; 0x716 <LanyardCode+0xb0>
            case 0b0001:
                digit = 0;
                break;

            case 0b0010:
                digit = 1;
     70c:	81 e0       	ldi	r24, 0x01	; 1
     70e:	03 c0       	rjmp	.+6      	; 0x716 <LanyardCode+0xb0>
                break;

            case 0b0100:
                digit = 3;
     710:	83 e0       	ldi	r24, 0x03	; 3
     712:	01 c0       	rjmp	.+2      	; 0x716 <LanyardCode+0xb0>
            case 0b1000:
                digit = 2;
                break;

            default:
                digit = 0xff;
     714:	8f ef       	ldi	r24, 0xFF	; 255
     716:	80 93 02 38 	sts	0x3802, r24	; 0x803802 <digit>
                break;
        }
        gameNow = LANYARD;
     71a:	83 e0       	ldi	r24, 0x03	; 3
     71c:	80 93 38 38 	sts	0x3838, r24	; 0x803838 <gameNow>
        /* TODO play tone for button */

        if (digit == lanyardCode[lanyardPos]) {
     720:	80 91 32 38 	lds	r24, 0x3832	; 0x803832 <lanyardPos>
     724:	e8 2f       	mov	r30, r24
     726:	f0 e0       	ldi	r31, 0x00	; 0
     728:	e2 55       	subi	r30, 0x52	; 82
     72a:	f3 44       	sbci	r31, 0x43	; 67
     72c:	20 81       	ld	r18, Z
     72e:	90 91 02 38 	lds	r25, 0x3802	; 0x803802 <digit>
     732:	29 13       	cpse	r18, r25
     734:	12 c0       	rjmp	.+36     	; 0x75a <LanyardCode+0xf4>
            lanyardState &= TRUE;
     736:	90 91 04 38 	lds	r25, 0x3804	; 0x803804 <lanyardState>
     73a:	91 70       	andi	r25, 0x01	; 1
     73c:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <lanyardState>
            iLED[EYE[R][L]] = 0;
     740:	e0 91 d5 bc 	lds	r30, 0xBCD5	; 0x80bcd5 <__bss_end+0x81c1>
     744:	f0 e0       	ldi	r31, 0x00	; 0
     746:	ec 53       	subi	r30, 0x3C	; 60
     748:	f5 4c       	sbci	r31, 0xC5	; 197
     74a:	10 82       	st	Z, r1
            iLED[EYE[R][R]] = 0;
     74c:	e0 91 d4 bc 	lds	r30, 0xBCD4	; 0x80bcd4 <__bss_end+0x81c0>
     750:	f0 e0       	ldi	r31, 0x00	; 0
     752:	ec 53       	subi	r30, 0x3C	; 60
     754:	f5 4c       	sbci	r31, 0xC5	; 197
     756:	10 82       	st	Z, r1
     758:	05 c0       	rjmp	.+10     	; 0x764 <LanyardCode+0xfe>
        } else {
            lanyardState = FALSE;
     75a:	10 92 04 38 	sts	0x3804, r1	; 0x803804 <lanyardState>
            if (lanyardPos < 4 ) {
     75e:	84 30       	cpi	r24, 0x04	; 4
     760:	08 f4       	brcc	.+2      	; 0x764 <LanyardCode+0xfe>
     762:	90 cf       	rjmp	.-224    	; 0x684 <LanyardCode+0x1e>
                */
                gameNow         = TEXT;
                return 0;
            }
        }
        lanyardPos++;
     764:	8f 5f       	subi	r24, 0xFF	; 255
     766:	80 93 32 38 	sts	0x3832, r24	; 0x803832 <lanyardPos>
        lanyardCnt++;            
     76a:	90 91 31 38 	lds	r25, 0x3831	; 0x803831 <lanyardCnt>
     76e:	9f 5f       	subi	r25, 0xFF	; 255
        if (lanyardCnt >= 4) {
     770:	94 30       	cpi	r25, 0x04	; 4
     772:	18 f4       	brcc	.+6      	; 0x77a <LanyardCode+0x114>
                gameNow         = TEXT;
                return 0;
            }
        }
        lanyardPos++;
        lanyardCnt++;            
     774:	90 93 31 38 	sts	0x3831, r25	; 0x803831 <lanyardCnt>
     778:	44 c0       	rjmp	.+136    	; 0x802 <LanyardCode+0x19c>
        if (lanyardCnt >= 4) {
            lanyardCnt = 0;
     77a:	10 92 31 38 	sts	0x3831, r1	; 0x803831 <lanyardCnt>
            if (lanyardState == TRUE) {
     77e:	90 91 04 38 	lds	r25, 0x3804	; 0x803804 <lanyardState>
     782:	91 30       	cpi	r25, 0x01	; 1
     784:	69 f5       	brne	.+90     	; 0x7e0 <LanyardCode+0x17a>
                iLED[HCKR[G][(lanyardPos/4)-1]] = dimValue;
     786:	e8 2f       	mov	r30, r24
     788:	e6 95       	lsr	r30
     78a:	e6 95       	lsr	r30
     78c:	f0 e0       	ldi	r31, 0x00	; 0
     78e:	e8 52       	subi	r30, 0x28	; 40
     790:	f3 44       	sbci	r31, 0x43	; 67
     792:	e5 81       	ldd	r30, Z+5	; 0x05
     794:	f0 e0       	ldi	r31, 0x00	; 0
     796:	90 91 0b 38 	lds	r25, 0x380B	; 0x80380b <dimValue>
     79a:	ec 53       	subi	r30, 0x3C	; 60
     79c:	f5 4c       	sbci	r31, 0xC5	; 197
     79e:	90 83       	st	Z, r25
                if (lanyardPos == sizeof(lanyardCode)) {
     7a0:	88 31       	cpi	r24, 0x18	; 24
                    UpdateState(LANYARD_COMPLETED);
     7a2:	79 f5       	brne	.+94     	; 0x802 <LanyardCode+0x19c>
     7a4:	8b e7       	ldi	r24, 0x7B	; 123
     7a6:	e1 d6       	rcall	.+3522   	; 0x156a <UpdateState>
                    iLED[CAT]       = 0;
     7a8:	ec 2f       	mov	r30, r28
     7aa:	f0 e0       	ldi	r31, 0x00	; 0
     7ac:	ec 53       	subi	r30, 0x3C	; 60
     7ae:	f5 4c       	sbci	r31, 0xC5	; 197
     7b0:	10 82       	st	Z, r1
                    iLED[EYE[R][L]] = 0;
     7b2:	e0 91 d5 bc 	lds	r30, 0xBCD5	; 0x80bcd5 <__bss_end+0x81c1>
     7b6:	f0 e0       	ldi	r31, 0x00	; 0
     7b8:	ec 53       	subi	r30, 0x3C	; 60
     7ba:	f5 4c       	sbci	r31, 0xC5	; 197
     7bc:	10 82       	st	Z, r1
                    iLED[EYE[R][R]] = 0;
     7be:	e0 91 d4 bc 	lds	r30, 0xBCD4	; 0x80bcd4 <__bss_end+0x81c0>
     7c2:	f0 e0       	ldi	r31, 0x00	; 0
     7c4:	ec 53       	subi	r30, 0x3C	; 60
     7c6:	f5 4c       	sbci	r31, 0xC5	; 197
     7c8:	10 82       	st	Z, r1
                    iLED[EYE[G][L]] = dimValue;
     7ca:	e0 91 d7 bc 	lds	r30, 0xBCD7	; 0x80bcd7 <__bss_end+0x81c3>
     7ce:	f0 e0       	ldi	r31, 0x00	; 0
     7d0:	80 91 0b 38 	lds	r24, 0x380B	; 0x80380b <dimValue>
     7d4:	ec 53       	subi	r30, 0x3C	; 60
     7d6:	f5 4c       	sbci	r31, 0xC5	; 197
     7d8:	80 83       	st	Z, r24
                    iLED[EYE[G][R]] = dimValue;
     7da:	e0 91 d6 bc 	lds	r30, 0xBCD6	; 0x80bcd6 <__bss_end+0x81c2>
                    /*TODO state = STATE_MUSIC;*/
                }
            } else {
                initLanyard();
     7de:	0b c0       	rjmp	.+22     	; 0x7f6 <LanyardCode+0x190>
     7e0:	0e df       	rcall	.-484    	; 0x5fe <initLanyard>
                iLED[EYE[R][L]] = dimValue;
     7e2:	e0 91 d5 bc 	lds	r30, 0xBCD5	; 0x80bcd5 <__bss_end+0x81c1>
     7e6:	f0 e0       	ldi	r31, 0x00	; 0
     7e8:	80 91 0b 38 	lds	r24, 0x380B	; 0x80380b <dimValue>
     7ec:	ec 53       	subi	r30, 0x3C	; 60
     7ee:	f5 4c       	sbci	r31, 0xC5	; 197
     7f0:	80 83       	st	Z, r24
                iLED[EYE[R][R]] = dimValue;
     7f2:	e0 91 d4 bc 	lds	r30, 0xBCD4	; 0x80bcd4 <__bss_end+0x81c0>
     7f6:	f0 e0       	ldi	r31, 0x00	; 0
     7f8:	80 91 0b 38 	lds	r24, 0x380B	; 0x80380b <dimValue>
     7fc:	ec 53       	subi	r30, 0x3C	; 60
     7fe:	f5 4c       	sbci	r31, 0xC5	; 197
     800:	80 83       	st	Z, r24
            }
        }
    }

    lastButtonState = buttonState;
     802:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <buttonState>
     806:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <lastButtonState>
    return 0;
}
     80a:	80 e0       	ldi	r24, 0x00	; 0
     80c:	cf 91       	pop	r28
     80e:	08 95       	ret

00000810 <initMaze>:
uint8_t         mazeState = TRUE;
uint8_t         inverted  = FALSE;
uint16_t        mazeLastActive = 0;

void initMaze() {
    mazePos = 0;
     810:	10 92 45 38 	sts	0x3845, r1	; 0x803845 <mazePos>
    mazeCnt = 0;
     814:	10 92 44 38 	sts	0x3844, r1	; 0x803844 <mazeCnt>
    mazeState = TRUE;
     818:	81 e0       	ldi	r24, 0x01	; 1
     81a:	80 93 0c 38 	sts	0x380C, r24	; 0x80380c <mazeState>
    inverted  = FALSE;
     81e:	10 92 43 38 	sts	0x3843, r1	; 0x803843 <inverted>
    iLED[CAT]       = 0;
     822:	e0 91 c6 bc 	lds	r30, 0xBCC6	; 0x80bcc6 <__bss_end+0x81b2>
     826:	f0 e0       	ldi	r31, 0x00	; 0
     828:	ec 53       	subi	r30, 0x3C	; 60
     82a:	f5 4c       	sbci	r31, 0xC5	; 197
     82c:	10 82       	st	Z, r1
    iLED[EYE[G][L]] = 0;
     82e:	e0 91 d7 bc 	lds	r30, 0xBCD7	; 0x80bcd7 <__bss_end+0x81c3>
     832:	f0 e0       	ldi	r31, 0x00	; 0
     834:	ec 53       	subi	r30, 0x3C	; 60
     836:	f5 4c       	sbci	r31, 0xC5	; 197
     838:	10 82       	st	Z, r1
    iLED[EYE[G][R]] = 0;
     83a:	e0 91 d6 bc 	lds	r30, 0xBCD6	; 0x80bcd6 <__bss_end+0x81c2>
     83e:	f0 e0       	ldi	r31, 0x00	; 0
     840:	ec 53       	subi	r30, 0x3C	; 60
     842:	f5 4c       	sbci	r31, 0xC5	; 197
     844:	10 82       	st	Z, r1
    iLED[EYE[R][L]] = 0;
     846:	e0 91 d5 bc 	lds	r30, 0xBCD5	; 0x80bcd5 <__bss_end+0x81c1>
     84a:	f0 e0       	ldi	r31, 0x00	; 0
     84c:	ec 53       	subi	r30, 0x3C	; 60
     84e:	f5 4c       	sbci	r31, 0xC5	; 197
     850:	10 82       	st	Z, r1
    iLED[EYE[R][R]] = 0;
     852:	e0 91 d4 bc 	lds	r30, 0xBCD4	; 0x80bcd4 <__bss_end+0x81c0>
     856:	f0 e0       	ldi	r31, 0x00	; 0
     858:	ec 53       	subi	r30, 0x3C	; 60
     85a:	f5 4c       	sbci	r31, 0xC5	; 197
     85c:	10 82       	st	Z, r1
     85e:	ae ed       	ldi	r26, 0xDE	; 222
     860:	bc eb       	ldi	r27, 0xBC	; 188
    for (int i=0; i<6; i++ )
        iLED[HCKR[G][i]] = 0;
     862:	ed 91       	ld	r30, X+
     864:	f0 e0       	ldi	r31, 0x00	; 0
     866:	ec 53       	subi	r30, 0x3C	; 60
     868:	f5 4c       	sbci	r31, 0xC5	; 197
     86a:	10 82       	st	Z, r1
    iLED[CAT]       = 0;
    iLED[EYE[G][L]] = 0;
    iLED[EYE[G][R]] = 0;
    iLED[EYE[R][L]] = 0;
    iLED[EYE[R][R]] = 0;
    for (int i=0; i<6; i++ )
     86c:	8c eb       	ldi	r24, 0xBC	; 188
     86e:	a4 3e       	cpi	r26, 0xE4	; 228
     870:	b8 07       	cpc	r27, r24
     872:	b9 f7       	brne	.-18     	; 0x862 <initMaze+0x52>
        iLED[HCKR[G][i]] = 0;
}
     874:	08 95       	ret

00000876 <showFieldStrength>:

void showFieldStrength(int16_t val) {
    uint8_t count;
    int16_t tmp;

    tmp = abs(val);
     876:	97 ff       	sbrs	r25, 7
     878:	03 c0       	rjmp	.+6      	; 0x880 <showFieldStrength+0xa>
     87a:	91 95       	neg	r25
     87c:	81 95       	neg	r24
     87e:	91 09       	sbc	r25, r1

    if ( tmp*2 > HALL_LOW )
     880:	9c 01       	movw	r18, r24
     882:	22 0f       	add	r18, r18
     884:	33 1f       	adc	r19, r19
     886:	29 37       	cpi	r18, 0x79	; 121
     888:	31 05       	cpc	r19, r1
     88a:	44 f0       	brlt	.+16     	; 0x89c <showFieldStrength+0x26>
        gameNow = MAZE;
     88c:	41 e0       	ldi	r20, 0x01	; 1
     88e:	40 93 38 38 	sts	0x3838, r20	; 0x803838 <gameNow>

    if ( tmp*2 < HALL_LOW )
        count = 0;
    else if ( tmp   < HALL_LOW )
     892:	88 37       	cpi	r24, 0x78	; 120
     894:	91 05       	cpc	r25, r1
     896:	74 f4       	brge	.+28     	; 0x8b4 <showFieldStrength+0x3e>
        count = 1;
     898:	81 e0       	ldi	r24, 0x01	; 1
     89a:	1f c0       	rjmp	.+62     	; 0x8da <showFieldStrength+0x64>
    tmp = abs(val);

    if ( tmp*2 > HALL_LOW )
        gameNow = MAZE;

    if ( tmp*2 < HALL_LOW )
     89c:	28 37       	cpi	r18, 0x78	; 120
     89e:	31 05       	cpc	r19, r1
     8a0:	29 f4       	brne	.+10     	; 0x8ac <showFieldStrength+0x36>
        count = 0;
    else if ( tmp   < HALL_LOW )
     8a2:	88 37       	cpi	r24, 0x78	; 120
     8a4:	91 05       	cpc	r25, r1
     8a6:	24 f4       	brge	.+8      	; 0x8b0 <showFieldStrength+0x3a>
        count = 1;
     8a8:	81 e0       	ldi	r24, 0x01	; 1
     8aa:	11 c0       	rjmp	.+34     	; 0x8ce <showFieldStrength+0x58>

    if ( tmp*2 > HALL_LOW )
        gameNow = MAZE;

    if ( tmp*2 < HALL_LOW )
        count = 0;
     8ac:	80 e0       	ldi	r24, 0x00	; 0
     8ae:	0f c0       	rjmp	.+30     	; 0x8ce <showFieldStrength+0x58>
    else if ( tmp   < HALL_LOW )
        count = 1;
    else if ( tmp*2 < HALL_HIGH )
        count = 2;
     8b0:	82 e0       	ldi	r24, 0x02	; 2
     8b2:	0d c0       	rjmp	.+26     	; 0x8ce <showFieldStrength+0x58>

    if ( tmp*2 < HALL_LOW )
        count = 0;
    else if ( tmp   < HALL_LOW )
        count = 1;
    else if ( tmp*2 < HALL_HIGH )
     8b4:	2c 32       	cpi	r18, 0x2C	; 44
     8b6:	41 e0       	ldi	r20, 0x01	; 1
     8b8:	34 07       	cpc	r19, r20
     8ba:	74 f0       	brlt	.+28     	; 0x8d8 <showFieldStrength+0x62>
        count = 2;
    else if ( tmp*3 < HALL_HIGH*2 )
     8bc:	28 0f       	add	r18, r24
     8be:	39 1f       	adc	r19, r25
     8c0:	28 35       	cpi	r18, 0x58	; 88
     8c2:	32 40       	sbci	r19, 0x02	; 2
     8c4:	5c f1       	brlt	.+86     	; 0x91c <showFieldStrength+0xa6>
        count = 3;
    else if ( tmp   < HALL_HIGH )
     8c6:	8c 32       	cpi	r24, 0x2C	; 44
     8c8:	91 40       	sbci	r25, 0x01	; 1
     8ca:	54 f1       	brlt	.+84     	; 0x920 <showFieldStrength+0xaa>
        count = 4;
    else
        count = 5;
     8cc:	85 e0       	ldi	r24, 0x05	; 5

    if (gameNow == MAZE) {
     8ce:	90 91 38 38 	lds	r25, 0x3838	; 0x803838 <gameNow>
     8d2:	91 30       	cpi	r25, 0x01	; 1
     8d4:	39 f5       	brne	.+78     	; 0x924 <showFieldStrength+0xae>
     8d6:	01 c0       	rjmp	.+2      	; 0x8da <showFieldStrength+0x64>
    if ( tmp*2 < HALL_LOW )
        count = 0;
    else if ( tmp   < HALL_LOW )
        count = 1;
    else if ( tmp*2 < HALL_HIGH )
        count = 2;
     8d8:	82 e0       	ldi	r24, 0x02	; 2
     8da:	ea ec       	ldi	r30, 0xCA	; 202
     8dc:	fc eb       	ldi	r31, 0xBC	; 188
     8de:	90 e0       	ldi	r25, 0x00	; 0
        count = 5;

    if (gameNow == MAZE) {
        for (uint8_t i=0; i<5; i++) {
            if (i<count) {
                iLED[WING[L][i]] = dimValue;
     8e0:	a5 81       	ldd	r26, Z+5	; 0x05
     8e2:	b0 e0       	ldi	r27, 0x00	; 0
    else
        count = 5;

    if (gameNow == MAZE) {
        for (uint8_t i=0; i<5; i++) {
            if (i<count) {
     8e4:	98 17       	cp	r25, r24
     8e6:	68 f4       	brcc	.+26     	; 0x902 <showFieldStrength+0x8c>
                iLED[WING[L][i]] = dimValue;
     8e8:	20 91 0b 38 	lds	r18, 0x380B	; 0x80380b <dimValue>
     8ec:	ac 53       	subi	r26, 0x3C	; 60
     8ee:	b5 4c       	sbci	r27, 0xC5	; 197
     8f0:	2c 93       	st	X, r18
                iLED[WING[R][i]] = dimValue;
     8f2:	a0 81       	ld	r26, Z
     8f4:	b0 e0       	ldi	r27, 0x00	; 0
     8f6:	20 91 0b 38 	lds	r18, 0x380B	; 0x80380b <dimValue>
     8fa:	ac 53       	subi	r26, 0x3C	; 60
     8fc:	b5 4c       	sbci	r27, 0xC5	; 197
     8fe:	2c 93       	st	X, r18
     900:	08 c0       	rjmp	.+16     	; 0x912 <showFieldStrength+0x9c>
            } else {
                iLED[WING[L][i]] = 0;
     902:	ac 53       	subi	r26, 0x3C	; 60
     904:	b5 4c       	sbci	r27, 0xC5	; 197
     906:	1c 92       	st	X, r1
                iLED[WING[R][i]] = 0;
     908:	a0 81       	ld	r26, Z
     90a:	b0 e0       	ldi	r27, 0x00	; 0
     90c:	ac 53       	subi	r26, 0x3C	; 60
     90e:	b5 4c       	sbci	r27, 0xC5	; 197
     910:	1c 92       	st	X, r1
        count = 4;
    else
        count = 5;

    if (gameNow == MAZE) {
        for (uint8_t i=0; i<5; i++) {
     912:	9f 5f       	subi	r25, 0xFF	; 255
     914:	31 96       	adiw	r30, 0x01	; 1
     916:	95 30       	cpi	r25, 0x05	; 5
     918:	19 f7       	brne	.-58     	; 0x8e0 <showFieldStrength+0x6a>
     91a:	08 95       	ret
    else if ( tmp   < HALL_LOW )
        count = 1;
    else if ( tmp*2 < HALL_HIGH )
        count = 2;
    else if ( tmp*3 < HALL_HIGH*2 )
        count = 3;
     91c:	83 e0       	ldi	r24, 0x03	; 3
     91e:	d7 cf       	rjmp	.-82     	; 0x8ce <showFieldStrength+0x58>
    else if ( tmp   < HALL_HIGH )
        count = 4;
     920:	84 e0       	ldi	r24, 0x04	; 4
     922:	d5 cf       	rjmp	.-86     	; 0x8ce <showFieldStrength+0x58>
     924:	08 95       	ret

00000926 <MagnetMaze>:
        }
    }
}

// Main game loop
uint8_t MagnetMaze(){
     926:	cf 93       	push	r28
     928:	df 93       	push	r29
    if (gameNow == MAZE && idleTimeout(mazeLastActive,MAZE_MAX_IDLE)) {
     92a:	80 91 38 38 	lds	r24, 0x3838	; 0x803838 <gameNow>
     92e:	81 30       	cpi	r24, 0x01	; 1
     930:	71 f4       	brne	.+28     	; 0x94e <MagnetMaze+0x28>
     932:	6a e0       	ldi	r22, 0x0A	; 10
     934:	70 e0       	ldi	r23, 0x00	; 0
     936:	80 91 41 38 	lds	r24, 0x3841	; 0x803841 <mazeLastActive>
     93a:	90 91 42 38 	lds	r25, 0x3842	; 0x803842 <mazeLastActive+0x1>
     93e:	0e 94 ce 0c 	call	0x199c	; 0x199c <idleTimeout>
     942:	88 23       	and	r24, r24
     944:	21 f0       	breq	.+8      	; 0x94e <MagnetMaze+0x28>
        /* clean up maze game and go back to text game */
        initMaze();
     946:	64 df       	rcall	.-312    	; 0x810 <initMaze>
        gameNow = TEXT;
     948:	10 92 38 38 	sts	0x3838, r1	; 0x803838 <gameNow>
        return 0;
     94c:	eb c0       	rjmp	.+470    	; 0xb24 <MagnetMaze+0x1fe>

    if (CheckState(MAZE_COMPLETED))
        return 0;

    */
    if ( (gameNow != TEXT) && (gameNow != MAZE) )
     94e:	80 91 38 38 	lds	r24, 0x3838	; 0x803838 <gameNow>
     952:	82 30       	cpi	r24, 0x02	; 2
     954:	08 f0       	brcs	.+2      	; 0x958 <MagnetMaze+0x32>
     956:	e6 c0       	rjmp	.+460    	; 0xb24 <MagnetMaze+0x1fe>
        return 0;

    if (calHall == 0)
     958:	80 91 ed 3a 	lds	r24, 0x3AED	; 0x803aed <calHall>
     95c:	90 91 ee 3a 	lds	r25, 0x3AEE	; 0x803aee <calHall+0x1>
     960:	89 2b       	or	r24, r25
     962:	41 f4       	brne	.+16     	; 0x974 <MagnetMaze+0x4e>
        calHall = adcHall;
     964:	80 91 b5 3a 	lds	r24, 0x3AB5	; 0x803ab5 <adcHall>
     968:	90 91 b6 3a 	lds	r25, 0x3AB6	; 0x803ab6 <adcHall+0x1>
     96c:	80 93 ed 3a 	sts	0x3AED, r24	; 0x803aed <calHall>
     970:	90 93 ee 3a 	sts	0x3AEE, r25	; 0x803aee <calHall+0x1>

    int16_t valHall = adcHall - calHall;
     974:	c0 91 b5 3a 	lds	r28, 0x3AB5	; 0x803ab5 <adcHall>
     978:	d0 91 b6 3a 	lds	r29, 0x3AB6	; 0x803ab6 <adcHall+0x1>
     97c:	80 91 ed 3a 	lds	r24, 0x3AED	; 0x803aed <calHall>
     980:	90 91 ee 3a 	lds	r25, 0x3AEE	; 0x803aee <calHall+0x1>
     984:	c8 1b       	sub	r28, r24
     986:	d9 0b       	sbc	r29, r25
    showFieldStrength(valHall);
     988:	ce 01       	movw	r24, r28
     98a:	75 df       	rcall	.-278    	; 0x876 <showFieldStrength>

    switch (curHallState) {
     98c:	80 91 47 38 	lds	r24, 0x3847	; 0x803847 <curHallState>
     990:	81 30       	cpi	r24, 0x01	; 1
     992:	89 f0       	breq	.+34     	; 0x9b6 <MagnetMaze+0x90>
     994:	18 f0       	brcs	.+6      	; 0x99c <MagnetMaze+0x76>
     996:	82 30       	cpi	r24, 0x02	; 2
     998:	c1 f0       	breq	.+48     	; 0x9ca <MagnetMaze+0xa4>
     99a:	1f c0       	rjmp	.+62     	; 0x9da <MagnetMaze+0xb4>
        case 0:
            if ( valHall + HALL_HIGH < 0 ) {
     99c:	c4 3d       	cpi	r28, 0xD4	; 212
     99e:	9e ef       	ldi	r25, 0xFE	; 254
     9a0:	d9 07       	cpc	r29, r25
     9a2:	14 f4       	brge	.+4      	; 0x9a8 <MagnetMaze+0x82>
                newHallState = 1;
     9a4:	91 e0       	ldi	r25, 0x01	; 1
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <MagnetMaze+0x8a>
            } else if ( valHall - HALL_HIGH > 0 ) {
     9a8:	cd 32       	cpi	r28, 0x2D	; 45
     9aa:	d1 40       	sbci	r29, 0x01	; 1
     9ac:	5c f0       	brlt	.+22     	; 0x9c4 <MagnetMaze+0x9e>
                newHallState = 2;
     9ae:	92 e0       	ldi	r25, 0x02	; 2
     9b0:	90 93 46 38 	sts	0x3846, r25	; 0x803846 <newHallState>
     9b4:	12 c0       	rjmp	.+36     	; 0x9da <MagnetMaze+0xb4>
                newHallState = 0;
            }
            break;
        
        case 1:
            if ( valHall - HALL_HIGH > 0 ) {
     9b6:	cd 32       	cpi	r28, 0x2D	; 45
     9b8:	91 e0       	ldi	r25, 0x01	; 1
     9ba:	d9 07       	cpc	r29, r25
     9bc:	c4 f7       	brge	.-16     	; 0x9ae <MagnetMaze+0x88>
                newHallState = 2;
            } else if ( valHall + HALL_LOW > 0 ) {
     9be:	c9 38       	cpi	r28, 0x89	; 137
     9c0:	df 4f       	sbci	r29, 0xFF	; 255
     9c2:	84 f3       	brlt	.-32     	; 0x9a4 <MagnetMaze+0x7e>
            if ( valHall + HALL_HIGH < 0 ) {
                newHallState = 1;
            } else if ( valHall - HALL_HIGH > 0 ) {
                newHallState = 2;
            } else {
                newHallState = 0;
     9c4:	10 92 46 38 	sts	0x3846, r1	; 0x803846 <newHallState>
     9c8:	08 c0       	rjmp	.+16     	; 0x9da <MagnetMaze+0xb4>
                newHallState = 1;
            }
            break;
        
        case 2:
            if ( valHall + HALL_HIGH < 0 ) {
     9ca:	c4 3d       	cpi	r28, 0xD4	; 212
     9cc:	9e ef       	ldi	r25, 0xFE	; 254
     9ce:	d9 07       	cpc	r29, r25
     9d0:	4c f3       	brlt	.-46     	; 0x9a4 <MagnetMaze+0x7e>
                newHallState = 1;
            } else if ( valHall - HALL_LOW < 0 ) {
     9d2:	c8 37       	cpi	r28, 0x78	; 120
     9d4:	d1 05       	cpc	r29, r1
     9d6:	b4 f3       	brlt	.-20     	; 0x9c4 <MagnetMaze+0x9e>
     9d8:	ea cf       	rjmp	.-44     	; 0x9ae <MagnetMaze+0x88>
            }
            break;
    }

    /* activate led for hallstate */
    iLED[CAT] = (newHallState ? dimValue : 0);
     9da:	c0 91 c6 bc 	lds	r28, 0xBCC6	; 0x80bcc6 <__bss_end+0x81b2>
     9de:	ec 2f       	mov	r30, r28
     9e0:	f0 e0       	ldi	r31, 0x00	; 0
     9e2:	90 91 46 38 	lds	r25, 0x3846	; 0x803846 <newHallState>
     9e6:	99 23       	and	r25, r25
     9e8:	19 f0       	breq	.+6      	; 0x9f0 <MagnetMaze+0xca>
     9ea:	20 91 0b 38 	lds	r18, 0x380B	; 0x80380b <dimValue>
     9ee:	01 c0       	rjmp	.+2      	; 0x9f2 <MagnetMaze+0xcc>
     9f0:	20 e0       	ldi	r18, 0x00	; 0
     9f2:	ec 53       	subi	r30, 0x3C	; 60
     9f4:	f5 4c       	sbci	r31, 0xC5	; 197
     9f6:	20 83       	st	Z, r18

    if (newHallState != curHallState) {
     9f8:	89 17       	cp	r24, r25
     9fa:	09 f4       	brne	.+2      	; 0x9fe <MagnetMaze+0xd8>
        /* keep track of time to enable an idle timeout to exit the game */
        mazeLastActive = getClock();
     9fc:	93 c0       	rjmp	.+294    	; 0xb24 <MagnetMaze+0x1fe>
     9fe:	bf d7       	rcall	.+3966   	; 0x197e <getClock>
     a00:	80 93 41 38 	sts	0x3841, r24	; 0x803841 <mazeLastActive>
     a04:	90 93 42 38 	sts	0x3842, r25	; 0x803842 <mazeLastActive+0x1>

        /* Make the maze work regardless of badge orientation */
        if ((mazePos == 0) && (newHallState != 0))
     a08:	20 91 45 38 	lds	r18, 0x3845	; 0x803845 <mazePos>
     a0c:	80 91 46 38 	lds	r24, 0x3846	; 0x803846 <newHallState>
     a10:	21 11       	cpse	r18, r1
     a12:	08 c0       	rjmp	.+16     	; 0xa24 <MagnetMaze+0xfe>
     a14:	88 23       	and	r24, r24
     a16:	31 f0       	breq	.+12     	; 0xa24 <MagnetMaze+0xfe>
            inverted = (newHallState != mazeCode[0]) ? TRUE : FALSE;
     a18:	91 e0       	ldi	r25, 0x01	; 1
     a1a:	81 30       	cpi	r24, 0x01	; 1
     a1c:	09 f4       	brne	.+2      	; 0xa20 <MagnetMaze+0xfa>
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	90 93 43 38 	sts	0x3843, r25	; 0x803843 <inverted>

        curHallState = newHallState;
     a24:	80 93 47 38 	sts	0x3847, r24	; 0x803847 <curHallState>
        
        if (curHallState != 0) {
     a28:	88 23       	and	r24, r24
     a2a:	09 f4       	brne	.+2      	; 0xa2e <MagnetMaze+0x108>
     a2c:	7b c0       	rjmp	.+246    	; 0xb24 <MagnetMaze+0x1fe>
            gameNow = MAZE;
     a2e:	91 e0       	ldi	r25, 0x01	; 1
     a30:	90 93 38 38 	sts	0x3838, r25	; 0x803838 <gameNow>
            if ( (inverted ? curHallState^3 : curHallState) == mazeCode[mazePos]) {
     a34:	90 91 43 38 	lds	r25, 0x3843	; 0x803843 <inverted>
     a38:	99 23       	and	r25, r25
     a3a:	11 f0       	breq	.+4      	; 0xa40 <MagnetMaze+0x11a>
     a3c:	93 e0       	ldi	r25, 0x03	; 3
     a3e:	89 27       	eor	r24, r25
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	e2 2f       	mov	r30, r18
     a44:	f0 e0       	ldi	r31, 0x00	; 0
     a46:	ec 5f       	subi	r30, 0xFC	; 252
     a48:	f2 44       	sbci	r31, 0x42	; 66
     a4a:	40 81       	ld	r20, Z
     a4c:	50 e0       	ldi	r21, 0x00	; 0
     a4e:	84 17       	cp	r24, r20
     a50:	95 07       	cpc	r25, r21
     a52:	91 f4       	brne	.+36     	; 0xa78 <MagnetMaze+0x152>
                mazeState &= TRUE;
     a54:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <mazeState>
     a58:	81 70       	andi	r24, 0x01	; 1
     a5a:	80 93 0c 38 	sts	0x380C, r24	; 0x80380c <mazeState>
                iLED[EYE[R][L]] = 0;
     a5e:	e0 91 d5 bc 	lds	r30, 0xBCD5	; 0x80bcd5 <__bss_end+0x81c1>
     a62:	f0 e0       	ldi	r31, 0x00	; 0
     a64:	ec 53       	subi	r30, 0x3C	; 60
     a66:	f5 4c       	sbci	r31, 0xC5	; 197
     a68:	10 82       	st	Z, r1
                iLED[EYE[R][R]] = 0;
     a6a:	e0 91 d4 bc 	lds	r30, 0xBCD4	; 0x80bcd4 <__bss_end+0x81c0>
     a6e:	f0 e0       	ldi	r31, 0x00	; 0
     a70:	ec 53       	subi	r30, 0x3C	; 60
     a72:	f5 4c       	sbci	r31, 0xC5	; 197
     a74:	10 82       	st	Z, r1
     a76:	02 c0       	rjmp	.+4      	; 0xa7c <MagnetMaze+0x156>
            } else {
                mazeState = FALSE;
     a78:	10 92 0c 38 	sts	0x380C, r1	; 0x80380c <mazeState>
                /* play tone BAD */
            }
            mazePos++;
     a7c:	81 e0       	ldi	r24, 0x01	; 1
     a7e:	82 0f       	add	r24, r18
     a80:	80 93 45 38 	sts	0x3845, r24	; 0x803845 <mazePos>
            mazeCnt++;            
     a84:	90 91 44 38 	lds	r25, 0x3844	; 0x803844 <mazeCnt>
     a88:	9f 5f       	subi	r25, 0xFF	; 255
            if (mazeCnt >= 3) {
     a8a:	93 30       	cpi	r25, 0x03	; 3
     a8c:	18 f4       	brcc	.+6      	; 0xa94 <MagnetMaze+0x16e>
            } else {
                mazeState = FALSE;
                /* play tone BAD */
            }
            mazePos++;
            mazeCnt++;            
     a8e:	90 93 44 38 	sts	0x3844, r25	; 0x803844 <mazeCnt>
     a92:	48 c0       	rjmp	.+144    	; 0xb24 <MagnetMaze+0x1fe>
            if (mazeCnt >= 3) {
                mazeCnt = 0;
     a94:	10 92 44 38 	sts	0x3844, r1	; 0x803844 <mazeCnt>
                if (mazeState == TRUE) {
     a98:	90 91 0c 38 	lds	r25, 0x380C	; 0x80380c <mazeState>
     a9c:	91 30       	cpi	r25, 0x01	; 1
     a9e:	79 f5       	brne	.+94     	; 0xafe <MagnetMaze+0x1d8>
                    /* play tone GOOD */
                    iLED[HCKR[G][(mazePos/3)-1]] = dimValue;
     aa0:	eb ea       	ldi	r30, 0xAB	; 171
     aa2:	8e 9f       	mul	r24, r30
     aa4:	e1 2d       	mov	r30, r1
     aa6:	11 24       	eor	r1, r1
     aa8:	e6 95       	lsr	r30
     aaa:	f0 e0       	ldi	r31, 0x00	; 0
     aac:	e8 52       	subi	r30, 0x28	; 40
     aae:	f3 44       	sbci	r31, 0x43	; 67
     ab0:	e5 81       	ldd	r30, Z+5	; 0x05
     ab2:	f0 e0       	ldi	r31, 0x00	; 0
     ab4:	90 91 0b 38 	lds	r25, 0x380B	; 0x80380b <dimValue>
     ab8:	ec 53       	subi	r30, 0x3C	; 60
     aba:	f5 4c       	sbci	r31, 0xC5	; 197
     abc:	90 83       	st	Z, r25
                    if (mazePos == sizeof(mazeCode)) {
     abe:	82 31       	cpi	r24, 0x12	; 18
                        UpdateState(MAZE_COMPLETED);
     ac0:	89 f5       	brne	.+98     	; 0xb24 <MagnetMaze+0x1fe>
     ac2:	8d e7       	ldi	r24, 0x7D	; 125
     ac4:	52 d5       	rcall	.+2724   	; 0x156a <UpdateState>
                        iLED[CAT]       = 0;
     ac6:	ec 2f       	mov	r30, r28
     ac8:	f0 e0       	ldi	r31, 0x00	; 0
     aca:	ec 53       	subi	r30, 0x3C	; 60
     acc:	f5 4c       	sbci	r31, 0xC5	; 197
     ace:	10 82       	st	Z, r1
                        iLED[EYE[R][L]] = 0;
     ad0:	e0 91 d5 bc 	lds	r30, 0xBCD5	; 0x80bcd5 <__bss_end+0x81c1>
     ad4:	f0 e0       	ldi	r31, 0x00	; 0
     ad6:	ec 53       	subi	r30, 0x3C	; 60
     ad8:	f5 4c       	sbci	r31, 0xC5	; 197
     ada:	10 82       	st	Z, r1
                        iLED[EYE[R][R]] = 0;
     adc:	e0 91 d4 bc 	lds	r30, 0xBCD4	; 0x80bcd4 <__bss_end+0x81c0>
     ae0:	f0 e0       	ldi	r31, 0x00	; 0
     ae2:	ec 53       	subi	r30, 0x3C	; 60
     ae4:	f5 4c       	sbci	r31, 0xC5	; 197
     ae6:	10 82       	st	Z, r1
                        iLED[EYE[G][L]] = dimValue;
     ae8:	e0 91 d7 bc 	lds	r30, 0xBCD7	; 0x80bcd7 <__bss_end+0x81c3>
     aec:	f0 e0       	ldi	r31, 0x00	; 0
     aee:	80 91 0b 38 	lds	r24, 0x380B	; 0x80380b <dimValue>
     af2:	ec 53       	subi	r30, 0x3C	; 60
     af4:	f5 4c       	sbci	r31, 0xC5	; 197
                        iLED[EYE[G][R]] = dimValue;
     af6:	80 83       	st	Z, r24
     af8:	e0 91 d6 bc 	lds	r30, 0xBCD6	; 0x80bcd6 <__bss_end+0x81c2>
                        /*state = STATE_MUSIC;*/
                    }
                } else {
                    initMaze();
     afc:	0d c0       	rjmp	.+26     	; 0xb18 <MagnetMaze+0x1f2>
     afe:	88 de       	rcall	.-752    	; 0x810 <initMaze>
                    gameNow   = TEXT;
     b00:	10 92 38 38 	sts	0x3838, r1	; 0x803838 <gameNow>
                    iLED[EYE[R][L]] = dimValue;
     b04:	e0 91 d5 bc 	lds	r30, 0xBCD5	; 0x80bcd5 <__bss_end+0x81c1>
     b08:	f0 e0       	ldi	r31, 0x00	; 0
     b0a:	80 91 0b 38 	lds	r24, 0x380B	; 0x80380b <dimValue>
     b0e:	ec 53       	subi	r30, 0x3C	; 60
     b10:	f5 4c       	sbci	r31, 0xC5	; 197
     b12:	80 83       	st	Z, r24
                    iLED[EYE[R][R]] = dimValue;
     b14:	e0 91 d4 bc 	lds	r30, 0xBCD4	; 0x80bcd4 <__bss_end+0x81c0>
     b18:	f0 e0       	ldi	r31, 0x00	; 0
     b1a:	80 91 0b 38 	lds	r24, 0x380B	; 0x80380b <dimValue>
     b1e:	ec 53       	subi	r30, 0x3C	; 60
     b20:	f5 4c       	sbci	r31, 0xC5	; 197
     b22:	80 83       	st	Z, r24
                }
            }
        }
    }
    return 0;
}
     b24:	80 e0       	ldi	r24, 0x00	; 0
     b26:	df 91       	pop	r29
     b28:	cf 91       	pop	r28
     b2a:	08 95       	ret

00000b2c <Setup>:

volatile uint16_t tmp16bit;    
volatile uint8_t mask[8] = {0x01, 0x03, 0x07, 0x0f, 0x1f, 0x3f, 0x7f, 0xff};
uint8_t heart = 0;

void Setup(){
     b2c:	cf 93       	push	r28
     b2e:	df 93       	push	r29
    cli();
     b30:	f8 94       	cli

    //Set up clock at 10MHz
    CCP = CCP_IOREG_gc;
     b32:	88 ed       	ldi	r24, 0xD8	; 216
     b34:	84 bf       	out	0x34, r24	; 52
    CLKCTRL_MCLKCTRLB = 0x01;
     b36:	c1 e0       	ldi	r28, 0x01	; 1
     b38:	c0 93 61 00 	sts	0x0061, r28	; 0x800061 <__TEXT_REGION_LENGTH__+0x700061>

    //Set I/O direction registers
    PORTA_DIR = 0b01001010;
     b3c:	8a e4       	ldi	r24, 0x4A	; 74
     b3e:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <__TEXT_REGION_LENGTH__+0x700400>
    PORTB_DIR = 0b01111100;
     b42:	8c e7       	ldi	r24, 0x7C	; 124
     b44:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <__TEXT_REGION_LENGTH__+0x700420>
    PORTC_DIR = 0b00111111;
     b48:	9f e3       	ldi	r25, 0x3F	; 63
     b4a:	90 93 40 04 	sts	0x0440, r25	; 0x800440 <__TEXT_REGION_LENGTH__+0x700440>

    //Invert some pins for correcting LED reversal error
    PORTC_PIN3CTRL |= 0x80;
     b4e:	80 91 53 04 	lds	r24, 0x0453	; 0x800453 <__TEXT_REGION_LENGTH__+0x700453>
     b52:	80 68       	ori	r24, 0x80	; 128
     b54:	80 93 53 04 	sts	0x0453, r24	; 0x800453 <__TEXT_REGION_LENGTH__+0x700453>
    PORTC_PIN4CTRL |= 0x80;
     b58:	80 91 54 04 	lds	r24, 0x0454	; 0x800454 <__TEXT_REGION_LENGTH__+0x700454>
     b5c:	80 68       	ori	r24, 0x80	; 128
     b5e:	80 93 54 04 	sts	0x0454, r24	; 0x800454 <__TEXT_REGION_LENGTH__+0x700454>
    PORTC_PIN5CTRL |= 0x80;
     b62:	80 91 55 04 	lds	r24, 0x0455	; 0x800455 <__TEXT_REGION_LENGTH__+0x700455>
     b66:	80 68       	ori	r24, 0x80	; 128
     b68:	80 93 55 04 	sts	0x0455, r24	; 0x800455 <__TEXT_REGION_LENGTH__+0x700455>
    PORTB_PIN3CTRL |= 0x80;
     b6c:	80 91 33 04 	lds	r24, 0x0433	; 0x800433 <__TEXT_REGION_LENGTH__+0x700433>
     b70:	80 68       	ori	r24, 0x80	; 128
     b72:	80 93 33 04 	sts	0x0433, r24	; 0x800433 <__TEXT_REGION_LENGTH__+0x700433>
    PORTB_PIN4CTRL |= 0x80;
     b76:	80 91 34 04 	lds	r24, 0x0434	; 0x800434 <__TEXT_REGION_LENGTH__+0x700434>
     b7a:	80 68       	ori	r24, 0x80	; 128
     b7c:	80 93 34 04 	sts	0x0434, r24	; 0x800434 <__TEXT_REGION_LENGTH__+0x700434>
    PORTB_PIN5CTRL |= 0x80;
     b80:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <__TEXT_REGION_LENGTH__+0x700435>
     b84:	80 68       	ori	r24, 0x80	; 128
     b86:	80 93 35 04 	sts	0x0435, r24	; 0x800435 <__TEXT_REGION_LENGTH__+0x700435>
    PORTB_PIN2CTRL |= 0x80;
    PORTB_PIN6CTRL |= 0x80;
    */

    //UART (Alternative pins PA1=TxD, PA2=RxD, baudrate 9600, 8n1, RX and Buffer empty interrupts on)
    PORTMUX_CTRLB = 0x01;
     b8a:	c0 93 01 02 	sts	0x0201, r28	; 0x800201 <__TEXT_REGION_LENGTH__+0x700201>
    PORTA_OUTSET = 0x02;
     b8e:	d2 e0       	ldi	r29, 0x02	; 2
     b90:	d0 93 05 04 	sts	0x0405, r29	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
    USART0_BAUD = (uint16_t)USART0_BAUD_RATE(115200);
     b94:	2b e5       	ldi	r18, 0x5B	; 91
     b96:	31 e0       	ldi	r19, 0x01	; 1
     b98:	20 93 08 08 	sts	0x0808, r18	; 0x800808 <__TEXT_REGION_LENGTH__+0x700808>
     b9c:	30 93 09 08 	sts	0x0809, r19	; 0x800809 <__TEXT_REGION_LENGTH__+0x700809>
    USART0_CTRLA = 0xA0; //Interrupts on
     ba0:	80 ea       	ldi	r24, 0xA0	; 160
     ba2:	80 93 05 08 	sts	0x0805, r24	; 0x800805 <__TEXT_REGION_LENGTH__+0x700805>
    USART0_CTRLB = 0xC0; //RX and TX on
     ba6:	80 ec       	ldi	r24, 0xC0	; 192
     ba8:	80 93 06 08 	sts	0x0806, r24	; 0x800806 <__TEXT_REGION_LENGTH__+0x700806>
    USART0_CTRLC = 0x03; //8 bits data, no parity, 1 stop bit
     bac:	83 e0       	ldi	r24, 0x03	; 3
     bae:	80 93 07 08 	sts	0x0807, r24	; 0x800807 <__TEXT_REGION_LENGTH__+0x700807>
     
    //GPIO registers 0..3 can be used for global variables used in ISR routines (ASM capability: IN, OUT, SBI, CBI, SBIS, SBIC)
    L_COL = 0;     //Used in LED array to hold currently driven column value
     bb2:	1c ba       	out	0x1c, r1	; 28
    RXCNT = 0;     //Used as UART receive counter
     bb4:	1d ba       	out	0x1d, r1	; 29
    AUPOS = 0;     //Used as audio input/output buffer counter
     bb6:	1e ba       	out	0x1e, r1	; 30
    GPIOR3 = 0;    //
     bb8:	1f ba       	out	0x1f, r1	; 31

    //Init TCA (split mode, f_CLK/16, PWM on 6 alternative pins, underflow int enabled, synced and started)
    TCA0_SPLIT_CTRLD = 1;
     bba:	c0 93 03 0a 	sts	0x0A03, r28	; 0x800a03 <__TEXT_REGION_LENGTH__+0x700a03>
    TCA0_SPLIT_CTRLA = (0x4)<<1;
     bbe:	88 e0       	ldi	r24, 0x08	; 8
     bc0:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
    PORTMUX_CTRLC = 0x3F;
     bc4:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <__TEXT_REGION_LENGTH__+0x700202>
    TCA0_SPLIT_CTRLB = 0x77;
     bc8:	87 e7       	ldi	r24, 0x77	; 119
     bca:	80 93 01 0a 	sts	0x0A01, r24	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
    TCA0_SPLIT_INTCTRL = 0x1;
     bce:	c0 93 0a 0a 	sts	0x0A0A, r28	; 0x800a0a <__TEXT_REGION_LENGTH__+0x700a0a>
    TCA0_SPLIT_CTRLESET = ((0x2)<<2)|0x3;
     bd2:	8b e0       	ldi	r24, 0x0B	; 11
     bd4:	80 93 05 0a 	sts	0x0A05, r24	; 0x800a05 <__TEXT_REGION_LENGTH__+0x700a05>
    TCA0_SPLIT_CTRLA |= 1;
     bd8:	80 91 00 0a 	lds	r24, 0x0A00	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
     bdc:	81 60       	ori	r24, 0x01	; 1
     bde:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
     
    //Init TCB0 (compare value sets serial Tx pause between characters, uses TCA0 prescaler, enabled, interrupt disabled)
    TCB0_CTRLA = ((0x02)<<1)|0x01;
     be2:	85 e0       	ldi	r24, 0x05	; 5
     be4:	80 93 40 0a 	sts	0x0A40, r24	; 0x800a40 <__TEXT_REGION_LENGTH__+0x700a40>
    TCB0_CTRLB = 0;
     be8:	10 92 41 0a 	sts	0x0A41, r1	; 0x800a41 <__TEXT_REGION_LENGTH__+0x700a41>
    TCB0_CCMP = 0x01FF;
     bec:	8f ef       	ldi	r24, 0xFF	; 255
     bee:	91 e0       	ldi	r25, 0x01	; 1
     bf0:	80 93 4c 0a 	sts	0x0A4C, r24	; 0x800a4c <__TEXT_REGION_LENGTH__+0x700a4c>
     bf4:	90 93 4d 0a 	sts	0x0A4D, r25	; 0x800a4d <__TEXT_REGION_LENGTH__+0x700a4d>
    TCB0_INTCTRL = 0x00;     
     bf8:	10 92 45 0a 	sts	0x0A45, r1	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
     
    //Init TCB1 (compare value sets audio sample rate (0x038B = 11025sps), enabled, interrupt enabled)
    TCB1_CTRLA = 0x01;
     bfc:	c0 93 50 0a 	sts	0x0A50, r28	; 0x800a50 <__TEXT_REGION_LENGTH__+0x700a50>
    TCB1_CTRLB = 0;
     c00:	10 92 51 0a 	sts	0x0A51, r1	; 0x800a51 <__TEXT_REGION_LENGTH__+0x700a51>
    TCB1_CCMP = 0x038B;
     c04:	8b e8       	ldi	r24, 0x8B	; 139
     c06:	93 e0       	ldi	r25, 0x03	; 3
     c08:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
     c0c:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
    TCB1_INTCTRL = 0x01;
     c10:	c0 93 55 0a 	sts	0x0A55, r28	; 0x800a55 <__TEXT_REGION_LENGTH__+0x700a55>

    //Init I2C (100kHz)
    I2C_init();
     c14:	b1 db       	rcall	.-2206   	; 0x378 <I2C_init>

    //VREF (DAC, ADC's)
    VREF_CTRLA   = 0x12;    //0x22 for audio in/out (2.5V), 0x12 for temperature in, audio out (1.1V/2.5V)
     c16:	82 e1       	ldi	r24, 0x12	; 18
     c18:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    VREF_CTRLC   = 0x20;    //ADC1 reference at 2.5V
     c1c:	80 e2       	ldi	r24, 0x20	; 32
     c1e:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    VREF_CTRLB   = 0x01;    //DAC0 ref forced enabled
     c22:	c0 93 a1 00 	sts	0x00A1, r28	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>

    //Init ADC0 (audio in, also controls DAC output rate, internal temperature?)
    ADC0_CTRLA   = 0x02;    //10 bit resolution, free running
     c26:	d0 93 00 06 	sts	0x0600, r29	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
    ADC0_CTRLC   = 0x44;    //Reduced sample capacitor, internal reference, clock/32 => 24038sps
     c2a:	84 e4       	ldi	r24, 0x44	; 68
     c2c:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__TEXT_REGION_LENGTH__+0x700602>
    ADC0_MUXPOS  = 0x1E;    //Audio in: AIN7 at (0x07), Temperature: Internal sensor at (0x1E)
     c30:	8e e1       	ldi	r24, 0x1E	; 30
     c32:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
    ADC0_INTCTRL = 0x01;    //Result ready interrupt enabled
     c36:	c0 93 0a 06 	sts	0x060A, r28	; 0x80060a <__TEXT_REGION_LENGTH__+0x70060a>
    ADC0_CTRLA  |= 0x01;    //ADC0 enabled
     c3a:	80 91 00 06 	lds	r24, 0x0600	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
     c3e:	81 60       	ori	r24, 0x01	; 1
     c40:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
    ADC0_COMMAND = 0x01;    //Start first conversion, after that it will run periodically.
     c44:	c0 93 08 06 	sts	0x0608, r28	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>

    //Init ADC1 (buttons and sensors: CH0=Photo transistor, CH1=Hall, CH4=Buttons)
    ADC1_CTRLA   = 0;
     c48:	10 92 40 06 	sts	0x0640, r1	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
    ADC1_CTRLB   = 0x02;    //4 results automatically accumulated
     c4c:	d0 93 41 06 	sts	0x0641, r29	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
    ADC1_CTRLC   = 0x52;    //Reduced sample capacitor, VDD as reference, clock/8
     c50:	82 e5       	ldi	r24, 0x52	; 82
     c52:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <__TEXT_REGION_LENGTH__+0x700642>
    ADC1_SAMPCTRL= 0x04;    //Extend sampling time with 4 cycles (6 total)
     c56:	84 e0       	ldi	r24, 0x04	; 4
     c58:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
    ADC1_MUXPOS  = 0x04;    //Start with Buttons, for sensors, activate sensor power first.
     c5c:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
    ADC1_INTCTRL = 0x01;    //Result ready interrupt enabled
     c60:	c0 93 4a 06 	sts	0x064A, r28	; 0x80064a <__TEXT_REGION_LENGTH__+0x70064a>
    ADC1_CTRLA  |= 0x01;    //ADC0 enabled
     c64:	80 91 40 06 	lds	r24, 0x0640	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
     c68:	81 60       	ori	r24, 0x01	; 1
     c6a:	80 93 40 06 	sts	0x0640, r24	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
    ADC1_COMMAND = 0x01;    //Start single conversion
     c6e:	c0 93 48 06 	sts	0x0648, r28	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>

    //Init DAC0
    DAC0_CTRLA = 0x40;     //Enable output buffer (connect to pin)
     c72:	80 e4       	ldi	r24, 0x40	; 64
     c74:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
    DAC0_DATA = 0x80;      //Data value at half point (about 1.25V)
     c78:	80 e8       	ldi	r24, 0x80	; 128
     c7a:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
    DAC0_CTRLA |= 0x01;    //Enable DAC
     c7e:	80 91 a0 06 	lds	r24, 0x06A0	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
     c82:	81 60       	ori	r24, 0x01	; 1
     c84:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
     
    //PIT and RTC interrupts
    while(RTC_STATUS & RTC_CTRLABUSY_bm);
     c88:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     c8c:	80 fd       	sbrc	r24, 0
     c8e:	fc cf       	rjmp	.-8      	; 0xc88 <Setup+0x15c>
    RTC_CTRLA          = (0x6)<<3;                         //Prescaler: /64
     c90:	80 e3       	ldi	r24, 0x30	; 48
     c92:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__TEXT_REGION_LENGTH__+0x700140>
    RTC_CLKSEL         = 0;                                //Clock source: internal 32768Hz clock
     c96:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <__TEXT_REGION_LENGTH__+0x700147>
    while(RTC_STATUS & RTC_PERBUSY_bm);
     c9a:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     c9e:	82 fd       	sbrc	r24, 2
     ca0:	fc cf       	rjmp	.-8      	; 0xc9a <Setup+0x16e>
    RTC_PER            = 512*60;                           //60 second period (for clocking how long the device has been running?)
     ca2:	80 e0       	ldi	r24, 0x00	; 0
     ca4:	98 e7       	ldi	r25, 0x78	; 120
     ca6:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     caa:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
    tmp16bit = (RTC_CNT + BTN_TMR)%RTC_PER;
     cae:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     cb2:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     cb6:	60 91 4a 01 	lds	r22, 0x014A	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     cba:	70 91 4b 01 	lds	r23, 0x014B	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
     cbe:	82 96       	adiw	r24, 0x22	; 34
     cc0:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <__udivmodhi4>
     cc4:	80 93 f1 3a 	sts	0x3AF1, r24	; 0x803af1 <tmp16bit>
     cc8:	90 93 f2 3a 	sts	0x3AF2, r25	; 0x803af2 <tmp16bit+0x1>
    while(RTC_STATUS & RTC_CMPBUSY_bm);
     ccc:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     cd0:	83 fd       	sbrc	r24, 3
     cd2:	fc cf       	rjmp	.-8      	; 0xccc <Setup+0x1a0>
    RTC_CMP            = tmp16bit;                         //Button timing
     cd4:	80 91 f1 3a 	lds	r24, 0x3AF1	; 0x803af1 <tmp16bit>
     cd8:	90 91 f2 3a 	lds	r25, 0x3AF2	; 0x803af2 <tmp16bit+0x1>
     cdc:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     ce0:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
    RTC_INTCTRL        = 0x03;                             //RTC overflow interrupt enabled
     ce4:	83 e0       	ldi	r24, 0x03	; 3
     ce6:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
    RTC_PITINTCTRL     = 0x01;                             //PIT interrupt enabled
     cea:	81 e0       	ldi	r24, 0x01	; 1
     cec:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <__TEXT_REGION_LENGTH__+0x700152>
    RTC_PITCTRLA       = (0x1)<<3;                         //Interrupt fires after 4 RTC clock cycles Rate=(RTCCLK/(PRESC*PERIOD)) 32768/256=128Hz
     cf0:	88 e0       	ldi	r24, 0x08	; 8
     cf2:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__TEXT_REGION_LENGTH__+0x700150>
    while(RTC_STATUS & RTC_CTRLABUSY_bm);      
     cf6:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     cfa:	80 fd       	sbrc	r24, 0
     cfc:	fc cf       	rjmp	.-8      	; 0xcf6 <Setup+0x1ca>
    RTC_CTRLA          |= 0x01;                            //Enable RTC
     cfe:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <__TEXT_REGION_LENGTH__+0x700140>
     d02:	81 60       	ori	r24, 0x01	; 1
     d04:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__TEXT_REGION_LENGTH__+0x700140>
    RTC_PITCTRLA       |= 0x01;                            //Enable PIT
     d08:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <__TEXT_REGION_LENGTH__+0x700150>
     d0c:	81 60       	ori	r24, 0x01	; 1
     d0e:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__TEXT_REGION_LENGTH__+0x700150>
     
    //Other inits
    serRx[0] = 0;           // Empty Rx buffer (first char is enough)
     d12:	10 92 6f 3a 	sts	0x3A6F, r1	; 0x803a6f <serRx>
    serTxAddr = &serRx[0];  // Point to first address of the Rx buffer
     d16:	8f e6       	ldi	r24, 0x6F	; 111
     d18:	9a e3       	ldi	r25, 0x3A	; 58
     d1a:	80 93 b3 3a 	sts	0x3AB3, r24	; 0x803ab3 <serTxAddr>
     d1e:	90 93 b4 3a 	sts	0x3AB4, r25	; 0x803ab4 <serTxAddr+0x1>

    sei();
     d22:	78 94       	sei
}
     d24:	df 91       	pop	r29
     d26:	cf 91       	pop	r28
     d28:	08 95       	ret

00000d2a <__vector_8>:

// TCA0 is used for driving the LED matrix at 488Hz (* 5 columns = 2440Hz). The lower 8 bit underflow interrupt is used to load new values and shift between columns.
ISR(TCA0_LUNF_vect){
     d2a:	1f 92       	push	r1
     d2c:	0f 92       	push	r0
     d2e:	0f b6       	in	r0, 0x3f	; 63
     d30:	0f 92       	push	r0
     d32:	11 24       	eor	r1, r1
     d34:	8f 93       	push	r24
     d36:	9f 93       	push	r25
     d38:	af 93       	push	r26
     d3a:	bf 93       	push	r27
     d3c:	ef 93       	push	r30
     d3e:	ff 93       	push	r31
    //Turn off all columns
    PORTC_OUTCLR = 0x07;
     d40:	87 e0       	ldi	r24, 0x07	; 7
     d42:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x700446>
    PORTB_OUTCLR = 0x44;
     d46:	84 e4       	ldi	r24, 0x44	; 68
     d48:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
    "ldi r25, 6        \n"
    "ld r24, %a[arr]+  \n"
    "st %a[wo]+, r24   \n"
    "dec r25           \n"
    "brne .-8          \n"
    :: [wo] "e" (&TCA0_SPLIT_LCMP0), [arr] "e" (&iLED[(L_COL<<3)]) : "r25", "r24", "cc", "memory");
     d4c:	ec b3       	in	r30, 0x1c	; 28
     d4e:	88 e0       	ldi	r24, 0x08	; 8
     d50:	e8 9f       	mul	r30, r24
     d52:	f0 01       	movw	r30, r0
     d54:	11 24       	eor	r1, r1
     d56:	ec 53       	subi	r30, 0x3C	; 60
     d58:	f5 4c       	sbci	r31, 0xC5	; 197
    //Turn off all columns
    PORTC_OUTCLR = 0x07;
    PORTB_OUTCLR = 0x44;

    //Write all of the compare registers of TCA0 with PWM values in array (rows)
    asm(
     d5a:	a8 e2       	ldi	r26, 0x28	; 40
     d5c:	ba e0       	ldi	r27, 0x0A	; 10
     d5e:	96 e0       	ldi	r25, 0x06	; 6
     d60:	81 91       	ld	r24, Z+
     d62:	8d 93       	st	X+, r24
     d64:	9a 95       	dec	r25
     d66:	e1 f7       	brne	.-8      	; 0xd60 <__vector_8+0x36>
    "st %a[wo]+, r24   \n"
    "dec r25           \n"
    "brne .-8          \n"
    :: [wo] "e" (&TCA0_SPLIT_LCMP0), [arr] "e" (&iLED[(L_COL<<3)]) : "r25", "r24", "cc", "memory");

    TCA0_SPLIT_CTRLESET = ((0x2)<<2)|0x3; //Sync timers: Moved this below the PWM value loading to fix the data shifting in asm above.
     d68:	8b e0       	ldi	r24, 0x0B	; 11
     d6a:	80 93 05 0a 	sts	0x0A05, r24	; 0x800a05 <__TEXT_REGION_LENGTH__+0x700a05>

    //Turn on the right column
    if (L_COL<3) {
     d6e:	8c b3       	in	r24, 0x1c	; 28
     d70:	83 30       	cpi	r24, 0x03	; 3
     d72:	58 f4       	brcc	.+22     	; 0xd8a <__vector_8+0x60>
        asm(
     d74:	8c b3       	in	r24, 0x1c	; 28
     d76:	91 e0       	ldi	r25, 0x01	; 1
     d78:	01 c0       	rjmp	.+2      	; 0xd7c <__vector_8+0x52>
     d7a:	99 0f       	add	r25, r25
     d7c:	8a 95       	dec	r24
     d7e:	ea f7       	brpl	.-6      	; 0xd7a <__vector_8+0x50>
     d80:	99 b9       	out	0x09, r25	; 9
     d82:	8c b3       	in	r24, 0x1c	; 28
     d84:	83 95       	inc	r24
     d86:	8c bb       	out	0x1c, r24	; 28
     d88:	0a c0       	rjmp	.+20     	; 0xd9e <__vector_8+0x74>
        "in r24, %[io0]  \n"
        "inc r24         \n"
        "out %[io0], r24 \n"
        :: [io0] "I" (&L_COL), [vpc] "I" (&VPORTC_OUT) : "r24", "r25", "cc");
        } else {
        asm(
     d8a:	8c b3       	in	r24, 0x1c	; 28
     d8c:	83 30       	cpi	r24, 0x03	; 3
     d8e:	21 f4       	brne	.+8      	; 0xd98 <__vector_8+0x6e>
     d90:	2a 9a       	sbi	0x05, 2	; 5
     d92:	83 95       	inc	r24
     d94:	8c bb       	out	0x1c, r24	; 28
     d96:	03 c0       	rjmp	.+6      	; 0xd9e <__vector_8+0x74>
     d98:	2e 9a       	sbi	0x05, 6	; 5
     d9a:	88 27       	eor	r24, r24
     d9c:	8c bb       	out	0x1c, r24	; 28
        "clr r24         \n"
        "out %[io0], r24 \n"
        :: [io0] "I" (&L_COL), [vpb] "I" (&VPORTB_OUT) : "r24", "cc");
    }
    
    if(timeout_I2C) --timeout_I2C;
     d9e:	80 91 5a 3a 	lds	r24, 0x3A5A	; 0x803a5a <timeout_I2C>
     da2:	88 23       	and	r24, r24
     da4:	29 f0       	breq	.+10     	; 0xdb0 <__vector_8+0x86>
     da6:	80 91 5a 3a 	lds	r24, 0x3A5A	; 0x803a5a <timeout_I2C>
     daa:	81 50       	subi	r24, 0x01	; 1
     dac:	80 93 5a 3a 	sts	0x3A5A, r24	; 0x803a5a <timeout_I2C>
    TCA0_SPLIT_INTFLAGS = 0xFF;
     db0:	8f ef       	ldi	r24, 0xFF	; 255
     db2:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <__TEXT_REGION_LENGTH__+0x700a0b>
}
     db6:	ff 91       	pop	r31
     db8:	ef 91       	pop	r30
     dba:	bf 91       	pop	r27
     dbc:	af 91       	pop	r26
     dbe:	9f 91       	pop	r25
     dc0:	8f 91       	pop	r24
     dc2:	0f 90       	pop	r0
     dc4:	0f be       	out	0x3f, r0	; 63
     dc6:	0f 90       	pop	r0
     dc8:	1f 90       	pop	r1
     dca:	18 95       	reti

00000dcc <__vector_13>:

// TCB0 is used for (slowly) sending serial characters. A 0x00 character code is needed to terminate sending or it will leak memory to serial. It's a feature, honest! 
ISR(TCB0_INT_vect){
     dcc:	1f 92       	push	r1
     dce:	0f 92       	push	r0
     dd0:	0f b6       	in	r0, 0x3f	; 63
     dd2:	0f 92       	push	r0
     dd4:	11 24       	eor	r1, r1
     dd6:	8f 93       	push	r24
     dd8:	9f 93       	push	r25
     dda:	ef 93       	push	r30
     ddc:	ff 93       	push	r31
    if (*serTxAddr) {
     dde:	e0 91 b3 3a 	lds	r30, 0x3AB3	; 0x803ab3 <serTxAddr>
     de2:	f0 91 b4 3a 	lds	r31, 0x3AB4	; 0x803ab4 <serTxAddr+0x1>
     de6:	80 81       	ld	r24, Z
     de8:	88 23       	and	r24, r24
     dea:	91 f0       	breq	.+36     	; 0xe10 <__vector_13+0x44>
        USART0_TXDATAL = *serTxAddr;
     dec:	80 81       	ld	r24, Z
     dee:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
        serTxAddr++;
     df2:	80 91 b3 3a 	lds	r24, 0x3AB3	; 0x803ab3 <serTxAddr>
     df6:	90 91 b4 3a 	lds	r25, 0x3AB4	; 0x803ab4 <serTxAddr+0x1>
     dfa:	01 96       	adiw	r24, 0x01	; 1
     dfc:	80 93 b3 3a 	sts	0x3AB3, r24	; 0x803ab3 <serTxAddr>
     e00:	90 93 b4 3a 	sts	0x3AB4, r25	; 0x803ab4 <serTxAddr+0x1>
        USART0_CTRLA |= USART_DREIE_bm;
     e04:	80 91 05 08 	lds	r24, 0x0805	; 0x800805 <__TEXT_REGION_LENGTH__+0x700805>
     e08:	80 62       	ori	r24, 0x20	; 32
     e0a:	80 93 05 08 	sts	0x0805, r24	; 0x800805 <__TEXT_REGION_LENGTH__+0x700805>
     e0e:	05 c0       	rjmp	.+10     	; 0xe1a <__vector_13+0x4e>
    } else {
        serTxDone = 1;
     e10:	81 e0       	ldi	r24, 0x01	; 1
     e12:	80 93 0a 38 	sts	0x380A, r24	; 0x80380a <serTxDone>
        TCB0_INTCTRL = 0x00;
     e16:	10 92 45 0a 	sts	0x0A45, r1	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
    }
    TCB0_INTFLAGS = TCB_CAPT_bm;
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	80 93 46 0a 	sts	0x0A46, r24	; 0x800a46 <__TEXT_REGION_LENGTH__+0x700a46>
}
     e20:	ff 91       	pop	r31
     e22:	ef 91       	pop	r30
     e24:	9f 91       	pop	r25
     e26:	8f 91       	pop	r24
     e28:	0f 90       	pop	r0
     e2a:	0f be       	out	0x3f, r0	; 63
     e2c:	0f 90       	pop	r0
     e2e:	1f 90       	pop	r1
     e30:	18 95       	reti

00000e32 <__vector_14>:

// TCB1 is used for audio generation. Keeps playing "data" until 0 is reached. Audio sample data can contain 0x01 to 0xFF, centered around 0x80
ISR(TCB1_INT_vect){
     e32:	1f 92       	push	r1
     e34:	0f 92       	push	r0
     e36:	0f b6       	in	r0, 0x3f	; 63
     e38:	0f 92       	push	r0
     e3a:	11 24       	eor	r1, r1
     e3c:	2f 93       	push	r18
     e3e:	3f 93       	push	r19
     e40:	4f 93       	push	r20
     e42:	8f 93       	push	r24
     e44:	9f 93       	push	r25
     e46:	ef 93       	push	r30
     e48:	ff 93       	push	r31
    int16_t volCtrl;
    if (*auSmpAddr == 0) auSmpAddr = auRepAddr;
     e4a:	e0 91 07 38 	lds	r30, 0x3807	; 0x803807 <auSmpAddr>
     e4e:	f0 91 08 38 	lds	r31, 0x3808	; 0x803808 <auSmpAddr+0x1>
     e52:	80 81       	ld	r24, Z
     e54:	81 11       	cpse	r24, r1
     e56:	08 c0       	rjmp	.+16     	; 0xe68 <__vector_14+0x36>
     e58:	80 91 05 38 	lds	r24, 0x3805	; 0x803805 <auRepAddr>
     e5c:	90 91 06 38 	lds	r25, 0x3806	; 0x803806 <auRepAddr+0x1>
     e60:	80 93 07 38 	sts	0x3807, r24	; 0x803807 <auSmpAddr>
     e64:	90 93 08 38 	sts	0x3808, r25	; 0x803808 <auSmpAddr+0x1>
    if (*auSmpAddr) {
     e68:	e0 91 07 38 	lds	r30, 0x3807	; 0x803807 <auSmpAddr>
     e6c:	f0 91 08 38 	lds	r31, 0x3808	; 0x803808 <auSmpAddr+0x1>
     e70:	80 81       	ld	r24, Z
     e72:	88 23       	and	r24, r24
     e74:	e1 f0       	breq	.+56     	; 0xeae <__vector_14+0x7c>
        volCtrl = ((((int16_t)(*auSmpAddr) - 0x7f) * auVolume) >> 8) + 0x80;
     e76:	20 81       	ld	r18, Z
     e78:	40 91 b0 3a 	lds	r20, 0x3AB0	; 0x803ab0 <auVolume>
        DAC0_DATA = (uint8_t)(volCtrl);
     e7c:	30 e0       	ldi	r19, 0x00	; 0
     e7e:	2f 57       	subi	r18, 0x7F	; 127
     e80:	31 09       	sbc	r19, r1
     e82:	42 9f       	mul	r20, r18
     e84:	c0 01       	movw	r24, r0
     e86:	43 9f       	mul	r20, r19
     e88:	90 0d       	add	r25, r0
     e8a:	11 24       	eor	r1, r1
     e8c:	89 2f       	mov	r24, r25
     e8e:	99 0f       	add	r25, r25
     e90:	99 0b       	sbc	r25, r25
     e92:	80 58       	subi	r24, 0x80	; 128
     e94:	9f 4f       	sbci	r25, 0xFF	; 255
     e96:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
        ++auSmpAddr;
     e9a:	80 91 07 38 	lds	r24, 0x3807	; 0x803807 <auSmpAddr>
     e9e:	90 91 08 38 	lds	r25, 0x3808	; 0x803808 <auSmpAddr+0x1>
     ea2:	01 96       	adiw	r24, 0x01	; 1
     ea4:	80 93 07 38 	sts	0x3807, r24	; 0x803807 <auSmpAddr>
     ea8:	90 93 08 38 	sts	0x3808, r25	; 0x803808 <auSmpAddr+0x1>
     eac:	06 c0       	rjmp	.+12     	; 0xeba <__vector_14+0x88>
    } else {
        DAC0_DATA = 0x80;
     eae:	80 e8       	ldi	r24, 0x80	; 128
     eb0:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
        auPlayDone = 1;
     eb4:	81 e0       	ldi	r24, 0x01	; 1
     eb6:	80 93 ec 3a 	sts	0x3AEC, r24	; 0x803aec <auPlayDone>
    }
    TCB1_INTFLAGS = TCB_CAPT_bm;
     eba:	81 e0       	ldi	r24, 0x01	; 1
     ebc:	80 93 56 0a 	sts	0x0A56, r24	; 0x800a56 <__TEXT_REGION_LENGTH__+0x700a56>
}
     ec0:	ff 91       	pop	r31
     ec2:	ef 91       	pop	r30
     ec4:	9f 91       	pop	r25
     ec6:	8f 91       	pop	r24
     ec8:	4f 91       	pop	r20
     eca:	3f 91       	pop	r19
     ecc:	2f 91       	pop	r18
     ece:	0f 90       	pop	r0
     ed0:	0f be       	out	0x3f, r0	; 63
     ed2:	0f 90       	pop	r0
     ed4:	1f 90       	pop	r1
     ed6:	18 95       	reti

00000ed8 <__vector_27>:

// Reads up to RXLEN characters until LF is found, LF sets the serRxDone flag and writes 0 instead of LF.
ISR(USART0_RXC_vect){
     ed8:	1f 92       	push	r1
     eda:	0f 92       	push	r0
     edc:	0f b6       	in	r0, 0x3f	; 63
     ede:	0f 92       	push	r0
     ee0:	11 24       	eor	r1, r1
     ee2:	8f 93       	push	r24
     ee4:	ef 93       	push	r30
     ee6:	ff 93       	push	r31
    if (serRxDone == 0){
     ee8:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <serRxDone>
     eec:	81 11       	cpse	r24, r1
     eee:	44 c0       	rjmp	.+136    	; 0xf78 <__vector_27+0xa0>
        serRx[RXCNT] = USART0.RXDATAL;
     ef0:	ed b3       	in	r30, 0x1d	; 29
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
     ef8:	e1 59       	subi	r30, 0x91	; 145
     efa:	f5 4c       	sbci	r31, 0xC5	; 197
     efc:	80 83       	st	Z, r24
        USART0_TXDATAL = serRx[RXCNT];
     efe:	ed b3       	in	r30, 0x1d	; 29
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	e1 59       	subi	r30, 0x91	; 145
     f04:	f5 4c       	sbci	r31, 0xC5	; 197
     f06:	80 81       	ld	r24, Z
     f08:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
        if ((serRx[RXCNT] == 0x0A)||(serRx[RXCNT] == 0x0D)){
     f0c:	ed b3       	in	r30, 0x1d	; 29
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	e1 59       	subi	r30, 0x91	; 145
     f12:	f5 4c       	sbci	r31, 0xC5	; 197
     f14:	80 81       	ld	r24, Z
     f16:	8a 30       	cpi	r24, 0x0A	; 10
     f18:	39 f0       	breq	.+14     	; 0xf28 <__vector_27+0x50>
     f1a:	ed b3       	in	r30, 0x1d	; 29
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	e1 59       	subi	r30, 0x91	; 145
     f20:	f5 4c       	sbci	r31, 0xC5	; 197
     f22:	80 81       	ld	r24, Z
     f24:	8d 30       	cpi	r24, 0x0D	; 13
     f26:	49 f4       	brne	.+18     	; 0xf3a <__vector_27+0x62>
            serRx[RXCNT] = 0;
     f28:	ed b3       	in	r30, 0x1d	; 29
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	e1 59       	subi	r30, 0x91	; 145
     f2e:	f5 4c       	sbci	r31, 0xC5	; 197
     f30:	10 82       	st	Z, r1
            serRxDone = 1;
     f32:	81 e0       	ldi	r24, 0x01	; 1
     f34:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <serRxDone>
     f38:	1f c0       	rjmp	.+62     	; 0xf78 <__vector_27+0xa0>
        } else if (((serRx[RXCNT] == 0x08)||(serRx[RXCNT] == 0x7F))&&(RXCNT > 0)) {
     f3a:	ed b3       	in	r30, 0x1d	; 29
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	e1 59       	subi	r30, 0x91	; 145
     f40:	f5 4c       	sbci	r31, 0xC5	; 197
     f42:	80 81       	ld	r24, Z
     f44:	88 30       	cpi	r24, 0x08	; 8
     f46:	39 f0       	breq	.+14     	; 0xf56 <__vector_27+0x7e>
     f48:	ed b3       	in	r30, 0x1d	; 29
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	e1 59       	subi	r30, 0x91	; 145
     f4e:	f5 4c       	sbci	r31, 0xC5	; 197
     f50:	80 81       	ld	r24, Z
     f52:	8f 37       	cpi	r24, 0x7F	; 127
     f54:	59 f4       	brne	.+22     	; 0xf6c <__vector_27+0x94>
     f56:	8d b3       	in	r24, 0x1d	; 29
     f58:	88 23       	and	r24, r24
     f5a:	41 f0       	breq	.+16     	; 0xf6c <__vector_27+0x94>
            serRx[RXCNT] = 0;
     f5c:	ed b3       	in	r30, 0x1d	; 29
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	e1 59       	subi	r30, 0x91	; 145
     f62:	f5 4c       	sbci	r31, 0xC5	; 197
     f64:	10 82       	st	Z, r1
            --RXCNT;
     f66:	8d b3       	in	r24, 0x1d	; 29
     f68:	81 50       	subi	r24, 0x01	; 1
     f6a:	05 c0       	rjmp	.+10     	; 0xf76 <__vector_27+0x9e>
        } else if (RXCNT < (RXLEN-1)) ++RXCNT;
     f6c:	8d b3       	in	r24, 0x1d	; 29
     f6e:	80 34       	cpi	r24, 0x40	; 64
     f70:	18 f4       	brcc	.+6      	; 0xf78 <__vector_27+0xa0>
     f72:	8d b3       	in	r24, 0x1d	; 29
     f74:	8f 5f       	subi	r24, 0xFF	; 255
     f76:	8d bb       	out	0x1d, r24	; 29
    }
    USART0_STATUS = USART_RXCIF_bm;
     f78:	80 e8       	ldi	r24, 0x80	; 128
     f7a:	80 93 04 08 	sts	0x0804, r24	; 0x800804 <__TEXT_REGION_LENGTH__+0x700804>
};
     f7e:	ff 91       	pop	r31
     f80:	ef 91       	pop	r30
     f82:	8f 91       	pop	r24
     f84:	0f 90       	pop	r0
     f86:	0f be       	out	0x3f, r0	; 63
     f88:	0f 90       	pop	r0
     f8a:	1f 90       	pop	r1
     f8c:	18 95       	reti

00000f8e <__vector_28>:

// Trigger new data write and turn off DRE interrupt.
ISR(USART0_DRE_vect){
     f8e:	1f 92       	push	r1
     f90:	0f 92       	push	r0
     f92:	0f b6       	in	r0, 0x3f	; 63
     f94:	0f 92       	push	r0
     f96:	11 24       	eor	r1, r1
     f98:	8f 93       	push	r24
     f9a:	ef 93       	push	r30
     f9c:	ff 93       	push	r31
    TCB0_CNT = 0;
     f9e:	10 92 4a 0a 	sts	0x0A4A, r1	; 0x800a4a <__TEXT_REGION_LENGTH__+0x700a4a>
     fa2:	10 92 4b 0a 	sts	0x0A4B, r1	; 0x800a4b <__TEXT_REGION_LENGTH__+0x700a4b>
    TCB0_INTCTRL = 0x01;
     fa6:	81 e0       	ldi	r24, 0x01	; 1
     fa8:	80 93 45 0a 	sts	0x0A45, r24	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
    USART0_CTRLA &= ~(USART_DREIE_bm);
     fac:	e5 e0       	ldi	r30, 0x05	; 5
     fae:	f8 e0       	ldi	r31, 0x08	; 8
     fb0:	80 81       	ld	r24, Z
     fb2:	8f 7d       	andi	r24, 0xDF	; 223
     fb4:	80 83       	st	Z, r24
};
     fb6:	ff 91       	pop	r31
     fb8:	ef 91       	pop	r30
     fba:	8f 91       	pop	r24
     fbc:	0f 90       	pop	r0
     fbe:	0f be       	out	0x3f, r0	; 63
     fc0:	0f 90       	pop	r0
     fc2:	1f 90       	pop	r1
     fc4:	18 95       	reti

00000fc6 <__vector_20>:

// ADC used for audio input and temperature sensor.
ISR(ADC0_RESRDY_vect){
     fc6:	1f 92       	push	r1
     fc8:	0f 92       	push	r0
     fca:	0f b6       	in	r0, 0x3f	; 63
     fcc:	0f 92       	push	r0
     fce:	11 24       	eor	r1, r1
     fd0:	8f 93       	push	r24
     fd2:	9f 93       	push	r25
     fd4:	ef 93       	push	r30
     fd6:	ff 93       	push	r31
    //If just switched reference, discard first few samples
    if (adc0Chg == 0){
     fd8:	80 91 33 38 	lds	r24, 0x3833	; 0x803833 <adc0Chg>
     fdc:	81 11       	cpse	r24, r1
     fde:	19 c0       	rjmp	.+50     	; 0x1012 <__vector_20+0x4c>
        AUPOS = (AUPOS+1)&(AULEN-1);
     fe0:	8e b3       	in	r24, 0x1e	; 30
     fe2:	8f 5f       	subi	r24, 0xFF	; 255
     fe4:	87 70       	andi	r24, 0x07	; 7
     fe6:	8e bb       	out	0x1e, r24	; 30
        if (ADC0_MUXPOS == 0x1E) adcTemp = ADC0_RES; else auIn[AUPOS]=ADC0_RESL;
     fe8:	80 91 06 06 	lds	r24, 0x0606	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
     fec:	8e 31       	cpi	r24, 0x1E	; 30
     fee:	49 f4       	brne	.+18     	; 0x1002 <__vector_20+0x3c>
     ff0:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x700610>
     ff4:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x700611>
     ff8:	80 93 ef 3a 	sts	0x3AEF, r24	; 0x803aef <adcTemp>
     ffc:	90 93 f0 3a 	sts	0x3AF0, r25	; 0x803af0 <adcTemp+0x1>
    1000:	0d c0       	rjmp	.+26     	; 0x101c <__vector_20+0x56>
    1002:	ee b3       	in	r30, 0x1e	; 30
    1004:	f0 e0       	ldi	r31, 0x00	; 0
    1006:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x700610>
    100a:	e4 54       	subi	r30, 0x44	; 68
    100c:	f5 4c       	sbci	r31, 0xC5	; 197
    100e:	80 83       	st	Z, r24
    1010:	05 c0       	rjmp	.+10     	; 0x101c <__vector_20+0x56>
    } else --adc0Chg;
    1012:	80 91 33 38 	lds	r24, 0x3833	; 0x803833 <adc0Chg>
    1016:	81 50       	subi	r24, 0x01	; 1
    1018:	80 93 33 38 	sts	0x3833, r24	; 0x803833 <adc0Chg>
    ADC0_INTFLAGS = ADC_RESRDY_bm;
    101c:	81 e0       	ldi	r24, 0x01	; 1
    101e:	80 93 0b 06 	sts	0x060B, r24	; 0x80060b <__TEXT_REGION_LENGTH__+0x70060b>
}
    1022:	ff 91       	pop	r31
    1024:	ef 91       	pop	r30
    1026:	9f 91       	pop	r25
    1028:	8f 91       	pop	r24
    102a:	0f 90       	pop	r0
    102c:	0f be       	out	0x3f, r0	; 63
    102e:	0f 90       	pop	r0
    1030:	1f 90       	pop	r1
    1032:	18 95       	reti

00001034 <__vector_22>:

// Reads out sensors at 8Hz and buttons at 42Hz (timed by PIT), power for the sensors is on 1/8th of the time to save power.
ISR(ADC1_RESRDY_vect){
    1034:	1f 92       	push	r1
    1036:	0f 92       	push	r0
    1038:	0f b6       	in	r0, 0x3f	; 63
    103a:	0f 92       	push	r0
    103c:	11 24       	eor	r1, r1
    103e:	8f 93       	push	r24
    1040:	9f 93       	push	r25
    if (ADC1_MUXPOS == 0) {
    1042:	80 91 46 06 	lds	r24, 0x0646	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
    1046:	81 11       	cpse	r24, r1
    1048:	0a c0       	rjmp	.+20     	; 0x105e <__vector_22+0x2a>
        adcPhot = ADC1_RES;
    104a:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <__TEXT_REGION_LENGTH__+0x700650>
    104e:	90 91 51 06 	lds	r25, 0x0651	; 0x800651 <__TEXT_REGION_LENGTH__+0x700651>
    1052:	80 93 b7 3a 	sts	0x3AB7, r24	; 0x803ab7 <adcPhot>
    1056:	90 93 b8 3a 	sts	0x3AB8, r25	; 0x803ab8 <adcPhot+0x1>
        ADC1_MUXPOS = 0x01;             //Select Hall sensor
    105a:	81 e0       	ldi	r24, 0x01	; 1
    105c:	10 c0       	rjmp	.+32     	; 0x107e <__vector_22+0x4a>
    } else if (ADC1_MUXPOS == 1){
    105e:	80 91 46 06 	lds	r24, 0x0646	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
    1062:	81 30       	cpi	r24, 0x01	; 1
    1064:	79 f4       	brne	.+30     	; 0x1084 <__vector_22+0x50>
        PORTA_OUTCLR = 0b00001000;      //Turn off sensor power
    1066:	88 e0       	ldi	r24, 0x08	; 8
    1068:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x700406>
        adcHall = ADC1_RES;
    106c:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <__TEXT_REGION_LENGTH__+0x700650>
    1070:	90 91 51 06 	lds	r25, 0x0651	; 0x800651 <__TEXT_REGION_LENGTH__+0x700651>
    1074:	80 93 b5 3a 	sts	0x3AB5, r24	; 0x803ab5 <adcHall>
    1078:	90 93 b6 3a 	sts	0x3AB6, r25	; 0x803ab6 <adcHall+0x1>
        ADC1_MUXPOS = 0x04;             //select buttons
    107c:	84 e0       	ldi	r24, 0x04	; 4
    107e:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
    1082:	10 c0       	rjmp	.+32     	; 0x10a4 <__vector_22+0x70>
    } else {
        adcBtns = ADC1_RES;
    1084:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <__TEXT_REGION_LENGTH__+0x700650>
    1088:	90 91 51 06 	lds	r25, 0x0651	; 0x800651 <__TEXT_REGION_LENGTH__+0x700651>
    108c:	80 93 b1 3a 	sts	0x3AB1, r24	; 0x803ab1 <adcBtns>
    1090:	90 93 b2 3a 	sts	0x3AB2, r25	; 0x803ab2 <adcBtns+0x1>
        if (A1CNT == 15){
    1094:	8f b3       	in	r24, 0x1f	; 31
    1096:	8f 30       	cpi	r24, 0x0F	; 15
    1098:	29 f4       	brne	.+10     	; 0x10a4 <__vector_22+0x70>
            ADC1_MUXPOS = 0x00;         //Select photo transistor
    109a:	10 92 46 06 	sts	0x0646, r1	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
            PORTA_OUTSET = 0b00001000;  //Turn on sensor power
    109e:	88 e0       	ldi	r24, 0x08	; 8
    10a0:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
        }
    }

    A1CNT=(A1CNT+1)%16;        
    10a4:	8f b3       	in	r24, 0x1f	; 31
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	01 96       	adiw	r24, 0x01	; 1
    10aa:	8f 70       	andi	r24, 0x0F	; 15
    10ac:	99 27       	eor	r25, r25
    10ae:	8f bb       	out	0x1f, r24	; 31
    ADC1_INTFLAGS = ADC_RESRDY_bm;
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	80 93 4b 06 	sts	0x064B, r24	; 0x80064b <__TEXT_REGION_LENGTH__+0x70064b>
}
    10b6:	9f 91       	pop	r25
    10b8:	8f 91       	pop	r24
    10ba:	0f 90       	pop	r0
    10bc:	0f be       	out	0x3f, r0	; 63
    10be:	0f 90       	pop	r0
    10c0:	1f 90       	pop	r1
    10c2:	18 95       	reti

000010c4 <__vector_6>:

// RTC compare interrupt, triggers at 512/BTN_TMR rate, also RTC overflow interrupt, triggers once a minute
ISR(RTC_CNT_vect) {
    10c4:	1f 92       	push	r1
    10c6:	0f 92       	push	r0
    10c8:	0f b6       	in	r0, 0x3f	; 63
    10ca:	0f 92       	push	r0
    10cc:	11 24       	eor	r1, r1
    10ce:	5f 93       	push	r21
    10d0:	6f 93       	push	r22
    10d2:	7f 93       	push	r23
    10d4:	8f 93       	push	r24
    10d6:	9f 93       	push	r25
    10d8:	af 93       	push	r26
    10da:	bf 93       	push	r27
    if (RTC_INTFLAGS & RTC_CMP_bm){
    10dc:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
    10e0:	81 ff       	sbrs	r24, 1
    10e2:	26 c0       	rjmp	.+76     	; 0x1130 <__vector_6+0x6c>
        if (buttonMark<0xff) buttonMark++;   // For button timing purposes
    10e4:	80 91 3e 38 	lds	r24, 0x383E	; 0x80383e <buttonMark>
    10e8:	8f 3f       	cpi	r24, 0xFF	; 255
    10ea:	29 f0       	breq	.+10     	; 0x10f6 <__vector_6+0x32>
    10ec:	80 91 3e 38 	lds	r24, 0x383E	; 0x80383e <buttonMark>
    10f0:	8f 5f       	subi	r24, 0xFF	; 255
    10f2:	80 93 3e 38 	sts	0x383E, r24	; 0x80383e <buttonMark>
        tmp16bit = (RTC_CNT + BTN_TMR)%RTC_PER;
    10f6:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
    10fa:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
    10fe:	60 91 4a 01 	lds	r22, 0x014A	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
    1102:	70 91 4b 01 	lds	r23, 0x014B	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
    1106:	82 96       	adiw	r24, 0x22	; 34
    1108:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <__udivmodhi4>
    110c:	80 93 f1 3a 	sts	0x3AF1, r24	; 0x803af1 <tmp16bit>
    1110:	90 93 f2 3a 	sts	0x3AF2, r25	; 0x803af2 <tmp16bit+0x1>
        while(RTC_STATUS & RTC_CMPBUSY_bm);
    1114:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
    1118:	83 fd       	sbrc	r24, 3
    111a:	fc cf       	rjmp	.-8      	; 0x1114 <__vector_6+0x50>
        RTC_CMP = tmp16bit;                 // Button timing: next interrupt set
    111c:	80 91 f1 3a 	lds	r24, 0x3AF1	; 0x803af1 <tmp16bit>
    1120:	90 91 f2 3a 	lds	r25, 0x3AF2	; 0x803af2 <tmp16bit+0x1>
    1124:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
    1128:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
        RTC_INTFLAGS = RTC_CMP_bm;		    // clear interrupt flag
    112c:	82 e0       	ldi	r24, 0x02	; 2
    112e:	06 c0       	rjmp	.+12     	; 0x113c <__vector_6+0x78>
    } else {
        minuteMark++;                       // For very slow timing purposes, overflows to 0
    1130:	80 91 3f 38 	lds	r24, 0x383F	; 0x80383f <minuteMark>
    1134:	8f 5f       	subi	r24, 0xFF	; 255
    1136:	80 93 3f 38 	sts	0x383F, r24	; 0x80383f <minuteMark>
        RTC_INTFLAGS = RTC_OVF_bm;		    // clear interrupt flag
    113a:	81 e0       	ldi	r24, 0x01	; 1
    113c:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
    }
}
    1140:	bf 91       	pop	r27
    1142:	af 91       	pop	r26
    1144:	9f 91       	pop	r25
    1146:	8f 91       	pop	r24
    1148:	7f 91       	pop	r23
    114a:	6f 91       	pop	r22
    114c:	5f 91       	pop	r21
    114e:	0f 90       	pop	r0
    1150:	0f be       	out	0x3f, r0	; 63
    1152:	0f 90       	pop	r0
    1154:	1f 90       	pop	r1
    1156:	18 95       	reti

00001158 <__vector_7>:

// PIT interrupt (timing of ADC1: sensor values)
ISR(RTC_PIT_vect) {						// PIT interrupt handling code
    1158:	1f 92       	push	r1
    115a:	0f 92       	push	r0
    115c:	0f b6       	in	r0, 0x3f	; 63
    115e:	0f 92       	push	r0
    1160:	11 24       	eor	r1, r1
    1162:	8f 93       	push	r24
    ADC1_COMMAND = 0x01;
    1164:	81 e0       	ldi	r24, 0x01	; 1
    1166:	80 93 48 06 	sts	0x0648, r24	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
    RTC_PITINTFLAGS = RTC_PI_bm;		// clear interrupt flag
    116a:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <__TEXT_REGION_LENGTH__+0x700153>
}
    116e:	8f 91       	pop	r24
    1170:	0f 90       	pop	r0
    1172:	0f be       	out	0x3f, r0	; 63
    1174:	0f 90       	pop	r0
    1176:	1f 90       	pop	r1
    1178:	18 95       	reti

0000117a <EERead>:

// Read bytes from EEPROM
void EERead(uint8_t eeAddr, uint8_t *eeValues, uint8_t size)
{
    while(NVMCTRL_STATUS & NVMCTRL_EEBUSY_bm);              // Wait until any write operation has finished
    117a:	90 91 02 10 	lds	r25, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x701002>
    117e:	91 fd       	sbrc	r25, 1
    1180:	fc cf       	rjmp	.-8      	; 0x117a <EERead>
    1182:	fb 01       	movw	r30, r22
    1184:	48 0f       	add	r20, r24

    while(size){
    1186:	84 17       	cp	r24, r20
    1188:	39 f0       	breq	.+14     	; 0x1198 <EERead+0x1e>
        *eeValues++ = *(uint8_t *)(EEPROM_START+eeAddr++);  // Read data from buffer
    118a:	a8 2f       	mov	r26, r24
    118c:	b0 e0       	ldi	r27, 0x00	; 0
    118e:	bc 5e       	subi	r27, 0xEC	; 236
    1190:	9c 91       	ld	r25, X
    1192:	91 93       	st	Z+, r25
    1194:	8f 5f       	subi	r24, 0xFF	; 255
    1196:	f7 cf       	rjmp	.-18     	; 0x1186 <EERead+0xc>
        --size;
    }
}
    1198:	08 95       	ret

0000119a <EEWrite>:
{
    uint8_t lastByteOfPage;
    while(size){
        lastByteOfPage = 0;
        while(NVMCTRL_STATUS & NVMCTRL_EEBUSY_bm);              // Wait until any write operation has finished
        CCP = CCP_SPM_gc;                                       // Gain access to NVMCTRL_CTRLA
    119a:	9d e9       	ldi	r25, 0x9D	; 157
        NVMCTRL_CTRLA = NVMCTRL_CMD_PAGEBUFCLR_gc;              // Clear page buffer
    119c:	24 e0       	ldi	r18, 0x04	; 4
            if ((eeAddr % EEPROM_PAGE_SIZE) == (EEPROM_PAGE_SIZE-1)) lastByteOfPage = 1;
            *(uint8_t *)(EEPROM_START+eeAddr++) = *eeValues++;  // Write data to buffer
            --size;
        }
        CCP = CCP_SPM_gc;
        NVMCTRL_CTRLA = NVMCTRL_CMD_PAGEERASEWRITE_gc;          // Erase old data and write new data to EEPROM
    119e:	33 e0       	ldi	r19, 0x03	; 3

// Write bytes to the EEPROM, if address exceeds EEPROM space data wraps around
uint8_t EEWrite(uint8_t eeAddr, uint8_t *eeValues, uint8_t size)
{
    uint8_t lastByteOfPage;
    while(size){
    11a0:	44 23       	and	r20, r20
    11a2:	09 f1       	breq	.+66     	; 0x11e6 <EEWrite+0x4c>
        lastByteOfPage = 0;
        while(NVMCTRL_STATUS & NVMCTRL_EEBUSY_bm);              // Wait until any write operation has finished
    11a4:	50 91 02 10 	lds	r21, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x701002>
    11a8:	51 fd       	sbrc	r21, 1
    11aa:	fc cf       	rjmp	.-8      	; 0x11a4 <EEWrite+0xa>
        CCP = CCP_SPM_gc;                                       // Gain access to NVMCTRL_CTRLA
    11ac:	94 bf       	out	0x34, r25	; 52
        NVMCTRL_CTRLA = NVMCTRL_CMD_PAGEBUFCLR_gc;              // Clear page buffer
    11ae:	20 93 00 10 	sts	0x1000, r18	; 0x801000 <__TEXT_REGION_LENGTH__+0x701000>
    11b2:	e8 2f       	mov	r30, r24
        while((size) && (lastByteOfPage == 0)){
            if ((eeAddr % EEPROM_PAGE_SIZE) == (EEPROM_PAGE_SIZE-1)) lastByteOfPage = 1;
    11b4:	58 2f       	mov	r21, r24
    11b6:	5f 71       	andi	r21, 0x1F	; 31
            *(uint8_t *)(EEPROM_START+eeAddr++) = *eeValues++;  // Write data to buffer
    11b8:	8f 5f       	subi	r24, 0xFF	; 255
    11ba:	6f 5f       	subi	r22, 0xFF	; 255
    11bc:	7f 4f       	sbci	r23, 0xFF	; 255
    11be:	db 01       	movw	r26, r22
    11c0:	11 97       	sbiw	r26, 0x01	; 1
    11c2:	ac 91       	ld	r26, X
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	fc 5e       	subi	r31, 0xEC	; 236
    11c8:	a0 83       	st	Z, r26
            --size;
    11ca:	41 50       	subi	r20, 0x01	; 1
    while(size){
        lastByteOfPage = 0;
        while(NVMCTRL_STATUS & NVMCTRL_EEBUSY_bm);              // Wait until any write operation has finished
        CCP = CCP_SPM_gc;                                       // Gain access to NVMCTRL_CTRLA
        NVMCTRL_CTRLA = NVMCTRL_CMD_PAGEBUFCLR_gc;              // Clear page buffer
        while((size) && (lastByteOfPage == 0)){
    11cc:	19 f0       	breq	.+6      	; 0x11d4 <EEWrite+0x3a>
            if ((eeAddr % EEPROM_PAGE_SIZE) == (EEPROM_PAGE_SIZE-1)) lastByteOfPage = 1;
            *(uint8_t *)(EEPROM_START+eeAddr++) = *eeValues++;  // Write data to buffer
    11ce:	e8 2f       	mov	r30, r24
    while(size){
        lastByteOfPage = 0;
        while(NVMCTRL_STATUS & NVMCTRL_EEBUSY_bm);              // Wait until any write operation has finished
        CCP = CCP_SPM_gc;                                       // Gain access to NVMCTRL_CTRLA
        NVMCTRL_CTRLA = NVMCTRL_CMD_PAGEBUFCLR_gc;              // Clear page buffer
        while((size) && (lastByteOfPage == 0)){
    11d0:	5f 31       	cpi	r21, 0x1F	; 31
    11d2:	81 f7       	brne	.-32     	; 0x11b4 <EEWrite+0x1a>
            if ((eeAddr % EEPROM_PAGE_SIZE) == (EEPROM_PAGE_SIZE-1)) lastByteOfPage = 1;
            *(uint8_t *)(EEPROM_START+eeAddr++) = *eeValues++;  // Write data to buffer
            --size;
        }
        CCP = CCP_SPM_gc;
    11d4:	94 bf       	out	0x34, r25	; 52
        NVMCTRL_CTRLA = NVMCTRL_CMD_PAGEERASEWRITE_gc;          // Erase old data and write new data to EEPROM
    11d6:	30 93 00 10 	sts	0x1000, r19	; 0x801000 <__TEXT_REGION_LENGTH__+0x701000>
        if (NVMCTRL_STATUS & NVMCTRL_WRERROR_bm) return 1;
    11da:	50 91 02 10 	lds	r21, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x701002>
    11de:	52 ff       	sbrs	r21, 2
    11e0:	df cf       	rjmp	.-66     	; 0x11a0 <EEWrite+0x6>
    11e2:	81 e0       	ldi	r24, 0x01	; 1
    }
    return 0;
}
    11e4:	08 95       	ret
        }
        CCP = CCP_SPM_gc;
        NVMCTRL_CTRLA = NVMCTRL_CMD_PAGEERASEWRITE_gc;          // Erase old data and write new data to EEPROM
        if (NVMCTRL_STATUS & NVMCTRL_WRERROR_bm) return 1;
    }
    return 0;
    11e6:	80 e0       	ldi	r24, 0x00	; 0
    11e8:	08 95       	ret

000011ea <SerSend>:
}

// Sends a set of characters to the serial port, stops only when character value 0 is reached.
uint8_t SerSend(unsigned char *addr){
    if (serTxDone){
    11ea:	20 91 0a 38 	lds	r18, 0x380A	; 0x80380a <serTxDone>
    11ee:	22 23       	and	r18, r18
    11f0:	59 f0       	breq	.+22     	; 0x1208 <SerSend+0x1e>
        serTxAddr = addr;
    11f2:	80 93 b3 3a 	sts	0x3AB3, r24	; 0x803ab3 <serTxAddr>
    11f6:	90 93 b4 3a 	sts	0x3AB4, r25	; 0x803ab4 <serTxAddr+0x1>
        serTxDone = 0;
    11fa:	10 92 0a 38 	sts	0x380A, r1	; 0x80380a <serTxDone>
        TCB0_INTCTRL = 0x01;
    11fe:	81 e0       	ldi	r24, 0x01	; 1
    1200:	80 93 45 0a 	sts	0x0A45, r24	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
        return 0;
    1204:	80 e0       	ldi	r24, 0x00	; 0
    1206:	08 95       	ret
    } else return 1;    //Error: Still sending data
    1208:	81 e0       	ldi	r24, 0x01	; 1
};
    120a:	08 95       	ret

0000120c <SerSpeed>:

// Set serial character output speed, 255-0 (0.8 to 100ms delay between characters)
void SerSpeed(uint8_t serSpd){
    120c:	28 2f       	mov	r18, r24
    if (serSpd<1) serSpd = 1;
    120e:	81 11       	cpse	r24, r1
    1210:	01 c0       	rjmp	.+2      	; 0x1214 <SerSpeed+0x8>
    1212:	21 e0       	ldi	r18, 0x01	; 1
    TCB0_CCMP = ((uint16_t)(0xFF-serSpd)<<8) + 0xFF;
    1214:	8f ef       	ldi	r24, 0xFF	; 255
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	82 1b       	sub	r24, r18
    121a:	91 09       	sbc	r25, r1
    121c:	98 2f       	mov	r25, r24
    121e:	88 27       	eor	r24, r24
    1220:	81 50       	subi	r24, 0x01	; 1
    1222:	9f 4f       	sbci	r25, 0xFF	; 255
    1224:	80 93 4c 0a 	sts	0x0A4C, r24	; 0x800a4c <__TEXT_REGION_LENGTH__+0x700a4c>
    1228:	90 93 4d 0a 	sts	0x0A4D, r25	; 0x800a4d <__TEXT_REGION_LENGTH__+0x700a4d>
    122c:	08 95       	ret

0000122e <SelectTSens>:
};

// Select temperature sensor
void SelectTSens(){
     VREF_CTRLA   = 0x12;    //0x22 for audio in/out (2.5V), 0x12 for temperature in, audio out (1.1V/2.5V)
    122e:	82 e1       	ldi	r24, 0x12	; 18
    1230:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     ADC0_CTRLA   &= ~(ADC_RESSEL_bm);
    1234:	e0 e0       	ldi	r30, 0x00	; 0
    1236:	f6 e0       	ldi	r31, 0x06	; 6
    1238:	80 81       	ld	r24, Z
    123a:	8b 7f       	andi	r24, 0xFB	; 251
    123c:	80 83       	st	Z, r24
     ADC0_MUXPOS  = 0x1E;    //Audio in: AIN7 at (0x07), Temperature: Internal sensor at (0x1E)
    123e:	8e e1       	ldi	r24, 0x1E	; 30
    1240:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
     adc0Chg = 3;
    1244:	83 e0       	ldi	r24, 0x03	; 3
    1246:	80 93 33 38 	sts	0x3833, r24	; 0x803833 <adc0Chg>
    124a:	08 95       	ret

0000124c <SelectAuIn>:
};

// Select "audio" input (0-2.5V)
void SelectAuIn(){
     VREF_CTRLA   = 0x22;    //0x22 for audio in/out (2.5V), 0x12 for temperature in, audio out (1.1V/2.5V)
    124c:	82 e2       	ldi	r24, 0x22	; 34
    124e:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     ADC0_CTRLA   |= ADC_RESSEL_bm;
    1252:	e0 e0       	ldi	r30, 0x00	; 0
    1254:	f6 e0       	ldi	r31, 0x06	; 6
    1256:	80 81       	ld	r24, Z
    1258:	84 60       	ori	r24, 0x04	; 4
    125a:	80 83       	st	Z, r24
     ADC0_MUXPOS  = 0x07;    //Audio in: AIN7 at (0x07), Temperature: Internal sensor at (0x1E)
    125c:	87 e0       	ldi	r24, 0x07	; 7
    125e:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
     adc0Chg = 3;
    1262:	83 e0       	ldi	r24, 0x03	; 3
    1264:	80 93 33 38 	sts	0x3833, r24	; 0x803833 <adc0Chg>
    1268:	08 95       	ret

0000126a <CheckButtons>:
};

// Returns button combination (4LSB) and number of consecutive times this combination is detected. First read should always be ignored! 
uint8_t CheckButtons(uint8_t previousValue){
    uint8_t bADC = (uint8_t)(adcBtns>>4);
    126a:	20 91 b1 3a 	lds	r18, 0x3AB1	; 0x803ab1 <adcBtns>
    126e:	30 91 b2 3a 	lds	r19, 0x3AB2	; 0x803ab2 <adcBtns+0x1>
    uint8_t bNibble = 0x0F;     //MSB to LSB: Bottom left, top left, top right, bottom right, 0F is error
    
    switch(bADC){
    1272:	94 e0       	ldi	r25, 0x04	; 4
    1274:	36 95       	lsr	r19
    1276:	27 95       	ror	r18
    1278:	9a 95       	dec	r25
    127a:	e1 f7       	brne	.-8      	; 0x1274 <CheckButtons+0xa>
    127c:	33 27       	eor	r19, r19
    127e:	2c 35       	cpi	r18, 0x5C	; 92
    1280:	31 05       	cpc	r19, r1
    1282:	d0 f4       	brcc	.+52     	; 0x12b8 <CheckButtons+0x4e>
    1284:	23 35       	cpi	r18, 0x53	; 83
    1286:	31 05       	cpc	r19, r1
    1288:	a8 f5       	brcc	.+106    	; 0x12f4 <CheckButtons+0x8a>
    128a:	22 33       	cpi	r18, 0x32	; 50
    128c:	31 05       	cpc	r19, r1
    128e:	50 f4       	brcc	.+20     	; 0x12a4 <CheckButtons+0x3a>
    1290:	2d 32       	cpi	r18, 0x2D	; 45
    1292:	31 05       	cpc	r19, r1
    1294:	58 f5       	brcc	.+86     	; 0x12ec <CheckButtons+0x82>
    1296:	23 52       	subi	r18, 0x23	; 35
    1298:	31 09       	sbc	r19, r1
    129a:	25 30       	cpi	r18, 0x05	; 5
    129c:	31 05       	cpc	r19, r1
    129e:	80 f5       	brcc	.+96     	; 0x1300 <CheckButtons+0x96>

        case 35 ... 39:          //37: Both left
        bNibble = 0b1100;
    12a0:	9c e0       	ldi	r25, 0x0C	; 12
    12a2:	2f c0       	rjmp	.+94     	; 0x1302 <CheckButtons+0x98>
// Returns button combination (4LSB) and number of consecutive times this combination is detected. First read should always be ignored! 
uint8_t CheckButtons(uint8_t previousValue){
    uint8_t bADC = (uint8_t)(adcBtns>>4);
    uint8_t bNibble = 0x0F;     //MSB to LSB: Bottom left, top left, top right, bottom right, 0F is error
    
    switch(bADC){
    12a4:	27 33       	cpi	r18, 0x37	; 55
    12a6:	31 05       	cpc	r19, r1
    12a8:	18 f1       	brcs	.+70     	; 0x12f0 <CheckButtons+0x86>
    12aa:	2e 53       	subi	r18, 0x3E	; 62
    12ac:	31 09       	sbc	r19, r1
    12ae:	27 30       	cpi	r18, 0x07	; 7
    12b0:	31 05       	cpc	r19, r1
    12b2:	30 f5       	brcc	.+76     	; 0x1300 <CheckButtons+0x96>
        case 50 ... 54:          //52: Bottom left
        bNibble = 0b1000;
        break;

        case 62 ... 68:          //65: Both top
        bNibble = 0b0110;
    12b4:	96 e0       	ldi	r25, 0x06	; 6
        break;
    12b6:	25 c0       	rjmp	.+74     	; 0x1302 <CheckButtons+0x98>
// Returns button combination (4LSB) and number of consecutive times this combination is detected. First read should always be ignored! 
uint8_t CheckButtons(uint8_t previousValue){
    uint8_t bADC = (uint8_t)(adcBtns>>4);
    uint8_t bNibble = 0x0F;     //MSB to LSB: Bottom left, top left, top right, bottom right, 0F is error
    
    switch(bADC){
    12b8:	2a 38       	cpi	r18, 0x8A	; 138
    12ba:	31 05       	cpc	r19, r1
    12bc:	50 f4       	brcc	.+20     	; 0x12d2 <CheckButtons+0x68>
    12be:	29 37       	cpi	r18, 0x79	; 121
    12c0:	31 05       	cpc	r19, r1
    12c2:	d0 f4       	brcc	.+52     	; 0x12f8 <CheckButtons+0x8e>
    12c4:	23 56       	subi	r18, 0x63	; 99
    12c6:	31 09       	sbc	r19, r1
    12c8:	2b 30       	cpi	r18, 0x0B	; 11
    12ca:	31 05       	cpc	r19, r1
    12cc:	c8 f4       	brcc	.+50     	; 0x1300 <CheckButtons+0x96>
        case 83 ... 91:          //87: Top left
        bNibble = 0b0100;
        break;

        case 99 ... 109:         //104: Both right
        bNibble = 0b0011;
    12ce:	93 e0       	ldi	r25, 0x03	; 3
        break;
    12d0:	18 c0       	rjmp	.+48     	; 0x1302 <CheckButtons+0x98>
// Returns button combination (4LSB) and number of consecutive times this combination is detected. First read should always be ignored! 
uint8_t CheckButtons(uint8_t previousValue){
    uint8_t bADC = (uint8_t)(adcBtns>>4);
    uint8_t bNibble = 0x0F;     //MSB to LSB: Bottom left, top left, top right, bottom right, 0F is error
    
    switch(bADC){
    12d2:	22 3a       	cpi	r18, 0xA2	; 162
    12d4:	31 05       	cpc	r19, r1
    12d6:	a0 f0       	brcs	.+40     	; 0x1300 <CheckButtons+0x96>
    12d8:	2b 3b       	cpi	r18, 0xBB	; 187
    12da:	31 05       	cpc	r19, r1
    12dc:	78 f0       	brcs	.+30     	; 0x12fc <CheckButtons+0x92>
    12de:	20 5f       	subi	r18, 0xF0	; 240
    12e0:	31 09       	sbc	r19, r1
    12e2:	20 31       	cpi	r18, 0x10	; 16
    12e4:	31 05       	cpc	r19, r1
    12e6:	60 f4       	brcc	.+24     	; 0x1300 <CheckButtons+0x96>
        case 162 ... 186:        //174: Bottom right
        bNibble = 0b0001;
        break;

        case 240 ... 255:        //255: No button pressed
        bNibble = 0b0000;
    12e8:	90 e0       	ldi	r25, 0x00	; 0
        break;
    12ea:	0b c0       	rjmp	.+22     	; 0x1302 <CheckButtons+0x98>
        case 35 ... 39:          //37: Both left
        bNibble = 0b1100;
        break;

        case 45 ... 49:          //47: Both bottom
        bNibble = 0b1001;
    12ec:	99 e0       	ldi	r25, 0x09	; 9
        break;
    12ee:	09 c0       	rjmp	.+18     	; 0x1302 <CheckButtons+0x98>

        case 50 ... 54:          //52: Bottom left
        bNibble = 0b1000;
    12f0:	98 e0       	ldi	r25, 0x08	; 8
        break;
    12f2:	07 c0       	rjmp	.+14     	; 0x1302 <CheckButtons+0x98>
        case 62 ... 68:          //65: Both top
        bNibble = 0b0110;
        break;

        case 83 ... 91:          //87: Top left
        bNibble = 0b0100;
    12f4:	94 e0       	ldi	r25, 0x04	; 4
        break;
    12f6:	05 c0       	rjmp	.+10     	; 0x1302 <CheckButtons+0x98>
        case 99 ... 109:         //104: Both right
        bNibble = 0b0011;
        break;

        case 121 ... 137:        //129: Top right
        bNibble = 0b0010;
    12f8:	92 e0       	ldi	r25, 0x02	; 2
        break;
    12fa:	03 c0       	rjmp	.+6      	; 0x1302 <CheckButtons+0x98>

        case 162 ... 186:        //174: Bottom right
        bNibble = 0b0001;
    12fc:	91 e0       	ldi	r25, 0x01	; 1
        break;
    12fe:	01 c0       	rjmp	.+2      	; 0x1302 <CheckButtons+0x98>
};

// Returns button combination (4LSB) and number of consecutive times this combination is detected. First read should always be ignored! 
uint8_t CheckButtons(uint8_t previousValue){
    uint8_t bADC = (uint8_t)(adcBtns>>4);
    uint8_t bNibble = 0x0F;     //MSB to LSB: Bottom left, top left, top right, bottom right, 0F is error
    1300:	9f e0       	ldi	r25, 0x0F	; 15
        case 240 ... 255:        //255: No button pressed
        bNibble = 0b0000;
        break;
    }

    if ((previousValue&0x0F)==bNibble){
    1302:	28 2f       	mov	r18, r24
    1304:	2f 70       	andi	r18, 0x0F	; 15
    1306:	92 13       	cpse	r25, r18
    1308:	06 c0       	rjmp	.+12     	; 0x1316 <CheckButtons+0xac>
        if ((previousValue&0xF0) < 0xF0) previousValue += 0x10; //Same value? Increase time nibble
    130a:	98 2f       	mov	r25, r24
    130c:	90 7f       	andi	r25, 0xF0	; 240
    130e:	90 3f       	cpi	r25, 0xF0	; 240
    1310:	39 f0       	breq	.+14     	; 0x1320 <CheckButtons+0xb6>
    1312:	80 5f       	subi	r24, 0xF0	; 240
    1314:	08 95       	ret
        return previousValue;       
    } else if (bNibble == 0) return 0xFF; //Buttons released, 0xFF triggers readout, previousValue holds last button value.
    1316:	99 23       	and	r25, r25
    1318:	11 f0       	breq	.+4      	; 0x131e <CheckButtons+0xb4>
    131a:	89 2f       	mov	r24, r25
    131c:	08 95       	ret
    131e:	8f ef       	ldi	r24, 0xFF	; 255
              else return bNibble;  //New value  
}
    1320:	08 95       	ret

00001322 <lfsr>:

uint8_t lfsr(){
    static uint16_t state = 0xd401;
    state ^= (state << 13);
    1322:	80 91 1e 38 	lds	r24, 0x381E	; 0x80381e <state.3884>
    1326:	90 91 1f 38 	lds	r25, 0x381F	; 0x80381f <state.3884+0x1>
    132a:	9c 01       	movw	r18, r24
    132c:	32 2f       	mov	r19, r18
    132e:	22 27       	eor	r18, r18
    1330:	32 95       	swap	r19
    1332:	33 0f       	add	r19, r19
    1334:	30 7e       	andi	r19, 0xE0	; 224
    1336:	82 27       	eor	r24, r18
    1338:	93 27       	eor	r25, r19
    state ^= (state >> 9);
    133a:	9c 01       	movw	r18, r24
    133c:	23 2f       	mov	r18, r19
    133e:	33 27       	eor	r19, r19
    1340:	26 95       	lsr	r18
    1342:	82 27       	eor	r24, r18
    1344:	93 27       	eor	r25, r19
    state ^= (state << 7);
    1346:	9c 01       	movw	r18, r24
    1348:	36 95       	lsr	r19
    134a:	32 2f       	mov	r19, r18
    134c:	22 27       	eor	r18, r18
    134e:	37 95       	ror	r19
    1350:	27 95       	ror	r18
    1352:	82 27       	eor	r24, r18
    1354:	93 27       	eor	r25, r19
    1356:	80 93 1e 38 	sts	0x381E, r24	; 0x80381e <state.3884>
    135a:	90 93 1f 38 	sts	0x381F, r25	; 0x80381f <state.3884+0x1>
    return (state & 0xff);
}
    135e:	08 95       	ret

00001360 <floatSpeed>:

void floatSpeed(uint8_t bits, uint16_t min, uint16_t max){
    1360:	df 92       	push	r13
    1362:	ef 92       	push	r14
    1364:	ff 92       	push	r15
    1366:	0f 93       	push	r16
    1368:	1f 93       	push	r17
    136a:	cf 93       	push	r28
    136c:	df 93       	push	r29
    136e:	7b 01       	movw	r14, r22
    1370:	8a 01       	movw	r16, r20
    uint16_t val = TCB1_CCMP;
    1372:	c0 91 5c 0a 	lds	r28, 0x0A5C	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    1376:	d0 91 5d 0a 	lds	r29, 0x0A5D	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
    bits = mask[(bits-1)&0x07];
    137a:	e8 2f       	mov	r30, r24
    137c:	f0 e0       	ldi	r31, 0x00	; 0
    137e:	31 97       	sbiw	r30, 0x01	; 1
    1380:	e7 70       	andi	r30, 0x07	; 7
    1382:	ff 27       	eor	r31, r31
    1384:	e0 5e       	subi	r30, 0xE0	; 224
    1386:	f7 4c       	sbci	r31, 0xC7	; 199
    1388:	d0 80       	ld	r13, Z
    val += (lfsr()&bits);
    138a:	cb df       	rcall	.-106    	; 0x1322 <lfsr>
    138c:	8d 21       	and	r24, r13
    138e:	c8 0f       	add	r28, r24
    1390:	d1 1d       	adc	r29, r1
    val -= (lfsr()&bits);
    1392:	c7 df       	rcall	.-114    	; 0x1322 <lfsr>
    1394:	8d 21       	and	r24, r13
    1396:	c8 1b       	sub	r28, r24
    1398:	d1 09       	sbc	r29, r1
    139a:	0c 17       	cp	r16, r28
    139c:	1d 07       	cpc	r17, r29
    139e:	08 f4       	brcc	.+2      	; 0x13a2 <floatSpeed+0x42>
    13a0:	e8 01       	movw	r28, r16
    13a2:	c7 01       	movw	r24, r14
    13a4:	ec 16       	cp	r14, r28
    13a6:	fd 06       	cpc	r15, r29
    13a8:	08 f4       	brcc	.+2      	; 0x13ac <floatSpeed+0x4c>
    13aa:	ce 01       	movw	r24, r28
    13ac:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    if (val > max) val = max;    
    if (val < min) val = min;  
    TCB1_CCMP = val;
    13b0:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
    13b4:	df 91       	pop	r29
}
    13b6:	cf 91       	pop	r28
    13b8:	1f 91       	pop	r17
    13ba:	0f 91       	pop	r16
    13bc:	ff 90       	pop	r15
    13be:	ef 90       	pop	r14
    13c0:	df 90       	pop	r13
    13c2:	08 95       	ret

000013c4 <floatAround>:
    13c4:	0f 93       	push	r16

uint8_t floatAround(uint8_t sample, uint8_t bits, uint8_t min, uint8_t max){
    13c6:	1f 93       	push	r17
    13c8:	cf 93       	push	r28
    13ca:	df 93       	push	r29
    13cc:	c8 2f       	mov	r28, r24
    13ce:	d4 2f       	mov	r29, r20
    13d0:	02 2f       	mov	r16, r18
    bits = mask[(bits-1)&0x07];
    13d2:	e6 2f       	mov	r30, r22
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	31 97       	sbiw	r30, 0x01	; 1
    13d8:	e7 70       	andi	r30, 0x07	; 7
    13da:	ff 27       	eor	r31, r31
    13dc:	e0 5e       	subi	r30, 0xE0	; 224
    13de:	f7 4c       	sbci	r31, 0xC7	; 199
    13e0:	10 81       	ld	r17, Z
    sample += lfsr()&bits;
    13e2:	9f df       	rcall	.-194    	; 0x1322 <lfsr>
    13e4:	81 23       	and	r24, r17
    13e6:	c8 0f       	add	r28, r24
    sample -= lfsr()&bits;
    13e8:	9c df       	rcall	.-200    	; 0x1322 <lfsr>
    13ea:	81 23       	and	r24, r17
    13ec:	c8 1b       	sub	r28, r24
    13ee:	8c 2f       	mov	r24, r28
    13f0:	00 23       	and	r16, r16
    if (max){
    13f2:	41 f0       	breq	.+16     	; 0x1404 <floatAround+0x40>
    13f4:	9c 2f       	mov	r25, r28
    13f6:	0c 17       	cp	r16, r28
    13f8:	08 f4       	brcc	.+2      	; 0x13fc <floatAround+0x38>
    13fa:	90 2f       	mov	r25, r16
    13fc:	8d 2f       	mov	r24, r29
    13fe:	d9 17       	cp	r29, r25
    1400:	08 f4       	brcc	.+2      	; 0x1404 <floatAround+0x40>
    1402:	89 2f       	mov	r24, r25
    1404:	41 e0       	ldi	r20, 0x01	; 1
        if (sample > max) sample = max;
        if (sample < min) sample = min;
    }
    if (min & (sample < min)) sample = min;
    1406:	50 e0       	ldi	r21, 0x00	; 0
    1408:	8d 17       	cp	r24, r29
    140a:	10 f0       	brcs	.+4      	; 0x1410 <floatAround+0x4c>
    140c:	40 e0       	ldi	r20, 0x00	; 0
    140e:	50 e0       	ldi	r21, 0x00	; 0
    1410:	2d 2f       	mov	r18, r29
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	24 23       	and	r18, r20
    1416:	35 23       	and	r19, r21
    1418:	23 2b       	or	r18, r19
    141a:	09 f0       	breq	.+2      	; 0x141e <floatAround+0x5a>
    141c:	8d 2f       	mov	r24, r29
    141e:	df 91       	pop	r29

    return sample;
}
    1420:	cf 91       	pop	r28
    1422:	1f 91       	pop	r17
    1424:	0f 91       	pop	r16
    1426:	08 95       	ret

00001428 <SaveGameState>:
    1428:	cf 92       	push	r12
    inventory[0] = (gameState[INVADDR]<<8|gameState[INVADDR+1]);
    inventory[1] = (gameState[INVADDR+2]<<8|gameState[INVADDR+3]);
}

//Save changed data to EEPROM
uint8_t SaveGameState(){
    142a:	df 92       	push	r13
    142c:	ff 92       	push	r15
    142e:	0f 93       	push	r16
    1430:	1f 93       	push	r17
    1432:	cf 93       	push	r28
    1434:	df 93       	push	r29
    1436:	cd b7       	in	r28, 0x3d	; 61
    1438:	de b7       	in	r29, 0x3e	; 62
    143a:	64 97       	sbiw	r28, 0x14	; 20
    143c:	cd bf       	out	0x3d, r28	; 61
    143e:	de bf       	out	0x3e, r29	; 62
    uint8_t gameCheck[BOOTCHK];

    //Read all data up to the boot/check result address from EEPROM
    EERead(0, &gameCheck[0], BOOTCHK);
    1440:	44 e1       	ldi	r20, 0x14	; 20
    1442:	be 01       	movw	r22, r28
    1444:	6f 5f       	subi	r22, 0xFF	; 255
    1446:	7f 4f       	sbci	r23, 0xFF	; 255
    1448:	80 e0       	ldi	r24, 0x00	; 0
    144a:	97 de       	rcall	.-722    	; 0x117a <EERead>
    144c:	8b e5       	ldi	r24, 0x5B	; 91
    144e:	c8 2e       	mov	r12, r24
    1450:	8a e3       	ldi	r24, 0x3A	; 58
    1452:	d8 2e       	mov	r13, r24
    1454:	8e 01       	movw	r16, r28
    1456:	0f 5f       	subi	r16, 0xFF	; 255
    1458:	1f 4f       	sbci	r17, 0xFF	; 255

    //Check game status bits
    for (uint8_t x=0; x<STATLEN; ++x){
    145a:	f1 2c       	mov	r15, r1
        if (gameState[x] != gameCheck[x]){
    145c:	f8 01       	movw	r30, r16
    145e:	81 91       	ld	r24, Z+
    1460:	8f 01       	movw	r16, r30
    1462:	f6 01       	movw	r30, r12
    1464:	90 81       	ld	r25, Z
    1466:	98 13       	cpse	r25, r24
    1468:	08 c0       	rjmp	.+16     	; 0x147a <SaveGameState+0x52>

    //Read all data up to the boot/check result address from EEPROM
    EERead(0, &gameCheck[0], BOOTCHK);

    //Check game status bits
    for (uint8_t x=0; x<STATLEN; ++x){
    146a:	f3 94       	inc	r15
    146c:	ff ef       	ldi	r31, 0xFF	; 255
    146e:	cf 1a       	sub	r12, r31
    1470:	df 0a       	sbc	r13, r31
    1472:	80 e1       	ldi	r24, 0x10	; 16
    1474:	f8 12       	cpse	r15, r24
    1476:	f2 cf       	rjmp	.-28     	; 0x145c <SaveGameState+0x34>
    1478:	08 c0       	rjmp	.+16     	; 0x148a <SaveGameState+0x62>
        if (gameState[x] != gameCheck[x]){
            if (EEWrite(x, &gameState[x], 1)) return 1;
    147a:	41 e0       	ldi	r20, 0x01	; 1
    147c:	b6 01       	movw	r22, r12
    147e:	8f 2d       	mov	r24, r15
    1480:	8c de       	rcall	.-744    	; 0x119a <EEWrite>
    1482:	88 23       	and	r24, r24
    1484:	91 f3       	breq	.-28     	; 0x146a <SaveGameState+0x42>
    1486:	91 e0       	ldi	r25, 0x01	; 1
    1488:	36 c0       	rjmp	.+108    	; 0x14f6 <SaveGameState+0xce>
        }
    }

    //Check the inventory too
    gameState[INVADDR] = (uint8_t)(inventory[0]>>8);
    148a:	20 91 3a 38 	lds	r18, 0x383A	; 0x80383a <inventory>
    148e:	30 91 3b 38 	lds	r19, 0x383B	; 0x80383b <inventory+0x1>
    1492:	30 93 6b 3a 	sts	0x3A6B, r19	; 0x803a6b <gameState+0x10>
    gameState[INVADDR+1] = (uint8_t)(inventory[0]&0xff);
    1496:	20 93 6c 3a 	sts	0x3A6C, r18	; 0x803a6c <gameState+0x11>
    gameState[INVADDR+2] = (uint8_t)(inventory[1]>>8);
    149a:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <inventory+0x2>
    149e:	90 91 3d 38 	lds	r25, 0x383D	; 0x80383d <inventory+0x3>
    14a2:	90 93 6d 3a 	sts	0x3A6D, r25	; 0x803a6d <gameState+0x12>
    gameState[INVADDR+3] = (uint8_t)(inventory[1]&0xff);
    14a6:	80 93 6e 3a 	sts	0x3A6E, r24	; 0x803a6e <gameState+0x13>
    if (inventory[0] != (gameCheck[INVADDR]<<8|gameCheck[INVADDR+1])) {
    14aa:	89 89       	ldd	r24, Y+17	; 0x11
    14ac:	9a 89       	ldd	r25, Y+18	; 0x12
    14ae:	98 27       	eor	r25, r24
    14b0:	89 27       	eor	r24, r25
    14b2:	98 27       	eor	r25, r24
    14b4:	28 17       	cp	r18, r24
    14b6:	39 07       	cpc	r19, r25
    14b8:	69 f4       	brne	.+26     	; 0x14d4 <SaveGameState+0xac>
        if (EEWrite(INVADDR, &gameState[INVADDR], 2)) return 1;
    }
    if (inventory[1] != (gameCheck[INVADDR+2]<<8|gameCheck[INVADDR+3])) {
    14ba:	8b 89       	ldd	r24, Y+19	; 0x13
    14bc:	9c 89       	ldd	r25, Y+20	; 0x14
    14be:	98 27       	eor	r25, r24
    14c0:	89 27       	eor	r24, r25
    14c2:	98 27       	eor	r25, r24
    14c4:	20 91 3c 38 	lds	r18, 0x383C	; 0x80383c <inventory+0x2>
    14c8:	30 91 3d 38 	lds	r19, 0x383D	; 0x80383d <inventory+0x3>
    14cc:	28 17       	cp	r18, r24
    14ce:	39 07       	cpc	r19, r25
    14d0:	49 f4       	brne	.+18     	; 0x14e4 <SaveGameState+0xbc>
    14d2:	10 c0       	rjmp	.+32     	; 0x14f4 <SaveGameState+0xcc>
    gameState[INVADDR] = (uint8_t)(inventory[0]>>8);
    gameState[INVADDR+1] = (uint8_t)(inventory[0]&0xff);
    gameState[INVADDR+2] = (uint8_t)(inventory[1]>>8);
    gameState[INVADDR+3] = (uint8_t)(inventory[1]&0xff);
    if (inventory[0] != (gameCheck[INVADDR]<<8|gameCheck[INVADDR+1])) {
        if (EEWrite(INVADDR, &gameState[INVADDR], 2)) return 1;
    14d4:	42 e0       	ldi	r20, 0x02	; 2
    14d6:	6b e6       	ldi	r22, 0x6B	; 107
    14d8:	7a e3       	ldi	r23, 0x3A	; 58
    14da:	80 e1       	ldi	r24, 0x10	; 16
    14dc:	5e de       	rcall	.-836    	; 0x119a <EEWrite>
    14de:	88 23       	and	r24, r24
    14e0:	61 f3       	breq	.-40     	; 0x14ba <SaveGameState+0x92>
    14e2:	d1 cf       	rjmp	.-94     	; 0x1486 <SaveGameState+0x5e>
    }
    if (inventory[1] != (gameCheck[INVADDR+2]<<8|gameCheck[INVADDR+3])) {
        if (EEWrite(INVADDR+2, &gameState[INVADDR+2], 2)) return 1;
    14e4:	42 e0       	ldi	r20, 0x02	; 2
    14e6:	6d e6       	ldi	r22, 0x6D	; 109
    14e8:	7a e3       	ldi	r23, 0x3A	; 58
    14ea:	82 e1       	ldi	r24, 0x12	; 18
    14ec:	56 de       	rcall	.-852    	; 0x119a <EEWrite>
    EERead(0, &gameCheck[0], BOOTCHK);

    //Check game status bits
    for (uint8_t x=0; x<STATLEN; ++x){
        if (gameState[x] != gameCheck[x]){
            if (EEWrite(x, &gameState[x], 1)) return 1;
    14ee:	91 e0       	ldi	r25, 0x01	; 1
    14f0:	81 11       	cpse	r24, r1
    14f2:	01 c0       	rjmp	.+2      	; 0x14f6 <SaveGameState+0xce>
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    if (inventory[1] != (gameCheck[INVADDR+2]<<8|gameCheck[INVADDR+3])) {
        if (EEWrite(INVADDR+2, &gameState[INVADDR+2], 2)) return 1;
    }

    return 0;
}
    14f6:	89 2f       	mov	r24, r25
    14f8:	64 96       	adiw	r28, 0x14	; 20
    14fa:	cd bf       	out	0x3d, r28	; 61
    14fc:	de bf       	out	0x3e, r29	; 62
    14fe:	df 91       	pop	r29
    1500:	cf 91       	pop	r28
    1502:	1f 91       	pop	r17
    1504:	0f 91       	pop	r16
    1506:	ff 90       	pop	r15
    1508:	df 90       	pop	r13
    150a:	cf 90       	pop	r12
    150c:	08 95       	ret

0000150e <ReadStatusBit>:

uint8_t ReadStatusBit(uint8_t number){
    number &= 0x7f;
    if (gameState[number>>3] & (1<<(number&7))) return 1; else return 0;
    150e:	e8 2f       	mov	r30, r24
    1510:	ef 77       	andi	r30, 0x7F	; 127
    1512:	e6 95       	lsr	r30
    1514:	e6 95       	lsr	r30
    1516:	e6 95       	lsr	r30
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	e5 5a       	subi	r30, 0xA5	; 165
    151c:	f5 4c       	sbci	r31, 0xC5	; 197
    151e:	20 81       	ld	r18, Z
    1520:	30 e0       	ldi	r19, 0x00	; 0
    1522:	87 70       	andi	r24, 0x07	; 7
    1524:	a9 01       	movw	r20, r18
    1526:	02 c0       	rjmp	.+4      	; 0x152c <ReadStatusBit+0x1e>
    1528:	55 95       	asr	r21
    152a:	47 95       	ror	r20
    152c:	8a 95       	dec	r24
    152e:	e2 f7       	brpl	.-8      	; 0x1528 <ReadStatusBit+0x1a>
    1530:	ca 01       	movw	r24, r20
}
    1532:	81 70       	andi	r24, 0x01	; 1
    1534:	08 95       	ret

00001536 <WriteStatusBit>:

void WriteStatusBit(uint8_t number, uint8_t state){
    number &= 0x7f;
    1536:	e8 2f       	mov	r30, r24
    1538:	ef 77       	andi	r30, 0x7F	; 127
    153a:	e6 95       	lsr	r30
    153c:	e6 95       	lsr	r30
    153e:	e6 95       	lsr	r30
    1540:	28 2f       	mov	r18, r24
    1542:	27 70       	andi	r18, 0x07	; 7
    if (state) gameState[number>>3] |= 1<<(number&7);
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	e5 5a       	subi	r30, 0xA5	; 165
    1548:	f5 4c       	sbci	r31, 0xC5	; 197
    154a:	81 e0       	ldi	r24, 0x01	; 1
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	01 c0       	rjmp	.+2      	; 0x1552 <WriteStatusBit+0x1c>
    1550:	88 0f       	add	r24, r24
    1552:	2a 95       	dec	r18
    1554:	ea f7       	brpl	.-6      	; 0x1550 <WriteStatusBit+0x1a>
    1556:	66 23       	and	r22, r22
    1558:	19 f0       	breq	.+6      	; 0x1560 <WriteStatusBit+0x2a>
    155a:	90 81       	ld	r25, Z
    155c:	89 2b       	or	r24, r25
    155e:	03 c0       	rjmp	.+6      	; 0x1566 <WriteStatusBit+0x30>
    else gameState[number>>3] &= ~(1<<(number&7));
    1560:	80 95       	com	r24
    1562:	90 81       	ld	r25, Z
    1564:	89 23       	and	r24, r25
    1566:	80 83       	st	Z, r24
    1568:	08 95       	ret

0000156a <UpdateState>:
}

//Update game state: num -> vBBBBbbb v=value(0 is set!), BBBB=Byte number, bbb=bit number
void UpdateState(uint8_t num){
    156a:	98 2f       	mov	r25, r24
    uint8_t clearBit = num & 0x80;
    num &= 0x7f;
    156c:	8f 77       	andi	r24, 0x7F	; 127
    if (num) {
    156e:	31 f0       	breq	.+12     	; 0x157c <UpdateState+0x12>
        if (clearBit) {
    1570:	97 ff       	sbrs	r25, 7
    1572:	02 c0       	rjmp	.+4      	; 0x1578 <UpdateState+0xe>
            WriteStatusBit(num, 0);
    1574:	60 e0       	ldi	r22, 0x00	; 0
    1576:	01 c0       	rjmp	.+2      	; 0x157a <UpdateState+0x10>
        } else {
            WriteStatusBit(num, 1);
    1578:	61 e0       	ldi	r22, 0x01	; 1
    157a:	dd cf       	rjmp	.-70     	; 0x1536 <WriteStatusBit>
    157c:	08 95       	ret

0000157e <CheckState>:
        }
    }
}

//Checks if state of bit BBBBbbb matches with v (inverted) bit
uint8_t CheckState(uint8_t num){
    157e:	cf 93       	push	r28
    1580:	c8 2f       	mov	r28, r24
    uint8_t bitSet = 0;
    if (ReadStatusBit(num & 0x7f)){
    1582:	8f 77       	andi	r24, 0x7F	; 127
    1584:	c4 df       	rcall	.-120    	; 0x150e <ReadStatusBit>
    1586:	2c 2f       	mov	r18, r28
    1588:	22 1f       	adc	r18, r18
    158a:	22 27       	eor	r18, r18
    158c:	22 1f       	adc	r18, r18
    158e:	91 e0       	ldi	r25, 0x01	; 1
    1590:	81 11       	cpse	r24, r1
    1592:	01 c0       	rjmp	.+2      	; 0x1596 <CheckState+0x18>
    1594:	90 e0       	ldi	r25, 0x00	; 0
    }
    if (((num & 0x80)>0)^(bitSet>0)){
        return 1;
    }
    return 0;
}
    1596:	82 2f       	mov	r24, r18
    1598:	89 27       	eor	r24, r25
    159a:	cf 91       	pop	r28
    159c:	08 95       	ret

0000159e <getID>:

//Give out a number 0..3, calculated using serial number fields
uint8_t getID(){
    uint8_t id = 0;
    uint8_t *serNum;
    serNum = (uint8_t*)&SIGROW_SERNUM0;
    159e:	e3 e0       	ldi	r30, 0x03	; 3
    15a0:	f1 e1       	ldi	r31, 0x11	; 17
    return 0;
}

//Give out a number 0..3, calculated using serial number fields
uint8_t getID(){
    uint8_t id = 0;
    15a2:	80 e0       	ldi	r24, 0x00	; 0
    uint8_t *serNum;
    serNum = (uint8_t*)&SIGROW_SERNUM0;

    for (uint8_t x=0; x<10; ++x){
        id += *serNum;
    15a4:	91 91       	ld	r25, Z+
    15a6:	89 0f       	add	r24, r25
uint8_t getID(){
    uint8_t id = 0;
    uint8_t *serNum;
    serNum = (uint8_t*)&SIGROW_SERNUM0;

    for (uint8_t x=0; x<10; ++x){
    15a8:	ed 30       	cpi	r30, 0x0D	; 13
    15aa:	91 e1       	ldi	r25, 0x11	; 17
    15ac:	f9 07       	cpc	r31, r25
    15ae:	d1 f7       	brne	.-12     	; 0x15a4 <getID+0x6>
        id += *serNum;
        ++serNum;
    }
    id %= 4;
    whoami = id+1;
    15b0:	83 70       	andi	r24, 0x03	; 3
    15b2:	8f 5f       	subi	r24, 0xFF	; 255
    15b4:	80 93 39 38 	sts	0x3839, r24	; 0x803839 <whoami>
    return whoami;
}
    15b8:	08 95       	ret

000015ba <Reset>:

void Reset(){
    15ba:	eb e5       	ldi	r30, 0x5B	; 91
    15bc:	fa e3       	ldi	r31, 0x3A	; 58
    //# 110   set to 1 by FW if badge UUID mod 4 == 0
    //# 111   set to 1 by FW if badge UUID mod 4 == 1
    //# 112   set to 1 by FW if badge UUID mod 4 == 2
    //# 113   set to 1 by FW if badge UUID mod 4 == 3
    for (uint8_t x=0; x<sizeof(gameState); ++x){
        gameState[x] = 0;
    15be:	11 92       	st	Z+, r1
    //Reset game progress (all zeroes) and load some bits:
    //# 110   set to 1 by FW if badge UUID mod 4 == 0
    //# 111   set to 1 by FW if badge UUID mod 4 == 1
    //# 112   set to 1 by FW if badge UUID mod 4 == 2
    //# 113   set to 1 by FW if badge UUID mod 4 == 3
    for (uint8_t x=0; x<sizeof(gameState); ++x){
    15c0:	8a e3       	ldi	r24, 0x3A	; 58
    15c2:	ef 36       	cpi	r30, 0x6F	; 111
    15c4:	f8 07       	cpc	r31, r24
    15c6:	d9 f7       	brne	.-10     	; 0x15be <Reset+0x4>
        gameState[x] = 0;
    }

    uint8_t id = getID();
    15c8:	ea df       	rcall	.-44     	; 0x159e <getID>

    //Write bit in gameState location 110..113
    if (id == 0) WriteStatusBit(110, 1);
    15ca:	81 11       	cpse	r24, r1
    15cc:	04 c0       	rjmp	.+8      	; 0x15d6 <Reset+0x1c>
    if (gameState[number>>3] & (1<<(number&7))) return 1; else return 0;
}

void WriteStatusBit(uint8_t number, uint8_t state){
    number &= 0x7f;
    if (state) gameState[number>>3] |= 1<<(number&7);
    15ce:	80 91 68 3a 	lds	r24, 0x3A68	; 0x803a68 <gameState+0xd>
    15d2:	80 64       	ori	r24, 0x40	; 64
    15d4:	05 c0       	rjmp	.+10     	; 0x15e0 <Reset+0x26>

    uint8_t id = getID();

    //Write bit in gameState location 110..113
    if (id == 0) WriteStatusBit(110, 1);
    else if (id == 1) WriteStatusBit(111, 1);
    15d6:	81 30       	cpi	r24, 0x01	; 1
    15d8:	31 f4       	brne	.+12     	; 0x15e6 <Reset+0x2c>
    if (gameState[number>>3] & (1<<(number&7))) return 1; else return 0;
}

void WriteStatusBit(uint8_t number, uint8_t state){
    number &= 0x7f;
    if (state) gameState[number>>3] |= 1<<(number&7);
    15da:	80 91 68 3a 	lds	r24, 0x3A68	; 0x803a68 <gameState+0xd>
    15de:	80 68       	ori	r24, 0x80	; 128
    15e0:	80 93 68 3a 	sts	0x3A68, r24	; 0x803a68 <gameState+0xd>
    15e4:	0d c0       	rjmp	.+26     	; 0x1600 <Reset+0x46>
    uint8_t id = getID();

    //Write bit in gameState location 110..113
    if (id == 0) WriteStatusBit(110, 1);
    else if (id == 1) WriteStatusBit(111, 1);
    else if (id == 2) WriteStatusBit(112, 1);
    15e6:	82 30       	cpi	r24, 0x02	; 2
    15e8:	21 f4       	brne	.+8      	; 0x15f2 <Reset+0x38>
    if (gameState[number>>3] & (1<<(number&7))) return 1; else return 0;
}

void WriteStatusBit(uint8_t number, uint8_t state){
    number &= 0x7f;
    if (state) gameState[number>>3] |= 1<<(number&7);
    15ea:	80 91 69 3a 	lds	r24, 0x3A69	; 0x803a69 <gameState+0xe>
    15ee:	81 60       	ori	r24, 0x01	; 1
    15f0:	05 c0       	rjmp	.+10     	; 0x15fc <Reset+0x42>

    //Write bit in gameState location 110..113
    if (id == 0) WriteStatusBit(110, 1);
    else if (id == 1) WriteStatusBit(111, 1);
    else if (id == 2) WriteStatusBit(112, 1);
    else if (id == 3) WriteStatusBit(113, 1);
    15f2:	83 30       	cpi	r24, 0x03	; 3
    15f4:	29 f4       	brne	.+10     	; 0x1600 <Reset+0x46>
    if (gameState[number>>3] & (1<<(number&7))) return 1; else return 0;
}

void WriteStatusBit(uint8_t number, uint8_t state){
    number &= 0x7f;
    if (state) gameState[number>>3] |= 1<<(number&7);
    15f6:	80 91 69 3a 	lds	r24, 0x3A69	; 0x803a69 <gameState+0xe>
    15fa:	82 60       	ori	r24, 0x02	; 2
    15fc:	80 93 69 3a 	sts	0x3A69, r24	; 0x803a69 <gameState+0xe>
    1600:	80 91 5b 3a 	lds	r24, 0x3A5B	; 0x803a5b <gameState>
    1604:	81 60       	ori	r24, 0x01	; 1
    1606:	80 93 5b 3a 	sts	0x3A5B, r24	; 0x803a5b <gameState>
    160a:	08 95       	ret

0000160c <LoadGameState>:

    return sample;
}

//Load game status
void LoadGameState(){
    160c:	cf 93       	push	r28
    160e:	df 93       	push	r29
    EERead(0, &gameState[0], BOOTCHK);   //Load game status bits from EEPROM
    1610:	44 e1       	ldi	r20, 0x14	; 20
    1612:	6b e5       	ldi	r22, 0x5B	; 91
    1614:	7a e3       	ldi	r23, 0x3A	; 58
    1616:	80 e0       	ldi	r24, 0x00	; 0
    1618:	b0 dd       	rcall	.-1184   	; 0x117a <EERead>
    161a:	ce e6       	ldi	r28, 0x6E	; 110

    uint8_t idSet = 0;
    161c:	d0 e0       	ldi	r29, 0x00	; 0
    for (uint8_t x=0; x<4; ++x){
        idSet += ReadStatusBit(110+x);
    161e:	8c 2f       	mov	r24, r28
    1620:	76 df       	rcall	.-276    	; 0x150e <ReadStatusBit>
    1622:	d8 0f       	add	r29, r24
    1624:	cf 5f       	subi	r28, 0xFF	; 255
//Load game status
void LoadGameState(){
    EERead(0, &gameState[0], BOOTCHK);   //Load game status bits from EEPROM

    uint8_t idSet = 0;
    for (uint8_t x=0; x<4; ++x){
    1626:	c2 37       	cpi	r28, 0x72	; 114
    1628:	d1 f7       	brne	.-12     	; 0x161e <LoadGameState+0x12>
        idSet += ReadStatusBit(110+x);
    }

    //Check if badge is reset(0 = cheated!) or new(3) or error(2)
    if (idSet != 1) {
    162a:	d1 30       	cpi	r29, 0x01	; 1
        Reset();
    162c:	11 f0       	breq	.+4      	; 0x1632 <LoadGameState+0x26>
    162e:	c5 df       	rcall	.-118    	; 0x15ba <Reset>
    } else getID();
    1630:	01 c0       	rjmp	.+2      	; 0x1634 <LoadGameState+0x28>
    1632:	b5 df       	rcall	.-150    	; 0x159e <getID>

    inventory[0] = (gameState[INVADDR]<<8|gameState[INVADDR+1]);
    1634:	80 91 6b 3a 	lds	r24, 0x3A6B	; 0x803a6b <gameState+0x10>
    1638:	90 91 6c 3a 	lds	r25, 0x3A6C	; 0x803a6c <gameState+0x11>
    163c:	98 27       	eor	r25, r24
    163e:	89 27       	eor	r24, r25
    1640:	98 27       	eor	r25, r24
    1642:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <inventory>
    1646:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <inventory+0x1>
    inventory[1] = (gameState[INVADDR+2]<<8|gameState[INVADDR+3]);
    164a:	80 91 6d 3a 	lds	r24, 0x3A6D	; 0x803a6d <gameState+0x12>
    164e:	90 91 6e 3a 	lds	r25, 0x3A6E	; 0x803a6e <gameState+0x13>
    1652:	98 27       	eor	r25, r24
    1654:	89 27       	eor	r24, r25
    1656:	98 27       	eor	r25, r24
    1658:	80 93 3c 38 	sts	0x383C, r24	; 0x80383c <inventory+0x2>
    165c:	90 93 3d 38 	sts	0x383D, r25	; 0x80383d <inventory+0x3>
}
    1660:	df 91       	pop	r29
    1662:	cf 91       	pop	r28
    1664:	08 95       	ret

00001666 <HotSummer>:
    //Write bit 0, must always be 1!
    WriteStatusBit(0, 1);
}

//Sets specific game bits after the badge is heated for one and two times.
uint8_t HotSummer(){
    1666:	cf 93       	push	r28
    static uint8_t cooledDown = 0;

    if (CheckState(SUMMERS_COMPLETED)){
    1668:	86 e7       	ldi	r24, 0x76	; 118
    166a:	89 df       	rcall	.-238    	; 0x157e <CheckState>
    166c:	c8 2f       	mov	r28, r24
    166e:	88 23       	and	r24, r24
    1670:	81 f0       	breq	.+32     	; 0x1692 <HotSummer+0x2c>
        iLED[SCARAB[G]] = 0;
    1672:	e0 91 c9 bc 	lds	r30, 0xBCC9	; 0x80bcc9 <__bss_end+0x81b5>
    1676:	f0 e0       	ldi	r31, 0x00	; 0
    1678:	ec 53       	subi	r30, 0x3C	; 60
    167a:	f5 4c       	sbci	r31, 0xC5	; 197
    167c:	10 82       	st	Z, r1
        iLED[SCARAB[R]] = dimValue;
    167e:	e0 91 c8 bc 	lds	r30, 0xBCC8	; 0x80bcc8 <__bss_end+0x81b4>
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	80 91 0b 38 	lds	r24, 0x380B	; 0x80380b <dimValue>
    1688:	ec 53       	subi	r30, 0x3C	; 60
    168a:	f5 4c       	sbci	r31, 0xC5	; 197
    168c:	80 83       	st	Z, r24
        return 1;
    168e:	c1 e0       	ldi	r28, 0x01	; 1
    1690:	4c c0       	rjmp	.+152    	; 0x172a <HotSummer+0xc4>
    }

    if (CheckState(FIRST_SUMMER)) {
    1692:	85 e7       	ldi	r24, 0x75	; 117
    1694:	74 df       	rcall	.-280    	; 0x157e <CheckState>
    1696:	88 23       	and	r24, r24
    1698:	59 f1       	breq	.+86     	; 0x16f0 <HotSummer+0x8a>
        iLED[SCARAB[G]] = dimValue;
    169a:	e0 91 c9 bc 	lds	r30, 0xBCC9	; 0x80bcc9 <__bss_end+0x81b5>
    169e:	f0 e0       	ldi	r31, 0x00	; 0
    16a0:	80 91 0b 38 	lds	r24, 0x380B	; 0x80380b <dimValue>
    16a4:	ec 53       	subi	r30, 0x3C	; 60
    16a6:	f5 4c       	sbci	r31, 0xC5	; 197
    16a8:	80 83       	st	Z, r24
        if ((cooledDown) && (adcTemp >= (calTemp + 32))) {
    16aa:	80 91 52 38 	lds	r24, 0x3852	; 0x803852 <cooledDown.3943>
    16ae:	88 23       	and	r24, r24
    16b0:	79 f0       	breq	.+30     	; 0x16d0 <HotSummer+0x6a>
    16b2:	80 91 ba 3a 	lds	r24, 0x3ABA	; 0x803aba <calTemp>
    16b6:	90 91 bb 3a 	lds	r25, 0x3ABB	; 0x803abb <calTemp+0x1>
    16ba:	20 91 ef 3a 	lds	r18, 0x3AEF	; 0x803aef <adcTemp>
    16be:	30 91 f0 3a 	lds	r19, 0x3AF0	; 0x803af0 <adcTemp+0x1>
    16c2:	80 96       	adiw	r24, 0x20	; 32
    16c4:	28 17       	cp	r18, r24
    16c6:	39 07       	cpc	r19, r25
            UpdateState(SUMMERS_COMPLETED);
    16c8:	18 f0       	brcs	.+6      	; 0x16d0 <HotSummer+0x6a>
    16ca:	86 e7       	ldi	r24, 0x76	; 118
    16cc:	4e df       	rcall	.-356    	; 0x156a <UpdateState>
            return 0;
    16ce:	2d c0       	rjmp	.+90     	; 0x172a <HotSummer+0xc4>
        }
        if (adcTemp <= (calTemp + 8)) cooledDown = 1;
    16d0:	80 91 ba 3a 	lds	r24, 0x3ABA	; 0x803aba <calTemp>
    16d4:	90 91 bb 3a 	lds	r25, 0x3ABB	; 0x803abb <calTemp+0x1>
    16d8:	20 91 ef 3a 	lds	r18, 0x3AEF	; 0x803aef <adcTemp>
    16dc:	30 91 f0 3a 	lds	r19, 0x3AF0	; 0x803af0 <adcTemp+0x1>
    16e0:	08 96       	adiw	r24, 0x08	; 8
    16e2:	82 17       	cp	r24, r18
    16e4:	93 07       	cpc	r25, r19
    16e6:	08 f1       	brcs	.+66     	; 0x172a <HotSummer+0xc4>
    16e8:	81 e0       	ldi	r24, 0x01	; 1
    16ea:	80 93 52 38 	sts	0x3852, r24	; 0x803852 <cooledDown.3943>
    16ee:	1d c0       	rjmp	.+58     	; 0x172a <HotSummer+0xc4>
                   
    } else {
        if (calTemp == 0) calTemp = adcTemp;
    16f0:	80 91 ba 3a 	lds	r24, 0x3ABA	; 0x803aba <calTemp>
    16f4:	90 91 bb 3a 	lds	r25, 0x3ABB	; 0x803abb <calTemp+0x1>
    16f8:	89 2b       	or	r24, r25
    16fa:	41 f4       	brne	.+16     	; 0x170c <HotSummer+0xa6>
    16fc:	80 91 ef 3a 	lds	r24, 0x3AEF	; 0x803aef <adcTemp>
    1700:	90 91 f0 3a 	lds	r25, 0x3AF0	; 0x803af0 <adcTemp+0x1>
    1704:	80 93 ba 3a 	sts	0x3ABA, r24	; 0x803aba <calTemp>
    1708:	90 93 bb 3a 	sts	0x3ABB, r25	; 0x803abb <calTemp+0x1>
        if (adcTemp >= (calTemp + 32)) {
    170c:	80 91 ba 3a 	lds	r24, 0x3ABA	; 0x803aba <calTemp>
    1710:	90 91 bb 3a 	lds	r25, 0x3ABB	; 0x803abb <calTemp+0x1>
    1714:	20 91 ef 3a 	lds	r18, 0x3AEF	; 0x803aef <adcTemp>
    1718:	30 91 f0 3a 	lds	r19, 0x3AF0	; 0x803af0 <adcTemp+0x1>
    171c:	80 96       	adiw	r24, 0x20	; 32
    171e:	28 17       	cp	r18, r24
    1720:	39 07       	cpc	r19, r25
            UpdateState(FIRST_SUMMER);
    1722:	18 f0       	brcs	.+6      	; 0x172a <HotSummer+0xc4>
    1724:	85 e7       	ldi	r24, 0x75	; 117
    1726:	21 df       	rcall	.-446    	; 0x156a <UpdateState>
        }
    }
    return 0;
    1728:	c0 e0       	ldi	r28, 0x00	; 0
}
    172a:	8c 2f       	mov	r24, r28
    172c:	cf 91       	pop	r28
    172e:	08 95       	ret

00001730 <GenerateBlinks>:

void GenerateBlinks(){
    1730:	1f 93       	push	r17
    1732:	cf 93       	push	r28
    1734:	df 93       	push	r29
    1736:	c8 ed       	ldi	r28, 0xD8	; 216
    1738:	dc eb       	ldi	r29, 0xBC	; 188
    173a:	1a e7       	ldi	r17, 0x7A	; 122
    effect (or be set directly)
    */

    //Activate HCKR & BADGER leds based on the state-bits
    for (uint8_t i=0;i<6;i++) {
        if(CheckState(HACKER_STATES + i)) {
    173c:	81 2f       	mov	r24, r17
    173e:	1f df       	rcall	.-450    	; 0x157e <CheckState>
            iLED[HCKR[G][i]] = dimValue;
    1740:	ee 81       	ldd	r30, Y+6	; 0x06
    1742:	f0 e0       	ldi	r31, 0x00	; 0
    effect (or be set directly)
    */

    //Activate HCKR & BADGER leds based on the state-bits
    for (uint8_t i=0;i<6;i++) {
        if(CheckState(HACKER_STATES + i)) {
    1744:	88 23       	and	r24, r24
    1746:	59 f0       	breq	.+22     	; 0x175e <GenerateBlinks+0x2e>
            iLED[HCKR[G][i]] = dimValue;
    1748:	80 91 0b 38 	lds	r24, 0x380B	; 0x80380b <dimValue>
    174c:	ec 53       	subi	r30, 0x3C	; 60
    174e:	f5 4c       	sbci	r31, 0xC5	; 197
    1750:	80 83       	st	Z, r24
            iLED[HCKR[R][i]] = 0;
    1752:	e8 81       	ld	r30, Y
    1754:	f0 e0       	ldi	r31, 0x00	; 0
    1756:	ec 53       	subi	r30, 0x3C	; 60
    1758:	f5 4c       	sbci	r31, 0xC5	; 197
    175a:	10 82       	st	Z, r1
    175c:	0a c0       	rjmp	.+20     	; 0x1772 <GenerateBlinks+0x42>
        } else {
            iLED[HCKR[G][i]] = 0;
    175e:	ec 53       	subi	r30, 0x3C	; 60
    1760:	f5 4c       	sbci	r31, 0xC5	; 197
    1762:	10 82       	st	Z, r1
            iLED[HCKR[R][i]] = dimValue;
    1764:	e8 81       	ld	r30, Y
    1766:	f0 e0       	ldi	r31, 0x00	; 0
    1768:	80 91 0b 38 	lds	r24, 0x380B	; 0x80380b <dimValue>
    176c:	ec 53       	subi	r30, 0x3C	; 60
    176e:	f5 4c       	sbci	r31, 0xC5	; 197
    1770:	80 83       	st	Z, r24
    1772:	1f 5f       	subi	r17, 0xFF	; 255
    1774:	21 96       	adiw	r28, 0x01	; 1
    used by the games, the other LEDs can be used by setting 
    effect (or be set directly)
    */

    //Activate HCKR & BADGER leds based on the state-bits
    for (uint8_t i=0;i<6;i++) {
    1776:	10 38       	cpi	r17, 0x80	; 128
    1778:	09 f7       	brne	.-62     	; 0x173c <GenerateBlinks+0xc>
        } else {
            iLED[HCKR[G][i]] = 0;
            iLED[HCKR[R][i]] = dimValue;
        }
    }
    if (CheckState(GEM_STATE)) {
    177a:	80 e4       	ldi	r24, 0x40	; 64
    177c:	00 df       	rcall	.-512    	; 0x157e <CheckState>
    177e:	88 23       	and	r24, r24
    1780:	d1 f0       	breq	.+52     	; 0x17b6 <GenerateBlinks+0x86>
        if ( heart == 0 || heart == 2 )
    1782:	80 91 53 38 	lds	r24, 0x3853	; 0x803853 <heart>
    1786:	98 2f       	mov	r25, r24
    1788:	9d 7f       	andi	r25, 0xFD	; 253
    178a:	e0 91 c7 bc 	lds	r30, 0xBCC7	; 0x80bcc7 <__bss_end+0x81b3>
            iLED[BADGER] = dimValue;
    178e:	f0 e0       	ldi	r31, 0x00	; 0
            iLED[HCKR[G][i]] = 0;
            iLED[HCKR[R][i]] = dimValue;
        }
    }
    if (CheckState(GEM_STATE)) {
        if ( heart == 0 || heart == 2 )
    1790:	91 11       	cpse	r25, r1
    1792:	06 c0       	rjmp	.+12     	; 0x17a0 <GenerateBlinks+0x70>
            iLED[BADGER] = dimValue;
    1794:	90 91 0b 38 	lds	r25, 0x380B	; 0x80380b <dimValue>
    1798:	ec 53       	subi	r30, 0x3C	; 60
    179a:	f5 4c       	sbci	r31, 0xC5	; 197
    179c:	90 83       	st	Z, r25
    179e:	05 c0       	rjmp	.+10     	; 0x17aa <GenerateBlinks+0x7a>
        else
            iLED[BADGER] = 0;
    17a0:	ec 53       	subi	r30, 0x3C	; 60
    17a2:	f5 4c       	sbci	r31, 0xC5	; 197
    17a4:	10 82       	st	Z, r1
        if (heart<16)
    17a6:	80 31       	cpi	r24, 0x10	; 16
    17a8:	20 f4       	brcc	.+8      	; 0x17b2 <GenerateBlinks+0x82>
            heart++;
    17aa:	8f 5f       	subi	r24, 0xFF	; 255
    17ac:	80 93 53 38 	sts	0x3853, r24	; 0x803853 <heart>
    17b0:	02 c0       	rjmp	.+4      	; 0x17b6 <GenerateBlinks+0x86>
        else
            heart = 0;
    17b2:	10 92 53 38 	sts	0x3853, r1	; 0x803853 <heart>
    }
}
    17b6:	df 91       	pop	r29
    17b8:	cf 91       	pop	r28
    17ba:	1f 91       	pop	r17
    17bc:	08 95       	ret

000017be <GenerateAudio>:


uint8_t GenerateAudio(){
    17be:	0f 93       	push	r16
    17c0:	1f 93       	push	r17
    17c2:	cf 93       	push	r28
    17c4:	df 93       	push	r29

    if (auIn[AULEN>>1] < HPLVL) {
    17c6:	80 91 c0 3a 	lds	r24, 0x3AC0	; 0x803ac0 <auIn+0x4>
    17ca:	89 31       	cpi	r24, 0x19	; 25
    17cc:	08 f0       	brcs	.+2      	; 0x17d0 <GenerateAudio+0x12>
    17ce:	ce c0       	rjmp	.+412    	; 0x196c <GenerateAudio+0x1ae>

        detHdPh = 1;
    17d0:	81 e0       	ldi	r24, 0x01	; 1
    17d2:	80 93 b9 3a 	sts	0x3AB9, r24	; 0x803ab9 <detHdPh>

        //Audio for text adventure
        if ((effect&0xff00)==0) {
    17d6:	80 91 36 38 	lds	r24, 0x3836	; 0x803836 <effect>
    17da:	90 91 37 38 	lds	r25, 0x3837	; 0x803837 <effect+0x1>
    17de:	88 27       	eor	r24, r24
    17e0:	89 2b       	or	r24, r25
    17e2:	09 f0       	breq	.+2      	; 0x17e6 <GenerateAudio+0x28>
    17e4:	be c0       	rjmp	.+380    	; 0x1962 <GenerateAudio+0x1a4>

            //Silence
            if ((effect&0xE0)==0){
    17e6:	80 91 36 38 	lds	r24, 0x3836	; 0x803836 <effect>
    17ea:	90 91 37 38 	lds	r25, 0x3837	; 0x803837 <effect+0x1>
    17ee:	80 7e       	andi	r24, 0xE0	; 224
    17f0:	99 27       	eor	r25, r25
    17f2:	89 2b       	or	r24, r25
    17f4:	31 f4       	brne	.+12     	; 0x1802 <GenerateAudio+0x44>
                auRepAddr = &zero;
    17f6:	84 e3       	ldi	r24, 0x34	; 52
    17f8:	98 e3       	ldi	r25, 0x38	; 56
    17fa:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <auRepAddr>
    17fe:	90 93 06 38 	sts	0x3806, r25	; 0x803806 <auRepAddr+0x1>
            }

            //Bad (buzzer)
            if ((effect&0xE0)==32){
    1802:	80 91 36 38 	lds	r24, 0x3836	; 0x803836 <effect>
    1806:	90 91 37 38 	lds	r25, 0x3837	; 0x803837 <effect+0x1>
    180a:	80 7e       	andi	r24, 0xE0	; 224
    180c:	99 27       	eor	r25, r25
    180e:	80 97       	sbiw	r24, 0x20	; 32
    1810:	09 f0       	breq	.+2      	; 0x1814 <GenerateAudio+0x56>
    1812:	58 c0       	rjmp	.+176    	; 0x18c4 <GenerateAudio+0x106>
                static uint8_t auBuffer[17] = {1, 255, 128, 128, 192, 255, 64, 255, 192, 128, 64, 1, 192, 1, 64, 128, 0}; 
                static uint8_t loudness, duration, start;
                floatSpeed(1, 0x2000, 0x2200);
    1814:	40 e0       	ldi	r20, 0x00	; 0
    1816:	52 e2       	ldi	r21, 0x22	; 34
    1818:	60 e0       	ldi	r22, 0x00	; 0
    181a:	70 e2       	ldi	r23, 0x20	; 32
    181c:	81 e0       	ldi	r24, 0x01	; 1
    181e:	a0 dd       	rcall	.-1216   	; 0x1360 <floatSpeed>
                auBuffer[2] = floatAround(0x80, 5, 0x01, 0x00);
    1820:	20 e0       	ldi	r18, 0x00	; 0
    1822:	41 e0       	ldi	r20, 0x01	; 1
    1824:	65 e0       	ldi	r22, 0x05	; 5
    1826:	80 e8       	ldi	r24, 0x80	; 128
    1828:	cd dd       	rcall	.-1126   	; 0x13c4 <floatAround>
    182a:	80 93 0f 38 	sts	0x380F, r24	; 0x80380f <auBuffer.3952+0x2>

                if (buttonMark) {
    182e:	80 91 3e 38 	lds	r24, 0x383E	; 0x80383e <buttonMark>
    1832:	88 23       	and	r24, r24
    1834:	09 f4       	brne	.+2      	; 0x1838 <GenerateAudio+0x7a>
    1836:	46 c0       	rjmp	.+140    	; 0x18c4 <GenerateAudio+0x106>
                    if (start == 0) {
    1838:	80 91 51 38 	lds	r24, 0x3851	; 0x803851 <start.3955>
    183c:	81 11       	cpse	r24, r1
    183e:	15 c0       	rjmp	.+42     	; 0x186a <GenerateAudio+0xac>
                        duration = 4;
    1840:	84 e0       	ldi	r24, 0x04	; 4
    1842:	80 93 50 38 	sts	0x3850, r24	; 0x803850 <duration.3954>
                        loudness = 0xff;
    1846:	8f ef       	ldi	r24, 0xFF	; 255
    1848:	80 93 4f 38 	sts	0x384F, r24	; 0x80384f <loudness.3953>
                        TCB1_CCMP = 0x2000;
    184c:	80 e0       	ldi	r24, 0x00	; 0
    184e:	90 e2       	ldi	r25, 0x20	; 32
    1850:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    1854:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
                        auRepAddr = &auBuffer[0];
    1858:	8d e0       	ldi	r24, 0x0D	; 13
    185a:	98 e3       	ldi	r25, 0x38	; 56
    185c:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <auRepAddr>
    1860:	90 93 06 38 	sts	0x3806, r25	; 0x803806 <auRepAddr+0x1>
                        start = 1;
    1864:	81 e0       	ldi	r24, 0x01	; 1
    1866:	80 93 51 38 	sts	0x3851, r24	; 0x803851 <start.3955>
                    }

                    if (loudness) {
    186a:	80 91 4f 38 	lds	r24, 0x384F	; 0x80384f <loudness.3953>
    186e:	88 23       	and	r24, r24
    1870:	69 f0       	breq	.+26     	; 0x188c <GenerateAudio+0xce>
                        auVolume = loudness;
    1872:	80 93 b0 3a 	sts	0x3AB0, r24	; 0x803ab0 <auVolume>
                        if (duration) duration--; else loudness >>= 1;
    1876:	90 91 50 38 	lds	r25, 0x3850	; 0x803850 <duration.3954>
    187a:	99 23       	and	r25, r25
    187c:	21 f0       	breq	.+8      	; 0x1886 <GenerateAudio+0xc8>
    187e:	91 50       	subi	r25, 0x01	; 1
    1880:	90 93 50 38 	sts	0x3850, r25	; 0x803850 <duration.3954>
    1884:	03 c0       	rjmp	.+6      	; 0x188c <GenerateAudio+0xce>
    1886:	86 95       	lsr	r24
    1888:	80 93 4f 38 	sts	0x384F, r24	; 0x80384f <loudness.3953>
                    } 

                    if (loudness == 0) {
    188c:	80 91 4f 38 	lds	r24, 0x384F	; 0x80384f <loudness.3953>
    1890:	81 11       	cpse	r24, r1
    1892:	18 c0       	rjmp	.+48     	; 0x18c4 <GenerateAudio+0x106>
                        effect &= 0xff1f;
    1894:	80 91 36 38 	lds	r24, 0x3836	; 0x803836 <effect>
    1898:	90 91 37 38 	lds	r25, 0x3837	; 0x803837 <effect+0x1>
    189c:	8f 71       	andi	r24, 0x1F	; 31
    189e:	80 93 36 38 	sts	0x3836, r24	; 0x803836 <effect>
    18a2:	90 93 37 38 	sts	0x3837, r25	; 0x803837 <effect+0x1>
                        auRepAddr = &zero;
    18a6:	84 e3       	ldi	r24, 0x34	; 52
    18a8:	98 e3       	ldi	r25, 0x38	; 56
    18aa:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <auRepAddr>
    18ae:	90 93 06 38 	sts	0x3806, r25	; 0x803806 <auRepAddr+0x1>
                        auSmpAddr = &zero;
    18b2:	80 93 07 38 	sts	0x3807, r24	; 0x803807 <auSmpAddr>
    18b6:	90 93 08 38 	sts	0x3808, r25	; 0x803808 <auSmpAddr+0x1>
                        auVolume = 0xff;
    18ba:	8f ef       	ldi	r24, 0xFF	; 255
    18bc:	80 93 b0 3a 	sts	0x3AB0, r24	; 0x803ab0 <auVolume>
                        start = 0;
    18c0:	10 92 51 38 	sts	0x3851, r1	; 0x803851 <start.3955>
                    }
                }
            }

            //Good (bell)
            if ((effect&0xE0)==64){
    18c4:	80 91 36 38 	lds	r24, 0x3836	; 0x803836 <effect>
    18c8:	90 91 37 38 	lds	r25, 0x3837	; 0x803837 <effect+0x1>
                //auBuffer = 
            }

            //Rain storm with whistling wind
            if ((effect&0xE0)==96){
    18cc:	80 91 36 38 	lds	r24, 0x3836	; 0x803836 <effect>
    18d0:	90 91 37 38 	lds	r25, 0x3837	; 0x803837 <effect+0x1>
    18d4:	80 7e       	andi	r24, 0xE0	; 224
    18d6:	99 27       	eor	r25, r25
    18d8:	80 36       	cpi	r24, 0x60	; 96
    18da:	91 05       	cpc	r25, r1
    18dc:	d1 f5       	brne	.+116    	; 0x1952 <GenerateAudio+0x194>
                static uint8_t auBuffer[7];
                auBuffer[6]= 0;        
    18de:	10 92 4e 38 	sts	0x384E, r1	; 0x80384e <auBuffer.3956+0x6>
                auRepAddr = &auBuffer[0];
    18e2:	88 e4       	ldi	r24, 0x48	; 72
    18e4:	98 e3       	ldi	r25, 0x38	; 56
    18e6:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <auRepAddr>
    18ea:	90 93 06 38 	sts	0x3806, r25	; 0x803806 <auRepAddr+0x1>
    18ee:	8c 01       	movw	r16, r24

                //Noise is to be generated fast, outside of buttonMark loop
                for (uint8_t x=1; x<6; ++x){
    18f0:	c1 e0       	ldi	r28, 0x01	; 1
                    if (x%3) auBuffer[x] = floatAround(0x80, 5, 0x01, 0x00);
    18f2:	d3 e0       	ldi	r29, 0x03	; 3
    18f4:	8c 2f       	mov	r24, r28
    18f6:	6d 2f       	mov	r22, r29
    18f8:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <__udivmodqi4>
    18fc:	99 23       	and	r25, r25
    18fe:	39 f0       	breq	.+14     	; 0x190e <GenerateAudio+0x150>
    1900:	20 e0       	ldi	r18, 0x00	; 0
    1902:	41 e0       	ldi	r20, 0x01	; 1
    1904:	65 e0       	ldi	r22, 0x05	; 5
    1906:	80 e8       	ldi	r24, 0x80	; 128
    1908:	5d dd       	rcall	.-1350   	; 0x13c4 <floatAround>
    190a:	f8 01       	movw	r30, r16
    190c:	81 83       	std	Z+1, r24	; 0x01
                static uint8_t auBuffer[7];
                auBuffer[6]= 0;        
                auRepAddr = &auBuffer[0];

                //Noise is to be generated fast, outside of buttonMark loop
                for (uint8_t x=1; x<6; ++x){
    190e:	cf 5f       	subi	r28, 0xFF	; 255
    1910:	0f 5f       	subi	r16, 0xFF	; 255
    1912:	1f 4f       	sbci	r17, 0xFF	; 255
    1914:	c6 30       	cpi	r28, 0x06	; 6
    1916:	71 f7       	brne	.-36     	; 0x18f4 <GenerateAudio+0x136>
                    if (x%3) auBuffer[x] = floatAround(0x80, 5, 0x01, 0x00);
                }

                if (buttonMark){
    1918:	80 91 3e 38 	lds	r24, 0x383E	; 0x80383e <buttonMark>
    191c:	88 23       	and	r24, r24
    191e:	c9 f0       	breq	.+50     	; 0x1952 <GenerateAudio+0x194>
                    //"Floating" speed for howl (and noise, but that's hardly audible)
                    floatSpeed(5, 0x0280, 0x0400);
    1920:	40 e0       	ldi	r20, 0x00	; 0
    1922:	54 e0       	ldi	r21, 0x04	; 4
    1924:	60 e8       	ldi	r22, 0x80	; 128
    1926:	72 e0       	ldi	r23, 0x02	; 2
    1928:	85 e0       	ldi	r24, 0x05	; 5
    192a:	1a dd       	rcall	.-1484   	; 0x1360 <floatSpeed>
            
                    //"Floating" volume and wind howl during 8 bit rainstorm needs some randomness
                    auVolume = floatAround(auVolume, 2, 0x10, 0xA0);
    192c:	80 91 b0 3a 	lds	r24, 0x3AB0	; 0x803ab0 <auVolume>
    1930:	20 ea       	ldi	r18, 0xA0	; 160
    1932:	40 e1       	ldi	r20, 0x10	; 16
    1934:	62 e0       	ldi	r22, 0x02	; 2
    1936:	46 dd       	rcall	.-1396   	; 0x13c4 <floatAround>
    1938:	80 93 b0 3a 	sts	0x3AB0, r24	; 0x803ab0 <auVolume>
                    auBuffer[0] = floatAround(auBuffer[0], 2, 0x70, 0x90);
    193c:	20 e9       	ldi	r18, 0x90	; 144
    193e:	40 e7       	ldi	r20, 0x70	; 112
    1940:	62 e0       	ldi	r22, 0x02	; 2
    1942:	80 91 48 38 	lds	r24, 0x3848	; 0x803848 <auBuffer.3956>
    1946:	3e dd       	rcall	.-1412   	; 0x13c4 <floatAround>
    1948:	80 93 48 38 	sts	0x3848, r24	; 0x803848 <auBuffer.3956>
                    auBuffer[3] = 0xFF-auBuffer[0];  //Inverse value of wind[0] produces a whistle
    194c:	80 95       	com	r24
    194e:	80 93 4b 38 	sts	0x384B, r24	; 0x80384b <auBuffer.3956+0x3>
                }
            }

            //Footsteps
            if ((effect&0xE0)==128){
    1952:	80 91 36 38 	lds	r24, 0x3836	; 0x803836 <effect>
    1956:	90 91 37 38 	lds	r25, 0x3837	; 0x803837 <effect+0x1>

            }

            //
            if ((effect&0xE0)==160){
    195a:	80 91 36 38 	lds	r24, 0x3836	; 0x803836 <effect>
    195e:	90 91 37 38 	lds	r25, 0x3837	; 0x803837 <effect+0x1>
            }

            //
            else {
            }
        } else if ((effect&0xff00)==1) {
    1962:	80 91 36 38 	lds	r24, 0x3836	; 0x803836 <effect>
    1966:	90 91 37 38 	lds	r25, 0x3837	; 0x803837 <effect+0x1>
    196a:	02 c0       	rjmp	.+4      	; 0x1970 <GenerateAudio+0x1b2>
                    } else duration--;
                }
            }
        }
    } else {
        detHdPh = 0;
    196c:	10 92 b9 3a 	sts	0x3AB9, r1	; 0x803ab9 <detHdPh>
    }
    return buttonMark;
    1970:	80 91 3e 38 	lds	r24, 0x383E	; 0x80383e <buttonMark>
}
    1974:	df 91       	pop	r29
    1976:	cf 91       	pop	r28
    1978:	1f 91       	pop	r17
    197a:	0f 91       	pop	r16
    197c:	08 95       	ret

0000197e <getClock>:

uint16_t getClock() {
    return 60 * minuteMark + (RTC_CNT>>9);
    197e:	20 91 3f 38 	lds	r18, 0x383F	; 0x80383f <minuteMark>
    1982:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
    1986:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
    198a:	89 2f       	mov	r24, r25
    198c:	99 27       	eor	r25, r25
    198e:	86 95       	lsr	r24
}
    1990:	3c e3       	ldi	r19, 0x3C	; 60
    1992:	23 9f       	mul	r18, r19
    1994:	80 0d       	add	r24, r0
    1996:	91 1d       	adc	r25, r1
    1998:	11 24       	eor	r1, r1
    199a:	08 95       	ret

0000199c <idleTimeout>:

uint8_t idleTimeout(uint16_t lastActive, uint16_t maxIdle) {
    199c:	0f 93       	push	r16
    199e:	1f 93       	push	r17
    19a0:	cf 93       	push	r28
    19a2:	df 93       	push	r29
    19a4:	8c 01       	movw	r16, r24
    19a6:	eb 01       	movw	r28, r22
    uint16_t curClock;

    curClock = getClock();
    19a8:	ea df       	rcall	.-44     	; 0x197e <getClock>
    19aa:	9c 01       	movw	r18, r24
    if (curClock < lastActive)
    19ac:	80 17       	cp	r24, r16
    19ae:	91 07       	cpc	r25, r17
    19b0:	08 f4       	brcc	.+2      	; 0x19b4 <idleTimeout+0x18>
        curClock += 256 * 60;
    19b2:	34 5c       	subi	r19, 0xC4	; 196

    return (curClock > (lastActive + maxIdle));
    19b4:	c0 0f       	add	r28, r16
    19b6:	d1 1f       	adc	r29, r17
    19b8:	81 e0       	ldi	r24, 0x01	; 1
    19ba:	c2 17       	cp	r28, r18
    19bc:	d3 07       	cpc	r29, r19
    19be:	08 f0       	brcs	.+2      	; 0x19c2 <idleTimeout+0x26>
    19c0:	80 e0       	ldi	r24, 0x00	; 0
}
    19c2:	df 91       	pop	r29
    19c4:	cf 91       	pop	r28
    19c6:	1f 91       	pop	r17
    19c8:	0f 91       	pop	r16
    19ca:	08 95       	ret

000019cc <simonLed>:

void simonTone(uint8_t val) {
    // TODO some way to set teh audio stuff
}

void simonLed(uint8_t val) {
    19cc:	cf 93       	push	r28
    19ce:	df 93       	push	r29
    19d0:	ea ec       	ldi	r30, 0xCA	; 202
    19d2:	fc eb       	ldi	r31, 0xBC	; 188
    19d4:	ef 01       	movw	r28, r30
    for (uint8_t n = 0; n < 5; n++) {
        iLED[WING[L][n]] = 0;
    19d6:	a5 81       	ldd	r26, Z+5	; 0x05
    19d8:	b0 e0       	ldi	r27, 0x00	; 0
    19da:	ac 53       	subi	r26, 0x3C	; 60
    19dc:	b5 4c       	sbci	r27, 0xC5	; 197
    19de:	1c 92       	st	X, r1
    19e0:	31 96       	adiw	r30, 0x01	; 1
        iLED[WING[R][n]] = 0;
    19e2:	a8 81       	ld	r26, Y
    19e4:	b0 e0       	ldi	r27, 0x00	; 0
    19e6:	ac 53       	subi	r26, 0x3C	; 60
    19e8:	b5 4c       	sbci	r27, 0xC5	; 197
    19ea:	1c 92       	st	X, r1
void simonTone(uint8_t val) {
    // TODO some way to set teh audio stuff
}

void simonLed(uint8_t val) {
    for (uint8_t n = 0; n < 5; n++) {
    19ec:	9c eb       	ldi	r25, 0xBC	; 188
    19ee:	ef 3c       	cpi	r30, 0xCF	; 207
    19f0:	f9 07       	cpc	r31, r25
    19f2:	81 f7       	brne	.-32     	; 0x19d4 <simonLed+0x8>
        iLED[WING[L][n]] = 0;
        iLED[WING[R][n]] = 0;
    }
    if (val == 1) {
    19f4:	81 30       	cpi	r24, 0x01	; 1
    19f6:	99 f4       	brne	.+38     	; 0x1a1e <simonLed+0x52>
        iLED[WING[L][0]] = dimValue;
    19f8:	e0 91 cf bc 	lds	r30, 0xBCCF	; 0x80bccf <__bss_end+0x81bb>
    19fc:	f0 e0       	ldi	r31, 0x00	; 0
    19fe:	80 91 0b 38 	lds	r24, 0x380B	; 0x80380b <dimValue>
    1a02:	ec 53       	subi	r30, 0x3C	; 60
    1a04:	f5 4c       	sbci	r31, 0xC5	; 197
    1a06:	80 83       	st	Z, r24
        iLED[WING[L][1]] = dimValue;
    1a08:	e0 91 d0 bc 	lds	r30, 0xBCD0	; 0x80bcd0 <__bss_end+0x81bc>
    1a0c:	f0 e0       	ldi	r31, 0x00	; 0
    1a0e:	80 91 0b 38 	lds	r24, 0x380B	; 0x80380b <dimValue>
    1a12:	ec 53       	subi	r30, 0x3C	; 60
    1a14:	f5 4c       	sbci	r31, 0xC5	; 197
    1a16:	80 83       	st	Z, r24
        iLED[WING[L][2]] = dimValue;
    1a18:	e0 91 d1 bc 	lds	r30, 0xBCD1	; 0x80bcd1 <__bss_end+0x81bd>
    1a1c:	2e c0       	rjmp	.+92     	; 0x1a7a <simonLed+0xae>
    } else if (val == 2) {
    1a1e:	82 30       	cpi	r24, 0x02	; 2
    1a20:	59 f4       	brne	.+22     	; 0x1a38 <simonLed+0x6c>
        iLED[WING[L][3]] = dimValue;
    1a22:	e0 91 d2 bc 	lds	r30, 0xBCD2	; 0x80bcd2 <__bss_end+0x81be>
    1a26:	f0 e0       	ldi	r31, 0x00	; 0
    1a28:	80 91 0b 38 	lds	r24, 0x380B	; 0x80380b <dimValue>
    1a2c:	ec 53       	subi	r30, 0x3C	; 60
    1a2e:	f5 4c       	sbci	r31, 0xC5	; 197
    1a30:	80 83       	st	Z, r24
        iLED[WING[L][4]] = dimValue;
    1a32:	e0 91 d3 bc 	lds	r30, 0xBCD3	; 0x80bcd3 <__bss_end+0x81bf>
    1a36:	21 c0       	rjmp	.+66     	; 0x1a7a <simonLed+0xae>
    } else if (val == 3) {
    1a38:	83 30       	cpi	r24, 0x03	; 3
    1a3a:	99 f4       	brne	.+38     	; 0x1a62 <simonLed+0x96>
        iLED[WING[R][0]] = dimValue;
    1a3c:	e0 91 ca bc 	lds	r30, 0xBCCA	; 0x80bcca <__bss_end+0x81b6>
    1a40:	f0 e0       	ldi	r31, 0x00	; 0
    1a42:	80 91 0b 38 	lds	r24, 0x380B	; 0x80380b <dimValue>
    1a46:	ec 53       	subi	r30, 0x3C	; 60
    1a48:	f5 4c       	sbci	r31, 0xC5	; 197
    1a4a:	80 83       	st	Z, r24
        iLED[WING[R][1]] = dimValue;
    1a4c:	e0 91 cb bc 	lds	r30, 0xBCCB	; 0x80bccb <__bss_end+0x81b7>
    1a50:	f0 e0       	ldi	r31, 0x00	; 0
    1a52:	80 91 0b 38 	lds	r24, 0x380B	; 0x80380b <dimValue>
    1a56:	ec 53       	subi	r30, 0x3C	; 60
    1a58:	f5 4c       	sbci	r31, 0xC5	; 197
    1a5a:	80 83       	st	Z, r24
        iLED[WING[R][2]] = dimValue;
    1a5c:	e0 91 cc bc 	lds	r30, 0xBCCC	; 0x80bccc <__bss_end+0x81b8>
    1a60:	0c c0       	rjmp	.+24     	; 0x1a7a <simonLed+0xae>
    } else if (val == 4) {
    1a62:	84 30       	cpi	r24, 0x04	; 4
    1a64:	81 f4       	brne	.+32     	; 0x1a86 <simonLed+0xba>
        iLED[WING[R][3]] = dimValue;
    1a66:	e0 91 cd bc 	lds	r30, 0xBCCD	; 0x80bccd <__bss_end+0x81b9>
    1a6a:	f0 e0       	ldi	r31, 0x00	; 0
    1a6c:	80 91 0b 38 	lds	r24, 0x380B	; 0x80380b <dimValue>
    1a70:	ec 53       	subi	r30, 0x3C	; 60
    1a72:	f5 4c       	sbci	r31, 0xC5	; 197
    1a74:	80 83       	st	Z, r24
        iLED[WING[R][4]] = dimValue;
    1a76:	e0 91 ce bc 	lds	r30, 0xBCCE	; 0x80bcce <__bss_end+0x81ba>
    1a7a:	f0 e0       	ldi	r31, 0x00	; 0
    1a7c:	80 91 0b 38 	lds	r24, 0x380B	; 0x80380b <dimValue>
    1a80:	ec 53       	subi	r30, 0x3C	; 60
    1a82:	f5 4c       	sbci	r31, 0xC5	; 197
    1a84:	80 83       	st	Z, r24
    }
    simonTone(val);
}
    1a86:	df 91       	pop	r29
    1a88:	cf 91       	pop	r28
    1a8a:	08 95       	ret

00001a8c <BastetDictates>:

// Main game loop
uint8_t BastetDictates() {
    1a8c:	cf 93       	push	r28
    1a8e:	df 93       	push	r29
    if (CheckState(BASTET_COMPLETED))
    1a90:	8a e7       	ldi	r24, 0x7A	; 122
    1a92:	75 dd       	rcall	.-1302   	; 0x157e <CheckState>
    1a94:	81 11       	cpse	r24, r1
    1a96:	b8 c0       	rjmp	.+368    	; 0x1c08 <BastetDictates+0x17c>
        return 0;

    if ((TEXT != gameNow) && (BASTET != gameNow))
    1a98:	80 91 38 38 	lds	r24, 0x3838	; 0x803838 <gameNow>
    1a9c:	8d 7f       	andi	r24, 0xFD	; 253
    1a9e:	09 f0       	breq	.+2      	; 0x1aa2 <BastetDictates+0x16>
    1aa0:	b3 c0       	rjmp	.+358    	; 0x1c08 <BastetDictates+0x17c>
        return 0;

    if (BASTET_BOOT == simonGameState) {
    1aa2:	80 91 56 38 	lds	r24, 0x3856	; 0x803856 <simonGameState>
    1aa6:	81 11       	cpse	r24, r1
    1aa8:	22 c0       	rjmp	.+68     	; 0x1aee <BastetDictates+0x62>
        simonPos = ((adcPhot+adcTemp)&0x3f);
    1aaa:	20 91 b7 3a 	lds	r18, 0x3AB7	; 0x803ab7 <adcPhot>
    1aae:	30 91 b8 3a 	lds	r19, 0x3AB8	; 0x803ab8 <adcPhot+0x1>
    1ab2:	80 91 ef 3a 	lds	r24, 0x3AEF	; 0x803aef <adcTemp>
    1ab6:	90 91 f0 3a 	lds	r25, 0x3AF0	; 0x803af0 <adcTemp+0x1>
    1aba:	82 0f       	add	r24, r18
    1abc:	8f 73       	andi	r24, 0x3F	; 63
    1abe:	80 93 28 38 	sts	0x3828, r24	; 0x803828 <simonPos>
        for(uint8_t x=0; x<simonPos; ++x) lfsr();
    1ac2:	c0 e0       	ldi	r28, 0x00	; 0
    1ac4:	80 91 28 38 	lds	r24, 0x3828	; 0x803828 <simonPos>
    1ac8:	c8 17       	cp	r28, r24
    1aca:	18 f4       	brcc	.+6      	; 0x1ad2 <BastetDictates+0x46>
    1acc:	2a dc       	rcall	.-1964   	; 0x1322 <lfsr>
    1ace:	cf 5f       	subi	r28, 0xFF	; 255
    1ad0:	f9 cf       	rjmp	.-14     	; 0x1ac4 <BastetDictates+0x38>
    1ad2:	c8 e5       	ldi	r28, 0x58	; 88

        for (uint8_t i = 0; i < BASTET_LENGTH; i++) {
            simonState[i] = (lfsr() % 4);
    1ad4:	d8 e3       	ldi	r29, 0x38	; 56
    1ad6:	25 dc       	rcall	.-1974   	; 0x1322 <lfsr>
    1ad8:	83 70       	andi	r24, 0x03	; 3
    1ada:	89 93       	st	Y+, r24

    if (BASTET_BOOT == simonGameState) {
        simonPos = ((adcPhot+adcTemp)&0x3f);
        for(uint8_t x=0; x<simonPos; ++x) lfsr();

        for (uint8_t i = 0; i < BASTET_LENGTH; i++) {
    1adc:	88 e3       	ldi	r24, 0x38	; 56
    1ade:	c8 36       	cpi	r28, 0x68	; 104
    1ae0:	d8 07       	cpc	r29, r24
    1ae2:	c9 f7       	brne	.-14     	; 0x1ad6 <BastetDictates+0x4a>
            simonState[i] = (lfsr() % 4);
        }
        simonPos = 1;
    1ae4:	81 e0       	ldi	r24, 0x01	; 1
    1ae6:	80 93 28 38 	sts	0x3828, r24	; 0x803828 <simonPos>
        simonGameState = BASTET_GAME_START;
    1aea:	80 93 56 38 	sts	0x3856, r24	; 0x803856 <simonGameState>
    }

    if (BASTET_GAME_START == simonGameState) {
    1aee:	80 91 56 38 	lds	r24, 0x3856	; 0x803856 <simonGameState>
    1af2:	81 30       	cpi	r24, 0x01	; 1
    1af4:	29 f4       	brne	.+10     	; 0x1b00 <BastetDictates+0x74>
        // TODO start animu
        simonGameState = BASTET_GAME_SHOW_PATTERN;
    1af6:	83 e0       	ldi	r24, 0x03	; 3
    1af8:	80 93 56 38 	sts	0x3856, r24	; 0x803856 <simonGameState>
        simonTimer = 0;
    1afc:	10 92 55 38 	sts	0x3855, r1	; 0x803855 <simonTimer>
    }

    if (BASTET_GAME_SHOW_PATTERN == simonGameState) {
    1b00:	80 91 56 38 	lds	r24, 0x3856	; 0x803856 <simonGameState>
    1b04:	83 30       	cpi	r24, 0x03	; 3
    1b06:	d9 f4       	brne	.+54     	; 0x1b3e <BastetDictates+0xb2>
        // assuming 15Hz
        uint8_t pos = simonTimer / (15 - (simonPos>>1));
    1b08:	20 91 28 38 	lds	r18, 0x3828	; 0x803828 <simonPos>
    1b0c:	80 91 55 38 	lds	r24, 0x3855	; 0x803855 <simonTimer>
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	32 2f       	mov	r19, r18
    1b14:	36 95       	lsr	r19
    1b16:	6f e0       	ldi	r22, 0x0F	; 15
    1b18:	70 e0       	ldi	r23, 0x00	; 0
    1b1a:	63 1b       	sub	r22, r19
    1b1c:	71 09       	sbc	r23, r1
    1b1e:	0e 94 18 1e 	call	0x3c30	; 0x3c30 <__divmodhi4>
        if (pos > simonPos) {
    1b22:	26 17       	cp	r18, r22
    1b24:	30 f4       	brcc	.+12     	; 0x1b32 <BastetDictates+0xa6>
            simonGameState = BASTET_GAME_INPUT;
    1b26:	85 e0       	ldi	r24, 0x05	; 5
    1b28:	80 93 56 38 	sts	0x3856, r24	; 0x803856 <simonGameState>
            simonLed(0);
    1b2c:	80 e0       	ldi	r24, 0x00	; 0
    1b2e:	4e df       	rcall	.-356    	; 0x19cc <simonLed>
            return 0;
    1b30:	6b c0       	rjmp	.+214    	; 0x1c08 <BastetDictates+0x17c>
        }
        simonLed(simonState[pos]);
    1b32:	77 27       	eor	r23, r23
    1b34:	fb 01       	movw	r30, r22
    1b36:	e8 5a       	subi	r30, 0xA8	; 168
    1b38:	f7 4c       	sbci	r31, 0xC7	; 199
    1b3a:	80 81       	ld	r24, Z
    1b3c:	47 df       	rcall	.-370    	; 0x19cc <simonLed>
    }

    if (BASTET_GAME_INPUT == simonGameState) {
    1b3e:	80 91 56 38 	lds	r24, 0x3856	; 0x803856 <simonGameState>
    1b42:	85 30       	cpi	r24, 0x05	; 5
    1b44:	09 f0       	breq	.+2      	; 0x1b48 <BastetDictates+0xbc>
    1b46:	4e c0       	rjmp	.+156    	; 0x1be4 <BastetDictates+0x158>
        uint8_t choice = 0;
        if ((buttonState & 0xf0)&&(buttonState < 0xff)) {
    1b48:	e0 91 09 38 	lds	r30, 0x3809	; 0x803809 <buttonState>
    1b4c:	8e 2f       	mov	r24, r30
    1b4e:	80 7f       	andi	r24, 0xF0	; 240
    1b50:	c9 f1       	breq	.+114    	; 0x1bc4 <BastetDictates+0x138>
    1b52:	ef 3f       	cpi	r30, 0xFF	; 255
    1b54:	b9 f1       	breq	.+110    	; 0x1bc4 <BastetDictates+0x138>
    1b56:	ef 70       	andi	r30, 0x0F	; 15
    1b58:	e1 50       	subi	r30, 0x01	; 1
    1b5a:	e8 30       	cpi	r30, 0x08	; 8
    1b5c:	98 f5       	brcc	.+102    	; 0x1bc4 <BastetDictates+0x138>
    1b5e:	f0 e0       	ldi	r31, 0x00	; 0
    1b60:	ea 5e       	subi	r30, 0xEA	; 234
    1b62:	f2 44       	sbci	r31, 0x42	; 66
    1b64:	c0 81       	ld	r28, Z
                    break;
            }
        }

        //Button pressed
        if (choice > 0) {
    1b66:	cc 23       	and	r28, r28
    1b68:	69 f1       	breq	.+90     	; 0x1bc4 <BastetDictates+0x138>
            gameNow = BASTET;
    1b6a:	82 e0       	ldi	r24, 0x02	; 2
    1b6c:	80 93 38 38 	sts	0x3838, r24	; 0x803838 <gameNow>
            if (simonProcessed == 0) {
    1b70:	80 91 54 38 	lds	r24, 0x3854	; 0x803854 <simonProcessed>
    1b74:	81 11       	cpse	r24, r1
                simonTimer = 0;
    1b76:	43 c0       	rjmp	.+134    	; 0x1bfe <BastetDictates+0x172>
    1b78:	10 92 55 38 	sts	0x3855, r1	; 0x803855 <simonTimer>
                simonLed(choice);
    1b7c:	8c 2f       	mov	r24, r28
    1b7e:	26 df       	rcall	.-436    	; 0x19cc <simonLed>
                // TODO something timer something 
                if (simonState[simonInputPos]+1 == choice) {
    1b80:	40 91 57 38 	lds	r20, 0x3857	; 0x803857 <simonInputPos>
    1b84:	e4 2f       	mov	r30, r20
    1b86:	f0 e0       	ldi	r31, 0x00	; 0
    1b88:	e8 5a       	subi	r30, 0xA8	; 168
    1b8a:	f7 4c       	sbci	r31, 0xC7	; 199
    1b8c:	20 81       	ld	r18, Z
    1b8e:	30 e0       	ldi	r19, 0x00	; 0
    1b90:	2f 5f       	subi	r18, 0xFF	; 255
    1b92:	3f 4f       	sbci	r19, 0xFF	; 255
    1b94:	8c 2f       	mov	r24, r28
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	28 17       	cp	r18, r24
    1b9a:	39 07       	cpc	r19, r25
    1b9c:	21 f4       	brne	.+8      	; 0x1ba6 <BastetDictates+0x11a>
                    // TODO correct sound
                    simonInputPos++;
    1b9e:	4f 5f       	subi	r20, 0xFF	; 255
    1ba0:	40 93 57 38 	sts	0x3857, r20	; 0x803857 <simonInputPos>
                } else {
                    // TODO fail sound
                    simonInputPos = 0;
    1ba4:	06 c0       	rjmp	.+12     	; 0x1bb2 <BastetDictates+0x126>
    1ba6:	10 92 57 38 	sts	0x3857, r1	; 0x803857 <simonInputPos>
                    gameNow = TEXT;
    1baa:	10 92 38 38 	sts	0x3838, r1	; 0x803838 <gameNow>
                    simonLed(0);
    1bae:	80 e0       	ldi	r24, 0x00	; 0
                }

                if (simonInputPos == BASTET_LENGTH) {
    1bb0:	0d df       	rcall	.-486    	; 0x19cc <simonLed>
    1bb2:	80 91 57 38 	lds	r24, 0x3857	; 0x803857 <simonInputPos>
    1bb6:	80 31       	cpi	r24, 0x10	; 16
                    // TODO win animu
                    UpdateState(BASTET_COMPLETED);
    1bb8:	a9 f4       	brne	.+42     	; 0x1be4 <BastetDictates+0x158>
    1bba:	8a e7       	ldi	r24, 0x7A	; 122
    1bbc:	d6 dc       	rcall	.-1620   	; 0x156a <UpdateState>
                    gameNow = TEXT;
    1bbe:	10 92 38 38 	sts	0x3838, r1	; 0x803838 <gameNow>
    1bc2:	10 c0       	rjmp	.+32     	; 0x1be4 <BastetDictates+0x158>
                }
            }
        
        //Button released, next or reset!
        } else {    
            if (simonInputPos == simonPos) {
    1bc4:	80 91 57 38 	lds	r24, 0x3857	; 0x803857 <simonInputPos>
    1bc8:	90 91 28 38 	lds	r25, 0x3828	; 0x803828 <simonPos>
    1bcc:	89 13       	cpse	r24, r25
    1bce:	08 c0       	rjmp	.+16     	; 0x1be0 <BastetDictates+0x154>
                simonPos++;
    1bd0:	8f 5f       	subi	r24, 0xFF	; 255
    1bd2:	80 93 28 38 	sts	0x3828, r24	; 0x803828 <simonPos>
                simonInputPos = 0;
    1bd6:	10 92 57 38 	sts	0x3857, r1	; 0x803857 <simonInputPos>
                simonGameState = BASTET_GAME_SHOW_PATTERN;
    1bda:	83 e0       	ldi	r24, 0x03	; 3
    1bdc:	80 93 56 38 	sts	0x3856, r24	; 0x803856 <simonGameState>
            }                    
            simonProcessed = 0;
    1be0:	10 92 54 38 	sts	0x3854, r1	; 0x803854 <simonProcessed>
        }
    }

    if (BASTET_GAME_WAIT_LEDS == simonGameState) {
    1be4:	80 91 56 38 	lds	r24, 0x3856	; 0x803856 <simonGameState>
    1be8:	84 30       	cpi	r24, 0x04	; 4
        if (simonTimer >= 7) {
    1bea:	49 f4       	brne	.+18     	; 0x1bfe <BastetDictates+0x172>
    1bec:	80 91 55 38 	lds	r24, 0x3855	; 0x803855 <simonTimer>
    1bf0:	87 30       	cpi	r24, 0x07	; 7
            // on to next state after ±.5 second
            simonLed(0);  // LEDs off
    1bf2:	28 f0       	brcs	.+10     	; 0x1bfe <BastetDictates+0x172>
    1bf4:	80 e0       	ldi	r24, 0x00	; 0
    1bf6:	ea de       	rcall	.-556    	; 0x19cc <simonLed>
            simonGameState = BASTET_GAME_INPUT;
    1bf8:	85 e0       	ldi	r24, 0x05	; 5
    1bfa:	80 93 56 38 	sts	0x3856, r24	; 0x803856 <simonGameState>
        }
    }

    ++simonTimer;
    1bfe:	80 91 55 38 	lds	r24, 0x3855	; 0x803855 <simonTimer>
    1c02:	8f 5f       	subi	r24, 0xFF	; 255
    1c04:	80 93 55 38 	sts	0x3855, r24	; 0x803855 <simonTimer>
    return 0;
}
    1c08:	80 e0       	ldi	r24, 0x00	; 0
    1c0a:	df 91       	pop	r29
    1c0c:	cf 91       	pop	r28
    1c0e:	08 95       	ret

00001c10 <Cheat>:

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    reactStr[1][number]=length;
    reactStr[2][number]=type;
    1c10:	1f 93       	push	r17
    1c12:	cf 93       	push	r28
    1c14:	df 93       	push	r29
    1c16:	cd b7       	in	r28, 0x3d	; 61
    1c18:	de b7       	in	r29, 0x3e	; 62
    1c1a:	62 97       	sbiw	r28, 0x12	; 18
    1c1c:	cd bf       	out	0x3d, r28	; 61
    1c1e:	de bf       	out	0x3e, r29	; 62
    1c20:	8a 8b       	std	Y+18, r24	; 0x12
    1c22:	80 e1       	ldi	r24, 0x10	; 16
    1c24:	ee e9       	ldi	r30, 0x9E	; 158
    1c26:	fc eb       	ldi	r31, 0xBC	; 188
    1c28:	de 01       	movw	r26, r28
    1c2a:	11 96       	adiw	r26, 0x01	; 1
    1c2c:	01 90       	ld	r0, Z+
    1c2e:	0d 92       	st	X+, r0
    1c30:	8a 95       	dec	r24
    1c32:	e1 f7       	brne	.-8      	; 0x1c2c <Cheat+0x1c>
    1c34:	fe 01       	movw	r30, r28
    1c36:	31 96       	adiw	r30, 0x01	; 1
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	8f ef       	ldi	r24, 0xFF	; 255
    1c3c:	21 91       	ld	r18, Z+
    1c3e:	31 91       	ld	r19, Z+
    1c40:	26 17       	cp	r18, r22
    1c42:	37 07       	cpc	r19, r23
    1c44:	09 f4       	brne	.+2      	; 0x1c48 <Cheat+0x38>
    1c46:	89 2f       	mov	r24, r25
    1c48:	9f 5f       	subi	r25, 0xFF	; 255
    1c4a:	98 30       	cpi	r25, 0x08	; 8
    1c4c:	b9 f7       	brne	.-18     	; 0x1c3c <Cheat+0x2c>
    1c4e:	88 30       	cpi	r24, 0x08	; 8
    1c50:	10 f0       	brcs	.+4      	; 0x1c56 <Cheat+0x46>
    1c52:	80 e0       	ldi	r24, 0x00	; 0
    1c54:	12 c0       	rjmp	.+36     	; 0x1c7a <Cheat+0x6a>
    1c56:	18 e1       	ldi	r17, 0x18	; 24
    1c58:	18 0f       	add	r17, r24
    1c5a:	41 e0       	ldi	r20, 0x01	; 1
    1c5c:	be 01       	movw	r22, r28
    1c5e:	6f 5e       	subi	r22, 0xEF	; 239
    1c60:	7f 4f       	sbci	r23, 0xFF	; 255
    1c62:	81 2f       	mov	r24, r17
    1c64:	8a da       	rcall	.-2796   	; 0x117a <EERead>
    1c66:	89 89       	ldd	r24, Y+17	; 0x11
    1c68:	8f 3f       	cpi	r24, 0xFF	; 255
    1c6a:	99 f7       	brne	.-26     	; 0x1c52 <Cheat+0x42>
    1c6c:	41 e0       	ldi	r20, 0x01	; 1
    1c6e:	be 01       	movw	r22, r28
    1c70:	6e 5e       	subi	r22, 0xEE	; 238
    1c72:	7f 4f       	sbci	r23, 0xFF	; 255
    1c74:	81 2f       	mov	r24, r17
    1c76:	91 da       	rcall	.-2782   	; 0x119a <EEWrite>
    1c78:	81 e0       	ldi	r24, 0x01	; 1
    1c7a:	62 96       	adiw	r28, 0x12	; 18
    1c7c:	cd bf       	out	0x3d, r28	; 61
    1c7e:	de bf       	out	0x3e, r29	; 62
    1c80:	df 91       	pop	r29
    1c82:	cf 91       	pop	r28
    1c84:	1f 91       	pop	r17
    1c86:	08 95       	ret

00001c88 <DecryptData>:
    1c88:	f9 01       	movw	r30, r18
    1c8a:	9c 01       	movw	r18, r24
    1c8c:	2e 1b       	sub	r18, r30
    1c8e:	3f 0b       	sbc	r19, r31
    1c90:	88 e0       	ldi	r24, 0x08	; 8
    1c92:	48 9f       	mul	r20, r24
    1c94:	a0 01       	movw	r20, r0
    1c96:	11 24       	eor	r1, r1
    1c98:	40 57       	subi	r20, 0x70	; 112
    1c9a:	52 44       	sbci	r21, 0x42	; 66
    1c9c:	66 23       	and	r22, r22
    1c9e:	69 f0       	breq	.+26     	; 0x1cba <DecryptData+0x32>
    1ca0:	df 01       	movw	r26, r30
    1ca2:	a2 0f       	add	r26, r18
    1ca4:	b3 1f       	adc	r27, r19
    1ca6:	a7 70       	andi	r26, 0x07	; 7
    1ca8:	bb 27       	eor	r27, r27
    1caa:	a4 0f       	add	r26, r20
    1cac:	b5 1f       	adc	r27, r21
    1cae:	80 81       	ld	r24, Z
    1cb0:	9c 91       	ld	r25, X
    1cb2:	98 27       	eor	r25, r24
    1cb4:	91 93       	st	Z+, r25
    1cb6:	61 50       	subi	r22, 0x01	; 1
    1cb8:	f1 cf       	rjmp	.-30     	; 0x1c9c <DecryptData+0x14>
    1cba:	08 95       	ret

00001cbc <UnflipData>:
    1cbc:	26 2f       	mov	r18, r22
    1cbe:	fb 01       	movw	r30, r22
    1cc0:	35 e5       	ldi	r19, 0x55	; 85
    1cc2:	9e 2f       	mov	r25, r30
    1cc4:	92 1b       	sub	r25, r18
    1cc6:	98 17       	cp	r25, r24
    1cc8:	28 f4       	brcc	.+10     	; 0x1cd4 <UnflipData+0x18>
    1cca:	90 81       	ld	r25, Z
    1ccc:	92 95       	swap	r25
    1cce:	93 27       	eor	r25, r19
    1cd0:	91 93       	st	Z+, r25
    1cd2:	f7 cf       	rjmp	.-18     	; 0x1cc2 <UnflipData+0x6>
    1cd4:	08 95       	ret

00001cd6 <ExtEERead>:
    1cd6:	af 92       	push	r10
    1cd8:	bf 92       	push	r11
    1cda:	cf 92       	push	r12
    1cdc:	df 92       	push	r13
    1cde:	ef 92       	push	r14
    1ce0:	ff 92       	push	r15
    1ce2:	0f 93       	push	r16
    1ce4:	1f 93       	push	r17
    1ce6:	cf 93       	push	r28
    1ce8:	df 93       	push	r29
    1cea:	00 d0       	rcall	.+0      	; 0x1cec <ExtEERead+0x16>
    1cec:	cd b7       	in	r28, 0x3d	; 61
    1cee:	de b7       	in	r29, 0x3e	; 62
    1cf0:	d6 2e       	mov	r13, r22
    1cf2:	c4 2e       	mov	r12, r20
    1cf4:	59 01       	movw	r10, r18
    1cf6:	7c 01       	movw	r14, r24
    1cf8:	e8 94       	clt
    1cfa:	f7 f8       	bld	r15, 7
    1cfc:	f9 82       	std	Y+1, r15	; 0x01
    1cfe:	ea 82       	std	Y+2, r14	; 0x02
    1d00:	06 2f       	mov	r16, r22
    1d02:	42 e0       	ldi	r20, 0x02	; 2
    1d04:	be 01       	movw	r22, r28
    1d06:	6f 5f       	subi	r22, 0xFF	; 255
    1d08:	7f 4f       	sbci	r23, 0xFF	; 255
    1d0a:	80 e5       	ldi	r24, 0x50	; 80
    1d0c:	0e 94 ba 02 	call	0x574	; 0x574 <I2C_read_bytes>
    1d10:	18 2f       	mov	r17, r24
    1d12:	81 11       	cpse	r24, r1
    1d14:	05 c0       	rjmp	.+10     	; 0x1d20 <ExtEERead+0x4a>
    1d16:	95 01       	movw	r18, r10
    1d18:	4c 2d       	mov	r20, r12
    1d1a:	6d 2d       	mov	r22, r13
    1d1c:	c7 01       	movw	r24, r14
    1d1e:	b4 df       	rcall	.-152    	; 0x1c88 <DecryptData>
    1d20:	81 2f       	mov	r24, r17
    1d22:	0f 90       	pop	r0
    1d24:	0f 90       	pop	r0
    1d26:	df 91       	pop	r29
    1d28:	cf 91       	pop	r28
    1d2a:	1f 91       	pop	r17
    1d2c:	0f 91       	pop	r16
    1d2e:	ff 90       	pop	r15
    1d30:	ef 90       	pop	r14
    1d32:	df 90       	pop	r13
    1d34:	cf 90       	pop	r12
    1d36:	bf 90       	pop	r11
    1d38:	af 90       	pop	r10
    1d3a:	08 95       	ret

00001d3c <ClearTxAfter>:
    1d3c:	8f 5f       	subi	r24, 0xFF	; 255
    1d3e:	88 30       	cpi	r24, 0x08	; 8
    1d40:	30 f4       	brcc	.+12     	; 0x1d4e <ClearTxAfter+0x12>
    1d42:	e8 2f       	mov	r30, r24
    1d44:	f0 e0       	ldi	r31, 0x00	; 0
    1d46:	ee 5b       	subi	r30, 0xBE	; 190
    1d48:	f5 4c       	sbci	r31, 0xC5	; 197
    1d4a:	10 82       	st	Z, r1
    1d4c:	f7 cf       	rjmp	.-18     	; 0x1d3c <ClearTxAfter>
    1d4e:	08 95       	ret

00001d50 <StartsWith>:
    1d50:	ac 01       	movw	r20, r24
    1d52:	90 e0       	ldi	r25, 0x00	; 0
    1d54:	e9 2f       	mov	r30, r25
    1d56:	f0 e0       	ldi	r31, 0x00	; 0
    1d58:	da 01       	movw	r26, r20
    1d5a:	ae 0f       	add	r26, r30
    1d5c:	bf 1f       	adc	r27, r31
    1d5e:	3c 91       	ld	r19, X
    1d60:	e6 0f       	add	r30, r22
    1d62:	f7 1f       	adc	r31, r23
    1d64:	31 11       	cpse	r19, r1
    1d66:	05 c0       	rjmp	.+10     	; 0x1d72 <StartsWith+0x22>
    1d68:	81 e0       	ldi	r24, 0x01	; 1
    1d6a:	90 81       	ld	r25, Z
    1d6c:	99 23       	and	r25, r25
    1d6e:	49 f0       	breq	.+18     	; 0x1d82 <StartsWith+0x32>
    1d70:	07 c0       	rjmp	.+14     	; 0x1d80 <StartsWith+0x30>
    1d72:	20 81       	ld	r18, Z
    1d74:	22 23       	and	r18, r18
    1d76:	c1 f3       	breq	.-16     	; 0x1d68 <StartsWith+0x18>
    1d78:	32 13       	cpse	r19, r18
    1d7a:	02 c0       	rjmp	.+4      	; 0x1d80 <StartsWith+0x30>
    1d7c:	9f 5f       	subi	r25, 0xFF	; 255
    1d7e:	ea cf       	rjmp	.-44     	; 0x1d54 <StartsWith+0x4>
    1d80:	80 e0       	ldi	r24, 0x00	; 0
    1d82:	08 95       	ret

00001d84 <PrepareSending>:
    1d84:	61 15       	cp	r22, r1
    1d86:	71 05       	cpc	r23, r1
    1d88:	51 f1       	breq	.+84     	; 0x1dde <PrepareSending+0x5a>
    1d8a:	ea e4       	ldi	r30, 0x4A	; 74
    1d8c:	fa e3       	ldi	r31, 0x3A	; 58
    1d8e:	a2 e4       	ldi	r26, 0x42	; 66
    1d90:	ba e3       	ldi	r27, 0x3A	; 58
    1d92:	20 e0       	ldi	r18, 0x00	; 0
    1d94:	3f ef       	ldi	r19, 0xFF	; 255
    1d96:	6f 3f       	cpi	r22, 0xFF	; 255
    1d98:	71 05       	cpc	r23, r1
    1d9a:	69 f0       	breq	.+26     	; 0x1db6 <PrepareSending+0x32>
    1d9c:	60 f0       	brcs	.+24     	; 0x1db6 <PrepareSending+0x32>
    1d9e:	81 93       	st	Z+, r24
    1da0:	91 93       	st	Z+, r25
    1da2:	3d 93       	st	X+, r19
    1da4:	81 50       	subi	r24, 0x01	; 1
    1da6:	9f 4f       	sbci	r25, 0xFF	; 255
    1da8:	6f 5f       	subi	r22, 0xFF	; 255
    1daa:	71 09       	sbc	r23, r1
    1dac:	2f 5f       	subi	r18, 0xFF	; 255
    1dae:	27 30       	cpi	r18, 0x07	; 7
    1db0:	91 f7       	brne	.-28     	; 0x1d96 <PrepareSending+0x12>
    1db2:	81 e0       	ldi	r24, 0x01	; 1
    1db4:	08 95       	ret
    1db6:	e2 2f       	mov	r30, r18
    1db8:	f0 e0       	ldi	r31, 0x00	; 0
    1dba:	df 01       	movw	r26, r30
    1dbc:	aa 0f       	add	r26, r26
    1dbe:	bb 1f       	adc	r27, r27
    1dc0:	a6 5b       	subi	r26, 0xB6	; 182
    1dc2:	b5 4c       	sbci	r27, 0xC5	; 197
    1dc4:	8d 93       	st	X+, r24
    1dc6:	9c 93       	st	X, r25
    1dc8:	ee 5b       	subi	r30, 0xBE	; 190
    1dca:	f5 4c       	sbci	r31, 0xC5	; 197
    1dcc:	cb 01       	movw	r24, r22
    1dce:	6f ef       	ldi	r22, 0xFF	; 255
    1dd0:	70 e0       	ldi	r23, 0x00	; 0
    1dd2:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <__udivmodhi4>
    1dd6:	80 83       	st	Z, r24
    1dd8:	40 93 40 3a 	sts	0x3A40, r20	; 0x803a40 <txTypeNow>
    1ddc:	05 c0       	rjmp	.+10     	; 0x1de8 <PrepareSending+0x64>
    1dde:	10 92 4a 3a 	sts	0x3A4A, r1	; 0x803a4a <txAddrList>
    1de2:	10 92 4b 3a 	sts	0x3A4B, r1	; 0x803a4b <txAddrList+0x1>
    1de6:	20 e0       	ldi	r18, 0x00	; 0
    1de8:	82 2f       	mov	r24, r18
    1dea:	a8 df       	rcall	.-176    	; 0x1d3c <ClearTxAfter>
    1dec:	10 92 41 3a 	sts	0x3A41, r1	; 0x803a41 <txAddrNow>
    1df0:	80 e0       	ldi	r24, 0x00	; 0
    1df2:	08 95       	ret

00001df4 <SetStandardResponse>:
}

//
uint8_t SetStandardResponse(uint8_t custStrEnd){
    1df4:	cf 93       	push	r28
    1df6:	df 93       	push	r29
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1df8:	28 2f       	mov	r18, r24
    1dfa:	30 e0       	ldi	r19, 0x00	; 0
    1dfc:	f9 01       	movw	r30, r18
    1dfe:	ee 0f       	add	r30, r30
    1e00:	ff 1f       	adc	r31, r31
    1e02:	eb 5e       	subi	r30, 0xEB	; 235
    1e04:	f6 4c       	sbci	r31, 0xC6	; 198
    1e06:	ab e5       	ldi	r26, 0x5B	; 91
    1e08:	ba e7       	ldi	r27, 0x7A	; 122
    1e0a:	a0 83       	st	Z, r26
    1e0c:	b1 83       	std	Z+1, r27	; 0x01
    reactStr[1][number]=length;
    1e0e:	f9 01       	movw	r30, r18
    1e10:	ee 0f       	add	r30, r30
    1e12:	ff 1f       	adc	r31, r31
    1e14:	eb 5a       	subi	r30, 0xAB	; 171
    1e16:	f6 4c       	sbci	r31, 0xC6	; 198
    1e18:	62 e0       	ldi	r22, 0x02	; 2
    1e1a:	70 e0       	ldi	r23, 0x00	; 0
    1e1c:	60 83       	st	Z, r22
    1e1e:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    1e20:	22 0f       	add	r18, r18
    1e22:	33 1f       	adc	r19, r19
    1e24:	f9 01       	movw	r30, r18
    1e26:	eb 56       	subi	r30, 0x6B	; 107
    1e28:	f6 4c       	sbci	r31, 0xC6	; 198
    1e2a:	41 e0       	ldi	r20, 0x01	; 1
    1e2c:	50 e0       	ldi	r21, 0x00	; 0
    1e2e:	40 83       	st	Z, r20
    1e30:	51 83       	std	Z+1, r21	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1e32:	21 e0       	ldi	r18, 0x01	; 1
    1e34:	28 0f       	add	r18, r24
    1e36:	30 e0       	ldi	r19, 0x00	; 0
    1e38:	f9 01       	movw	r30, r18
    1e3a:	ee 0f       	add	r30, r30
    1e3c:	ff 1f       	adc	r31, r31
    1e3e:	eb 5e       	subi	r30, 0xEB	; 235
    1e40:	f6 4c       	sbci	r31, 0xC6	; 198
    1e42:	c4 e6       	ldi	r28, 0x64	; 100
    1e44:	da e7       	ldi	r29, 0x7A	; 122
    1e46:	c0 83       	st	Z, r28
    1e48:	d1 83       	std	Z+1, r29	; 0x01
    reactStr[1][number]=length;
    1e4a:	f9 01       	movw	r30, r18
    1e4c:	ee 0f       	add	r30, r30
    1e4e:	ff 1f       	adc	r31, r31
    1e50:	eb 5a       	subi	r30, 0xAB	; 171
    1e52:	f6 4c       	sbci	r31, 0xC6	; 198
    1e54:	ca e0       	ldi	r28, 0x0A	; 10
    1e56:	d0 e0       	ldi	r29, 0x00	; 0
    1e58:	c0 83       	st	Z, r28
    1e5a:	d1 83       	std	Z+1, r29	; 0x01
    reactStr[2][number]=type;
    1e5c:	22 0f       	add	r18, r18
    1e5e:	33 1f       	adc	r19, r19
    1e60:	f9 01       	movw	r30, r18
    1e62:	eb 56       	subi	r30, 0x6B	; 107
    1e64:	f6 4c       	sbci	r31, 0xC6	; 198
    1e66:	40 83       	st	Z, r20
    1e68:	51 83       	std	Z+1, r21	; 0x01
uint8_t SetStandardResponse(uint8_t custStrEnd){

    SetResponse(custStrEnd++, A_LF, 2, TEASER);
    SetResponse(custStrEnd++, A_LOCATION, L_LOCATION, TEASER);
    //SetResponse(custStrEnd++, A_SPACE, L_SPACE, TEASER);
    reactStr[0][custStrEnd++] = CURR_LOC;
    1e6a:	e2 e0       	ldi	r30, 0x02	; 2
    1e6c:	e8 0f       	add	r30, r24
    1e6e:	f0 e0       	ldi	r31, 0x00	; 0
    1e70:	ee 0f       	add	r30, r30
    1e72:	ff 1f       	adc	r31, r31
    1e74:	eb 5e       	subi	r30, 0xEB	; 235
    1e76:	f6 4c       	sbci	r31, 0xC6	; 198
    1e78:	20 ef       	ldi	r18, 0xF0	; 240
    1e7a:	3f ef       	ldi	r19, 0xFF	; 255
    1e7c:	20 83       	st	Z, r18
    1e7e:	31 83       	std	Z+1, r19	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1e80:	23 e0       	ldi	r18, 0x03	; 3
    1e82:	28 0f       	add	r18, r24
    1e84:	30 e0       	ldi	r19, 0x00	; 0
    1e86:	f9 01       	movw	r30, r18
    1e88:	ee 0f       	add	r30, r30
    1e8a:	ff 1f       	adc	r31, r31
    1e8c:	eb 5e       	subi	r30, 0xEB	; 235
    1e8e:	f6 4c       	sbci	r31, 0xC6	; 198
    1e90:	a0 83       	st	Z, r26
    1e92:	b1 83       	std	Z+1, r27	; 0x01
    reactStr[1][number]=length;
    1e94:	f9 01       	movw	r30, r18
    1e96:	ee 0f       	add	r30, r30
    1e98:	ff 1f       	adc	r31, r31
    1e9a:	eb 5a       	subi	r30, 0xAB	; 171
    1e9c:	f6 4c       	sbci	r31, 0xC6	; 198
    1e9e:	60 83       	st	Z, r22
    1ea0:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    1ea2:	22 0f       	add	r18, r18
    1ea4:	33 1f       	adc	r19, r19
    1ea6:	f9 01       	movw	r30, r18
    1ea8:	eb 56       	subi	r30, 0x6B	; 107
    1eaa:	f6 4c       	sbci	r31, 0xC6	; 198
    1eac:	40 83       	st	Z, r20
    1eae:	51 83       	std	Z+1, r21	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1eb0:	24 e0       	ldi	r18, 0x04	; 4
    1eb2:	28 0f       	add	r18, r24
    1eb4:	30 e0       	ldi	r19, 0x00	; 0
    1eb6:	f9 01       	movw	r30, r18
    1eb8:	ee 0f       	add	r30, r30
    1eba:	ff 1f       	adc	r31, r31
    1ebc:	eb 5e       	subi	r30, 0xEB	; 235
    1ebe:	f6 4c       	sbci	r31, 0xC6	; 198
    1ec0:	a7 e5       	ldi	r26, 0x57	; 87
    1ec2:	ba e7       	ldi	r27, 0x7A	; 122
    1ec4:	a0 83       	st	Z, r26
    1ec6:	b1 83       	std	Z+1, r27	; 0x01
    reactStr[1][number]=length;
    1ec8:	f9 01       	movw	r30, r18
    1eca:	ee 0f       	add	r30, r30
    1ecc:	ff 1f       	adc	r31, r31
    1ece:	eb 5a       	subi	r30, 0xAB	; 171
    1ed0:	f6 4c       	sbci	r31, 0xC6	; 198
    1ed2:	60 83       	st	Z, r22
    1ed4:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    1ed6:	22 0f       	add	r18, r18
    1ed8:	33 1f       	adc	r19, r19
    1eda:	f9 01       	movw	r30, r18
    1edc:	eb 56       	subi	r30, 0x6B	; 107
    1ede:	f6 4c       	sbci	r31, 0xC6	; 198
    1ee0:	40 83       	st	Z, r20
    1ee2:	51 83       	std	Z+1, r21	; 0x01
    SetResponse(custStrEnd++, A_LF, 2, TEASER);
    SetResponse(custStrEnd++, A_PROMPT, L_PROMPT, TEASER);
    //SetResponse(custStrEnd++, A_SPACE, L_SPACE, TEASER);

    return custStrEnd;
}
    1ee4:	8b 5f       	subi	r24, 0xFB	; 251
    1ee6:	df 91       	pop	r29
    1ee8:	cf 91       	pop	r28
    1eea:	08 95       	ret

00001eec <PopulateObject>:

//Get all the relevant data and string addresses of an object
void PopulateObject(uint16_t offset, object_model_t *object){
    1eec:	af 92       	push	r10
    1eee:	bf 92       	push	r11
    1ef0:	df 92       	push	r13
    1ef2:	ef 92       	push	r14
    1ef4:	ff 92       	push	r15
    1ef6:	0f 93       	push	r16
    1ef8:	1f 93       	push	r17
    1efa:	cf 93       	push	r28
    1efc:	df 93       	push	r29
    1efe:	cd b7       	in	r28, 0x3d	; 61
    1f00:	de b7       	in	r29, 0x3e	; 62
    1f02:	2c 97       	sbiw	r28, 0x0c	; 12
    1f04:	cd bf       	out	0x3d, r28	; 61
    1f06:	de bf       	out	0x3e, r29	; 62
    1f08:	7c 01       	movw	r14, r24
    1f0a:	8b 01       	movw	r16, r22
    uint16_t parStr;
    offset += L_BOILER;

    //Fill things with fixed distance to offset
    uint8_t data[OFF_STRINGFLDS];
    ExtEERead(offset, OFF_STRINGFLDS, GAME, &data[0]);
    1f0c:	9e 01       	movw	r18, r28
    1f0e:	2f 5f       	subi	r18, 0xFF	; 255
    1f10:	3f 4f       	sbci	r19, 0xFF	; 255
    1f12:	40 e0       	ldi	r20, 0x00	; 0
    1f14:	6c e0       	ldi	r22, 0x0C	; 12
    1f16:	80 96       	adiw	r24, 0x20	; 32
    1f18:	de de       	rcall	.-580    	; 0x1cd6 <ExtEERead>
    object->addrNextObj = (data[OFF_NEXTOBJ]<<8|data[OFF_NEXTOBJ+1])+L_BOILER;
    1f1a:	89 81       	ldd	r24, Y+1	; 0x01
    1f1c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f1e:	98 27       	eor	r25, r24
    1f20:	89 27       	eor	r24, r25
    1f22:	98 27       	eor	r25, r24
    1f24:	80 96       	adiw	r24, 0x20	; 32
    1f26:	f8 01       	movw	r30, r16
    1f28:	80 83       	st	Z, r24
    1f2a:	91 83       	std	Z+1, r25	; 0x01
    object->addrNextLvl = (data[OFF_NEXTLVL]<<8|data[OFF_NEXTLVL+1])+L_BOILER;
    1f2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f30:	98 27       	eor	r25, r24
    1f32:	89 27       	eor	r24, r25
    1f34:	98 27       	eor	r25, r24
    1f36:	80 96       	adiw	r24, 0x20	; 32
    1f38:	82 83       	std	Z+2, r24	; 0x02
    1f3a:	93 83       	std	Z+3, r25	; 0x03
    1f3c:	de 01       	movw	r26, r28
    1f3e:	15 96       	adiw	r26, 0x05	; 5
    1f40:	34 96       	adiw	r30, 0x04	; 4
    1f42:	c8 01       	movw	r24, r16
    1f44:	0c 96       	adiw	r24, 0x0c	; 12
    for (uint8_t x=0; x<BYTE_FIELDS_LEN; ++x){
        object->byteField[x]=data[x+OFF_BYTEFLDS];
    1f46:	2d 91       	ld	r18, X+
    1f48:	21 93       	st	Z+, r18
    //Fill things with fixed distance to offset
    uint8_t data[OFF_STRINGFLDS];
    ExtEERead(offset, OFF_STRINGFLDS, GAME, &data[0]);
    object->addrNextObj = (data[OFF_NEXTOBJ]<<8|data[OFF_NEXTOBJ+1])+L_BOILER;
    object->addrNextLvl = (data[OFF_NEXTLVL]<<8|data[OFF_NEXTLVL+1])+L_BOILER;
    for (uint8_t x=0; x<BYTE_FIELDS_LEN; ++x){
    1f4a:	e8 17       	cp	r30, r24
    1f4c:	f9 07       	cpc	r31, r25
    1f4e:	d9 f7       	brne	.-10     	; 0x1f46 <PopulateObject+0x5a>
        object->byteField[x]=data[x+OFF_BYTEFLDS];
    }

    //Find out where all of the strings begin and how long they are
    offset += OFF_STRINGFLDS;
    1f50:	fc e2       	ldi	r31, 0x2C	; 44
    1f52:	ef 0e       	add	r14, r31
    1f54:	f1 1c       	adc	r15, r1
    1f56:	58 01       	movw	r10, r16
    for(uint8_t x=0; x<STRING_FIELDS_LEN; ++x){
    1f58:	d1 2c       	mov	r13, r1
        
        //Determine length
        ExtEERead(offset, 3, GAME, &data[0]);
    1f5a:	9e 01       	movw	r18, r28
    1f5c:	2f 5f       	subi	r18, 0xFF	; 255
    1f5e:	3f 4f       	sbci	r19, 0xFF	; 255
    1f60:	40 e0       	ldi	r20, 0x00	; 0
    1f62:	63 e0       	ldi	r22, 0x03	; 3
    1f64:	c7 01       	movw	r24, r14
    1f66:	b7 de       	rcall	.-658    	; 0x1cd6 <ExtEERead>
    1f68:	89 81       	ldd	r24, Y+1	; 0x01
    1f6a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f6c:	98 27       	eor	r25, r24
    1f6e:	89 27       	eor	r24, r25
    1f70:	98 27       	eor	r25, r24
        parStr = (data[0]<<8|data[1]);
        offset += 2;
    1f72:	97 01       	movw	r18, r14
    1f74:	2e 5f       	subi	r18, 0xFE	; 254
    1f76:	3f 4f       	sbci	r19, 0xFF	; 255
        if (x >= OPEN_ACL_MSG){
    1f78:	43 e0       	ldi	r20, 0x03	; 3
    1f7a:	4d 15       	cp	r20, r13
    1f7c:	80 f4       	brcc	.+32     	; 0x1f9e <PopulateObject+0xb2>
            object->lenStr[x]= parStr-1;
    1f7e:	ac 01       	movw	r20, r24
    1f80:	41 50       	subi	r20, 0x01	; 1
    1f82:	51 09       	sbc	r21, r1
    1f84:	f8 01       	movw	r30, r16
    1f86:	42 8f       	std	Z+26, r20	; 0x1a
    1f88:	53 8f       	std	Z+27, r21	; 0x1b
            object->addrStr[x]=offset+1;
    1f8a:	f3 e0       	ldi	r31, 0x03	; 3
    1f8c:	ef 0e       	add	r14, r31
    1f8e:	f1 1c       	adc	r15, r1
    1f90:	f8 01       	movw	r30, r16
    1f92:	e4 86       	std	Z+12, r14	; 0x0c
    1f94:	f5 86       	std	Z+13, r15	; 0x0d
            object->effect[x-OPEN_ACL_MSG] = data[2];
    1f96:	4b 81       	ldd	r20, Y+3	; 0x03
    1f98:	f5 01       	movw	r30, r10
    1f9a:	44 a3       	std	Z+36, r20	; 0x24
    1f9c:	05 c0       	rjmp	.+10     	; 0x1fa8 <PopulateObject+0xbc>
        } else {
            object->lenStr[x]= parStr;
    1f9e:	f8 01       	movw	r30, r16
    1fa0:	82 8f       	std	Z+26, r24	; 0x1a
    1fa2:	93 8f       	std	Z+27, r25	; 0x1b
            object->addrStr[x]=offset;
    1fa4:	24 87       	std	Z+12, r18	; 0x0c
    1fa6:	35 87       	std	Z+13, r19	; 0x0d
        }
        
        //Determine string start location for next field
        offset += parStr;
    1fa8:	7c 01       	movw	r14, r24
    1faa:	e2 0e       	add	r14, r18
    1fac:	f3 1e       	adc	r15, r19
        object->byteField[x]=data[x+OFF_BYTEFLDS];
    }

    //Find out where all of the strings begin and how long they are
    offset += OFF_STRINGFLDS;
    for(uint8_t x=0; x<STRING_FIELDS_LEN; ++x){
    1fae:	d3 94       	inc	r13
    1fb0:	0e 5f       	subi	r16, 0xFE	; 254
    1fb2:	1f 4f       	sbci	r17, 0xFF	; 255
    1fb4:	ff ef       	ldi	r31, 0xFF	; 255
    1fb6:	af 1a       	sub	r10, r31
    1fb8:	bf 0a       	sbc	r11, r31
    1fba:	47 e0       	ldi	r20, 0x07	; 7
    1fbc:	d4 12       	cpse	r13, r20
    1fbe:	cd cf       	rjmp	.-102    	; 0x1f5a <PopulateObject+0x6e>
        }
        
        //Determine string start location for next field
        offset += parStr;
    }    
}
    1fc0:	2c 96       	adiw	r28, 0x0c	; 12
    1fc2:	cd bf       	out	0x3d, r28	; 61
    1fc4:	de bf       	out	0x3e, r29	; 62
    1fc6:	df 91       	pop	r29
    1fc8:	cf 91       	pop	r28
    1fca:	1f 91       	pop	r17
    1fcc:	0f 91       	pop	r16
    1fce:	ff 90       	pop	r15
    1fd0:	ef 90       	pop	r14
    1fd2:	df 90       	pop	r13
    1fd4:	bf 90       	pop	r11
    1fd6:	af 90       	pop	r10
    1fd8:	08 95       	ret

00001fda <CheckLetter>:

//Check if the entered letter corresponds with a name
uint8_t CheckLetter(uint16_t object, uint8_t letter){
    1fda:	cf 92       	push	r12
    1fdc:	df 92       	push	r13
    1fde:	ef 92       	push	r14
    1fe0:	ff 92       	push	r15
    1fe2:	0f 93       	push	r16
    1fe4:	1f 93       	push	r17
    1fe6:	cf 93       	push	r28
    1fe8:	df 93       	push	r29
    1fea:	cd b7       	in	r28, 0x3d	; 61
    1fec:	de b7       	in	r29, 0x3e	; 62
    1fee:	a0 97       	sbiw	r28, 0x20	; 32
    1ff0:	cd bf       	out	0x3d, r28	; 61
    1ff2:	de bf       	out	0x3e, r29	; 62
    1ff4:	c6 2e       	mov	r12, r22
    
    uint8_t found = 0;
    uint8_t data[32];

    object += L_BOILER;
    1ff6:	7c 01       	movw	r14, r24
    1ff8:	20 e2       	ldi	r18, 0x20	; 32
    1ffa:	e2 0e       	add	r14, r18
    1ffc:	f1 1c       	adc	r15, r1
    ExtEERead(object+OFF_STRINGFLDS, 2, GAME, &data[0]);
    1ffe:	9e 01       	movw	r18, r28
    2000:	2f 5f       	subi	r18, 0xFF	; 255
    2002:	3f 4f       	sbci	r19, 0xFF	; 255
    2004:	40 e0       	ldi	r20, 0x00	; 0
    2006:	62 e0       	ldi	r22, 0x02	; 2
    2008:	8c 96       	adiw	r24, 0x2c	; 44
    200a:	65 de       	rcall	.-822    	; 0x1cd6 <ExtEERead>
    uint8_t x = data[1]; //Assuming a name is not longer than 255 characters.
    200c:	1a 81       	ldd	r17, Y+2	; 0x02
}

//Check if the entered letter corresponds with a name
uint8_t CheckLetter(uint16_t object, uint8_t letter){
    
    uint8_t found = 0;
    200e:	d1 2c       	mov	r13, r1

    object += L_BOILER;
    ExtEERead(object+OFF_STRINGFLDS, 2, GAME, &data[0]);
    uint8_t x = data[1]; //Assuming a name is not longer than 255 characters.

    while (x){
    2010:	11 23       	and	r17, r17
    2012:	51 f1       	breq	.+84     	; 0x2068 <CheckLetter+0x8e>
    2014:	01 2f       	mov	r16, r17
    2016:	11 32       	cpi	r17, 0x21	; 33
    2018:	08 f0       	brcs	.+2      	; 0x201c <CheckLetter+0x42>
    201a:	00 e2       	ldi	r16, 0x20	; 32
        uint8_t max;
        if (x>32) max = 32; else max = x;
        ExtEERead(object+OFF_STRINGFLDS+2, max, GAME, &data[0]);
    201c:	9e 01       	movw	r18, r28
    201e:	2f 5f       	subi	r18, 0xFF	; 255
    2020:	3f 4f       	sbci	r19, 0xFF	; 255
    2022:	40 e0       	ldi	r20, 0x00	; 0
    2024:	60 2f       	mov	r22, r16
    2026:	c7 01       	movw	r24, r14
    2028:	0e 96       	adiw	r24, 0x0e	; 14
    202a:	55 de       	rcall	.-854    	; 0x1cd6 <ExtEERead>
    202c:	fe 01       	movw	r30, r28
    202e:	31 96       	adiw	r30, 0x01	; 1
        for (uint8_t y=0; y<max; ++y){
    2030:	80 e0       	ldi	r24, 0x00	; 0
            if (found){
    2032:	dd 20       	and	r13, r13
    2034:	61 f0       	breq	.+24     	; 0x204e <CheckLetter+0x74>
                if ((data[y]|0x20) == letter) return 1; else return 0;
    2036:	e1 e0       	ldi	r30, 0x01	; 1
    2038:	f0 e0       	ldi	r31, 0x00	; 0
    203a:	ec 0f       	add	r30, r28
    203c:	fd 1f       	adc	r31, r29
    203e:	e8 0f       	add	r30, r24
    2040:	f1 1d       	adc	r31, r1
    2042:	90 81       	ld	r25, Z
    2044:	90 62       	ori	r25, 0x20	; 32
    2046:	81 e0       	ldi	r24, 0x01	; 1
    2048:	9c 11       	cpse	r25, r12
    204a:	0e c0       	rjmp	.+28     	; 0x2068 <CheckLetter+0x8e>
    204c:	0e c0       	rjmp	.+28     	; 0x206a <CheckLetter+0x90>
            }
            if (data[y] == '[') found = 1;
    204e:	91 91       	ld	r25, Z+
    2050:	dd 24       	eor	r13, r13
    2052:	d3 94       	inc	r13
    2054:	9b 35       	cpi	r25, 0x5B	; 91
    2056:	09 f0       	breq	.+2      	; 0x205a <CheckLetter+0x80>
    2058:	d1 2c       	mov	r13, r1

    while (x){
        uint8_t max;
        if (x>32) max = 32; else max = x;
        ExtEERead(object+OFF_STRINGFLDS+2, max, GAME, &data[0]);
        for (uint8_t y=0; y<max; ++y){
    205a:	8f 5f       	subi	r24, 0xFF	; 255
    205c:	80 17       	cp	r24, r16
    205e:	48 f3       	brcs	.-46     	; 0x2032 <CheckLetter+0x58>
            if (found){
                if ((data[y]|0x20) == letter) return 1; else return 0;
            }
            if (data[y] == '[') found = 1;
        }
        object += max;
    2060:	e0 0e       	add	r14, r16
    2062:	f1 1c       	adc	r15, r1
        x -= max;
    2064:	10 1b       	sub	r17, r16
    2066:	d4 cf       	rjmp	.-88     	; 0x2010 <CheckLetter+0x36>
    }
    return 0;
    2068:	80 e0       	ldi	r24, 0x00	; 0
}
    206a:	a0 96       	adiw	r28, 0x20	; 32
    206c:	cd bf       	out	0x3d, r28	; 61
    206e:	de bf       	out	0x3e, r29	; 62
    2070:	df 91       	pop	r29
    2072:	cf 91       	pop	r28
    2074:	1f 91       	pop	r17
    2076:	0f 91       	pop	r16
    2078:	ff 90       	pop	r15
    207a:	ef 90       	pop	r14
    207c:	df 90       	pop	r13
    207e:	cf 90       	pop	r12
    2080:	08 95       	ret

00002082 <FindChild>:

//Returns the child's address if the child is visible and the search letter matches
uint16_t FindChild(uint16_t parent, uint8_t letter, uint16_t start){
    2082:	af 92       	push	r10
    2084:	bf 92       	push	r11
    2086:	df 92       	push	r13
    2088:	ef 92       	push	r14
    208a:	ff 92       	push	r15
    208c:	0f 93       	push	r16
    208e:	1f 93       	push	r17
    2090:	cf 93       	push	r28
    2092:	df 93       	push	r29
    2094:	00 d0       	rcall	.+0      	; 0x2096 <FindChild+0x14>
    2096:	00 d0       	rcall	.+0      	; 0x2098 <FindChild+0x16>
    2098:	cd b7       	in	r28, 0x3d	; 61
    209a:	de b7       	in	r29, 0x3e	; 62
    209c:	d6 2e       	mov	r13, r22
    209e:	5a 01       	movw	r10, r20
    
    uint16_t child = parent;
    uint8_t data[4];

    ExtEERead(child+L_BOILER, 4, GAME, &data[0]);
    20a0:	9e 01       	movw	r18, r28
    20a2:	2f 5f       	subi	r18, 0xFF	; 255
    20a4:	3f 4f       	sbci	r19, 0xFF	; 255
    20a6:	40 e0       	ldi	r20, 0x00	; 0
    20a8:	64 e0       	ldi	r22, 0x04	; 4
    20aa:	80 96       	adiw	r24, 0x20	; 32
    20ac:	14 de       	rcall	.-984    	; 0x1cd6 <ExtEERead>
    20ae:	e9 80       	ldd	r14, Y+1	; 0x01
    20b0:	fa 80       	ldd	r15, Y+2	; 0x02
    20b2:	fe 24       	eor	r15, r14
    20b4:	ef 24       	eor	r14, r15
    20b6:	fe 24       	eor	r15, r14
    20b8:	0b 81       	ldd	r16, Y+3	; 0x03
    20ba:	1c 81       	ldd	r17, Y+4	; 0x04
    20bc:	10 27       	eor	r17, r16
    20be:	01 27       	eor	r16, r17
    20c0:	10 27       	eor	r17, r16
    parent = (data[0]<<8|data[1]);    //Next object on parent level
    child =  (data[2]<<8|data[3]);    //First object on child level

    //As long as the child is within the parent's range
    while (parent>child){
    20c2:	0e 15       	cp	r16, r14
    20c4:	1f 05       	cpc	r17, r15
    20c6:	30 f5       	brcc	.+76     	; 0x2114 <FindChild+0x92>

        //If child's address is higher than the start address, perform search for letter
        if (child>start){
    20c8:	a0 16       	cp	r10, r16
    20ca:	b1 06       	cpc	r11, r17
    20cc:	58 f0       	brcs	.+22     	; 0x20e4 <FindChild+0x62>
                if ((letter == 0)||(CheckLetter(child, letter))) return child;
            }
        }

        //Not visible or name not right
        ExtEERead(child+L_BOILER, 2, GAME, &data[0]);
    20ce:	9e 01       	movw	r18, r28
    20d0:	2f 5f       	subi	r18, 0xFF	; 255
    20d2:	3f 4f       	sbci	r19, 0xFF	; 255
    20d4:	40 e0       	ldi	r20, 0x00	; 0
    20d6:	62 e0       	ldi	r22, 0x02	; 2
    20d8:	c8 01       	movw	r24, r16
    20da:	80 96       	adiw	r24, 0x20	; 32
    20dc:	fc dd       	rcall	.-1032   	; 0x1cd6 <ExtEERead>
    20de:	09 81       	ldd	r16, Y+1	; 0x01
    20e0:	1a 81       	ldd	r17, Y+2	; 0x02
    20e2:	ec cf       	rjmp	.-40     	; 0x20bc <FindChild+0x3a>
    //As long as the child is within the parent's range
    while (parent>child){

        //If child's address is higher than the start address, perform search for letter
        if (child>start){
            ExtEERead(child+OFF_BYTEFLDS+VISIBLE_ACL+L_BOILER, 1, GAME, &data[0]);
    20e4:	9e 01       	movw	r18, r28
    20e6:	2f 5f       	subi	r18, 0xFF	; 255
    20e8:	3f 4f       	sbci	r19, 0xFF	; 255
    20ea:	40 e0       	ldi	r20, 0x00	; 0
    20ec:	61 e0       	ldi	r22, 0x01	; 1
    20ee:	c8 01       	movw	r24, r16
    20f0:	85 96       	adiw	r24, 0x25	; 37
    20f2:	f1 dd       	rcall	.-1054   	; 0x1cd6 <ExtEERead>
            if ((data[0] == 0)||(CheckState(data[0]))) {
    20f4:	89 81       	ldd	r24, Y+1	; 0x01
    20f6:	81 11       	cpse	r24, r1
    20f8:	03 c0       	rjmp	.+6      	; 0x2100 <FindChild+0x7e>
                if ((letter == 0)||(CheckLetter(child, letter))) return child;
    20fa:	d1 10       	cpse	r13, r1
    20fc:	05 c0       	rjmp	.+10     	; 0x2108 <FindChild+0x86>
    while (parent>child){

        //If child's address is higher than the start address, perform search for letter
        if (child>start){
            ExtEERead(child+OFF_BYTEFLDS+VISIBLE_ACL+L_BOILER, 1, GAME, &data[0]);
            if ((data[0] == 0)||(CheckState(data[0]))) {
    20fe:	0d c0       	rjmp	.+26     	; 0x211a <FindChild+0x98>
    2100:	3e da       	rcall	.-2948   	; 0x157e <CheckState>
    2102:	81 11       	cpse	r24, r1
    2104:	fa cf       	rjmp	.-12     	; 0x20fa <FindChild+0x78>
                if ((letter == 0)||(CheckLetter(child, letter))) return child;
    2106:	e3 cf       	rjmp	.-58     	; 0x20ce <FindChild+0x4c>
    2108:	6d 2d       	mov	r22, r13
    210a:	c8 01       	movw	r24, r16
    210c:	66 df       	rcall	.-308    	; 0x1fda <CheckLetter>
    210e:	88 23       	and	r24, r24
    2110:	f1 f2       	breq	.-68     	; 0x20ce <FindChild+0x4c>
    2112:	03 c0       	rjmp	.+6      	; 0x211a <FindChild+0x98>

        //Not visible or name not right
        ExtEERead(child+L_BOILER, 2, GAME, &data[0]);
        child = (data[0]<<8|data[1]);    //Next object on child level
        
    } return 0;
    2114:	80 e0       	ldi	r24, 0x00	; 0
    2116:	90 e0       	ldi	r25, 0x00	; 0
    2118:	01 c0       	rjmp	.+2      	; 0x211c <FindChild+0x9a>
    211a:	c8 01       	movw	r24, r16
}
    211c:	24 96       	adiw	r28, 0x04	; 4
    211e:	cd bf       	out	0x3d, r28	; 61
    2120:	de bf       	out	0x3e, r29	; 62
    2122:	df 91       	pop	r29
    2124:	cf 91       	pop	r28
    2126:	1f 91       	pop	r17
    2128:	0f 91       	pop	r16
    212a:	ff 90       	pop	r15
    212c:	ef 90       	pop	r14
    212e:	df 90       	pop	r13
    2130:	bf 90       	pop	r11
    2132:	af 90       	pop	r10
    2134:	08 95       	ret

00002136 <InpOkChk>:

//Allow only a(A) to z(Z) and 0 to 9 as input
uint8_t InpOkChk(uint8_t test){
    test |= 0x20;
    2136:	80 62       	ori	r24, 0x20	; 32
    if ((test>='a')&&(test<='z')) return 1;
    2138:	9f e9       	ldi	r25, 0x9F	; 159
    213a:	98 0f       	add	r25, r24
    213c:	9a 31       	cpi	r25, 0x1A	; 26
    213e:	38 f0       	brcs	.+14     	; 0x214e <InpOkChk+0x18>
    2140:	90 ed       	ldi	r25, 0xD0	; 208
    2142:	98 0f       	add	r25, r24
    2144:	81 e0       	ldi	r24, 0x01	; 1
    2146:	9a 30       	cpi	r25, 0x0A	; 10
    2148:	18 f0       	brcs	.+6      	; 0x2150 <InpOkChk+0x1a>
    214a:	80 e0       	ldi	r24, 0x00	; 0
    214c:	08 95       	ret
    214e:	81 e0       	ldi	r24, 0x01	; 1
    if ((test>='0')&&(test<='9')) return 1;
    return 0;
}
    2150:	08 95       	ret

00002152 <CleanInput>:

//Cleans input of garbage and returns length of cleaned input "o->d2  !\0" becomes "od2\0"
uint8_t CleanInput(uint8_t *data){
    2152:	0f 93       	push	r16
    2154:	1f 93       	push	r17
    2156:	cf 93       	push	r28
    2158:	df 93       	push	r29
    215a:	8c 01       	movw	r16, r24
    uint8_t cnt = 0;
    for (uint8_t x=0; data[x]!=0; ++x){
    215c:	d0 e0       	ldi	r29, 0x00	; 0
    return 0;
}

//Cleans input of garbage and returns length of cleaned input "o->d2  !\0" becomes "od2\0"
uint8_t CleanInput(uint8_t *data){
    uint8_t cnt = 0;
    215e:	c0 e0       	ldi	r28, 0x00	; 0
    for (uint8_t x=0; data[x]!=0; ++x){
    2160:	f8 01       	movw	r30, r16
    2162:	ed 0f       	add	r30, r29
    2164:	f1 1d       	adc	r31, r1
    2166:	20 81       	ld	r18, Z
    2168:	8c 2f       	mov	r24, r28
    216a:	90 e0       	ldi	r25, 0x00	; 0
    216c:	22 23       	and	r18, r18
    216e:	51 f0       	breq	.+20     	; 0x2184 <CleanInput+0x32>
        data[cnt] = data[x];
    2170:	d8 01       	movw	r26, r16
    2172:	a8 0f       	add	r26, r24
    2174:	b9 1f       	adc	r27, r25
    2176:	2c 93       	st	X, r18
        if (InpOkChk(data[x])) ++cnt;
    2178:	80 81       	ld	r24, Z
    217a:	dd df       	rcall	.-70     	; 0x2136 <InpOkChk>
    217c:	81 11       	cpse	r24, r1
    217e:	cf 5f       	subi	r28, 0xFF	; 255
}

//Cleans input of garbage and returns length of cleaned input "o->d2  !\0" becomes "od2\0"
uint8_t CleanInput(uint8_t *data){
    uint8_t cnt = 0;
    for (uint8_t x=0; data[x]!=0; ++x){
    2180:	df 5f       	subi	r29, 0xFF	; 255
    2182:	ee cf       	rjmp	.-36     	; 0x2160 <CleanInput+0xe>
        data[cnt] = data[x];
        if (InpOkChk(data[x])) ++cnt;
    }
    data[cnt] = 0;
    2184:	f8 01       	movw	r30, r16
    2186:	e8 0f       	add	r30, r24
    2188:	f9 1f       	adc	r31, r25
    218a:	10 82       	st	Z, r1
    return cnt;
}
    218c:	8c 2f       	mov	r24, r28
    218e:	df 91       	pop	r29
    2190:	cf 91       	pop	r28
    2192:	1f 91       	pop	r17
    2194:	0f 91       	pop	r16
    2196:	08 95       	ret

00002198 <CheckSend>:

//Send routine, optimized for low memory usage
uint8_t CheckSend(){
    2198:	cf 93       	push	r28
    static uint8_t txPart;
    uint8_t EEreadLength=0;

    //Play effects if available and not already playing
    if (effect == 0){
    219a:	80 91 36 38 	lds	r24, 0x3836	; 0x803836 <effect>
    219e:	90 91 37 38 	lds	r25, 0x3837	; 0x803837 <effect+0x1>
    21a2:	89 2b       	or	r24, r25
    21a4:	99 f4       	brne	.+38     	; 0x21cc <CheckSend+0x34>
        effect = currObj.byteField[EFFECTS];
    21a6:	80 91 19 3a 	lds	r24, 0x3A19	; 0x803a19 <currObj+0x4>
    21aa:	90 e0       	ldi	r25, 0x00	; 0
    21ac:	80 93 36 38 	sts	0x3836, r24	; 0x803836 <effect>
    21b0:	90 93 37 38 	sts	0x3837, r25	; 0x803837 <effect+0x1>
        auStart = ((effect&0xE0)>0);
    21b4:	80 91 36 38 	lds	r24, 0x3836	; 0x803836 <effect>
    21b8:	90 91 37 38 	lds	r25, 0x3837	; 0x803837 <effect+0x1>
    21bc:	80 7e       	andi	r24, 0xE0	; 224
    21be:	99 27       	eor	r25, r25
    21c0:	21 e0       	ldi	r18, 0x01	; 1
    21c2:	89 2b       	or	r24, r25
    21c4:	09 f4       	brne	.+2      	; 0x21c8 <CheckSend+0x30>
    21c6:	20 e0       	ldi	r18, 0x00	; 0
    21c8:	20 93 35 38 	sts	0x3835, r18	; 0x803835 <auStart>
    }

    //Check if more string(part)s have to be sent to the serial output if previous send operation is completed
    if ((txAddrNow < TXLISTLEN) && serTxDone){
    21cc:	20 91 41 3a 	lds	r18, 0x3A41	; 0x803a41 <txAddrNow>
    21d0:	28 30       	cpi	r18, 0x08	; 8
    21d2:	08 f0       	brcs	.+2      	; 0x21d6 <CheckSend+0x3e>
    21d4:	48 c0       	rjmp	.+144    	; 0x2266 <CheckSend+0xce>
    21d6:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <serTxDone>
    21da:	88 23       	and	r24, r24
    21dc:	09 f4       	brne	.+2      	; 0x21e0 <CheckSend+0x48>
    21de:	43 c0       	rjmp	.+134    	; 0x2266 <CheckSend+0xce>
        if (txStrLen[txAddrNow] == 0){
    21e0:	82 2f       	mov	r24, r18
    21e2:	90 e0       	ldi	r25, 0x00	; 0
    21e4:	fc 01       	movw	r30, r24
    21e6:	ee 5b       	subi	r30, 0xBE	; 190
    21e8:	f5 4c       	sbci	r31, 0xC5	; 197
    21ea:	e0 81       	ld	r30, Z
    21ec:	e1 11       	cpse	r30, r1
    21ee:	06 c0       	rjmp	.+12     	; 0x21fc <CheckSend+0x64>
            txPart = 0;
    21f0:	10 92 00 39 	sts	0x3900, r1	; 0x803900 <txPart.3942>
            txAddrNow = TXLISTLEN;
    21f4:	88 e0       	ldi	r24, 0x08	; 8
    21f6:	80 93 41 3a 	sts	0x3A41, r24	; 0x803a41 <txAddrNow>
    21fa:	2d c0       	rjmp	.+90     	; 0x2256 <CheckSend+0xbe>
        } else if (txPart < txStrLen[txAddrNow]){
    21fc:	50 91 00 39 	lds	r21, 0x3900	; 0x803900 <txPart.3942>
    2200:	5e 17       	cp	r21, r30
    2202:	58 f5       	brcc	.+86     	; 0x225a <CheckSend+0xc2>
            EEreadLength = txStrLen[txAddrNow]-txPart;
    2204:	ce 2f       	mov	r28, r30
    2206:	c5 1b       	sub	r28, r21
    2208:	c1 32       	cpi	r28, 0x21	; 33
    220a:	08 f0       	brcs	.+2      	; 0x220e <CheckSend+0x76>
    220c:	c0 e2       	ldi	r28, 0x20	; 32
            if (EEreadLength>=TXLEN) EEreadLength = TXLEN-1;
            ExtEERead(txAddrList[txAddrNow]+txPart, EEreadLength, txTypeNow, &txBuffer[0]);
    220e:	88 0f       	add	r24, r24
    2210:	99 1f       	adc	r25, r25
    2212:	fc 01       	movw	r30, r24
    2214:	e6 5b       	subi	r30, 0xB6	; 182
    2216:	f5 4c       	sbci	r31, 0xC5	; 197
    2218:	80 81       	ld	r24, Z
    221a:	91 81       	ldd	r25, Z+1	; 0x01
    221c:	23 ef       	ldi	r18, 0xF3	; 243
    221e:	3a e3       	ldi	r19, 0x3A	; 58
    2220:	40 91 40 3a 	lds	r20, 0x3A40	; 0x803a40 <txTypeNow>
    2224:	6c 2f       	mov	r22, r28
    2226:	85 0f       	add	r24, r21
    2228:	91 1d       	adc	r25, r1
    222a:	55 dd       	rcall	.-1366   	; 0x1cd6 <ExtEERead>
            txPart += EEreadLength;
    222c:	80 91 00 39 	lds	r24, 0x3900	; 0x803900 <txPart.3942>
    2230:	8c 0f       	add	r24, r28
    2232:	80 93 00 39 	sts	0x3900, r24	; 0x803900 <txPart.3942>
            txBuffer[EEreadLength] = 0; //Add string terminator after piece to send to plug memory leak
    2236:	ec 2f       	mov	r30, r28
    2238:	f0 e0       	ldi	r31, 0x00	; 0
    223a:	ed 50       	subi	r30, 0x0D	; 13
    223c:	f5 4c       	sbci	r31, 0xC5	; 197
    223e:	10 82       	st	Z, r1
            if ((txBuffer[0] == 0) && (EEreadLength)) txBuffer[0] = 0xDB; //Block character when data wrong.
    2240:	80 91 f3 3a 	lds	r24, 0x3AF3	; 0x803af3 <txBuffer>
    2244:	81 11       	cpse	r24, r1
    2246:	03 c0       	rjmp	.+6      	; 0x224e <CheckSend+0xb6>
    2248:	8b ed       	ldi	r24, 0xDB	; 219
    224a:	80 93 f3 3a 	sts	0x3AF3, r24	; 0x803af3 <txBuffer>
            SerSend(&txBuffer[0]);
    224e:	83 ef       	ldi	r24, 0xF3	; 243
    2250:	9a e3       	ldi	r25, 0x3A	; 58
    2252:	0e 94 f5 08 	call	0x11ea	; 0x11ea <SerSend>
        } else {
            txPart = 0;
            ++txAddrNow;
        }
    } else if (serTxDone) return 0; //All is sent!
    return 1; //Still sending, do not change the data in the tx variables
    2256:	81 e0       	ldi	r24, 0x01	; 1
    2258:	0b c0       	rjmp	.+22     	; 0x2270 <CheckSend+0xd8>
            txPart += EEreadLength;
            txBuffer[EEreadLength] = 0; //Add string terminator after piece to send to plug memory leak
            if ((txBuffer[0] == 0) && (EEreadLength)) txBuffer[0] = 0xDB; //Block character when data wrong.
            SerSend(&txBuffer[0]);
        } else {
            txPart = 0;
    225a:	10 92 00 39 	sts	0x3900, r1	; 0x803900 <txPart.3942>
            ++txAddrNow;
    225e:	2f 5f       	subi	r18, 0xFF	; 255
    2260:	20 93 41 3a 	sts	0x3A41, r18	; 0x803a41 <txAddrNow>
    2264:	f8 cf       	rjmp	.-16     	; 0x2256 <CheckSend+0xbe>
        }
    } else if (serTxDone) return 0; //All is sent!
    2266:	90 91 0a 38 	lds	r25, 0x380A	; 0x80380a <serTxDone>
    226a:	81 e0       	ldi	r24, 0x01	; 1
    226c:	91 11       	cpse	r25, r1
    226e:	80 e0       	ldi	r24, 0x00	; 0
    return 1; //Still sending, do not change the data in the tx variables
}
    2270:	cf 91       	pop	r28
    2272:	08 95       	ret

00002274 <CheckResponse>:

//Send another part of the response and play the effect afterwards
uint8_t CheckResponse(){
    2274:	cf 93       	push	r28
    2276:	df 93       	push	r29
    static uint8_t number = 0;
    if (responseList){
    2278:	c0 91 14 39 	lds	r28, 0x3914	; 0x803914 <responseList>
    227c:	cc 23       	and	r28, r28
    227e:	e9 f1       	breq	.+122    	; 0x22fa <CheckResponse+0x86>
        --responseList;
    2280:	c1 50       	subi	r28, 0x01	; 1
    2282:	c0 93 14 39 	sts	0x3914, r28	; 0x803914 <responseList>
        if (reactStr[0][number] == CURR_LOC) {
    2286:	d0 91 ff 38 	lds	r29, 0x38FF	; 0x8038ff <number.3946>
    228a:	2d 2f       	mov	r18, r29
    228c:	30 e0       	ldi	r19, 0x00	; 0
    228e:	f9 01       	movw	r30, r18
    2290:	ee 0f       	add	r30, r30
    2292:	ff 1f       	adc	r31, r31
    2294:	eb 5e       	subi	r30, 0xEB	; 235
    2296:	f6 4c       	sbci	r31, 0xC6	; 198
    2298:	80 81       	ld	r24, Z
    229a:	91 81       	ldd	r25, Z+1	; 0x01
    229c:	80 3f       	cpi	r24, 0xF0	; 240
    229e:	4f ef       	ldi	r20, 0xFF	; 255
    22a0:	94 07       	cpc	r25, r20
    22a2:	51 f4       	brne	.+20     	; 0x22b8 <CheckResponse+0x44>
            PrepareSending(currObj.addrStr[NAME], currObj.lenStr[NAME], GAME);
    22a4:	60 91 2f 3a 	lds	r22, 0x3A2F	; 0x803a2f <currObj+0x1a>
    22a8:	70 91 30 3a 	lds	r23, 0x3A30	; 0x803a30 <currObj+0x1b>
    22ac:	40 e0       	ldi	r20, 0x00	; 0
    22ae:	80 91 21 3a 	lds	r24, 0x3A21	; 0x803a21 <currObj+0xc>
    22b2:	90 91 22 3a 	lds	r25, 0x3A22	; 0x803a22 <currObj+0xd>
    22b6:	0d c0       	rjmp	.+26     	; 0x22d2 <CheckResponse+0x5e>
        } else {
            PrepareSending(reactStr[0][number], reactStr[1][number], reactStr[2][number]);
    22b8:	d9 01       	movw	r26, r18
    22ba:	aa 0f       	add	r26, r26
    22bc:	bb 1f       	adc	r27, r27
    22be:	ab 56       	subi	r26, 0x6B	; 107
    22c0:	b6 4c       	sbci	r27, 0xC6	; 198
    22c2:	22 0f       	add	r18, r18
    22c4:	33 1f       	adc	r19, r19
    22c6:	f9 01       	movw	r30, r18
    22c8:	eb 5a       	subi	r30, 0xAB	; 171
    22ca:	f6 4c       	sbci	r31, 0xC6	; 198
    22cc:	60 81       	ld	r22, Z
    22ce:	71 81       	ldd	r23, Z+1	; 0x01
    22d0:	4c 91       	ld	r20, X
    22d2:	58 dd       	rcall	.-1360   	; 0x1d84 <PrepareSending>
        }
        ++number;
    22d4:	df 5f       	subi	r29, 0xFF	; 255
    22d6:	d0 93 ff 38 	sts	0x38FF, r29	; 0x8038ff <number.3946>

        if (responseList == 0) {
    22da:	c1 11       	cpse	r28, r1
    22dc:	0d c0       	rjmp	.+26     	; 0x22f8 <CheckResponse+0x84>
            effect = currObj.byteField[EFFECTS];
    22de:	80 91 19 3a 	lds	r24, 0x3A19	; 0x803a19 <currObj+0x4>
    22e2:	90 e0       	ldi	r25, 0x00	; 0
    22e4:	80 93 36 38 	sts	0x3836, r24	; 0x803836 <effect>
    22e8:	90 93 37 38 	sts	0x3837, r25	; 0x803837 <effect+0x1>
            RXCNT = 0;
    22ec:	1d ba       	out	0x1d, r1	; 29
            serRxDone = 0;
    22ee:	10 92 40 38 	sts	0x3840, r1	; 0x803840 <serRxDone>
            number = 0;
    22f2:	10 92 ff 38 	sts	0x38FF, r1	; 0x8038ff <number.3946>
    22f6:	01 c0       	rjmp	.+2      	; 0x22fa <CheckResponse+0x86>
            return 0;
        }
        return 1;
    22f8:	c1 e0       	ldi	r28, 0x01	; 1
    }
    return 0;
}
    22fa:	8c 2f       	mov	r24, r28
    22fc:	df 91       	pop	r29
    22fe:	cf 91       	pop	r28
    2300:	08 95       	ret

00002302 <CheckInput>:

//User input check (and validation)
uint8_t CheckInput(uint8_t *data){
    2302:	4f 92       	push	r4
    2304:	5f 92       	push	r5
    2306:	6f 92       	push	r6
    2308:	7f 92       	push	r7
    230a:	8f 92       	push	r8
    230c:	9f 92       	push	r9
    230e:	af 92       	push	r10
    2310:	bf 92       	push	r11
    2312:	cf 92       	push	r12
    2314:	df 92       	push	r13
    2316:	ef 92       	push	r14
    2318:	ff 92       	push	r15
    231a:	0f 93       	push	r16
    231c:	1f 93       	push	r17
    231e:	cf 93       	push	r28
    2320:	df 93       	push	r29
    2322:	cd b7       	in	r28, 0x3d	; 61
    2324:	de b7       	in	r29, 0x3e	; 62
    2326:	a1 97       	sbiw	r28, 0x21	; 33
    2328:	cd bf       	out	0x3d, r28	; 61
    232a:	de bf       	out	0x3e, r29	; 62
    232c:	8c 01       	movw	r16, r24
    
    //Load game data after reboot
    if (currDepth == 0xff) {
    232e:	80 91 29 38 	lds	r24, 0x3829	; 0x803829 <currDepth>
    2332:	8f 3f       	cpi	r24, 0xFF	; 255
    2334:	49 f4       	brne	.+18     	; 0x2348 <CheckInput+0x46>
        //Start at first location
        PopulateObject(route[0], &currObj);
    2336:	65 e1       	ldi	r22, 0x15	; 21
    2338:	7a e3       	ldi	r23, 0x3A	; 58
    233a:	80 91 d5 39 	lds	r24, 0x39D5	; 0x8039d5 <route>
    233e:	90 91 d6 39 	lds	r25, 0x39D6	; 0x8039d6 <route+0x1>
    2342:	d4 dd       	rcall	.-1112   	; 0x1eec <PopulateObject>
        currDepth = 0;
    2344:	10 92 29 38 	sts	0x3829, r1	; 0x803829 <currDepth>
    }

    if (serRxDone){
    2348:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <serRxDone>
    234c:	88 23       	and	r24, r24
    234e:	09 f4       	brne	.+2      	; 0x2352 <CheckInput+0x50>
    2350:	63 c2       	rjmp	.+1222   	; 0x2818 <CheckInput+0x516>

        //Special input requested from user by game
        if (specialInput[0]){
    2352:	80 91 04 39 	lds	r24, 0x3904	; 0x803904 <specialInput>
    2356:	88 23       	and	r24, r24
    2358:	09 f4       	brne	.+2      	; 0x235c <CheckInput+0x5a>
    235a:	57 c0       	rjmp	.+174    	; 0x240a <CheckInput+0x108>
            specialPassed = 0;
    235c:	10 92 03 39 	sts	0x3903, r1	; 0x803903 <specialPassed>
            data[0] = 'a';
    2360:	81 e6       	ldi	r24, 0x61	; 97
    2362:	f8 01       	movw	r30, r16
    2364:	80 83       	st	Z, r24
            
            //Normal code challenge
            if (StartsWith((uint8_t *)&serRx[0], &specialInput[0])) {
    2366:	64 e0       	ldi	r22, 0x04	; 4
    2368:	79 e3       	ldi	r23, 0x39	; 57
    236a:	8f e6       	ldi	r24, 0x6F	; 111
    236c:	9a e3       	ldi	r25, 0x3A	; 58
    236e:	f0 dc       	rcall	.-1568   	; 0x1d50 <StartsWith>
    2370:	f8 2e       	mov	r15, r24
    2372:	88 23       	and	r24, r24
    2374:	21 f0       	breq	.+8      	; 0x237e <CheckInput+0x7c>
                specialPassed = 1;
    2376:	81 e0       	ldi	r24, 0x01	; 1
    2378:	80 93 03 39 	sts	0x3903, r24	; 0x803903 <specialPassed>
    237c:	04 c0       	rjmp	.+8      	; 0x2386 <CheckInput+0x84>
                //specialInput[0] = 0;
                //data[1] = 0;

            //Special challenge 1
            } else if ((specialInput[0] == '1')&&(specialInput[2] == 0)) {
    237e:	80 91 04 39 	lds	r24, 0x3904	; 0x803904 <specialInput>
    2382:	81 33       	cpi	r24, 0x31	; 49
    2384:	11 f0       	breq	.+4      	; 0x238a <CheckInput+0x88>
                responseList = 32;
                return 1;
            }
        } 
        //Data received, but not any of the commands above
        return 0;
    2386:	f1 2c       	mov	r15, r1
    2388:	49 c2       	rjmp	.+1170   	; 0x281c <CheckInput+0x51a>
                specialPassed = 1;
                //specialInput[0] = 0;
                //data[1] = 0;

            //Special challenge 1
            } else if ((specialInput[0] == '1')&&(specialInput[2] == 0)) {
    238a:	80 91 06 39 	lds	r24, 0x3906	; 0x803906 <specialInput+0x2>
    238e:	81 11       	cpse	r24, r1
    2390:	fa cf       	rjmp	.-12     	; 0x2386 <CheckInput+0x84>
                uint8_t inputLen = CleanInput((uint8_t *)&serRx[0]);
    2392:	8f e6       	ldi	r24, 0x6F	; 111
    2394:	9a e3       	ldi	r25, 0x3A	; 58
    2396:	dd de       	rcall	.-582    	; 0x2152 <CleanInput>
                specialPassed = 2;
    2398:	92 e0       	ldi	r25, 0x02	; 2
    239a:	90 93 03 39 	sts	0x3903, r25	; 0x803903 <specialPassed>
                data[1] = 0;
    239e:	f8 01       	movw	r30, r16
    23a0:	11 82       	std	Z+1, r1	; 0x01

                if (inputLen >= 2) {
    23a2:	82 30       	cpi	r24, 0x02	; 2
    23a4:	80 f3       	brcs	.-32     	; 0x2386 <CheckInput+0x84>
                    if ((serRx[0] == '1')||(serRx[0] == '2')||(serRx[0] == '3')||(serRx[0] == '4')) {
    23a6:	80 91 6f 3a 	lds	r24, 0x3A6F	; 0x803a6f <serRx>
    23aa:	81 33       	cpi	r24, 0x31	; 49
    23ac:	61 f0       	breq	.+24     	; 0x23c6 <CheckInput+0xc4>
    23ae:	80 91 6f 3a 	lds	r24, 0x3A6F	; 0x803a6f <serRx>
    23b2:	82 33       	cpi	r24, 0x32	; 50
    23b4:	41 f0       	breq	.+16     	; 0x23c6 <CheckInput+0xc4>
    23b6:	80 91 6f 3a 	lds	r24, 0x3A6F	; 0x803a6f <serRx>
    23ba:	83 33       	cpi	r24, 0x33	; 51
    23bc:	21 f0       	breq	.+8      	; 0x23c6 <CheckInput+0xc4>
    23be:	80 91 6f 3a 	lds	r24, 0x3A6F	; 0x803a6f <serRx>
    23c2:	84 33       	cpi	r24, 0x34	; 52
    23c4:	01 f7       	brne	.-64     	; 0x2386 <CheckInput+0x84>
                        serRx[1] |= 0x20;
    23c6:	80 91 70 3a 	lds	r24, 0x3A70	; 0x803a70 <serRx+0x1>
    23ca:	80 62       	ori	r24, 0x20	; 32
    23cc:	80 93 70 3a 	sts	0x3A70, r24	; 0x803a70 <serRx+0x1>
                        if ((serRx[1] == 'a')||(serRx[1] == 'e')||(serRx[1] == 'f')||(serRx[1] == 'w')) {
    23d0:	80 91 70 3a 	lds	r24, 0x3A70	; 0x803a70 <serRx+0x1>
    23d4:	81 36       	cpi	r24, 0x61	; 97
    23d6:	61 f0       	breq	.+24     	; 0x23f0 <CheckInput+0xee>
    23d8:	80 91 70 3a 	lds	r24, 0x3A70	; 0x803a70 <serRx+0x1>
    23dc:	85 36       	cpi	r24, 0x65	; 101
    23de:	41 f0       	breq	.+16     	; 0x23f0 <CheckInput+0xee>
    23e0:	80 91 70 3a 	lds	r24, 0x3A70	; 0x803a70 <serRx+0x1>
    23e4:	86 36       	cpi	r24, 0x66	; 102
    23e6:	21 f0       	breq	.+8      	; 0x23f0 <CheckInput+0xee>
    23e8:	80 91 70 3a 	lds	r24, 0x3A70	; 0x803a70 <serRx+0x1>
    23ec:	87 37       	cpi	r24, 0x77	; 119
    23ee:	59 f6       	brne	.-106    	; 0x2386 <CheckInput+0x84>
                            data[1] = specialInput[1]+0x11;
    23f0:	80 91 05 39 	lds	r24, 0x3905	; 0x803905 <specialInput+0x1>
    23f4:	8f 5e       	subi	r24, 0xEF	; 239
    23f6:	f8 01       	movw	r30, r16
    23f8:	81 83       	std	Z+1, r24	; 0x01
                            data[2] = serRx[0];
    23fa:	80 91 6f 3a 	lds	r24, 0x3A6F	; 0x803a6f <serRx>
    23fe:	82 83       	std	Z+2, r24	; 0x02
                            data[3] = serRx[1];
    2400:	80 91 70 3a 	lds	r24, 0x3A70	; 0x803a70 <serRx+0x1>
    2404:	83 83       	std	Z+3, r24	; 0x03
                            data[4] = 0;
    2406:	14 82       	std	Z+4, r1	; 0x04
    2408:	09 c2       	rjmp	.+1042   	; 0x281c <CheckInput+0x51a>
        
        //Normal input
        } else {

            //Change status bit
            if ((serRx[0] == '#')&&(RXCNT == 6)){
    240a:	80 91 6f 3a 	lds	r24, 0x3A6F	; 0x803a6f <serRx>
    240e:	83 32       	cpi	r24, 0x23	; 35
    2410:	81 f5       	brne	.+96     	; 0x2472 <CheckInput+0x170>
    2412:	8d b3       	in	r24, 0x1d	; 29
    2414:	86 30       	cpi	r24, 0x06	; 6
    2416:	69 f5       	brne	.+90     	; 0x2472 <CheckInput+0x170>
    2418:	81 e0       	ldi	r24, 0x01	; 1
    241a:	90 e0       	ldi	r25, 0x00	; 0
    241c:	10 e0       	ldi	r17, 0x00	; 0
                uint8_t bitNr = 0;

                for (uint8_t x=1; x<4; ++x) {
                    serRx[x] -= '0';
    241e:	fc 01       	movw	r30, r24
    2420:	e1 59       	subi	r30, 0x91	; 145
    2422:	f5 4c       	sbci	r31, 0xC5	; 197
    2424:	20 81       	ld	r18, Z
    2426:	20 53       	subi	r18, 0x30	; 48
    2428:	20 83       	st	Z, r18
                    bitNr *= 10;
    242a:	11 0f       	add	r17, r17
    242c:	21 2f       	mov	r18, r17
    242e:	22 0f       	add	r18, r18
    2430:	22 0f       	add	r18, r18
    2432:	12 0f       	add	r17, r18
                    if (serRx[1] > 2) break;
    2434:	20 91 70 3a 	lds	r18, 0x3A70	; 0x803a70 <serRx+0x1>
    2438:	23 30       	cpi	r18, 0x03	; 3
    243a:	48 f4       	brcc	.+18     	; 0x244e <CheckInput+0x14c>
                    if (serRx[x] < 10) {
    243c:	20 81       	ld	r18, Z
    243e:	2a 30       	cpi	r18, 0x0A	; 10
    2440:	b0 f4       	brcc	.+44     	; 0x246e <CheckInput+0x16c>
                        bitNr += serRx[x];
    2442:	20 81       	ld	r18, Z
    2444:	12 0f       	add	r17, r18
    2446:	01 96       	adiw	r24, 0x01	; 1

            //Change status bit
            if ((serRx[0] == '#')&&(RXCNT == 6)){
                uint8_t bitNr = 0;

                for (uint8_t x=1; x<4; ++x) {
    2448:	84 30       	cpi	r24, 0x04	; 4
    244a:	91 05       	cpc	r25, r1
    244c:	41 f7       	brne	.-48     	; 0x241e <CheckInput+0x11c>
                        continue;
                    }
                    bitNr = 0;
                    break;
                }
                if ((bitNr)&&(bitNr!=128)) {
    244e:	81 2f       	mov	r24, r17
    2450:	8f 77       	andi	r24, 0x7F	; 127
    2452:	69 f0       	breq	.+26     	; 0x246e <CheckInput+0x16c>
                    if (Cheat(0xff-bitNr, serRx[4]<<8|serRx[5])) UpdateState(bitNr);
    2454:	80 91 73 3a 	lds	r24, 0x3A73	; 0x803a73 <serRx+0x4>
    2458:	60 91 74 3a 	lds	r22, 0x3A74	; 0x803a74 <serRx+0x5>
    245c:	70 e0       	ldi	r23, 0x00	; 0
    245e:	78 2b       	or	r23, r24
    2460:	81 2f       	mov	r24, r17
    2462:	80 95       	com	r24
    2464:	d5 db       	rcall	.-2134   	; 0x1c10 <Cheat>
    2466:	88 23       	and	r24, r24
    2468:	11 f0       	breq	.+4      	; 0x246e <CheckInput+0x16c>
    246a:	81 2f       	mov	r24, r17
    246c:	7e d8       	rcall	.-3844   	; 0x156a <UpdateState>
                }
                responseList = SetStandardResponse(0);
    246e:	80 e0       	ldi	r24, 0x00	; 0
    2470:	50 c0       	rjmp	.+160    	; 0x2512 <CheckInput+0x210>
    2472:	d8 01       	movw	r26, r16
    2474:	80 e0       	ldi	r24, 0x00	; 0
    2476:	90 e0       	ldi	r25, 0x00	; 0
                return 1;            
            }
            
            //Read up to the \0 character and convert to lower case.
            for (uint8_t x=0; x<RXLEN; ++x){
                if ((serRx[x]<'A')||(serRx[x]>'Z')) data[x]=serRx[x]; else data[x]=serRx[x]|0x20;
    2478:	fc 01       	movw	r30, r24
    247a:	e1 59       	subi	r30, 0x91	; 145
    247c:	f5 4c       	sbci	r31, 0xC5	; 197
    247e:	20 81       	ld	r18, Z
    2480:	21 34       	cpi	r18, 0x41	; 65
    2482:	18 f0       	brcs	.+6      	; 0x248a <CheckInput+0x188>
    2484:	20 81       	ld	r18, Z
    2486:	2b 35       	cpi	r18, 0x5B	; 91
    2488:	10 f0       	brcs	.+4      	; 0x248e <CheckInput+0x18c>
    248a:	20 81       	ld	r18, Z
    248c:	02 c0       	rjmp	.+4      	; 0x2492 <CheckInput+0x190>
    248e:	20 81       	ld	r18, Z
    2490:	20 62       	ori	r18, 0x20	; 32
    2492:	2c 93       	st	X, r18
                if (serRx[x] == 0) {
    2494:	20 81       	ld	r18, Z
    2496:	21 11       	cpse	r18, r1
    2498:	05 c0       	rjmp	.+10     	; 0x24a4 <CheckInput+0x1a2>
                    data[x] = 0;
    249a:	f8 01       	movw	r30, r16
    249c:	e8 0f       	add	r30, r24
    249e:	f1 1d       	adc	r31, r1
    24a0:	10 82       	st	Z, r1
                    break;
    24a2:	05 c0       	rjmp	.+10     	; 0x24ae <CheckInput+0x1ac>
    24a4:	01 96       	adiw	r24, 0x01	; 1
    24a6:	11 96       	adiw	r26, 0x01	; 1
                responseList = SetStandardResponse(0);
                return 1;            
            }
            
            //Read up to the \0 character and convert to lower case.
            for (uint8_t x=0; x<RXLEN; ++x){
    24a8:	81 34       	cpi	r24, 0x41	; 65
    24aa:	91 05       	cpc	r25, r1
    24ac:	29 f7       	brne	.-54     	; 0x2478 <CheckInput+0x176>
                    break;
                }
            }

            //No text
            if (serRx[0] == 0){
    24ae:	80 91 6f 3a 	lds	r24, 0x3A6F	; 0x803a6f <serRx>
                data[0] = 0;
    24b2:	f8 01       	movw	r30, r16
                    break;
                }
            }

            //No text
            if (serRx[0] == 0){
    24b4:	81 11       	cpse	r24, r1
    24b6:	05 c0       	rjmp	.+10     	; 0x24c2 <CheckInput+0x1c0>
                data[0] = 0;
    24b8:	10 82       	st	Z, r1
                RXCNT = 0;
    24ba:	1d ba       	out	0x1d, r1	; 29
                serRxDone = 0;
    24bc:	10 92 40 38 	sts	0x3840, r1	; 0x803840 <serRxDone>
    24c0:	ab c1       	rjmp	.+854    	; 0x2818 <CheckInput+0x516>
                return 1;
            }

            //Help text
            if ((data[0] == '?')||(data[0] == 'h')){
    24c2:	80 81       	ld	r24, Z
    24c4:	8f 33       	cpi	r24, 0x3F	; 63
    24c6:	11 f0       	breq	.+4      	; 0x24cc <CheckInput+0x1ca>
    24c8:	88 36       	cpi	r24, 0x68	; 104
    24ca:	39 f5       	brne	.+78     	; 0x251a <CheckInput+0x218>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    24cc:	8b e5       	ldi	r24, 0x5B	; 91
    24ce:	9a e7       	ldi	r25, 0x7A	; 122
    24d0:	80 93 15 39 	sts	0x3915, r24	; 0x803915 <reactStr>
    24d4:	90 93 16 39 	sts	0x3916, r25	; 0x803916 <reactStr+0x1>
    reactStr[1][number]=length;
    24d8:	84 e0       	ldi	r24, 0x04	; 4
    24da:	90 e0       	ldi	r25, 0x00	; 0
    24dc:	80 93 55 39 	sts	0x3955, r24	; 0x803955 <reactStr+0x40>
    24e0:	90 93 56 39 	sts	0x3956, r25	; 0x803956 <reactStr+0x41>
    reactStr[2][number]=type;
    24e4:	81 e0       	ldi	r24, 0x01	; 1
    24e6:	90 e0       	ldi	r25, 0x00	; 0
    24e8:	80 93 95 39 	sts	0x3995, r24	; 0x803995 <reactStr+0x80>
    24ec:	90 93 96 39 	sts	0x3996, r25	; 0x803996 <reactStr+0x81>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    24f0:	23 e9       	ldi	r18, 0x93	; 147
    24f2:	3b e7       	ldi	r19, 0x7B	; 123
    24f4:	20 93 17 39 	sts	0x3917, r18	; 0x803917 <reactStr+0x2>
    24f8:	30 93 18 39 	sts	0x3918, r19	; 0x803918 <reactStr+0x3>
    reactStr[1][number]=length;
    24fc:	2d e6       	ldi	r18, 0x6D	; 109
    24fe:	34 e0       	ldi	r19, 0x04	; 4
    2500:	20 93 57 39 	sts	0x3957, r18	; 0x803957 <reactStr+0x42>
    2504:	30 93 58 39 	sts	0x3958, r19	; 0x803958 <reactStr+0x43>
    reactStr[2][number]=type;
    2508:	80 93 97 39 	sts	0x3997, r24	; 0x803997 <reactStr+0x82>
    250c:	90 93 98 39 	sts	0x3998, r25	; 0x803998 <reactStr+0x83>

            //Help text
            if ((data[0] == '?')||(data[0] == 'h')){
                SetResponse(0, A_LF, 4, TEASER);
                SetResponse(1, A_HELP, L_HELP, TEASER);
                responseList = SetStandardResponse(2);
    2510:	82 e0       	ldi	r24, 0x02	; 2
    2512:	70 dc       	rcall	.-1824   	; 0x1df4 <SetStandardResponse>
    2514:	80 93 14 39 	sts	0x3914, r24	; 0x803914 <responseList>
    2518:	7f c1       	rjmp	.+766    	; 0x2818 <CheckInput+0x516>
                return 1;
            }        
        
            //Alphabet text
            if (data[0] == 'a'){
    251a:	81 36       	cpi	r24, 0x61	; 97
    251c:	d9 f4       	brne	.+54     	; 0x2554 <CheckInput+0x252>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    251e:	8b e5       	ldi	r24, 0x5B	; 91
    2520:	9a e7       	ldi	r25, 0x7A	; 122
    2522:	80 93 15 39 	sts	0x3915, r24	; 0x803915 <reactStr>
    2526:	90 93 16 39 	sts	0x3916, r25	; 0x803916 <reactStr+0x1>
    reactStr[1][number]=length;
    252a:	84 e0       	ldi	r24, 0x04	; 4
    252c:	90 e0       	ldi	r25, 0x00	; 0
    252e:	80 93 55 39 	sts	0x3955, r24	; 0x803955 <reactStr+0x40>
    2532:	90 93 56 39 	sts	0x3956, r25	; 0x803956 <reactStr+0x41>
    reactStr[2][number]=type;
    2536:	81 e0       	ldi	r24, 0x01	; 1
    2538:	90 e0       	ldi	r25, 0x00	; 0
    253a:	80 93 95 39 	sts	0x3995, r24	; 0x803995 <reactStr+0x80>
    253e:	90 93 96 39 	sts	0x3996, r25	; 0x803996 <reactStr+0x81>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2542:	2e e6       	ldi	r18, 0x6E	; 110
    2544:	3a e7       	ldi	r19, 0x7A	; 122
    2546:	20 93 17 39 	sts	0x3917, r18	; 0x803917 <reactStr+0x2>
    254a:	30 93 18 39 	sts	0x3918, r19	; 0x803918 <reactStr+0x3>
    reactStr[1][number]=length;
    254e:	25 e2       	ldi	r18, 0x25	; 37
    2550:	31 e0       	ldi	r19, 0x01	; 1
    2552:	d6 cf       	rjmp	.-84     	; 0x2500 <CheckInput+0x1fe>
                responseList = SetStandardResponse(2);
                return 1;
            }

            //Whoami text
            if (data[0] == 'w'){
    2554:	87 37       	cpi	r24, 0x77	; 119
    2556:	09 f0       	breq	.+2      	; 0x255a <CheckInput+0x258>
    2558:	6e c0       	rjmp	.+220    	; 0x2636 <CheckInput+0x334>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    255a:	8b e5       	ldi	r24, 0x5B	; 91
    255c:	9a e7       	ldi	r25, 0x7A	; 122
    255e:	80 93 15 39 	sts	0x3915, r24	; 0x803915 <reactStr>
    2562:	90 93 16 39 	sts	0x3916, r25	; 0x803916 <reactStr+0x1>
    reactStr[1][number]=length;
    2566:	84 e0       	ldi	r24, 0x04	; 4
    2568:	90 e0       	ldi	r25, 0x00	; 0
    256a:	80 93 55 39 	sts	0x3955, r24	; 0x803955 <reactStr+0x40>
    256e:	90 93 56 39 	sts	0x3956, r25	; 0x803956 <reactStr+0x41>
    reactStr[2][number]=type;
    2572:	21 e0       	ldi	r18, 0x01	; 1
    2574:	30 e0       	ldi	r19, 0x00	; 0
    2576:	20 93 95 39 	sts	0x3995, r18	; 0x803995 <reactStr+0x80>
    257a:	30 93 96 39 	sts	0x3996, r19	; 0x803996 <reactStr+0x81>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    257e:	8a ec       	ldi	r24, 0xCA	; 202
    2580:	96 e7       	ldi	r25, 0x76	; 118
    2582:	80 93 17 39 	sts	0x3917, r24	; 0x803917 <reactStr+0x2>
    2586:	90 93 18 39 	sts	0x3918, r25	; 0x803918 <reactStr+0x3>
    reactStr[1][number]=length;
    258a:	82 e1       	ldi	r24, 0x12	; 18
    258c:	90 e0       	ldi	r25, 0x00	; 0
    258e:	80 93 57 39 	sts	0x3957, r24	; 0x803957 <reactStr+0x42>
    2592:	90 93 58 39 	sts	0x3958, r25	; 0x803958 <reactStr+0x43>
    reactStr[2][number]=type;
    2596:	20 93 97 39 	sts	0x3997, r18	; 0x803997 <reactStr+0x82>
    259a:	30 93 98 39 	sts	0x3998, r19	; 0x803998 <reactStr+0x83>

            //Whoami text
            if (data[0] == 'w'){
                SetResponse(0, A_LF, 4, TEASER);
                SetResponse(1, A_HELLO, L_HELLO, TEASER);
                if (whoami == 1) {
    259e:	80 91 39 38 	lds	r24, 0x3839	; 0x803839 <whoami>
    25a2:	81 30       	cpi	r24, 0x01	; 1
    25a4:	19 f4       	brne	.+6      	; 0x25ac <CheckInput+0x2aa>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    25a6:	84 ec       	ldi	r24, 0xC4	; 196
    25a8:	96 e7       	ldi	r25, 0x76	; 118
    25aa:	0f c0       	rjmp	.+30     	; 0x25ca <CheckInput+0x2c8>
            if (data[0] == 'w'){
                SetResponse(0, A_LF, 4, TEASER);
                SetResponse(1, A_HELLO, L_HELLO, TEASER);
                if (whoami == 1) {
                    SetResponse(2, A_ANUBIS, L_ANUBIS, TEASER);
                } else if (whoami == 2) {
    25ac:	82 30       	cpi	r24, 0x02	; 2
    25ae:	49 f4       	brne	.+18     	; 0x25c2 <CheckInput+0x2c0>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    25b0:	81 ec       	ldi	r24, 0xC1	; 193
    25b2:	96 e7       	ldi	r25, 0x76	; 118
    25b4:	80 93 19 39 	sts	0x3919, r24	; 0x803919 <reactStr+0x4>
    25b8:	90 93 1a 39 	sts	0x391A, r25	; 0x80391a <reactStr+0x5>
    reactStr[1][number]=length;
    25bc:	83 e0       	ldi	r24, 0x03	; 3
    25be:	90 e0       	ldi	r25, 0x00	; 0
    25c0:	1e c0       	rjmp	.+60     	; 0x25fe <CheckInput+0x2fc>
                SetResponse(1, A_HELLO, L_HELLO, TEASER);
                if (whoami == 1) {
                    SetResponse(2, A_ANUBIS, L_ANUBIS, TEASER);
                } else if (whoami == 2) {
                    SetResponse(2, A_BES, L_BES, TEASER);
                } else if (whoami == 3) {
    25c2:	83 30       	cpi	r24, 0x03	; 3
    25c4:	49 f4       	brne	.+18     	; 0x25d8 <CheckInput+0x2d6>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    25c6:	8b eb       	ldi	r24, 0xBB	; 187
    25c8:	96 e7       	ldi	r25, 0x76	; 118
    25ca:	80 93 19 39 	sts	0x3919, r24	; 0x803919 <reactStr+0x4>
    25ce:	90 93 1a 39 	sts	0x391A, r25	; 0x80391a <reactStr+0x5>
    reactStr[1][number]=length;
    25d2:	86 e0       	ldi	r24, 0x06	; 6
    25d4:	90 e0       	ldi	r25, 0x00	; 0
    25d6:	13 c0       	rjmp	.+38     	; 0x25fe <CheckInput+0x2fc>
                    SetResponse(2, A_ANUBIS, L_ANUBIS, TEASER);
                } else if (whoami == 2) {
                    SetResponse(2, A_BES, L_BES, TEASER);
                } else if (whoami == 3) {
                    SetResponse(2, A_KHONSU, L_KHONSU, TEASER);
                } else if (whoami == 4) {
    25d8:	84 30       	cpi	r24, 0x04	; 4
    25da:	49 f4       	brne	.+18     	; 0x25ee <CheckInput+0x2ec>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    25dc:	86 eb       	ldi	r24, 0xB6	; 182
    25de:	96 e7       	ldi	r25, 0x76	; 118
    25e0:	80 93 19 39 	sts	0x3919, r24	; 0x803919 <reactStr+0x4>
    25e4:	90 93 1a 39 	sts	0x391A, r25	; 0x80391a <reactStr+0x5>
    reactStr[1][number]=length;
    25e8:	85 e0       	ldi	r24, 0x05	; 5
    25ea:	90 e0       	ldi	r25, 0x00	; 0
    25ec:	08 c0       	rjmp	.+16     	; 0x25fe <CheckInput+0x2fc>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    25ee:	8f e3       	ldi	r24, 0x3F	; 63
    25f0:	96 e7       	ldi	r25, 0x76	; 118
    25f2:	80 93 19 39 	sts	0x3919, r24	; 0x803919 <reactStr+0x4>
    25f6:	90 93 1a 39 	sts	0x391A, r25	; 0x80391a <reactStr+0x5>
    reactStr[1][number]=length;
    25fa:	82 e4       	ldi	r24, 0x42	; 66
    25fc:	90 e0       	ldi	r25, 0x00	; 0
    25fe:	80 93 59 39 	sts	0x3959, r24	; 0x803959 <reactStr+0x44>
    2602:	90 93 5a 39 	sts	0x395A, r25	; 0x80395a <reactStr+0x45>
    reactStr[2][number]=type;
    2606:	20 93 99 39 	sts	0x3999, r18	; 0x803999 <reactStr+0x84>
    260a:	30 93 9a 39 	sts	0x399A, r19	; 0x80399a <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    260e:	8c e9       	ldi	r24, 0x9C	; 156
    2610:	96 e7       	ldi	r25, 0x76	; 118
    2612:	80 93 1b 39 	sts	0x391B, r24	; 0x80391b <reactStr+0x6>
    2616:	90 93 1c 39 	sts	0x391C, r25	; 0x80391c <reactStr+0x7>
    reactStr[1][number]=length;
    261a:	8a e1       	ldi	r24, 0x1A	; 26
    261c:	90 e0       	ldi	r25, 0x00	; 0
    261e:	80 93 5b 39 	sts	0x395B, r24	; 0x80395b <reactStr+0x46>
    2622:	90 93 5c 39 	sts	0x395C, r25	; 0x80395c <reactStr+0x47>
    reactStr[2][number]=type;
    2626:	81 e0       	ldi	r24, 0x01	; 1
    2628:	90 e0       	ldi	r25, 0x00	; 0
    262a:	80 93 9b 39 	sts	0x399B, r24	; 0x80399b <reactStr+0x86>
    262e:	90 93 9c 39 	sts	0x399C, r25	; 0x80399c <reactStr+0x87>
                    SetResponse(2, A_THOTH, L_THOTH, TEASER);
                } else {
                    SetResponse(2, A_ERROR, L_ERROR, TEASER);
                }
                SetResponse(3, A_PLEASED, L_PLEASED, TEASER);
                responseList = SetStandardResponse(4);
    2632:	84 e0       	ldi	r24, 0x04	; 4
    2634:	6e cf       	rjmp	.-292    	; 0x2512 <CheckInput+0x210>
                return 1;
            }

            //Quit text
            if (data[0] == 'q'){
    2636:	81 37       	cpi	r24, 0x71	; 113
    2638:	d9 f4       	brne	.+54     	; 0x2670 <CheckInput+0x36e>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    263a:	8b e5       	ldi	r24, 0x5B	; 91
    263c:	9a e7       	ldi	r25, 0x7A	; 122
    263e:	80 93 15 39 	sts	0x3915, r24	; 0x803915 <reactStr>
    2642:	90 93 16 39 	sts	0x3916, r25	; 0x803916 <reactStr+0x1>
    reactStr[1][number]=length;
    2646:	84 e0       	ldi	r24, 0x04	; 4
    2648:	90 e0       	ldi	r25, 0x00	; 0
    264a:	80 93 55 39 	sts	0x3955, r24	; 0x803955 <reactStr+0x40>
    264e:	90 93 56 39 	sts	0x3956, r25	; 0x803956 <reactStr+0x41>
    reactStr[2][number]=type;
    2652:	81 e0       	ldi	r24, 0x01	; 1
    2654:	90 e0       	ldi	r25, 0x00	; 0
    2656:	80 93 95 39 	sts	0x3995, r24	; 0x803995 <reactStr+0x80>
    265a:	90 93 96 39 	sts	0x3996, r25	; 0x803996 <reactStr+0x81>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    265e:	22 e0       	ldi	r18, 0x02	; 2
    2660:	3a e7       	ldi	r19, 0x7A	; 122
    2662:	20 93 17 39 	sts	0x3917, r18	; 0x803917 <reactStr+0x2>
    2666:	30 93 18 39 	sts	0x3918, r19	; 0x803918 <reactStr+0x3>
    reactStr[1][number]=length;
    266a:	25 e5       	ldi	r18, 0x55	; 85
    266c:	30 e0       	ldi	r19, 0x00	; 0
                responseList = SetStandardResponse(2);
                return 1;
            }

            //Fake cheat = reset badge!
            if (StartsWith(&data[0], "iddqd")){
    266e:	48 cf       	rjmp	.-368    	; 0x2500 <CheckInput+0x1fe>
    2670:	6e e1       	ldi	r22, 0x1E	; 30
    2672:	7d eb       	ldi	r23, 0xBD	; 189
    2674:	c8 01       	movw	r24, r16
    2676:	6c db       	rcall	.-2344   	; 0x1d50 <StartsWith>
    2678:	88 23       	and	r24, r24
    267a:	f9 f0       	breq	.+62     	; 0x26ba <CheckInput+0x3b8>
    267c:	1e e6       	ldi	r17, 0x6E	; 110
            
                //Reset game data by wiping the UUID bits
                for (uint8_t x=0; x<4; ++x){
                    WriteStatusBit(110+x, 0);
    267e:	60 e0       	ldi	r22, 0x00	; 0
    2680:	81 2f       	mov	r24, r17
    2682:	0e 94 9b 0a 	call	0x1536	; 0x1536 <WriteStatusBit>
    2686:	1f 5f       	subi	r17, 0xFF	; 255

            //Fake cheat = reset badge!
            if (StartsWith(&data[0], "iddqd")){
            
                //Reset game data by wiping the UUID bits
                for (uint8_t x=0; x<4; ++x){
    2688:	12 37       	cpi	r17, 0x72	; 114
    268a:	c9 f7       	brne	.-14     	; 0x267e <CheckInput+0x37c>
                    WriteStatusBit(110+x, 0);
                }
                SaveGameState();
    268c:	0e 94 14 0a 	call	0x1428	; 0x1428 <SaveGameState>

                uint8_t cheat[] = "Cheater! Contact badge team... ";
    2690:	80 e2       	ldi	r24, 0x20	; 32
    2692:	e1 e6       	ldi	r30, 0x61	; 97
    2694:	fd eb       	ldi	r31, 0xBD	; 189
    2696:	de 01       	movw	r26, r28
    2698:	11 96       	adiw	r26, 0x01	; 1
    269a:	01 90       	ld	r0, Z+
    269c:	0d 92       	st	X+, r0
    269e:	8a 95       	dec	r24
    26a0:	e1 f7       	brne	.-8      	; 0x269a <CheckInput+0x398>
                SerSpeed(60);
    26a2:	8c e3       	ldi	r24, 0x3C	; 60
    26a4:	0e 94 06 09 	call	0x120c	; 0x120c <SerSpeed>
                while(1){
                    if (serTxDone) SerSend(&cheat[0]);
    26a8:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <serTxDone>
    26ac:	88 23       	and	r24, r24
    26ae:	e1 f3       	breq	.-8      	; 0x26a8 <CheckInput+0x3a6>
    26b0:	ce 01       	movw	r24, r28
    26b2:	01 96       	adiw	r24, 0x01	; 1
    26b4:	0e 94 f5 08 	call	0x11ea	; 0x11ea <SerSend>
                }
            }
            
            //Cheat reset (Quote from: Donald E. Westlake)
            if (StartsWith(&data[0], "the trouble with real life is, there's no reset button")){
    26b8:	f7 cf       	rjmp	.-18     	; 0x26a8 <CheckInput+0x3a6>
    26ba:	64 e2       	ldi	r22, 0x24	; 36
    26bc:	7d eb       	ldi	r23, 0xBD	; 189
    26be:	c8 01       	movw	r24, r16
    26c0:	47 db       	rcall	.-2418   	; 0x1d50 <StartsWith>
    26c2:	68 2e       	mov	r6, r24
    26c4:	88 23       	and	r24, r24
    26c6:	61 f1       	breq	.+88     	; 0x2720 <CheckInput+0x41e>
                
                //Reset cheat data by resetting the EEPROM bytes
                uint8_t empty=0xff;
    26c8:	8f ef       	ldi	r24, 0xFF	; 255
    26ca:	89 a3       	std	Y+33, r24	; 0x21
    26cc:	18 e1       	ldi	r17, 0x18	; 24
                for (uint8_t x=0; x<MAX_CHEATS; ++x){
                    EEWrite(CHEATS+x, &empty, 1);
    26ce:	41 e0       	ldi	r20, 0x01	; 1
    26d0:	be 01       	movw	r22, r28
    26d2:	6f 5d       	subi	r22, 0xDF	; 223
    26d4:	7f 4f       	sbci	r23, 0xFF	; 255
    26d6:	81 2f       	mov	r24, r17
    26d8:	0e 94 cd 08 	call	0x119a	; 0x119a <EEWrite>
    26dc:	1f 5f       	subi	r17, 0xFF	; 255
            //Cheat reset (Quote from: Donald E. Westlake)
            if (StartsWith(&data[0], "the trouble with real life is, there's no reset button")){
                
                //Reset cheat data by resetting the EEPROM bytes
                uint8_t empty=0xff;
                for (uint8_t x=0; x<MAX_CHEATS; ++x){
    26de:	10 32       	cpi	r17, 0x20	; 32
    26e0:	b1 f7       	brne	.-20     	; 0x26ce <CheckInput+0x3cc>
    26e2:	1e e6       	ldi	r17, 0x6E	; 110
                    EEWrite(CHEATS+x, &empty, 1);
                }
                //Reset game data by wiping the UUID bits
                for (uint8_t x=0; x<4; ++x){
                    WriteStatusBit(110+x, 0);
    26e4:	60 e0       	ldi	r22, 0x00	; 0
    26e6:	81 2f       	mov	r24, r17
    26e8:	0e 94 9b 0a 	call	0x1536	; 0x1536 <WriteStatusBit>
    26ec:	1f 5f       	subi	r17, 0xFF	; 255
                uint8_t empty=0xff;
                for (uint8_t x=0; x<MAX_CHEATS; ++x){
                    EEWrite(CHEATS+x, &empty, 1);
                }
                //Reset game data by wiping the UUID bits
                for (uint8_t x=0; x<4; ++x){
    26ee:	12 37       	cpi	r17, 0x72	; 114
    26f0:	c9 f7       	brne	.-14     	; 0x26e4 <CheckInput+0x3e2>
                    WriteStatusBit(110+x, 0);
                }
                
                SaveGameState();
    26f2:	0e 94 14 0a 	call	0x1428	; 0x1428 <SaveGameState>

                uint8_t cheat[] = "Reset please! ";
    26f6:	8f e0       	ldi	r24, 0x0F	; 15
    26f8:	e1 e8       	ldi	r30, 0x81	; 129
    26fa:	fd eb       	ldi	r31, 0xBD	; 189
    26fc:	de 01       	movw	r26, r28
    26fe:	11 96       	adiw	r26, 0x01	; 1
    2700:	01 90       	ld	r0, Z+
    2702:	0d 92       	st	X+, r0
    2704:	8a 95       	dec	r24
    2706:	e1 f7       	brne	.-8      	; 0x2700 <CheckInput+0x3fe>
                SerSpeed(60);
    2708:	8c e3       	ldi	r24, 0x3C	; 60
    270a:	0e 94 06 09 	call	0x120c	; 0x120c <SerSpeed>
                while(1){
                    if (serTxDone) SerSend(&cheat[0]);
    270e:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <serTxDone>
    2712:	88 23       	and	r24, r24
    2714:	e1 f3       	breq	.-8      	; 0x270e <CheckInput+0x40c>
    2716:	ce 01       	movw	r24, r28
    2718:	01 96       	adiw	r24, 0x01	; 1
    271a:	0e 94 f5 08 	call	0x11ea	; 0x11ea <SerSend>
                }
            }
            if (StartsWith(&data[0], "cheat")){
    271e:	f7 cf       	rjmp	.-18     	; 0x270e <CheckInput+0x40c>
    2720:	6b e5       	ldi	r22, 0x5B	; 91
    2722:	7d eb       	ldi	r23, 0xBD	; 189
    2724:	c8 01       	movw	r24, r16
    2726:	14 db       	rcall	.-2520   	; 0x1d50 <StartsWith>
    2728:	88 23       	and	r24, r24
    272a:	09 f4       	brne	.+2      	; 0x272e <CheckInput+0x42c>
    272c:	2c ce       	rjmp	.-936    	; 0x2386 <CheckInput+0x84>
    272e:	05 e1       	ldi	r16, 0x15	; 21
    2730:	19 e3       	ldi	r17, 0x39	; 57
    2732:	78 e1       	ldi	r23, 0x18	; 24
    2734:	77 2e       	mov	r7, r23
                    
                    //Set up sending out number
                    EERead(CHEATS+x, &bit, 1);
                    bit = 0xff-bit;
                    for (n=2; n>=0; --n) {
                        digit[n] = bit % 10;
    2736:	ea e0       	ldi	r30, 0x0A	; 10
    2738:	5e 2e       	mov	r5, r30
                        bit /= 10;
    273a:	f4 e6       	ldi	r31, 0x64	; 100
    273c:	4f 2e       	mov	r4, r31
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    reactStr[1][number]=length;
    273e:	ee 24       	eor	r14, r14
    2740:	e3 94       	inc	r14
    2742:	f1 2c       	mov	r15, r1
    2744:	cc 24       	eor	r12, r12
    2746:	c3 94       	inc	r12
    2748:	d1 2c       	mov	r13, r1
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    274a:	89 e5       	ldi	r24, 0x59	; 89
    274c:	88 2e       	mov	r8, r24
    274e:	8a e7       	ldi	r24, 0x7A	; 122
    2750:	98 2e       	mov	r9, r24
    reactStr[1][number]=length;
    2752:	92 e0       	ldi	r25, 0x02	; 2
    2754:	a9 2e       	mov	r10, r25
    2756:	b1 2c       	mov	r11, r1
                uint8_t bit, digit[3];

                for (uint8_t x=0; x<MAX_CHEATS; ++x){
                    
                    //Set up sending out number
                    EERead(CHEATS+x, &bit, 1);
    2758:	41 e0       	ldi	r20, 0x01	; 1
    275a:	be 01       	movw	r22, r28
    275c:	6f 5d       	subi	r22, 0xDF	; 223
    275e:	7f 4f       	sbci	r23, 0xFF	; 255
    2760:	87 2d       	mov	r24, r7
    2762:	0e 94 bd 08 	call	0x117a	; 0x117a <EERead>
                    bit = 0xff-bit;
    2766:	29 a1       	ldd	r18, Y+33	; 0x21
    2768:	20 95       	com	r18
                    for (n=2; n>=0; --n) {
                        digit[n] = bit % 10;
    276a:	82 2f       	mov	r24, r18
    276c:	65 2d       	mov	r22, r5
    276e:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <__udivmodqi4>
    2772:	9b 83       	std	Y+3, r25	; 0x03
    2774:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <__udivmodqi4>
    2778:	9a 83       	std	Y+2, r25	; 0x02
                        bit /= 10;
    277a:	82 2f       	mov	r24, r18
    277c:	64 2d       	mov	r22, r4
    277e:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <__udivmodqi4>
                    
                    //Set up sending out number
                    EERead(CHEATS+x, &bit, 1);
                    bit = 0xff-bit;
                    for (n=2; n>=0; --n) {
                        digit[n] = bit % 10;
    2782:	89 83       	std	Y+1, r24	; 0x01
    2784:	19 a2       	std	Y+33, r1	; 0x21
    2786:	de 01       	movw	r26, r28
    2788:	11 96       	adiw	r26, 0x01	; 1
    278a:	40 e0       	ldi	r20, 0x00	; 0
                        bit /= 10;
                    }

                    for (n=0; n<3; ++n) {
                        SetResponse(x*4+n, A_DIGITS+digit[n], 1, TEASER);
    278c:	2d 91       	ld	r18, X+
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    278e:	86 2d       	mov	r24, r6
    2790:	84 0f       	add	r24, r20
    2792:	90 e0       	ldi	r25, 0x00	; 0
    2794:	fc 01       	movw	r30, r24
    2796:	ee 0f       	add	r30, r30
    2798:	ff 1f       	adc	r31, r31
    279a:	eb 5e       	subi	r30, 0xEB	; 235
    279c:	f6 4c       	sbci	r31, 0xC6	; 198
    279e:	30 e0       	ldi	r19, 0x00	; 0
    27a0:	2e 52       	subi	r18, 0x2E	; 46
    27a2:	3b 48       	sbci	r19, 0x8B	; 139
    27a4:	20 83       	st	Z, r18
    27a6:	31 83       	std	Z+1, r19	; 0x01
    reactStr[1][number]=length;
    27a8:	fc 01       	movw	r30, r24
    27aa:	ee 0f       	add	r30, r30
    27ac:	ff 1f       	adc	r31, r31
    27ae:	eb 5a       	subi	r30, 0xAB	; 171
    27b0:	f6 4c       	sbci	r31, 0xC6	; 198
    27b2:	e0 82       	st	Z, r14
    27b4:	f1 82       	std	Z+1, r15	; 0x01
    reactStr[2][number]=type;
    27b6:	88 0f       	add	r24, r24
    27b8:	99 1f       	adc	r25, r25
    27ba:	fc 01       	movw	r30, r24
    27bc:	eb 56       	subi	r30, 0x6B	; 107
    27be:	f6 4c       	sbci	r31, 0xC6	; 198
    27c0:	e0 82       	st	Z, r14
    27c2:	f1 82       	std	Z+1, r15	; 0x01
    27c4:	4f 5f       	subi	r20, 0xFF	; 255
                    for (n=2; n>=0; --n) {
                        digit[n] = bit % 10;
                        bit /= 10;
                    }

                    for (n=0; n<3; ++n) {
    27c6:	43 30       	cpi	r20, 0x03	; 3
    27c8:	09 f7       	brne	.-62     	; 0x278c <CheckInput+0x48a>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    27ca:	f8 01       	movw	r30, r16
    27cc:	86 82       	std	Z+6, r8	; 0x06
    27ce:	97 82       	std	Z+7, r9	; 0x07
    reactStr[1][number]=length;
    27d0:	ea 5b       	subi	r30, 0xBA	; 186
    27d2:	ff 4f       	sbci	r31, 0xFF	; 255
    27d4:	a0 82       	st	Z, r10
    27d6:	b1 82       	std	Z+1, r11	; 0x01
    reactStr[2][number]=type;
    27d8:	e0 5c       	subi	r30, 0xC0	; 192
    27da:	ff 4f       	sbci	r31, 0xFF	; 255
    27dc:	c0 82       	st	Z, r12
    27de:	d1 82       	std	Z+1, r13	; 0x01
    27e0:	73 94       	inc	r7
    27e2:	08 5f       	subi	r16, 0xF8	; 248
    27e4:	1f 4f       	sbci	r17, 0xFF	; 255
    27e6:	f4 e0       	ldi	r31, 0x04	; 4
    27e8:	6f 0e       	add	r6, r31
            }
            if (StartsWith(&data[0], "cheat")){
                int8_t n;
                uint8_t bit, digit[3];

                for (uint8_t x=0; x<MAX_CHEATS; ++x){
    27ea:	80 e2       	ldi	r24, 0x20	; 32
    27ec:	78 12       	cpse	r7, r24
    27ee:	b4 cf       	rjmp	.-152    	; 0x2758 <CheckInput+0x456>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    27f0:	8b e5       	ldi	r24, 0x5B	; 91
    27f2:	9a e7       	ldi	r25, 0x7A	; 122
    27f4:	80 93 53 39 	sts	0x3953, r24	; 0x803953 <reactStr+0x3e>
    27f8:	90 93 54 39 	sts	0x3954, r25	; 0x803954 <reactStr+0x3f>
    reactStr[1][number]=length;
    27fc:	84 e0       	ldi	r24, 0x04	; 4
    27fe:	90 e0       	ldi	r25, 0x00	; 0
    2800:	80 93 93 39 	sts	0x3993, r24	; 0x803993 <reactStr+0x7e>
    2804:	90 93 94 39 	sts	0x3994, r25	; 0x803994 <reactStr+0x7f>
    reactStr[2][number]=type;
    2808:	81 e0       	ldi	r24, 0x01	; 1
    280a:	90 e0       	ldi	r25, 0x00	; 0
    280c:	80 93 d3 39 	sts	0x39D3, r24	; 0x8039d3 <reactStr+0xbe>
    2810:	90 93 d4 39 	sts	0x39D4, r25	; 0x8039d4 <reactStr+0xbf>
                        SetResponse(x*4+n, A_DIGITS+digit[n], 1, TEASER);
                    }                
                    SetResponse(x*4+3, A_COMMA, L_COMMA, TEASER);
                }
                SetResponse((4*MAX_CHEATS)-1, A_LF, 4, TEASER);
                responseList = 32;
    2814:	70 92 14 39 	sts	0x3914, r7	; 0x803914 <responseList>
        //Data received, but not any of the commands above
        return 0;
    }

    //Serial input not available yet
    return 1;
    2818:	ff 24       	eor	r15, r15
    281a:	f3 94       	inc	r15
}
    281c:	8f 2d       	mov	r24, r15
    281e:	a1 96       	adiw	r28, 0x21	; 33
    2820:	cd bf       	out	0x3d, r28	; 61
    2822:	de bf       	out	0x3e, r29	; 62
    2824:	df 91       	pop	r29
    2826:	cf 91       	pop	r28
    2828:	1f 91       	pop	r17
    282a:	0f 91       	pop	r16
    282c:	ff 90       	pop	r15
    282e:	ef 90       	pop	r14
    2830:	df 90       	pop	r13
    2832:	cf 90       	pop	r12
    2834:	bf 90       	pop	r11
    2836:	af 90       	pop	r10
    2838:	9f 90       	pop	r9
    283a:	8f 90       	pop	r8
    283c:	7f 90       	pop	r7
    283e:	6f 90       	pop	r6
    2840:	5f 90       	pop	r5
    2842:	4f 90       	pop	r4
    2844:	08 95       	ret

00002846 <ProcessInput>:

//The game logic!
uint8_t ProcessInput(uint8_t *data){
    2846:	4f 92       	push	r4
    2848:	5f 92       	push	r5
    284a:	6f 92       	push	r6
    284c:	7f 92       	push	r7
    284e:	8f 92       	push	r8
    2850:	9f 92       	push	r9
    2852:	af 92       	push	r10
    2854:	bf 92       	push	r11
    2856:	cf 92       	push	r12
    2858:	df 92       	push	r13
    285a:	ef 92       	push	r14
    285c:	ff 92       	push	r15
    285e:	0f 93       	push	r16
    2860:	1f 93       	push	r17
    2862:	cf 93       	push	r28
    2864:	df 93       	push	r29
    2866:	cd b7       	in	r28, 0x3d	; 61
    2868:	de b7       	in	r29, 0x3e	; 62
    286a:	2a 97       	sbiw	r28, 0x0a	; 10
    286c:	cd bf       	out	0x3d, r28	; 61
    286e:	de bf       	out	0x3e, r29	; 62
    2870:	8c 01       	movw	r16, r24
    static object_model_t actObj1, actObj2;
    uint8_t elements = 1;

    CleanInput(&data[0]);
    2872:	6f dc       	rcall	.-1826   	; 0x2152 <CleanInput>
    uint8_t inputLen = CleanInput(&data[0]);
    2874:	c8 01       	movw	r24, r16
    2876:	6d dc       	rcall	.-1830   	; 0x2152 <CleanInput>
    2878:	f8 2e       	mov	r15, r24

    if (inputLen) {
    287a:	88 23       	and	r24, r24
    287c:	09 f4       	brne	.+2      	; 0x2880 <ProcessInput+0x3a>
    287e:	ee c7       	rjmp	.+4060   	; 0x385c <ProcessInput+0x1016>

        //eXit to previous location
        if (data[0] == 'x'){
    2880:	d8 01       	movw	r26, r16
    2882:	8c 91       	ld	r24, X
    2884:	88 37       	cpi	r24, 0x78	; 120
    2886:	09 f0       	breq	.+2      	; 0x288a <ProcessInput+0x44>
    2888:	45 c0       	rjmp	.+138    	; 0x2914 <ProcessInput+0xce>

            //Standing in the Lobby?
            if ((route[currDepth] == 0)||(currDepth == 0)){
    288a:	80 91 29 38 	lds	r24, 0x3829	; 0x803829 <currDepth>
    288e:	e8 2f       	mov	r30, r24
    2890:	f0 e0       	ldi	r31, 0x00	; 0
    2892:	ee 0f       	add	r30, r30
    2894:	ff 1f       	adc	r31, r31
    2896:	eb 52       	subi	r30, 0x2B	; 43
    2898:	f6 4c       	sbci	r31, 0xC6	; 198
    289a:	20 81       	ld	r18, Z
    289c:	31 81       	ldd	r19, Z+1	; 0x01
    289e:	23 2b       	or	r18, r19
    28a0:	11 f0       	breq	.+4      	; 0x28a6 <ProcessInput+0x60>
    28a2:	81 11       	cpse	r24, r1
    28a4:	03 c0       	rjmp	.+6      	; 0x28ac <ProcessInput+0x66>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    28a6:	81 e8       	ldi	r24, 0x81	; 129
    28a8:	96 e7       	ldi	r25, 0x76	; 118
    28aa:	a1 c5       	rjmp	.+2882   	; 0x33ee <ProcessInput+0xba8>
            //Standing in the Lobby?
            if ((route[currDepth] == 0)||(currDepth == 0)){
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            
            //Is there a way to go back?
            } else if (CheckState(currObj.byteField[OPEN_ACL])){
    28ac:	80 91 1b 3a 	lds	r24, 0x3A1B	; 0x803a1b <currObj+0x6>
    28b0:	0e 94 bf 0a 	call	0x157e	; 0x157e <CheckState>
    28b4:	88 23       	and	r24, r24
    28b6:	b9 f0       	breq	.+46     	; 0x28e6 <ProcessInput+0xa0>
                --currDepth;
    28b8:	e0 91 29 38 	lds	r30, 0x3829	; 0x803829 <currDepth>
    28bc:	e1 50       	subi	r30, 0x01	; 1
    28be:	e0 93 29 38 	sts	0x3829, r30	; 0x803829 <currDepth>
                PopulateObject(route[currDepth], &currObj);
    28c2:	f0 e0       	ldi	r31, 0x00	; 0
    28c4:	ee 0f       	add	r30, r30
    28c6:	ff 1f       	adc	r31, r31
    28c8:	eb 52       	subi	r30, 0x2B	; 43
    28ca:	f6 4c       	sbci	r31, 0xC6	; 198
    28cc:	65 e1       	ldi	r22, 0x15	; 21
    28ce:	7a e3       	ldi	r23, 0x3A	; 58
    28d0:	80 81       	ld	r24, Z
    28d2:	91 81       	ldd	r25, Z+1	; 0x01
    28d4:	0b db       	rcall	.-2538   	; 0x1eec <PopulateObject>
                effect = currObj.byteField[EFFECTS];
    28d6:	80 91 19 3a 	lds	r24, 0x3A19	; 0x803a19 <currObj+0x4>
    28da:	90 e0       	ldi	r25, 0x00	; 0
    28dc:	80 93 36 38 	sts	0x3836, r24	; 0x803836 <effect>
    28e0:	90 93 37 38 	sts	0x3837, r25	; 0x803837 <effect+0x1>
    28e4:	31 c2       	rjmp	.+1122   	; 0x2d48 <ProcessInput+0x502>
            
            //No way out, print denied message of location
            } else {
                SetResponse(elements++, currObj.addrStr[OPEN_ACL_MSG], currObj.lenStr[OPEN_ACL_MSG], GAME);
    28e6:	80 91 37 3a 	lds	r24, 0x3A37	; 0x803a37 <currObj+0x22>
    28ea:	90 91 38 3a 	lds	r25, 0x3A38	; 0x803a38 <currObj+0x23>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    28ee:	20 91 29 3a 	lds	r18, 0x3A29	; 0x803a29 <currObj+0x14>
    28f2:	30 91 2a 3a 	lds	r19, 0x3A2A	; 0x803a2a <currObj+0x15>
    28f6:	20 93 17 39 	sts	0x3917, r18	; 0x803917 <reactStr+0x2>
    28fa:	30 93 18 39 	sts	0x3918, r19	; 0x803918 <reactStr+0x3>
    reactStr[1][number]=length;
    28fe:	80 93 57 39 	sts	0x3957, r24	; 0x803957 <reactStr+0x42>
    2902:	90 93 58 39 	sts	0x3958, r25	; 0x803958 <reactStr+0x43>
    reactStr[2][number]=type;
    2906:	10 92 97 39 	sts	0x3997, r1	; 0x803997 <reactStr+0x82>
    290a:	10 92 98 39 	sts	0x3998, r1	; 0x803998 <reactStr+0x83>
                effect = currObj.byteField[EFFECTS];
            
            //No way out, print denied message of location
            } else {
                SetResponse(elements++, currObj.addrStr[OPEN_ACL_MSG], currObj.lenStr[OPEN_ACL_MSG], GAME);
                effect = currObj.effect[0];               
    290e:	80 91 3d 3a 	lds	r24, 0x3A3D	; 0x803a3d <currObj+0x28>
    2912:	3a c6       	rjmp	.+3188   	; 0x3588 <ProcessInput+0xd42>
            }   
        
        //Enter locations or Open objects    
        } else if ((data[0] == 'e')||(data[0] == 'o')) {
    2914:	85 36       	cpi	r24, 0x65	; 101
    2916:	19 f0       	breq	.+6      	; 0x291e <ProcessInput+0xd8>
    2918:	8f 36       	cpi	r24, 0x6F	; 111
    291a:	09 f0       	breq	.+2      	; 0x291e <ProcessInput+0xd8>
    291c:	df c0       	rjmp	.+446    	; 0x2adc <ProcessInput+0x296>
                
            //Not possible, too many/little characters
            if (inputLen != 2){
    291e:	b2 e0       	ldi	r27, 0x02	; 2
    2920:	fb 12       	cpse	r15, r27
    2922:	c1 cf       	rjmp	.-126    	; 0x28a6 <ProcessInput+0x60>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                uint8_t canDo = 0;
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
    2924:	e0 90 29 38 	lds	r14, 0x3829	; 0x803829 <currDepth>
    2928:	f1 2c       	mov	r15, r1
    292a:	f7 01       	movw	r30, r14
    292c:	ee 0f       	add	r30, r30
    292e:	ff 1f       	adc	r31, r31
    2930:	eb 52       	subi	r30, 0x2B	; 43
    2932:	f6 4c       	sbci	r31, 0xC6	; 198
    2934:	40 e0       	ldi	r20, 0x00	; 0
    2936:	50 e0       	ldi	r21, 0x00	; 0
    2938:	d8 01       	movw	r26, r16
    293a:	11 96       	adiw	r26, 0x01	; 1
    293c:	6c 91       	ld	r22, X
    293e:	80 81       	ld	r24, Z
    2940:	91 81       	ldd	r25, Z+1	; 0x01
    2942:	9f db       	rcall	.-2242   	; 0x2082 <FindChild>
    2944:	f7 01       	movw	r30, r14
    2946:	ee 0f       	add	r30, r30
    2948:	ff 1f       	adc	r31, r31
    294a:	e9 52       	subi	r30, 0x29	; 41
    294c:	f6 4c       	sbci	r31, 0xC6	; 198
    294e:	80 83       	st	Z, r24
    2950:	91 83       	std	Z+1, r25	; 0x01
                    
                //Child found?
                if (route[currDepth+1]) {
    2952:	90 91 29 38 	lds	r25, 0x3829	; 0x803829 <currDepth>
    2956:	29 2f       	mov	r18, r25
    2958:	30 e0       	ldi	r19, 0x00	; 0
    295a:	f9 01       	movw	r30, r18
    295c:	ee 0f       	add	r30, r30
    295e:	ff 1f       	adc	r31, r31
    2960:	e9 52       	subi	r30, 0x29	; 41
    2962:	f6 4c       	sbci	r31, 0xC6	; 198
    2964:	40 81       	ld	r20, Z
    2966:	51 81       	ldd	r21, Z+1	; 0x01
    2968:	41 15       	cp	r20, r1
    296a:	51 05       	cpc	r21, r1
    296c:	21 f0       	breq	.+8      	; 0x2976 <ProcessInput+0x130>
                    PopulateObject(route[currDepth+1], &actObj1);
    296e:	64 ed       	ldi	r22, 0xD4	; 212
    2970:	78 e3       	ldi	r23, 0x38	; 56
    2972:	ca 01       	movw	r24, r20
    2974:	1c c0       	rjmp	.+56     	; 0x29ae <ProcessInput+0x168>
                    canDo = 1;
                //No child, maybe a step back, letter ok?
                } else if (currDepth) {
    2976:	99 23       	and	r25, r25
    2978:	09 f4       	brne	.+2      	; 0x297c <ProcessInput+0x136>
    297a:	87 c7       	rjmp	.+3854   	; 0x388a <ProcessInput+0x1044>
                    if (CheckLetter(route[currDepth-1], data[1])) {
    297c:	22 0f       	add	r18, r18
    297e:	33 1f       	adc	r19, r19
    2980:	f9 01       	movw	r30, r18
    2982:	ed 52       	subi	r30, 0x2D	; 45
    2984:	f6 4c       	sbci	r31, 0xC6	; 198
    2986:	d8 01       	movw	r26, r16
    2988:	11 96       	adiw	r26, 0x01	; 1
    298a:	6c 91       	ld	r22, X
    298c:	80 81       	ld	r24, Z
    298e:	91 81       	ldd	r25, Z+1	; 0x01
    2990:	24 db       	rcall	.-2488   	; 0x1fda <CheckLetter>
    2992:	88 23       	and	r24, r24
    2994:	09 f4       	brne	.+2      	; 0x2998 <ProcessInput+0x152>
    2996:	79 c7       	rjmp	.+3826   	; 0x388a <ProcessInput+0x1044>
                        PopulateObject(route[currDepth-1], &actObj1);
    2998:	e0 91 29 38 	lds	r30, 0x3829	; 0x803829 <currDepth>
    299c:	f0 e0       	ldi	r31, 0x00	; 0
    299e:	ee 0f       	add	r30, r30
    29a0:	ff 1f       	adc	r31, r31
    29a2:	ed 52       	subi	r30, 0x2D	; 45
    29a4:	f6 4c       	sbci	r31, 0xC6	; 198
    29a6:	64 ed       	ldi	r22, 0xD4	; 212
    29a8:	78 e3       	ldi	r23, 0x38	; 56
    29aa:	80 81       	ld	r24, Z
    29ac:	91 81       	ldd	r25, Z+1	; 0x01
    29ae:	9e da       	rcall	.-2756   	; 0x1eec <PopulateObject>
                    }
                }

                //The candidate is found! Let's check if the action is legit
                if (canDo) {
                    if ((data[0] == 'e') && ((actObj1.byteField[ACTION_MASK]&ENTER)==0)) {
    29b0:	f8 01       	movw	r30, r16
    29b2:	80 81       	ld	r24, Z
    29b4:	85 36       	cpi	r24, 0x65	; 101
    29b6:	c9 f4       	brne	.+50     	; 0x29ea <ProcessInput+0x1a4>
    29b8:	80 91 dc 38 	lds	r24, 0x38DC	; 0x8038dc <actObj1.3994+0x8>
    29bc:	80 fd       	sbrc	r24, 0
    29be:	1e c0       	rjmp	.+60     	; 0x29fc <ProcessInput+0x1b6>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    29c0:	8f e9       	ldi	r24, 0x9F	; 159
    29c2:	99 e7       	ldi	r25, 0x79	; 121
    29c4:	80 93 17 39 	sts	0x3917, r24	; 0x803917 <reactStr+0x2>
    29c8:	90 93 18 39 	sts	0x3918, r25	; 0x803918 <reactStr+0x3>
    reactStr[1][number]=length;
    29cc:	8e e1       	ldi	r24, 0x1E	; 30
    29ce:	90 e0       	ldi	r25, 0x00	; 0
    29d0:	80 93 57 39 	sts	0x3957, r24	; 0x803957 <reactStr+0x42>
    29d4:	90 93 58 39 	sts	0x3958, r25	; 0x803958 <reactStr+0x43>
    reactStr[2][number]=type;
    29d8:	81 e0       	ldi	r24, 0x01	; 1
    29da:	90 e0       	ldi	r25, 0x00	; 0
    29dc:	80 93 97 39 	sts	0x3997, r24	; 0x803997 <reactStr+0x82>
    29e0:	90 93 98 39 	sts	0x3998, r25	; 0x803998 <reactStr+0x83>
                }

                //The candidate is found! Let's check if the action is legit
                if (canDo) {
                    if ((data[0] == 'e') && ((actObj1.byteField[ACTION_MASK]&ENTER)==0)) {
                        SetResponse(elements++, A_CANTENTER, L_CANTENTER, TEASER);
    29e4:	72 e0       	ldi	r23, 0x02	; 2
    29e6:	77 2e       	mov	r7, r23
    29e8:	1e c7       	rjmp	.+3644   	; 0x3826 <ProcessInput+0xfe0>
                    } else if ((data[0] == 'o') && ((actObj1.byteField[ACTION_MASK]&OPEN)==0)) {
    29ea:	8f 36       	cpi	r24, 0x6F	; 111
    29ec:	39 f4       	brne	.+14     	; 0x29fc <ProcessInput+0x1b6>
    29ee:	80 91 dc 38 	lds	r24, 0x38DC	; 0x8038dc <actObj1.3994+0x8>
    29f2:	81 fd       	sbrc	r24, 1
    29f4:	03 c0       	rjmp	.+6      	; 0x29fc <ProcessInput+0x1b6>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    29f6:	84 e8       	ldi	r24, 0x84	; 132
    29f8:	99 e7       	ldi	r25, 0x79	; 121
    29fa:	f9 c4       	rjmp	.+2546   	; 0x33ee <ProcessInput+0xba8>
                        SetResponse(elements++, A_CANTENTER, L_CANTENTER, TEASER);
                    } else if ((data[0] == 'o') && ((actObj1.byteField[ACTION_MASK]&OPEN)==0)) {
                        SetResponse(elements++, A_CANTOPEN, L_CANTOPEN, TEASER);
                    
                    //Action legit, permission granted?
                    } else if (CheckState(actObj1.byteField[OPEN_ACL])) {
    29fc:	80 91 da 38 	lds	r24, 0x38DA	; 0x8038da <actObj1.3994+0x6>
    2a00:	0e 94 bf 0a 	call	0x157e	; 0x157e <CheckState>
    2a04:	e0 91 29 38 	lds	r30, 0x3829	; 0x803829 <currDepth>
    2a08:	88 23       	and	r24, r24
    2a0a:	09 f4       	brne	.+2      	; 0x2a0e <ProcessInput+0x1c8>
    2a0c:	49 c0       	rjmp	.+146    	; 0x2aa0 <ProcessInput+0x25a>
                            
                        //Yes! Check if we must move forward or backwards.
                        if (route[currDepth+1]) ++currDepth; else --currDepth;
    2a0e:	ae 2f       	mov	r26, r30
    2a10:	b0 e0       	ldi	r27, 0x00	; 0
    2a12:	aa 0f       	add	r26, r26
    2a14:	bb 1f       	adc	r27, r27
    2a16:	a9 52       	subi	r26, 0x29	; 41
    2a18:	b6 4c       	sbci	r27, 0xC6	; 198
    2a1a:	8d 91       	ld	r24, X+
    2a1c:	9c 91       	ld	r25, X
    2a1e:	89 2b       	or	r24, r25
    2a20:	11 f0       	breq	.+4      	; 0x2a26 <ProcessInput+0x1e0>
    2a22:	ef 5f       	subi	r30, 0xFF	; 255
    2a24:	01 c0       	rjmp	.+2      	; 0x2a28 <ProcessInput+0x1e2>
    2a26:	e1 50       	subi	r30, 0x01	; 1
    2a28:	e0 93 29 38 	sts	0x3829, r30	; 0x803829 <currDepth>
                        PopulateObject(route[currDepth], &currObj);
    2a2c:	e0 91 29 38 	lds	r30, 0x3829	; 0x803829 <currDepth>
    2a30:	f0 e0       	ldi	r31, 0x00	; 0
    2a32:	ee 0f       	add	r30, r30
    2a34:	ff 1f       	adc	r31, r31
    2a36:	eb 52       	subi	r30, 0x2B	; 43
    2a38:	f6 4c       	sbci	r31, 0xC6	; 198
    2a3a:	65 e1       	ldi	r22, 0x15	; 21
    2a3c:	7a e3       	ldi	r23, 0x3A	; 58
    2a3e:	80 81       	ld	r24, Z
    2a40:	91 81       	ldd	r25, Z+1	; 0x01
    2a42:	54 da       	rcall	.-2904   	; 0x1eec <PopulateObject>
                        SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
    2a44:	80 91 31 3a 	lds	r24, 0x3A31	; 0x803a31 <currObj+0x1c>
    2a48:	90 91 32 3a 	lds	r25, 0x3A32	; 0x803a32 <currObj+0x1d>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2a4c:	20 91 23 3a 	lds	r18, 0x3A23	; 0x803a23 <currObj+0xe>
    2a50:	30 91 24 3a 	lds	r19, 0x3A24	; 0x803a24 <currObj+0xf>
    2a54:	20 93 17 39 	sts	0x3917, r18	; 0x803917 <reactStr+0x2>
    2a58:	30 93 18 39 	sts	0x3918, r19	; 0x803918 <reactStr+0x3>
    reactStr[1][number]=length;
    2a5c:	80 93 57 39 	sts	0x3957, r24	; 0x803957 <reactStr+0x42>
    2a60:	90 93 58 39 	sts	0x3958, r25	; 0x803958 <reactStr+0x43>
    reactStr[2][number]=type;
    2a64:	10 92 97 39 	sts	0x3997, r1	; 0x803997 <reactStr+0x82>
    2a68:	10 92 98 39 	sts	0x3998, r1	; 0x803998 <reactStr+0x83>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2a6c:	8b e5       	ldi	r24, 0x5B	; 91
    2a6e:	9a e7       	ldi	r25, 0x7A	; 122
    2a70:	80 93 19 39 	sts	0x3919, r24	; 0x803919 <reactStr+0x4>
    2a74:	90 93 1a 39 	sts	0x391A, r25	; 0x80391a <reactStr+0x5>
    reactStr[1][number]=length;
    2a78:	82 e0       	ldi	r24, 0x02	; 2
    2a7a:	90 e0       	ldi	r25, 0x00	; 0
    2a7c:	80 93 59 39 	sts	0x3959, r24	; 0x803959 <reactStr+0x44>
    2a80:	90 93 5a 39 	sts	0x395A, r25	; 0x80395a <reactStr+0x45>
    reactStr[2][number]=type;
    2a84:	81 e0       	ldi	r24, 0x01	; 1
    2a86:	90 e0       	ldi	r25, 0x00	; 0
    2a88:	80 93 99 39 	sts	0x3999, r24	; 0x803999 <reactStr+0x84>
    2a8c:	90 93 9a 39 	sts	0x399A, r25	; 0x80399a <reactStr+0x85>
                        //Yes! Check if we must move forward or backwards.
                        if (route[currDepth+1]) ++currDepth; else --currDepth;
                        PopulateObject(route[currDepth], &currObj);
                        SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
                        SetResponse(elements++, A_LF, 2, TEASER);
                        effect = currObj.byteField[EFFECTS];
    2a90:	80 91 19 3a 	lds	r24, 0x3A19	; 0x803a19 <currObj+0x4>
    2a94:	90 e0       	ldi	r25, 0x00	; 0
    2a96:	80 93 36 38 	sts	0x3836, r24	; 0x803836 <effect>
    2a9a:	90 93 37 38 	sts	0x3837, r25	; 0x803837 <effect+0x1>
    2a9e:	8d c4       	rjmp	.+2330   	; 0x33ba <ProcessInput+0xb74>
                                                  
                    //Not granted!
                    } else {
                        route[currDepth+1] = 0;
    2aa0:	f0 e0       	ldi	r31, 0x00	; 0
    2aa2:	ee 0f       	add	r30, r30
    2aa4:	ff 1f       	adc	r31, r31
    2aa6:	e9 52       	subi	r30, 0x29	; 41
    2aa8:	f6 4c       	sbci	r31, 0xC6	; 198
    2aaa:	10 82       	st	Z, r1
    2aac:	11 82       	std	Z+1, r1	; 0x01
                        SetResponse(elements++, actObj1.addrStr[OPEN_ACL_MSG], actObj1.lenStr[OPEN_ACL_MSG], GAME);
    2aae:	80 91 f6 38 	lds	r24, 0x38F6	; 0x8038f6 <actObj1.3994+0x22>
    2ab2:	90 91 f7 38 	lds	r25, 0x38F7	; 0x8038f7 <actObj1.3994+0x23>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2ab6:	20 91 e8 38 	lds	r18, 0x38E8	; 0x8038e8 <actObj1.3994+0x14>
    2aba:	30 91 e9 38 	lds	r19, 0x38E9	; 0x8038e9 <actObj1.3994+0x15>
    2abe:	20 93 17 39 	sts	0x3917, r18	; 0x803917 <reactStr+0x2>
    2ac2:	30 93 18 39 	sts	0x3918, r19	; 0x803918 <reactStr+0x3>
    reactStr[1][number]=length;
    2ac6:	80 93 57 39 	sts	0x3957, r24	; 0x803957 <reactStr+0x42>
    2aca:	90 93 58 39 	sts	0x3958, r25	; 0x803958 <reactStr+0x43>
    reactStr[2][number]=type;
    2ace:	10 92 97 39 	sts	0x3997, r1	; 0x803997 <reactStr+0x82>
    2ad2:	10 92 98 39 	sts	0x3998, r1	; 0x803998 <reactStr+0x83>
                                                  
                    //Not granted!
                    } else {
                        route[currDepth+1] = 0;
                        SetResponse(elements++, actObj1.addrStr[OPEN_ACL_MSG], actObj1.lenStr[OPEN_ACL_MSG], GAME);
                        effect = actObj1.effect[0];              
    2ad6:	80 91 fc 38 	lds	r24, 0x38FC	; 0x8038fc <actObj1.3994+0x28>
    2ada:	56 c5       	rjmp	.+2732   	; 0x3588 <ProcessInput+0xd42>
                    SetResponse(elements++, A_DONTSEE, L_DONTSEE, TEASER);                
                }
            }

        //Look around or at objects
        } else if (data[0] == 'l') {
    2adc:	8c 36       	cpi	r24, 0x6C	; 108
    2ade:	09 f0       	breq	.+2      	; 0x2ae2 <ProcessInput+0x29c>
    2ae0:	57 c1       	rjmp	.+686    	; 0x2d90 <ProcessInput+0x54a>
    2ae2:	e0 91 29 38 	lds	r30, 0x3829	; 0x803829 <currDepth>
            if (inputLen == 1) {
    2ae6:	b1 e0       	ldi	r27, 0x01	; 1
    2ae8:	fb 12       	cpse	r15, r27
    2aea:	f6 c0       	rjmp	.+492    	; 0x2cd8 <ProcessInput+0x492>

                //Show info about this area first
                SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
    2aec:	80 91 31 3a 	lds	r24, 0x3A31	; 0x803a31 <currObj+0x1c>
    2af0:	90 91 32 3a 	lds	r25, 0x3A32	; 0x803a32 <currObj+0x1d>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2af4:	20 91 23 3a 	lds	r18, 0x3A23	; 0x803a23 <currObj+0xe>
    2af8:	30 91 24 3a 	lds	r19, 0x3A24	; 0x803a24 <currObj+0xf>
    2afc:	20 93 17 39 	sts	0x3917, r18	; 0x803917 <reactStr+0x2>
    2b00:	30 93 18 39 	sts	0x3918, r19	; 0x803918 <reactStr+0x3>
    reactStr[1][number]=length;
    2b04:	80 93 57 39 	sts	0x3957, r24	; 0x803957 <reactStr+0x42>
    2b08:	90 93 58 39 	sts	0x3958, r25	; 0x803958 <reactStr+0x43>
    reactStr[2][number]=type;
    2b0c:	10 92 97 39 	sts	0x3997, r1	; 0x803997 <reactStr+0x82>
    2b10:	10 92 98 39 	sts	0x3998, r1	; 0x803998 <reactStr+0x83>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2b14:	8b e5       	ldi	r24, 0x5B	; 91
    2b16:	9a e7       	ldi	r25, 0x7A	; 122
    2b18:	80 93 19 39 	sts	0x3919, r24	; 0x803919 <reactStr+0x4>
    2b1c:	90 93 1a 39 	sts	0x391A, r25	; 0x80391a <reactStr+0x5>
    reactStr[1][number]=length;
    2b20:	82 e0       	ldi	r24, 0x02	; 2
    2b22:	90 e0       	ldi	r25, 0x00	; 0
    2b24:	80 93 59 39 	sts	0x3959, r24	; 0x803959 <reactStr+0x44>
    2b28:	90 93 5a 39 	sts	0x395A, r25	; 0x80395a <reactStr+0x45>
    reactStr[2][number]=type;
    2b2c:	81 e0       	ldi	r24, 0x01	; 1
    2b2e:	90 e0       	ldi	r25, 0x00	; 0
    2b30:	80 93 99 39 	sts	0x3999, r24	; 0x803999 <reactStr+0x84>
    2b34:	90 93 9a 39 	sts	0x399A, r25	; 0x80399a <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2b38:	2d ee       	ldi	r18, 0xED	; 237
    2b3a:	39 e7       	ldi	r19, 0x79	; 121
    2b3c:	20 93 1b 39 	sts	0x391B, r18	; 0x80391b <reactStr+0x6>
    2b40:	30 93 1c 39 	sts	0x391C, r19	; 0x80391c <reactStr+0x7>
    reactStr[1][number]=length;
    2b44:	25 e1       	ldi	r18, 0x15	; 21
    2b46:	30 e0       	ldi	r19, 0x00	; 0
    2b48:	20 93 5b 39 	sts	0x395B, r18	; 0x80395b <reactStr+0x46>
    2b4c:	30 93 5c 39 	sts	0x395C, r19	; 0x80395c <reactStr+0x47>
    reactStr[2][number]=type;
    2b50:	80 93 9b 39 	sts	0x399B, r24	; 0x80399b <reactStr+0x86>
    2b54:	90 93 9c 39 	sts	0x399C, r25	; 0x80399c <reactStr+0x87>
                SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
                SetResponse(elements++, A_LF, 2, TEASER);
                SetResponse(elements++, A_LOOK, L_LOOK, TEASER);

                //Check the visible children first
                route[currDepth+1] = 0;
    2b58:	f0 e0       	ldi	r31, 0x00	; 0
    2b5a:	ee 0f       	add	r30, r30
    2b5c:	ff 1f       	adc	r31, r31
    2b5e:	e9 52       	subi	r30, 0x29	; 41
    2b60:	f6 4c       	sbci	r31, 0xC6	; 198
    2b62:	10 82       	st	Z, r1
    2b64:	11 82       	std	Z+1, r1	; 0x01
            if (inputLen == 1) {

                //Show info about this area first
                SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
                SetResponse(elements++, A_LF, 2, TEASER);
                SetResponse(elements++, A_LOOK, L_LOOK, TEASER);
    2b66:	84 e0       	ldi	r24, 0x04	; 4
    2b68:	68 2e       	mov	r6, r24
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2b6a:	99 e5       	ldi	r25, 0x59	; 89
    2b6c:	c9 2e       	mov	r12, r25
    2b6e:	9a e7       	ldi	r25, 0x7A	; 122
    2b70:	d9 2e       	mov	r13, r25
    reactStr[1][number]=length;
    2b72:	22 e0       	ldi	r18, 0x02	; 2
    2b74:	a2 2e       	mov	r10, r18
    2b76:	b1 2c       	mov	r11, r1
    reactStr[2][number]=type;
    2b78:	88 24       	eor	r8, r8
    2b7a:	83 94       	inc	r8
    2b7c:	91 2c       	mov	r9, r1
                SetResponse(elements++, A_LOOK, L_LOOK, TEASER);

                //Check the visible children first
                route[currDepth+1] = 0;
                do{
                    route[currDepth+1] = FindChild(route[currDepth], 0, route[currDepth+1]);
    2b7e:	80 91 29 38 	lds	r24, 0x3829	; 0x803829 <currDepth>
    2b82:	90 e0       	ldi	r25, 0x00	; 0
    2b84:	9c 01       	movw	r18, r24
    2b86:	22 0f       	add	r18, r18
    2b88:	33 1f       	adc	r19, r19
    2b8a:	f9 01       	movw	r30, r18
    2b8c:	e9 52       	subi	r30, 0x29	; 41
    2b8e:	f6 4c       	sbci	r31, 0xC6	; 198
    2b90:	7f 01       	movw	r14, r30
    2b92:	40 81       	ld	r20, Z
    2b94:	51 81       	ldd	r21, Z+1	; 0x01
    2b96:	f9 01       	movw	r30, r18
    2b98:	eb 52       	subi	r30, 0x2B	; 43
    2b9a:	f6 4c       	sbci	r31, 0xC6	; 198
    2b9c:	60 e0       	ldi	r22, 0x00	; 0
    2b9e:	80 81       	ld	r24, Z
    2ba0:	91 81       	ldd	r25, Z+1	; 0x01
    2ba2:	6f da       	rcall	.-2850   	; 0x2082 <FindChild>
    2ba4:	d7 01       	movw	r26, r14
    2ba6:	8d 93       	st	X+, r24
    2ba8:	9c 93       	st	X, r25
                    if (route[currDepth+1]) {
    2baa:	e0 91 29 38 	lds	r30, 0x3829	; 0x803829 <currDepth>
    2bae:	f0 e0       	ldi	r31, 0x00	; 0
    2bb0:	ee 0f       	add	r30, r30
    2bb2:	ff 1f       	adc	r31, r31
    2bb4:	e9 52       	subi	r30, 0x29	; 41
    2bb6:	f6 4c       	sbci	r31, 0xC6	; 198
    2bb8:	80 81       	ld	r24, Z
    2bba:	91 81       	ldd	r25, Z+1	; 0x01
    2bbc:	00 97       	sbiw	r24, 0x00	; 0
    2bbe:	09 f4       	brne	.+2      	; 0x2bc2 <ProcessInput+0x37c>
    2bc0:	4a c0       	rjmp	.+148    	; 0x2c56 <ProcessInput+0x410>
                        if ((route[currDepth+1] != inventory[0])&&(route[currDepth+1] != inventory[1])) {
    2bc2:	20 91 3a 38 	lds	r18, 0x383A	; 0x80383a <inventory>
    2bc6:	30 91 3b 38 	lds	r19, 0x383B	; 0x80383b <inventory+0x1>
    2bca:	82 17       	cp	r24, r18
    2bcc:	93 07       	cpc	r25, r19
    2bce:	09 f4       	brne	.+2      	; 0x2bd2 <ProcessInput+0x38c>
    2bd0:	42 c0       	rjmp	.+132    	; 0x2c56 <ProcessInput+0x410>
    2bd2:	20 91 3c 38 	lds	r18, 0x383C	; 0x80383c <inventory+0x2>
    2bd6:	30 91 3d 38 	lds	r19, 0x383D	; 0x80383d <inventory+0x3>
    2bda:	82 17       	cp	r24, r18
    2bdc:	93 07       	cpc	r25, r19
                            PopulateObject(route[currDepth+1], &actObj1);
    2bde:	d9 f1       	breq	.+118    	; 0x2c56 <ProcessInput+0x410>
    2be0:	64 ed       	ldi	r22, 0xD4	; 212
    2be2:	78 e3       	ldi	r23, 0x38	; 56
    2be4:	83 d9       	rcall	.-3322   	; 0x1eec <PopulateObject>
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
    2be6:	80 91 ee 38 	lds	r24, 0x38EE	; 0x8038ee <actObj1.3994+0x1a>
    2bea:	90 91 ef 38 	lds	r25, 0x38EF	; 0x8038ef <actObj1.3994+0x1b>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2bee:	e6 2d       	mov	r30, r6
    2bf0:	f0 e0       	ldi	r31, 0x00	; 0
    2bf2:	df 01       	movw	r26, r30
    2bf4:	aa 0f       	add	r26, r26
    2bf6:	bb 1f       	adc	r27, r27
    2bf8:	ab 5e       	subi	r26, 0xEB	; 235
    2bfa:	b6 4c       	sbci	r27, 0xC6	; 198
    2bfc:	20 91 e0 38 	lds	r18, 0x38E0	; 0x8038e0 <actObj1.3994+0xc>
    2c00:	30 91 e1 38 	lds	r19, 0x38E1	; 0x8038e1 <actObj1.3994+0xd>
    2c04:	2d 93       	st	X+, r18
    2c06:	3c 93       	st	X, r19
    reactStr[1][number]=length;
    2c08:	df 01       	movw	r26, r30
    2c0a:	aa 0f       	add	r26, r26
    2c0c:	bb 1f       	adc	r27, r27
    2c0e:	ab 5a       	subi	r26, 0xAB	; 171
    2c10:	b6 4c       	sbci	r27, 0xC6	; 198
    2c12:	8d 93       	st	X+, r24
    2c14:	9c 93       	st	X, r25
    reactStr[2][number]=type;
    2c16:	ee 0f       	add	r30, r30
    2c18:	ff 1f       	adc	r31, r31
    2c1a:	eb 56       	subi	r30, 0x6B	; 107
    2c1c:	f6 4c       	sbci	r31, 0xC6	; 198
    2c1e:	10 82       	st	Z, r1
    2c20:	11 82       	std	Z+1, r1	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2c22:	81 e0       	ldi	r24, 0x01	; 1
    2c24:	86 0d       	add	r24, r6
    2c26:	90 e0       	ldi	r25, 0x00	; 0
    2c28:	63 94       	inc	r6
    2c2a:	63 94       	inc	r6
    2c2c:	fc 01       	movw	r30, r24
    2c2e:	ee 0f       	add	r30, r30
    2c30:	ff 1f       	adc	r31, r31
    2c32:	eb 5e       	subi	r30, 0xEB	; 235
    2c34:	f6 4c       	sbci	r31, 0xC6	; 198
    2c36:	c0 82       	st	Z, r12
    2c38:	d1 82       	std	Z+1, r13	; 0x01
    reactStr[1][number]=length;
    2c3a:	fc 01       	movw	r30, r24
    2c3c:	ee 0f       	add	r30, r30
    2c3e:	ff 1f       	adc	r31, r31
    2c40:	eb 5a       	subi	r30, 0xAB	; 171
    2c42:	f6 4c       	sbci	r31, 0xC6	; 198
    2c44:	a0 82       	st	Z, r10
    2c46:	b1 82       	std	Z+1, r11	; 0x01
    reactStr[2][number]=type;
    2c48:	88 0f       	add	r24, r24
    2c4a:	99 1f       	adc	r25, r25
    2c4c:	fc 01       	movw	r30, r24
    2c4e:	eb 56       	subi	r30, 0x6B	; 107
    2c50:	f6 4c       	sbci	r31, 0xC6	; 198
    2c52:	80 82       	st	Z, r8
    2c54:	91 82       	std	Z+1, r9	; 0x01
                            PopulateObject(route[currDepth+1], &actObj1);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
                            SetResponse(elements++, A_COMMA, L_COMMA, TEASER);
                        }
                    }
                }while (route[currDepth+1]);
    2c56:	20 91 29 38 	lds	r18, 0x3829	; 0x803829 <currDepth>
    2c5a:	82 2f       	mov	r24, r18
    2c5c:	90 e0       	ldi	r25, 0x00	; 0
    2c5e:	fc 01       	movw	r30, r24
    2c60:	ee 0f       	add	r30, r30
    2c62:	ff 1f       	adc	r31, r31
    2c64:	e9 52       	subi	r30, 0x29	; 41
    2c66:	f6 4c       	sbci	r31, 0xC6	; 198
    2c68:	40 81       	ld	r20, Z
    2c6a:	51 81       	ldd	r21, Z+1	; 0x01
    2c6c:	45 2b       	or	r20, r21
    2c6e:	09 f0       	breq	.+2      	; 0x2c72 <ProcessInput+0x42c>
    2c70:	86 cf       	rjmp	.-244    	; 0x2b7e <ProcessInput+0x338>

                //Look back if not on level 0
                if (currDepth) {
    2c72:	22 23       	and	r18, r18
                    PopulateObject(route[currDepth-1], &actObj1);
    2c74:	69 f1       	breq	.+90     	; 0x2cd0 <ProcessInput+0x48a>
    2c76:	88 0f       	add	r24, r24
    2c78:	99 1f       	adc	r25, r25
    2c7a:	fc 01       	movw	r30, r24
    2c7c:	ed 52       	subi	r30, 0x2D	; 45
    2c7e:	f6 4c       	sbci	r31, 0xC6	; 198
    2c80:	64 ed       	ldi	r22, 0xD4	; 212
    2c82:	78 e3       	ldi	r23, 0x38	; 56
    2c84:	80 81       	ld	r24, Z
    2c86:	91 81       	ldd	r25, Z+1	; 0x01
    2c88:	31 d9       	rcall	.-3486   	; 0x1eec <PopulateObject>
                    SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
    2c8a:	20 91 ee 38 	lds	r18, 0x38EE	; 0x8038ee <actObj1.3994+0x1a>
    2c8e:	30 91 ef 38 	lds	r19, 0x38EF	; 0x8038ef <actObj1.3994+0x1b>
    2c92:	77 24       	eor	r7, r7
    2c94:	73 94       	inc	r7
    2c96:	76 0c       	add	r7, r6
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2c98:	86 2d       	mov	r24, r6
    2c9a:	90 e0       	ldi	r25, 0x00	; 0
    2c9c:	fc 01       	movw	r30, r24
    2c9e:	ee 0f       	add	r30, r30
    2ca0:	ff 1f       	adc	r31, r31
    2ca2:	eb 5e       	subi	r30, 0xEB	; 235
    2ca4:	f6 4c       	sbci	r31, 0xC6	; 198
    2ca6:	40 91 e0 38 	lds	r20, 0x38E0	; 0x8038e0 <actObj1.3994+0xc>
    2caa:	50 91 e1 38 	lds	r21, 0x38E1	; 0x8038e1 <actObj1.3994+0xd>
    2cae:	40 83       	st	Z, r20
    2cb0:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    2cb2:	fc 01       	movw	r30, r24
    2cb4:	ee 0f       	add	r30, r30
    2cb6:	ff 1f       	adc	r31, r31
    2cb8:	eb 5a       	subi	r30, 0xAB	; 171
    2cba:	f6 4c       	sbci	r31, 0xC6	; 198
    2cbc:	20 83       	st	Z, r18
    2cbe:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    2cc0:	88 0f       	add	r24, r24
    2cc2:	99 1f       	adc	r25, r25
    2cc4:	fc 01       	movw	r30, r24
    2cc6:	eb 56       	subi	r30, 0x6B	; 107
    2cc8:	f6 4c       	sbci	r31, 0xC6	; 198
    2cca:	10 82       	st	Z, r1
    2ccc:	11 82       	std	Z+1, r1	; 0x01
    2cce:	ab c5       	rjmp	.+2902   	; 0x3826 <ProcessInput+0xfe0>

                //Look back if not on level 0
                if (currDepth) {
                    PopulateObject(route[currDepth-1], &actObj1);
                    SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
                } else elements-=1;
    2cd0:	77 24       	eor	r7, r7
    2cd2:	7a 94       	dec	r7
    2cd4:	76 0c       	add	r7, r6
    2cd6:	a7 c5       	rjmp	.+2894   	; 0x3826 <ProcessInput+0xfe0>

            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
    2cd8:	ee 2e       	mov	r14, r30
    2cda:	f1 2c       	mov	r15, r1
    2cdc:	f7 01       	movw	r30, r14
    2cde:	ee 0f       	add	r30, r30
    2ce0:	ff 1f       	adc	r31, r31
    2ce2:	eb 52       	subi	r30, 0x2B	; 43
    2ce4:	f6 4c       	sbci	r31, 0xC6	; 198
    2ce6:	40 e0       	ldi	r20, 0x00	; 0
    2ce8:	50 e0       	ldi	r21, 0x00	; 0
    2cea:	d8 01       	movw	r26, r16
    2cec:	11 96       	adiw	r26, 0x01	; 1
    2cee:	6c 91       	ld	r22, X
    2cf0:	80 81       	ld	r24, Z
    2cf2:	91 81       	ldd	r25, Z+1	; 0x01
    2cf4:	c6 d9       	rcall	.-3188   	; 0x2082 <FindChild>
    2cf6:	f7 01       	movw	r30, r14
    2cf8:	ee 0f       	add	r30, r30
    2cfa:	ff 1f       	adc	r31, r31
    2cfc:	e9 52       	subi	r30, 0x29	; 41
    2cfe:	f6 4c       	sbci	r31, 0xC6	; 198
    2d00:	80 83       	st	Z, r24
    2d02:	91 83       	std	Z+1, r25	; 0x01
                if (route[currDepth+1]) {
    2d04:	90 91 29 38 	lds	r25, 0x3829	; 0x803829 <currDepth>
    2d08:	29 2f       	mov	r18, r25
    2d0a:	30 e0       	ldi	r19, 0x00	; 0
    2d0c:	f9 01       	movw	r30, r18
    2d0e:	ee 0f       	add	r30, r30
    2d10:	ff 1f       	adc	r31, r31
    2d12:	e9 52       	subi	r30, 0x29	; 41
    2d14:	f6 4c       	sbci	r31, 0xC6	; 198
    2d16:	40 81       	ld	r20, Z
    2d18:	51 81       	ldd	r21, Z+1	; 0x01
    2d1a:	41 15       	cp	r20, r1
    2d1c:	51 05       	cpc	r21, r1
    2d1e:	21 f0       	breq	.+8      	; 0x2d28 <ProcessInput+0x4e2>
                    PopulateObject(route[currDepth+1], &actObj1);
    2d20:	64 ed       	ldi	r22, 0xD4	; 212
    2d22:	78 e3       	ldi	r23, 0x38	; 56
    2d24:	ca 01       	movw	r24, r20
    2d26:	1e c0       	rjmp	.+60     	; 0x2d64 <ProcessInput+0x51e>
//TODO: CHECKSTATE -> A_CANTLOOK item
                    SetResponse(elements++, actObj1.addrStr[DESC], actObj1.lenStr[DESC],GAME);   
                } else if (currDepth) {
    2d28:	99 23       	and	r25, r25
    2d2a:	09 f4       	brne	.+2      	; 0x2d2e <ProcessInput+0x4e8>
                    if (CheckLetter(route[currDepth-1], data[1])) {
    2d2c:	ae c5       	rjmp	.+2908   	; 0x388a <ProcessInput+0x1044>
    2d2e:	22 0f       	add	r18, r18
    2d30:	33 1f       	adc	r19, r19
    2d32:	f9 01       	movw	r30, r18
    2d34:	ed 52       	subi	r30, 0x2D	; 45
    2d36:	f6 4c       	sbci	r31, 0xC6	; 198
    2d38:	d8 01       	movw	r26, r16
    2d3a:	11 96       	adiw	r26, 0x01	; 1
    2d3c:	6c 91       	ld	r22, X
    2d3e:	80 81       	ld	r24, Z
    2d40:	91 81       	ldd	r25, Z+1	; 0x01
    2d42:	4b d9       	rcall	.-3434   	; 0x1fda <CheckLetter>
    2d44:	81 11       	cpse	r24, r1
    2d46:	03 c0       	rjmp	.+6      	; 0x2d4e <ProcessInput+0x508>
}

//The game logic!
uint8_t ProcessInput(uint8_t *data){
    static object_model_t actObj1, actObj2;
    uint8_t elements = 1;
    2d48:	77 24       	eor	r7, r7
    2d4a:	73 94       	inc	r7
                    PopulateObject(route[currDepth+1], &actObj1);
//TODO: CHECKSTATE -> A_CANTLOOK item
                    SetResponse(elements++, actObj1.addrStr[DESC], actObj1.lenStr[DESC],GAME);   
                } else if (currDepth) {
                    if (CheckLetter(route[currDepth-1], data[1])) {
                        PopulateObject(route[currDepth-1], &actObj1);
    2d4c:	6c c5       	rjmp	.+2776   	; 0x3826 <ProcessInput+0xfe0>
    2d4e:	e0 91 29 38 	lds	r30, 0x3829	; 0x803829 <currDepth>
    2d52:	f0 e0       	ldi	r31, 0x00	; 0
    2d54:	ee 0f       	add	r30, r30
    2d56:	ff 1f       	adc	r31, r31
    2d58:	ed 52       	subi	r30, 0x2D	; 45
    2d5a:	f6 4c       	sbci	r31, 0xC6	; 198
    2d5c:	64 ed       	ldi	r22, 0xD4	; 212
    2d5e:	78 e3       	ldi	r23, 0x38	; 56
    2d60:	80 81       	ld	r24, Z
    2d62:	91 81       	ldd	r25, Z+1	; 0x01
    2d64:	c3 d8       	rcall	.-3706   	; 0x1eec <PopulateObject>
                        SetResponse(elements++, actObj1.addrStr[DESC], actObj1.lenStr[DESC],GAME);
    2d66:	80 91 f0 38 	lds	r24, 0x38F0	; 0x8038f0 <actObj1.3994+0x1c>
    2d6a:	90 91 f1 38 	lds	r25, 0x38F1	; 0x8038f1 <actObj1.3994+0x1d>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2d6e:	20 91 e2 38 	lds	r18, 0x38E2	; 0x8038e2 <actObj1.3994+0xe>
    2d72:	30 91 e3 38 	lds	r19, 0x38E3	; 0x8038e3 <actObj1.3994+0xf>
    2d76:	20 93 17 39 	sts	0x3917, r18	; 0x803917 <reactStr+0x2>
    2d7a:	30 93 18 39 	sts	0x3918, r19	; 0x803918 <reactStr+0x3>
    reactStr[1][number]=length;
    2d7e:	80 93 57 39 	sts	0x3957, r24	; 0x803957 <reactStr+0x42>
    2d82:	90 93 58 39 	sts	0x3958, r25	; 0x803958 <reactStr+0x43>
    reactStr[2][number]=type;
    2d86:	10 92 97 39 	sts	0x3997, r1	; 0x803997 <reactStr+0x82>
    2d8a:	10 92 98 39 	sts	0x3998, r1	; 0x803998 <reactStr+0x83>
    2d8e:	2a ce       	rjmp	.-940    	; 0x29e4 <ProcessInput+0x19e>
                    SetResponse(elements++, A_DONTSEE, L_DONTSEE, TEASER);
                }
            }
        
        //Pick up an object
        } else if (data[0] == 'p') {
    2d90:	80 37       	cpi	r24, 0x70	; 112
    2d92:	09 f0       	breq	.+2      	; 0x2d96 <ProcessInput+0x550>
    2d94:	96 c0       	rjmp	.+300    	; 0x2ec2 <ProcessInput+0x67c>
            if (inventory[0]&&inventory[1]) {
    2d96:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <inventory>
    2d9a:	90 91 3b 38 	lds	r25, 0x383B	; 0x80383b <inventory+0x1>
    2d9e:	89 2b       	or	r24, r25
    2da0:	79 f0       	breq	.+30     	; 0x2dc0 <ProcessInput+0x57a>
    2da2:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <inventory+0x2>
    2da6:	90 91 3d 38 	lds	r25, 0x383D	; 0x80383d <inventory+0x3>
    2daa:	89 2b       	or	r24, r25
    2dac:	49 f0       	breq	.+18     	; 0x2dc0 <ProcessInput+0x57a>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2dae:	84 e4       	ldi	r24, 0x44	; 68
    2db0:	98 e7       	ldi	r25, 0x78	; 120
    2db2:	80 93 17 39 	sts	0x3917, r24	; 0x803917 <reactStr+0x2>
    2db6:	90 93 18 39 	sts	0x3918, r25	; 0x803918 <reactStr+0x3>
    reactStr[1][number]=length;
    2dba:	89 e5       	ldi	r24, 0x59	; 89
    2dbc:	90 e0       	ldi	r25, 0x00	; 0
    2dbe:	08 ce       	rjmp	.-1008   	; 0x29d0 <ProcessInput+0x18a>
        
        //Pick up an object
        } else if (data[0] == 'p') {
            if (inventory[0]&&inventory[1]) {
                SetResponse(elements++, A_CARRYTWO, L_CARRYTWO, TEASER);
            } else if (inputLen != 2) {
    2dc0:	b2 e0       	ldi	r27, 0x02	; 2
    2dc2:	fb 12       	cpse	r15, r27
    2dc4:	70 cd       	rjmp	.-1312   	; 0x28a6 <ProcessInput+0x60>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
    2dc6:	e0 90 29 38 	lds	r14, 0x3829	; 0x803829 <currDepth>
    2dca:	f1 2c       	mov	r15, r1
    2dcc:	f7 01       	movw	r30, r14
    2dce:	ee 0f       	add	r30, r30
    2dd0:	ff 1f       	adc	r31, r31
    2dd2:	eb 52       	subi	r30, 0x2B	; 43
    2dd4:	f6 4c       	sbci	r31, 0xC6	; 198
    2dd6:	40 e0       	ldi	r20, 0x00	; 0
    2dd8:	50 e0       	ldi	r21, 0x00	; 0
    2dda:	d8 01       	movw	r26, r16
    2ddc:	11 96       	adiw	r26, 0x01	; 1
    2dde:	6c 91       	ld	r22, X
    2de0:	80 81       	ld	r24, Z
    2de2:	91 81       	ldd	r25, Z+1	; 0x01
    2de4:	4e d9       	rcall	.-3428   	; 0x2082 <FindChild>
    2de6:	f7 01       	movw	r30, r14
    2de8:	ee 0f       	add	r30, r30
    2dea:	ff 1f       	adc	r31, r31
    2dec:	e9 52       	subi	r30, 0x29	; 41
    2dee:	f6 4c       	sbci	r31, 0xC6	; 198
    2df0:	80 83       	st	Z, r24
    2df2:	91 83       	std	Z+1, r25	; 0x01
                if (route[currDepth+1]) {
    2df4:	20 91 29 38 	lds	r18, 0x3829	; 0x803829 <currDepth>
    2df8:	30 e0       	ldi	r19, 0x00	; 0
    2dfa:	2f 5f       	subi	r18, 0xFF	; 255
    2dfc:	3f 4f       	sbci	r19, 0xFF	; 255
    2dfe:	22 0f       	add	r18, r18
    2e00:	33 1f       	adc	r19, r19
    2e02:	f9 01       	movw	r30, r18
    2e04:	eb 52       	subi	r30, 0x2B	; 43
    2e06:	f6 4c       	sbci	r31, 0xC6	; 198
    2e08:	80 81       	ld	r24, Z
    2e0a:	91 81       	ldd	r25, Z+1	; 0x01
    2e0c:	00 97       	sbiw	r24, 0x00	; 0
    2e0e:	09 f4       	brne	.+2      	; 0x2e12 <ProcessInput+0x5cc>
    2e10:	ca c3       	rjmp	.+1940   	; 0x35a6 <ProcessInput+0xd60>
                    if ((route[currDepth+1] == inventory[0])||(route[currDepth+1] == inventory[1])) {
    2e12:	40 91 3a 38 	lds	r20, 0x383A	; 0x80383a <inventory>
    2e16:	50 91 3b 38 	lds	r21, 0x383B	; 0x80383b <inventory+0x1>
    2e1a:	84 17       	cp	r24, r20
    2e1c:	95 07       	cpc	r25, r21
    2e1e:	39 f0       	breq	.+14     	; 0x2e2e <ProcessInput+0x5e8>
    2e20:	40 91 3c 38 	lds	r20, 0x383C	; 0x80383c <inventory+0x2>
    2e24:	50 91 3d 38 	lds	r21, 0x383D	; 0x80383d <inventory+0x3>
    2e28:	84 17       	cp	r24, r20
    2e2a:	95 07       	cpc	r25, r21
    2e2c:	c1 f4       	brne	.+48     	; 0x2e5e <ProcessInput+0x618>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2e2e:	8f e1       	ldi	r24, 0x1F	; 31
    2e30:	98 e7       	ldi	r25, 0x78	; 120
    2e32:	80 93 17 39 	sts	0x3917, r24	; 0x803917 <reactStr+0x2>
    2e36:	90 93 18 39 	sts	0x3918, r25	; 0x803918 <reactStr+0x3>
    reactStr[1][number]=length;
    2e3a:	85 e2       	ldi	r24, 0x25	; 37
    2e3c:	90 e0       	ldi	r25, 0x00	; 0
    2e3e:	80 93 57 39 	sts	0x3957, r24	; 0x803957 <reactStr+0x42>
    2e42:	90 93 58 39 	sts	0x3958, r25	; 0x803958 <reactStr+0x43>
    reactStr[2][number]=type;
    2e46:	81 e0       	ldi	r24, 0x01	; 1
    2e48:	90 e0       	ldi	r25, 0x00	; 0
    2e4a:	80 93 97 39 	sts	0x3997, r24	; 0x803997 <reactStr+0x82>
    2e4e:	90 93 98 39 	sts	0x3998, r25	; 0x803998 <reactStr+0x83>
            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
                if (route[currDepth+1]) {
                    if ((route[currDepth+1] == inventory[0])||(route[currDepth+1] == inventory[1])) {
                        SetResponse(elements++, A_ALREADYCARRYING, L_ALREADYCARRYING, TEASER);
                        route[currDepth+1] = 0;
    2e52:	f9 01       	movw	r30, r18
    2e54:	eb 52       	subi	r30, 0x2B	; 43
    2e56:	f6 4c       	sbci	r31, 0xC6	; 198
    2e58:	10 82       	st	Z, r1
    2e5a:	11 82       	std	Z+1, r1	; 0x01
                    } else {
                        //Put item in the inventory if possible
                        PopulateObject(route[currDepth+1], &actObj1);  
    2e5c:	c3 cd       	rjmp	.-1146   	; 0x29e4 <ProcessInput+0x19e>
    2e5e:	64 ed       	ldi	r22, 0xD4	; 212
    2e60:	78 e3       	ldi	r23, 0x38	; 56
    2e62:	44 d8       	rcall	.-3960   	; 0x1eec <PopulateObject>
                        if (CheckState(actObj1.byteField[ACTION_ACL])) {
    2e64:	80 91 db 38 	lds	r24, 0x38DB	; 0x8038db <actObj1.3994+0x7>
    2e68:	0e 94 bf 0a 	call	0x157e	; 0x157e <CheckState>
    2e6c:	88 23       	and	r24, r24
    2e6e:	09 f4       	brne	.+2      	; 0x2e72 <ProcessInput+0x62c>
    2e70:	75 c3       	rjmp	.+1770   	; 0x355c <ProcessInput+0xd16>
                            if (actObj1.byteField[ITEM_NR]) {
    2e72:	80 91 df 38 	lds	r24, 0x38DF	; 0x8038df <actObj1.3994+0xb>
    2e76:	88 23       	and	r24, r24
    2e78:	09 f4       	brne	.+2      	; 0x2e7c <ProcessInput+0x636>
    2e7a:	15 cd       	rjmp	.-1494   	; 0x28a6 <ProcessInput+0x60>
                                if (inventory[0]) {
    2e7c:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <inventory>
    2e80:	90 91 3b 38 	lds	r25, 0x383B	; 0x80383b <inventory+0x1>
    2e84:	e0 91 29 38 	lds	r30, 0x3829	; 0x803829 <currDepth>
                                    inventory[1] = route[currDepth+1];
    2e88:	f0 e0       	ldi	r31, 0x00	; 0
    2e8a:	ee 0f       	add	r30, r30
    2e8c:	ff 1f       	adc	r31, r31
    2e8e:	e9 52       	subi	r30, 0x29	; 41
    2e90:	f6 4c       	sbci	r31, 0xC6	; 198
                    } else {
                        //Put item in the inventory if possible
                        PopulateObject(route[currDepth+1], &actObj1);  
                        if (CheckState(actObj1.byteField[ACTION_ACL])) {
                            if (actObj1.byteField[ITEM_NR]) {
                                if (inventory[0]) {
    2e92:	89 2b       	or	r24, r25
    2e94:	39 f0       	breq	.+14     	; 0x2ea4 <ProcessInput+0x65e>
                                    inventory[1] = route[currDepth+1];
    2e96:	80 81       	ld	r24, Z
    2e98:	91 81       	ldd	r25, Z+1	; 0x01
    2e9a:	80 93 3c 38 	sts	0x383C, r24	; 0x80383c <inventory+0x2>
    2e9e:	90 93 3d 38 	sts	0x383D, r25	; 0x80383d <inventory+0x3>
    2ea2:	06 c0       	rjmp	.+12     	; 0x2eb0 <ProcessInput+0x66a>
                                } else {
                                    inventory[0] = route[currDepth+1];
    2ea4:	80 81       	ld	r24, Z
    2ea6:	91 81       	ldd	r25, Z+1	; 0x01
    2ea8:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <inventory>
    2eac:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <inventory+0x1>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2eb0:	89 e0       	ldi	r24, 0x09	; 9
    2eb2:	98 e7       	ldi	r25, 0x78	; 120
    2eb4:	80 93 17 39 	sts	0x3917, r24	; 0x803917 <reactStr+0x2>
    2eb8:	90 93 18 39 	sts	0x3918, r25	; 0x803918 <reactStr+0x3>
    reactStr[1][number]=length;
    2ebc:	86 e1       	ldi	r24, 0x16	; 22
    2ebe:	90 e0       	ldi	r25, 0x00	; 0
    2ec0:	5e c2       	rjmp	.+1212   	; 0x337e <ProcessInput+0xb38>
                } else SetResponse(elements++, A_NOSUCHOBJECT, L_NOSUCHOBJECT, TEASER);
            }
        } else

        //Drop item if in inventory
        if (data[0] == 'd') {
    2ec2:	84 36       	cpi	r24, 0x64	; 100
    2ec4:	d9 f4       	brne	.+54     	; 0x2efc <ProcessInput+0x6b6>
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
    2ec6:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <inventory>
    2eca:	90 91 3b 38 	lds	r25, 0x383B	; 0x80383b <inventory+0x1>
    2ece:	00 97       	sbiw	r24, 0x00	; 0
    2ed0:	09 f0       	breq	.+2      	; 0x2ed4 <ProcessInput+0x68e>
    2ed2:	de c4       	rjmp	.+2492   	; 0x3890 <ProcessInput+0x104a>
    2ed4:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <inventory+0x2>
    2ed8:	90 91 3d 38 	lds	r25, 0x383D	; 0x80383d <inventory+0x3>
    2edc:	89 2b       	or	r24, r25
    2ede:	49 f4       	brne	.+18     	; 0x2ef2 <ProcessInput+0x6ac>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2ee0:	83 ee       	ldi	r24, 0xE3	; 227
    2ee2:	97 e7       	ldi	r25, 0x77	; 119
    2ee4:	80 93 17 39 	sts	0x3917, r24	; 0x803917 <reactStr+0x2>
    2ee8:	90 93 18 39 	sts	0x3918, r25	; 0x803918 <reactStr+0x3>
    reactStr[1][number]=length;
    2eec:	86 e2       	ldi	r24, 0x26	; 38
    2eee:	90 e0       	ldi	r25, 0x00	; 0
    2ef0:	6f cd       	rjmp	.-1314   	; 0x29d0 <ProcessInput+0x18a>

        //Drop item if in inventory
        if (data[0] == 'd') {
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
    2ef2:	b2 e0       	ldi	r27, 0x02	; 2
    2ef4:	fb 16       	cp	r15, r27
    2ef6:	09 f4       	brne	.+2      	; 0x2efa <ProcessInput+0x6b4>
    2ef8:	31 c5       	rjmp	.+2658   	; 0x395c <ProcessInput+0x1116>
    2efa:	d5 cc       	rjmp	.-1622   	; 0x28a6 <ProcessInput+0x60>
                    if (x) SetResponse(elements++, A_NOTCARRYING, L_NOTCARRYING, TEASER);
                }
            }

        //Inventory list
        } else if (data[0] == 'i') {
    2efc:	89 36       	cpi	r24, 0x69	; 105
    2efe:	09 f0       	breq	.+2      	; 0x2f02 <ProcessInput+0x6bc>
    2f00:	7b c0       	rjmp	.+246    	; 0x2ff8 <ProcessInput+0x7b2>
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
    2f02:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <inventory>
    2f06:	90 91 3b 38 	lds	r25, 0x383B	; 0x80383b <inventory+0x1>
    2f0a:	89 2b       	or	r24, r25
    2f0c:	31 f4       	brne	.+12     	; 0x2f1a <ProcessInput+0x6d4>
    2f0e:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <inventory+0x2>
    2f12:	90 91 3d 38 	lds	r25, 0x383D	; 0x80383d <inventory+0x3>
    2f16:	89 2b       	or	r24, r25
    2f18:	19 f3       	breq	.-58     	; 0x2ee0 <ProcessInput+0x69a>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2f1a:	89 e0       	ldi	r24, 0x09	; 9
    2f1c:	98 e7       	ldi	r25, 0x78	; 120
    2f1e:	80 93 17 39 	sts	0x3917, r24	; 0x803917 <reactStr+0x2>
    2f22:	90 93 18 39 	sts	0x3918, r25	; 0x803918 <reactStr+0x3>
    reactStr[1][number]=length;
    2f26:	86 e1       	ldi	r24, 0x16	; 22
    2f28:	90 e0       	ldi	r25, 0x00	; 0
    2f2a:	80 93 57 39 	sts	0x3957, r24	; 0x803957 <reactStr+0x42>
    2f2e:	90 93 58 39 	sts	0x3958, r25	; 0x803958 <reactStr+0x43>
    reactStr[2][number]=type;
    2f32:	81 e0       	ldi	r24, 0x01	; 1
    2f34:	90 e0       	ldi	r25, 0x00	; 0
    2f36:	80 93 97 39 	sts	0x3997, r24	; 0x803997 <reactStr+0x82>
    2f3a:	90 93 98 39 	sts	0x3998, r25	; 0x803998 <reactStr+0x83>
    2f3e:	2a e3       	ldi	r18, 0x3A	; 58
    2f40:	e2 2e       	mov	r14, r18
    2f42:	28 e3       	ldi	r18, 0x38	; 56
    2f44:	f2 2e       	mov	r15, r18
    2f46:	3e e3       	ldi	r19, 0x3E	; 62
    2f48:	63 2e       	mov	r6, r19
    2f4a:	38 e3       	ldi	r19, 0x38	; 56
    2f4c:	73 2e       	mov	r7, r19
        //Inventory list
        } else if (data[0] == 'i') {
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else {
                SetResponse(elements++, A_NOWCARRING, L_NOWCARRING, TEASER);
    2f4e:	42 e0       	ldi	r20, 0x02	; 2
    2f50:	54 2e       	mov	r5, r20
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2f52:	59 e5       	ldi	r21, 0x59	; 89
    2f54:	c5 2e       	mov	r12, r21
    2f56:	5a e7       	ldi	r21, 0x7A	; 122
    2f58:	d5 2e       	mov	r13, r21
    reactStr[1][number]=length;
    2f5a:	62 e0       	ldi	r22, 0x02	; 2
    2f5c:	a6 2e       	mov	r10, r22
    2f5e:	b1 2c       	mov	r11, r1
    reactStr[2][number]=type;
    2f60:	88 24       	eor	r8, r8
    2f62:	83 94       	inc	r8
    2f64:	91 2c       	mov	r9, r1
            } else {
                SetResponse(elements++, A_NOWCARRING, L_NOWCARRING, TEASER);
                //SetResponse(elements++, A_SPACE, L_SPACE, TEASER);
                
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
    2f66:	d7 01       	movw	r26, r14
    2f68:	8d 91       	ld	r24, X+
    2f6a:	9d 91       	ld	r25, X+
    2f6c:	7d 01       	movw	r14, r26
    2f6e:	00 97       	sbiw	r24, 0x00	; 0
    2f70:	d9 f1       	breq	.+118    	; 0x2fe8 <ProcessInput+0x7a2>
                        PopulateObject(inventory[x], &actObj1);
    2f72:	64 ed       	ldi	r22, 0xD4	; 212
    2f74:	78 e3       	ldi	r23, 0x38	; 56
    2f76:	0e 94 76 0f 	call	0x1eec	; 0x1eec <PopulateObject>
                        SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    2f7a:	80 91 ee 38 	lds	r24, 0x38EE	; 0x8038ee <actObj1.3994+0x1a>
    2f7e:	90 91 ef 38 	lds	r25, 0x38EF	; 0x8038ef <actObj1.3994+0x1b>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2f82:	e5 2d       	mov	r30, r5
    2f84:	f0 e0       	ldi	r31, 0x00	; 0
    2f86:	df 01       	movw	r26, r30
    2f88:	aa 0f       	add	r26, r26
    2f8a:	bb 1f       	adc	r27, r27
    2f8c:	ab 5e       	subi	r26, 0xEB	; 235
    2f8e:	b6 4c       	sbci	r27, 0xC6	; 198
    2f90:	20 91 e0 38 	lds	r18, 0x38E0	; 0x8038e0 <actObj1.3994+0xc>
    2f94:	30 91 e1 38 	lds	r19, 0x38E1	; 0x8038e1 <actObj1.3994+0xd>
    2f98:	2d 93       	st	X+, r18
    2f9a:	3c 93       	st	X, r19
    reactStr[1][number]=length;
    2f9c:	df 01       	movw	r26, r30
    2f9e:	aa 0f       	add	r26, r26
    2fa0:	bb 1f       	adc	r27, r27
    2fa2:	ab 5a       	subi	r26, 0xAB	; 171
    2fa4:	b6 4c       	sbci	r27, 0xC6	; 198
    2fa6:	8d 93       	st	X+, r24
    2fa8:	9c 93       	st	X, r25
    reactStr[2][number]=type;
    2faa:	ee 0f       	add	r30, r30
    2fac:	ff 1f       	adc	r31, r31
    2fae:	eb 56       	subi	r30, 0x6B	; 107
    2fb0:	f6 4c       	sbci	r31, 0xC6	; 198
    2fb2:	10 82       	st	Z, r1
    2fb4:	11 82       	std	Z+1, r1	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2fb6:	e1 e0       	ldi	r30, 0x01	; 1
    2fb8:	e5 0d       	add	r30, r5
    2fba:	f0 e0       	ldi	r31, 0x00	; 0
    2fbc:	53 94       	inc	r5
    2fbe:	53 94       	inc	r5
    2fc0:	df 01       	movw	r26, r30
    2fc2:	aa 0f       	add	r26, r26
    2fc4:	bb 1f       	adc	r27, r27
    2fc6:	ab 5e       	subi	r26, 0xEB	; 235
    2fc8:	b6 4c       	sbci	r27, 0xC6	; 198
    2fca:	cd 92       	st	X+, r12
    2fcc:	dc 92       	st	X, r13
    reactStr[1][number]=length;
    2fce:	df 01       	movw	r26, r30
    2fd0:	aa 0f       	add	r26, r26
    2fd2:	bb 1f       	adc	r27, r27
    2fd4:	ab 5a       	subi	r26, 0xAB	; 171
    2fd6:	b6 4c       	sbci	r27, 0xC6	; 198
    2fd8:	ad 92       	st	X+, r10
    2fda:	bc 92       	st	X, r11
    reactStr[2][number]=type;
    2fdc:	ee 0f       	add	r30, r30
    2fde:	ff 1f       	adc	r31, r31
    2fe0:	eb 56       	subi	r30, 0x6B	; 107
    2fe2:	f6 4c       	sbci	r31, 0xC6	; 198
    2fe4:	80 82       	st	Z, r8
    2fe6:	91 82       	std	Z+1, r9	; 0x01
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else {
                SetResponse(elements++, A_NOWCARRING, L_NOWCARRING, TEASER);
                //SetResponse(elements++, A_SPACE, L_SPACE, TEASER);
                
                for (uint8_t x=0; x<2; ++x) {
    2fe8:	6e 14       	cp	r6, r14
    2fea:	7f 04       	cpc	r7, r15
    2fec:	09 f0       	breq	.+2      	; 0x2ff0 <ProcessInput+0x7aa>
    2fee:	bb cf       	rjmp	.-138    	; 0x2f66 <ProcessInput+0x720>
                        SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                        SetResponse(elements++, A_COMMA, L_COMMA, TEASER);
                        //SetResponse(elements++, A_SPACE, L_SPACE, TEASER);
                    }
                }
                elements -= 1;
    2ff0:	77 24       	eor	r7, r7
    2ff2:	7a 94       	dec	r7
    2ff4:	75 0c       	add	r7, r5
    2ff6:	17 c4       	rjmp	.+2094   	; 0x3826 <ProcessInput+0xfe0>
            }            
        
        //Talk, use, give, read
        } else if ((data[0] == 't')||(data[0] == 'u')||(data[0] == 'g')||(data[0] == 'r')) {
    2ff8:	9c e8       	ldi	r25, 0x8C	; 140
    2ffa:	98 0f       	add	r25, r24
    2ffc:	92 30       	cpi	r25, 0x02	; 2
    2ffe:	28 f0       	brcs	.+10     	; 0x300a <ProcessInput+0x7c4>
    3000:	87 36       	cpi	r24, 0x67	; 103
    3002:	19 f0       	breq	.+6      	; 0x300a <ProcessInput+0x7c4>
    3004:	82 37       	cpi	r24, 0x72	; 114
    3006:	09 f0       	breq	.+2      	; 0x300a <ProcessInput+0x7c4>
    3008:	d7 c2       	rjmp	.+1454   	; 0x35b8 <ProcessInput+0xd72>
            if ((inputLen<2)||(inputLen>3)) {
    300a:	8e ef       	ldi	r24, 0xFE	; 254
    300c:	8f 0d       	add	r24, r15
    300e:	82 30       	cpi	r24, 0x02	; 2
    3010:	08 f0       	brcs	.+2      	; 0x3014 <ProcessInput+0x7ce>
    3012:	49 cc       	rjmp	.-1902   	; 0x28a6 <ProcessInput+0x60>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);                
            
            //Check for visible person or object first
            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[inputLen-1], 0);
    3014:	e0 91 29 38 	lds	r30, 0x3829	; 0x803829 <currDepth>
    3018:	ce 2e       	mov	r12, r30
    301a:	d1 2c       	mov	r13, r1
    301c:	d8 01       	movw	r26, r16
    301e:	af 0d       	add	r26, r15
    3020:	b1 1d       	adc	r27, r1
    3022:	11 97       	sbiw	r26, 0x01	; 1
    3024:	f6 01       	movw	r30, r12
    3026:	ee 0f       	add	r30, r30
    3028:	ff 1f       	adc	r31, r31
    302a:	eb 52       	subi	r30, 0x2B	; 43
    302c:	f6 4c       	sbci	r31, 0xC6	; 198
    302e:	40 e0       	ldi	r20, 0x00	; 0
    3030:	50 e0       	ldi	r21, 0x00	; 0
    3032:	6c 91       	ld	r22, X
    3034:	80 81       	ld	r24, Z
    3036:	91 81       	ldd	r25, Z+1	; 0x01
    3038:	24 d8       	rcall	.-4024   	; 0x2082 <FindChild>
    303a:	f6 01       	movw	r30, r12
    303c:	ee 0f       	add	r30, r30
    303e:	ff 1f       	adc	r31, r31
    3040:	e9 52       	subi	r30, 0x29	; 41
    3042:	f6 4c       	sbci	r31, 0xC6	; 198
    3044:	80 83       	st	Z, r24
    3046:	91 83       	std	Z+1, r25	; 0x01
                if (route[currDepth+1]) {
    3048:	e0 91 29 38 	lds	r30, 0x3829	; 0x803829 <currDepth>
    304c:	f0 e0       	ldi	r31, 0x00	; 0
    304e:	ee 0f       	add	r30, r30
    3050:	ff 1f       	adc	r31, r31
    3052:	e9 52       	subi	r30, 0x29	; 41
    3054:	f6 4c       	sbci	r31, 0xC6	; 198
    3056:	80 81       	ld	r24, Z
    3058:	91 81       	ldd	r25, Z+1	; 0x01
    305a:	00 97       	sbiw	r24, 0x00	; 0
    305c:	09 f4       	brne	.+2      	; 0x3060 <ProcessInput+0x81a>
    305e:	9a c2       	rjmp	.+1332   	; 0x3594 <ProcessInput+0xd4e>
                    
                    //Give item to person / use item on object 
                    if ((inputLen == 3)&&((data[0] == 'u')||(data[0] == 'g'))) {
    3060:	b3 e0       	ldi	r27, 0x03	; 3
    3062:	fb 12       	cpse	r15, r27
    3064:	78 c1       	rjmp	.+752    	; 0x3356 <ProcessInput+0xb10>
    3066:	f8 01       	movw	r30, r16
    3068:	20 81       	ld	r18, Z
    306a:	25 37       	cpi	r18, 0x75	; 117
    306c:	19 f0       	breq	.+6      	; 0x3074 <ProcessInput+0x82e>
    306e:	27 36       	cpi	r18, 0x67	; 103
    3070:	09 f0       	breq	.+2      	; 0x3074 <ProcessInput+0x82e>
    3072:	71 c1       	rjmp	.+738    	; 0x3356 <ProcessInput+0xb10>
    3074:	61 2c       	mov	r6, r1
    3076:	77 24       	eor	r7, r7
    3078:	73 94       	inc	r7
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    307a:	53 e6       	ldi	r21, 0x63	; 99
    307c:	c5 2e       	mov	r12, r21
    307e:	59 e7       	ldi	r21, 0x79	; 121
    3080:	d5 2e       	mov	r13, r21
    reactStr[1][number]=length;
    3082:	61 e2       	ldi	r22, 0x21	; 33
    3084:	a6 2e       	mov	r10, r22
    3086:	b1 2c       	mov	r11, r1
    reactStr[2][number]=type;
    3088:	88 24       	eor	r8, r8
    308a:	83 94       	inc	r8
    308c:	91 2c       	mov	r9, r1
                if (route[currDepth+1]) {
                    
                    //Give item to person / use item on object 
                    if ((inputLen == 3)&&((data[0] == 'u')||(data[0] == 'g'))) {
                        for (uint8_t x=0; x<2; x++) {
                            if (inventory[x]) { 
    308e:	e6 2c       	mov	r14, r6
    3090:	f1 2c       	mov	r15, r1
    3092:	c7 01       	movw	r24, r14
    3094:	88 0f       	add	r24, r24
    3096:	99 1f       	adc	r25, r25
    3098:	9c 01       	movw	r18, r24
    309a:	26 5c       	subi	r18, 0xC6	; 198
    309c:	37 4c       	sbci	r19, 0xC7	; 199
    309e:	79 01       	movw	r14, r18
    30a0:	d9 01       	movw	r26, r18
    30a2:	8d 91       	ld	r24, X+
    30a4:	9c 91       	ld	r25, X
    30a6:	00 97       	sbiw	r24, 0x00	; 0
    30a8:	81 f0       	breq	.+32     	; 0x30ca <ProcessInput+0x884>
                                if (CheckLetter(inventory[x], data[1])) {
    30aa:	f8 01       	movw	r30, r16
    30ac:	61 81       	ldd	r22, Z+1	; 0x01
    30ae:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <CheckLetter>
    30b2:	88 23       	and	r24, r24
    30b4:	51 f0       	breq	.+20     	; 0x30ca <ProcessInput+0x884>
                                    PopulateObject(inventory[x], &actObj2);
    30b6:	69 ea       	ldi	r22, 0xA9	; 169
    30b8:	78 e3       	ldi	r23, 0x38	; 56
    30ba:	d7 01       	movw	r26, r14
    30bc:	8d 91       	ld	r24, X+
    30be:	9c 91       	ld	r25, X
    30c0:	0e 94 76 0f 	call	0x1eec	; 0x1eec <PopulateObject>
                                    x = 2;
    30c4:	32 e0       	ldi	r19, 0x02	; 2
    30c6:	63 2e       	mov	r6, r19
    30c8:	1e c0       	rjmp	.+60     	; 0x3106 <ProcessInput+0x8c0>
                                }
                            }
                            if (x == 1) { 
    30ca:	b1 e0       	ldi	r27, 0x01	; 1
    30cc:	6b 12       	cpse	r6, r27
    30ce:	1a c0       	rjmp	.+52     	; 0x3104 <ProcessInput+0x8be>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    30d0:	e7 2d       	mov	r30, r7
    30d2:	f0 e0       	ldi	r31, 0x00	; 0
    30d4:	df 01       	movw	r26, r30
    30d6:	aa 0f       	add	r26, r26
    30d8:	bb 1f       	adc	r27, r27
    30da:	ab 5e       	subi	r26, 0xEB	; 235
    30dc:	b6 4c       	sbci	r27, 0xC6	; 198
    30de:	cd 92       	st	X+, r12
    30e0:	dc 92       	st	X, r13
    reactStr[1][number]=length;
    30e2:	df 01       	movw	r26, r30
    30e4:	aa 0f       	add	r26, r26
    30e6:	bb 1f       	adc	r27, r27
    30e8:	ab 5a       	subi	r26, 0xAB	; 171
    30ea:	b6 4c       	sbci	r27, 0xC6	; 198
    30ec:	ad 92       	st	X+, r10
    30ee:	bc 92       	st	X, r11
    reactStr[2][number]=type;
    30f0:	ee 0f       	add	r30, r30
    30f2:	ff 1f       	adc	r31, r31
    30f4:	eb 56       	subi	r30, 0x6B	; 107
    30f6:	f6 4c       	sbci	r31, 0xC6	; 198
    30f8:	80 82       	st	Z, r8
    30fa:	91 82       	std	Z+1, r9	; 0x01
                                    x = 2;
                                }
                            }
                            if (x == 1) { 
                                SetResponse(elements++, A_NOTCARRYING, L_NOTCARRYING, TEASER);
                                data[0] = 0;
    30fc:	f8 01       	movw	r30, r16
    30fe:	10 82       	st	Z, r1
                                    PopulateObject(inventory[x], &actObj2);
                                    x = 2;
                                }
                            }
                            if (x == 1) { 
                                SetResponse(elements++, A_NOTCARRYING, L_NOTCARRYING, TEASER);
    3100:	73 94       	inc	r7
    3102:	01 c0       	rjmp	.+2      	; 0x3106 <ProcessInput+0x8c0>
    3104:	61 2c       	mov	r6, r1
                route[currDepth+1] = FindChild(route[currDepth], data[inputLen-1], 0);
                if (route[currDepth+1]) {
                    
                    //Give item to person / use item on object 
                    if ((inputLen == 3)&&((data[0] == 'u')||(data[0] == 'g'))) {
                        for (uint8_t x=0; x<2; x++) {
    3106:	63 94       	inc	r6
    3108:	f1 e0       	ldi	r31, 0x01	; 1
    310a:	6f 16       	cp	r6, r31
    310c:	09 f4       	brne	.+2      	; 0x3110 <ProcessInput+0x8ca>
    310e:	bf cf       	rjmp	.-130    	; 0x308e <ProcessInput+0x848>
                                data[0] = 0;
                            }
                        }

                        //Both the item and person/object are found, check if action is legit
                        if (data[0]){
    3110:	d8 01       	movw	r26, r16
    3112:	8c 91       	ld	r24, X
    3114:	88 23       	and	r24, r24
    3116:	09 f4       	brne	.+2      	; 0x311a <ProcessInput+0x8d4>
    3118:	86 c3       	rjmp	.+1804   	; 0x3826 <ProcessInput+0xfe0>
                            PopulateObject(route[currDepth+1], &actObj1);
    311a:	e0 91 29 38 	lds	r30, 0x3829	; 0x803829 <currDepth>
    311e:	f0 e0       	ldi	r31, 0x00	; 0
    3120:	ee 0f       	add	r30, r30
    3122:	ff 1f       	adc	r31, r31
    3124:	e9 52       	subi	r30, 0x29	; 41
    3126:	f6 4c       	sbci	r31, 0xC6	; 198
    3128:	64 ed       	ldi	r22, 0xD4	; 212
    312a:	78 e3       	ldi	r23, 0x38	; 56
    312c:	80 81       	ld	r24, Z
    312e:	91 81       	ldd	r25, Z+1	; 0x01
    3130:	0e 94 76 0f 	call	0x1eec	; 0x1eec <PopulateObject>

                            //Special game
                            if (actObj1.lenStr[ACTION_STR1] == 1) {
    3134:	e0 90 f2 38 	lds	r14, 0x38F2	; 0x8038f2 <actObj1.3994+0x1e>
    3138:	f0 90 f3 38 	lds	r15, 0x38F3	; 0x8038f3 <actObj1.3994+0x1f>
    313c:	b1 e0       	ldi	r27, 0x01	; 1
    313e:	eb 16       	cp	r14, r27
    3140:	f1 04       	cpc	r15, r1
    3142:	09 f0       	breq	.+2      	; 0x3146 <ProcessInput+0x900>
    3144:	9a c0       	rjmp	.+308    	; 0x327a <ProcessInput+0xa34>
                                ExtEERead(actObj1.addrStr[ACTION_STR1], 1, GAME, &data[2]);
    3146:	98 01       	movw	r18, r16
    3148:	2e 5f       	subi	r18, 0xFE	; 254
    314a:	3f 4f       	sbci	r19, 0xFF	; 255
    314c:	40 e0       	ldi	r20, 0x00	; 0
    314e:	61 e0       	ldi	r22, 0x01	; 1
    3150:	80 91 e4 38 	lds	r24, 0x38E4	; 0x8038e4 <actObj1.3994+0x10>
    3154:	90 91 e5 38 	lds	r25, 0x38E5	; 0x8038e5 <actObj1.3994+0x11>
    3158:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <ExtEERead>
                                if (data[2] == '1') {
    315c:	f8 01       	movw	r30, r16
    315e:	42 81       	ldd	r20, Z+2	; 0x02
    3160:	21 e0       	ldi	r18, 0x01	; 1
    3162:	27 0d       	add	r18, r7
    3164:	87 2d       	mov	r24, r7
    3166:	90 e0       	ldi	r25, 0x00	; 0
    3168:	41 33       	cpi	r20, 0x31	; 49
    316a:	09 f0       	breq	.+2      	; 0x316e <ProcessInput+0x928>
    316c:	6b c0       	rjmp	.+214    	; 0x3244 <ProcessInput+0x9fe>
                                    uint8_t item = actObj2.byteField[ITEM_NR];
    316e:	30 91 b4 38 	lds	r19, 0x38B4	; 0x8038b4 <actObj2.3995+0xb>
                                    if ((item < 31)||(item > 34)) {
    3172:	51 ee       	ldi	r21, 0xE1	; 225
    3174:	53 0f       	add	r21, r19
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3176:	fc 01       	movw	r30, r24
    3178:	ee 0f       	add	r30, r30
    317a:	ff 1f       	adc	r31, r31
    317c:	eb 5e       	subi	r30, 0xEB	; 235
    317e:	f6 4c       	sbci	r31, 0xC6	; 198
                            //Special game
                            if (actObj1.lenStr[ACTION_STR1] == 1) {
                                ExtEERead(actObj1.addrStr[ACTION_STR1], 1, GAME, &data[2]);
                                if (data[2] == '1') {
                                    uint8_t item = actObj2.byteField[ITEM_NR];
                                    if ((item < 31)||(item > 34)) {
    3180:	54 30       	cpi	r21, 0x04	; 4
    3182:	60 f0       	brcs	.+24     	; 0x319c <ProcessInput+0x956>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3184:	43 e0       	ldi	r20, 0x03	; 3
    3186:	59 e7       	ldi	r21, 0x79	; 121
    3188:	40 83       	st	Z, r20
    318a:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    318c:	fc 01       	movw	r30, r24
    318e:	ee 0f       	add	r30, r30
    3190:	ff 1f       	adc	r31, r31
    3192:	eb 5a       	subi	r30, 0xAB	; 171
    3194:	f6 4c       	sbci	r31, 0xC6	; 198
    3196:	4a e1       	ldi	r20, 0x1A	; 26
    3198:	50 e0       	ldi	r21, 0x00	; 0
    319a:	64 c0       	rjmp	.+200    	; 0x3264 <ProcessInput+0xa1e>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    319c:	6d e8       	ldi	r22, 0x8D	; 141
    319e:	75 e7       	ldi	r23, 0x75	; 117
    31a0:	60 83       	st	Z, r22
    31a2:	71 83       	std	Z+1, r23	; 0x01
    reactStr[1][number]=length;
    31a4:	fc 01       	movw	r30, r24
    31a6:	ee 0f       	add	r30, r30
    31a8:	ff 1f       	adc	r31, r31
    31aa:	eb 5a       	subi	r30, 0xAB	; 171
    31ac:	f6 4c       	sbci	r31, 0xC6	; 198
    31ae:	62 eb       	ldi	r22, 0xB2	; 178
    31b0:	70 e0       	ldi	r23, 0x00	; 0
    31b2:	60 83       	st	Z, r22
    31b4:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    31b6:	88 0f       	add	r24, r24
    31b8:	99 1f       	adc	r25, r25
    31ba:	fc 01       	movw	r30, r24
    31bc:	eb 56       	subi	r30, 0x6B	; 107
    31be:	f6 4c       	sbci	r31, 0xC6	; 198
    31c0:	e0 82       	st	Z, r14
    31c2:	f1 82       	std	Z+1, r15	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    31c4:	82 2f       	mov	r24, r18
    31c6:	90 e0       	ldi	r25, 0x00	; 0
    31c8:	fc 01       	movw	r30, r24
    31ca:	ee 0f       	add	r30, r30
    31cc:	ff 1f       	adc	r31, r31
    31ce:	eb 5e       	subi	r30, 0xEB	; 235
    31d0:	f6 4c       	sbci	r31, 0xC6	; 198
    31d2:	6b e5       	ldi	r22, 0x5B	; 91
    31d4:	7a e7       	ldi	r23, 0x7A	; 122
    31d6:	60 83       	st	Z, r22
    31d8:	71 83       	std	Z+1, r23	; 0x01
    reactStr[1][number]=length;
    31da:	fc 01       	movw	r30, r24
    31dc:	ee 0f       	add	r30, r30
    31de:	ff 1f       	adc	r31, r31
    31e0:	eb 5a       	subi	r30, 0xAB	; 171
    31e2:	f6 4c       	sbci	r31, 0xC6	; 198
    31e4:	62 e0       	ldi	r22, 0x02	; 2
    31e6:	70 e0       	ldi	r23, 0x00	; 0
    31e8:	60 83       	st	Z, r22
    31ea:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    31ec:	88 0f       	add	r24, r24
    31ee:	99 1f       	adc	r25, r25
    31f0:	fc 01       	movw	r30, r24
    31f2:	eb 56       	subi	r30, 0x6B	; 107
    31f4:	f6 4c       	sbci	r31, 0xC6	; 198
    31f6:	e0 82       	st	Z, r14
    31f8:	f1 82       	std	Z+1, r15	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    31fa:	82 e0       	ldi	r24, 0x02	; 2
    31fc:	87 0d       	add	r24, r7
    31fe:	90 e0       	ldi	r25, 0x00	; 0
    3200:	f3 e0       	ldi	r31, 0x03	; 3
    3202:	7f 0e       	add	r7, r31
    3204:	fc 01       	movw	r30, r24
    3206:	ee 0f       	add	r30, r30
    3208:	ff 1f       	adc	r31, r31
    320a:	eb 5e       	subi	r30, 0xEB	; 235
    320c:	f6 4c       	sbci	r31, 0xC6	; 198
    320e:	6f ea       	ldi	r22, 0xAF	; 175
    3210:	78 e7       	ldi	r23, 0x78	; 120
    3212:	60 83       	st	Z, r22
    3214:	71 83       	std	Z+1, r23	; 0x01
    reactStr[1][number]=length;
    3216:	fc 01       	movw	r30, r24
    3218:	ee 0f       	add	r30, r30
    321a:	ff 1f       	adc	r31, r31
    321c:	eb 5a       	subi	r30, 0xAB	; 171
    321e:	f6 4c       	sbci	r31, 0xC6	; 198
    3220:	62 e1       	ldi	r22, 0x12	; 18
    3222:	70 e0       	ldi	r23, 0x00	; 0
    3224:	60 83       	st	Z, r22
    3226:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    3228:	88 0f       	add	r24, r24
    322a:	99 1f       	adc	r25, r25
    322c:	fc 01       	movw	r30, r24
    322e:	eb 56       	subi	r30, 0x6B	; 107
    3230:	f6 4c       	sbci	r31, 0xC6	; 198
    3232:	e0 82       	st	Z, r14
    3234:	f1 82       	std	Z+1, r15	; 0x01
                                        SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                                    } else {
                                        SetResponse(elements++, A_PRIEST, L_PRIEST, TEASER);
                                        SetResponse(elements++, A_LF, 2, TEASER);
                                        SetResponse(elements++, A_RESPONSE, L_RESPONSE, TEASER);
                                        specialInput[0] = '1';
    3236:	40 93 04 39 	sts	0x3904, r20	; 0x803904 <specialInput>
                                        specialInput[1] = item;
    323a:	30 93 05 39 	sts	0x3905, r19	; 0x803905 <specialInput+0x1>
                                        specialInput[2] = 0;
    323e:	10 92 06 39 	sts	0x3906, r1	; 0x803906 <specialInput+0x2>
    3242:	f1 c2       	rjmp	.+1506   	; 0x3826 <ProcessInput+0xfe0>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3244:	fc 01       	movw	r30, r24
    3246:	ee 0f       	add	r30, r30
    3248:	ff 1f       	adc	r31, r31
    324a:	eb 5e       	subi	r30, 0xEB	; 235
    324c:	f6 4c       	sbci	r31, 0xC6	; 198
    324e:	4f e3       	ldi	r20, 0x3F	; 63
    3250:	56 e7       	ldi	r21, 0x76	; 118
    3252:	40 83       	st	Z, r20
    3254:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    3256:	fc 01       	movw	r30, r24
    3258:	ee 0f       	add	r30, r30
    325a:	ff 1f       	adc	r31, r31
    325c:	eb 5a       	subi	r30, 0xAB	; 171
    325e:	f6 4c       	sbci	r31, 0xC6	; 198
    3260:	42 e4       	ldi	r20, 0x42	; 66
    3262:	50 e0       	ldi	r21, 0x00	; 0
    3264:	40 83       	st	Z, r20
    3266:	51 83       	std	Z+1, r21	; 0x01
    reactStr[2][number]=type;
    3268:	88 0f       	add	r24, r24
    326a:	99 1f       	adc	r25, r25
    326c:	fc 01       	movw	r30, r24
    326e:	eb 56       	subi	r30, 0x6B	; 107
    3270:	f6 4c       	sbci	r31, 0xC6	; 198
    3272:	e0 82       	st	Z, r14
    3274:	f1 82       	std	Z+1, r15	; 0x01
                                        specialInput[2] = 0;
                                    }

                                //There should not be another special
                                } else {
                                    SetResponse(elements++, A_ERROR, L_ERROR, TEASER);
    3276:	72 2e       	mov	r7, r18
    3278:	d6 c2       	rjmp	.+1452   	; 0x3826 <ProcessInput+0xfe0>
                                }

                            //Normal "use ... on ..." or "give ... to ..." action
                            } else if (actObj1.byteField[ACTION_ITEM] == actObj2.byteField[ITEM_NR]) {
    327a:	90 91 dd 38 	lds	r25, 0x38DD	; 0x8038dd <actObj1.3994+0x9>
    327e:	80 91 b4 38 	lds	r24, 0x38B4	; 0x8038b4 <actObj2.3995+0xb>
    3282:	98 13       	cpse	r25, r24
    3284:	2f c0       	rjmp	.+94     	; 0x32e4 <ProcessInput+0xa9e>
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    3286:	20 91 fa 38 	lds	r18, 0x38FA	; 0x8038fa <actObj1.3994+0x26>
    328a:	30 91 fb 38 	lds	r19, 0x38FB	; 0x8038fb <actObj1.3994+0x27>
    328e:	ff 24       	eor	r15, r15
    3290:	f3 94       	inc	r15
    3292:	f7 0c       	add	r15, r7
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3294:	87 2d       	mov	r24, r7
    3296:	90 e0       	ldi	r25, 0x00	; 0
    3298:	fc 01       	movw	r30, r24
    329a:	ee 0f       	add	r30, r30
    329c:	ff 1f       	adc	r31, r31
    329e:	eb 5e       	subi	r30, 0xEB	; 235
    32a0:	f6 4c       	sbci	r31, 0xC6	; 198
    32a2:	40 91 ec 38 	lds	r20, 0x38EC	; 0x8038ec <actObj1.3994+0x18>
    32a6:	50 91 ed 38 	lds	r21, 0x38ED	; 0x8038ed <actObj1.3994+0x19>
    32aa:	40 83       	st	Z, r20
    32ac:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    32ae:	fc 01       	movw	r30, r24
    32b0:	ee 0f       	add	r30, r30
    32b2:	ff 1f       	adc	r31, r31
    32b4:	eb 5a       	subi	r30, 0xAB	; 171
    32b6:	f6 4c       	sbci	r31, 0xC6	; 198
    32b8:	20 83       	st	Z, r18
    32ba:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    32bc:	88 0f       	add	r24, r24
    32be:	99 1f       	adc	r25, r25
    32c0:	fc 01       	movw	r30, r24
    32c2:	eb 56       	subi	r30, 0x6B	; 107
    32c4:	f6 4c       	sbci	r31, 0xC6	; 198
    32c6:	10 82       	st	Z, r1
    32c8:	11 82       	std	Z+1, r1	; 0x01
                                }

                            //Normal "use ... on ..." or "give ... to ..." action
                            } else if (actObj1.byteField[ACTION_ITEM] == actObj2.byteField[ITEM_NR]) {
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                                effect = actObj1.effect[2];
    32ca:	80 91 fe 38 	lds	r24, 0x38FE	; 0x8038fe <actObj1.3994+0x2a>
    32ce:	90 e0       	ldi	r25, 0x00	; 0
    32d0:	80 93 36 38 	sts	0x3836, r24	; 0x803836 <effect>
    32d4:	90 93 37 38 	sts	0x3837, r25	; 0x803837 <effect+0x1>
                                UpdateState(actObj1.byteField[ACTION_STATE]);
    32d8:	80 91 de 38 	lds	r24, 0x38DE	; 0x8038de <actObj1.3994+0xa>
    32dc:	0e 94 b5 0a 	call	0x156a	; 0x156a <UpdateState>
                                    SetResponse(elements++, A_ERROR, L_ERROR, TEASER);
                                }

                            //Normal "use ... on ..." or "give ... to ..." action
                            } else if (actObj1.byteField[ACTION_ITEM] == actObj2.byteField[ITEM_NR]) {
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    32e0:	7f 2c       	mov	r7, r15
    32e2:	a1 c2       	rjmp	.+1346   	; 0x3826 <ProcessInput+0xfe0>
                                effect = actObj1.effect[2];
                                UpdateState(actObj1.byteField[ACTION_STATE]);
                                
                            } else {
                                if (data[0] == 'u') {
    32e4:	d8 01       	movw	r26, r16
    32e6:	8c 91       	ld	r24, X
    32e8:	85 37       	cpi	r24, 0x75	; 117
    32ea:	99 f4       	brne	.+38     	; 0x3312 <ProcessInput+0xacc>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    32ec:	87 2d       	mov	r24, r7
    32ee:	90 e0       	ldi	r25, 0x00	; 0
    32f0:	fc 01       	movw	r30, r24
    32f2:	ee 0f       	add	r30, r30
    32f4:	ff 1f       	adc	r31, r31
    32f6:	eb 5e       	subi	r30, 0xEB	; 235
    32f8:	f6 4c       	sbci	r31, 0xC6	; 198
    32fa:	23 e0       	ldi	r18, 0x03	; 3
    32fc:	39 e7       	ldi	r19, 0x79	; 121
    32fe:	20 83       	st	Z, r18
    3300:	31 83       	std	Z+1, r19	; 0x01
    reactStr[1][number]=length;
    3302:	fc 01       	movw	r30, r24
    3304:	ee 0f       	add	r30, r30
    3306:	ff 1f       	adc	r31, r31
    3308:	eb 5a       	subi	r30, 0xAB	; 171
    330a:	f6 4c       	sbci	r31, 0xC6	; 198
    330c:	2a e1       	ldi	r18, 0x1A	; 26
    330e:	30 e0       	ldi	r19, 0x00	; 0
    3310:	15 c0       	rjmp	.+42     	; 0x333c <ProcessInput+0xaf6>
                                UpdateState(actObj1.byteField[ACTION_STATE]);
                                
                            } else {
                                if (data[0] == 'u') {
                                    SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                                } else if (data[0] == 'g') {
    3312:	87 36       	cpi	r24, 0x67	; 103
    3314:	09 f0       	breq	.+2      	; 0x3318 <ProcessInput+0xad2>
    3316:	87 c2       	rjmp	.+1294   	; 0x3826 <ProcessInput+0xfe0>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3318:	87 2d       	mov	r24, r7
    331a:	90 e0       	ldi	r25, 0x00	; 0
    331c:	fc 01       	movw	r30, r24
    331e:	ee 0f       	add	r30, r30
    3320:	ff 1f       	adc	r31, r31
    3322:	eb 5e       	subi	r30, 0xEB	; 235
    3324:	f6 4c       	sbci	r31, 0xC6	; 198
    3326:	2c ed       	ldi	r18, 0xDC	; 220
    3328:	36 e7       	ldi	r19, 0x76	; 118
    332a:	20 83       	st	Z, r18
    332c:	31 83       	std	Z+1, r19	; 0x01
    reactStr[1][number]=length;
    332e:	fc 01       	movw	r30, r24
    3330:	ee 0f       	add	r30, r30
    3332:	ff 1f       	adc	r31, r31
    3334:	eb 5a       	subi	r30, 0xAB	; 171
    3336:	f6 4c       	sbci	r31, 0xC6	; 198
    3338:	28 e2       	ldi	r18, 0x28	; 40
    333a:	30 e0       	ldi	r19, 0x00	; 0
    333c:	20 83       	st	Z, r18
    333e:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    3340:	88 0f       	add	r24, r24
    3342:	99 1f       	adc	r25, r25
    3344:	fc 01       	movw	r30, r24
    3346:	eb 56       	subi	r30, 0x6B	; 107
    3348:	f6 4c       	sbci	r31, 0xC6	; 198
    334a:	81 e0       	ldi	r24, 0x01	; 1
    334c:	90 e0       	ldi	r25, 0x00	; 0
    334e:	80 83       	st	Z, r24
    3350:	91 83       	std	Z+1, r25	; 0x01
                                
                            } else {
                                if (data[0] == 'u') {
                                    SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                                } else if (data[0] == 'g') {
                                    SetResponse(elements++, A_CANTGIVE, L_CANTGIVE, TEASER);                                    
    3352:	73 94       	inc	r7
    3354:	68 c2       	rjmp	.+1232   	; 0x3826 <ProcessInput+0xfe0>
                            }
                        }
                    
                    //Talk to person, read or use object (without item)                          
                    } else {
                        PopulateObject(route[currDepth+1], &actObj1);
    3356:	64 ed       	ldi	r22, 0xD4	; 212
    3358:	78 e3       	ldi	r23, 0x38	; 56
    335a:	0e 94 76 0f 	call	0x1eec	; 0x1eec <PopulateObject>
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
    335e:	f8 01       	movw	r30, r16
    3360:	80 81       	ld	r24, Z
    3362:	84 37       	cpi	r24, 0x74	; 116
    3364:	69 f5       	brne	.+90     	; 0x33c0 <ProcessInput+0xb7a>
    3366:	80 91 dc 38 	lds	r24, 0x38DC	; 0x8038dc <actObj1.3994+0x8>
    336a:	83 fd       	sbrc	r24, 3
    336c:	4a c0       	rjmp	.+148    	; 0x3402 <ProcessInput+0xbbc>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    336e:	8d e1       	ldi	r24, 0x1D	; 29
    3370:	99 e7       	ldi	r25, 0x79	; 121
    3372:	80 93 17 39 	sts	0x3917, r24	; 0x803917 <reactStr+0x2>
    3376:	90 93 18 39 	sts	0x3918, r25	; 0x803918 <reactStr+0x3>
    reactStr[1][number]=length;
    337a:	8e e1       	ldi	r24, 0x1E	; 30
    337c:	90 e0       	ldi	r25, 0x00	; 0
    337e:	80 93 57 39 	sts	0x3957, r24	; 0x803957 <reactStr+0x42>
    3382:	90 93 58 39 	sts	0x3958, r25	; 0x803958 <reactStr+0x43>
    reactStr[2][number]=type;
    3386:	81 e0       	ldi	r24, 0x01	; 1
    3388:	90 e0       	ldi	r25, 0x00	; 0
    338a:	80 93 97 39 	sts	0x3997, r24	; 0x803997 <reactStr+0x82>
    338e:	90 93 98 39 	sts	0x3998, r25	; 0x803998 <reactStr+0x83>
                    //Talk to person, read or use object (without item)                          
                    } else {
                        PopulateObject(route[currDepth+1], &actObj1);
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
                            SetResponse(elements++, A_WHYTALK, L_WHYTALK, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    3392:	80 91 ee 38 	lds	r24, 0x38EE	; 0x8038ee <actObj1.3994+0x1a>
    3396:	90 91 ef 38 	lds	r25, 0x38EF	; 0x8038ef <actObj1.3994+0x1b>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    339a:	20 91 e0 38 	lds	r18, 0x38E0	; 0x8038e0 <actObj1.3994+0xc>
    339e:	30 91 e1 38 	lds	r19, 0x38E1	; 0x8038e1 <actObj1.3994+0xd>
    33a2:	20 93 19 39 	sts	0x3919, r18	; 0x803919 <reactStr+0x4>
    33a6:	30 93 1a 39 	sts	0x391A, r19	; 0x80391a <reactStr+0x5>
    reactStr[1][number]=length;
    33aa:	80 93 59 39 	sts	0x3959, r24	; 0x803959 <reactStr+0x44>
    33ae:	90 93 5a 39 	sts	0x395A, r25	; 0x80395a <reactStr+0x45>
    reactStr[2][number]=type;
    33b2:	10 92 99 39 	sts	0x3999, r1	; 0x803999 <reactStr+0x84>
    33b6:	10 92 9a 39 	sts	0x399A, r1	; 0x80399a <reactStr+0x85>
                    //Talk to person, read or use object (without item)                          
                    } else {
                        PopulateObject(route[currDepth+1], &actObj1);
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
                            SetResponse(elements++, A_WHYTALK, L_WHYTALK, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    33ba:	a3 e0       	ldi	r26, 0x03	; 3
    33bc:	7a 2e       	mov	r7, r26
    33be:	33 c2       	rjmp	.+1126   	; 0x3826 <ProcessInput+0xfe0>
                        } else if ((data[0] == 'u')&&((actObj1.byteField[ACTION_MASK]&USE) == 0)) {
    33c0:	85 37       	cpi	r24, 0x75	; 117
    33c2:	69 f4       	brne	.+26     	; 0x33de <ProcessInput+0xb98>
    33c4:	80 91 dc 38 	lds	r24, 0x38DC	; 0x8038dc <actObj1.3994+0x8>
    33c8:	84 fd       	sbrc	r24, 4
    33ca:	1b c0       	rjmp	.+54     	; 0x3402 <ProcessInput+0xbbc>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    33cc:	83 e0       	ldi	r24, 0x03	; 3
    33ce:	99 e7       	ldi	r25, 0x79	; 121
    33d0:	80 93 17 39 	sts	0x3917, r24	; 0x803917 <reactStr+0x2>
    33d4:	90 93 18 39 	sts	0x3918, r25	; 0x803918 <reactStr+0x3>
    reactStr[1][number]=length;
    33d8:	8a e1       	ldi	r24, 0x1A	; 26
    33da:	90 e0       	ldi	r25, 0x00	; 0
    33dc:	f9 ca       	rjmp	.-2574   	; 0x29d0 <ProcessInput+0x18a>
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
                            SetResponse(elements++, A_WHYTALK, L_WHYTALK, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                        } else if ((data[0] == 'u')&&((actObj1.byteField[ACTION_MASK]&USE) == 0)) {
                            SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                        } else if ((data[0] == 'r')&&((actObj1.byteField[ACTION_MASK]&READ) == 0)) {
    33de:	82 37       	cpi	r24, 0x72	; 114
    33e0:	69 f4       	brne	.+26     	; 0x33fc <ProcessInput+0xbb6>
    33e2:	80 91 dc 38 	lds	r24, 0x38DC	; 0x8038dc <actObj1.3994+0x8>
    33e6:	85 fd       	sbrc	r24, 5
    33e8:	0c c0       	rjmp	.+24     	; 0x3402 <ProcessInput+0xbbc>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    33ea:	88 ee       	ldi	r24, 0xE8	; 232
    33ec:	98 e7       	ldi	r25, 0x78	; 120
    33ee:	80 93 17 39 	sts	0x3917, r24	; 0x803917 <reactStr+0x2>
    33f2:	90 93 18 39 	sts	0x3918, r25	; 0x803918 <reactStr+0x3>
    reactStr[1][number]=length;
    33f6:	8b e1       	ldi	r24, 0x1B	; 27
    33f8:	90 e0       	ldi	r25, 0x00	; 0
    33fa:	ea ca       	rjmp	.-2604   	; 0x29d0 <ProcessInput+0x18a>
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                        } else if ((data[0] == 'u')&&((actObj1.byteField[ACTION_MASK]&USE) == 0)) {
                            SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                        } else if ((data[0] == 'r')&&((actObj1.byteField[ACTION_MASK]&READ) == 0)) {
                            SetResponse(elements++, A_CANTREAD, L_CANTREAD, TEASER);
                        } else if (data[0] == 'g'){ 
    33fc:	87 36       	cpi	r24, 0x67	; 103
    33fe:	09 f4       	brne	.+2      	; 0x3402 <ProcessInput+0xbbc>
    3400:	52 ca       	rjmp	.-2908   	; 0x28a6 <ProcessInput+0x60>
                            SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);  
                        } else {

                            //Special game, not enough characters
                            if (actObj1.lenStr[ACTION_STR1] == 1) {
    3402:	e0 90 f2 38 	lds	r14, 0x38F2	; 0x8038f2 <actObj1.3994+0x1e>
    3406:	f0 90 f3 38 	lds	r15, 0x38F3	; 0x8038f3 <actObj1.3994+0x1f>
    340a:	f1 e0       	ldi	r31, 0x01	; 1
    340c:	ef 16       	cp	r14, r31
    340e:	f1 04       	cpc	r15, r1
    3410:	11 f5       	brne	.+68     	; 0x3456 <ProcessInput+0xc10>
                                ExtEERead(actObj1.addrStr[ACTION_STR1], 1, GAME, &data[2]);
    3412:	98 01       	movw	r18, r16
    3414:	2e 5f       	subi	r18, 0xFE	; 254
    3416:	3f 4f       	sbci	r19, 0xFF	; 255
    3418:	40 e0       	ldi	r20, 0x00	; 0
    341a:	61 e0       	ldi	r22, 0x01	; 1
    341c:	80 91 e4 38 	lds	r24, 0x38E4	; 0x8038e4 <actObj1.3994+0x10>
    3420:	90 91 e5 38 	lds	r25, 0x38E5	; 0x8038e5 <actObj1.3994+0x11>
    3424:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <ExtEERead>
                                if (data[2] == '1') {
    3428:	d8 01       	movw	r26, r16
    342a:	12 96       	adiw	r26, 0x02	; 2
    342c:	8c 91       	ld	r24, X
    342e:	81 33       	cpi	r24, 0x31	; 49
    3430:	09 f0       	breq	.+2      	; 0x3434 <ProcessInput+0xbee>
    3432:	8a cc       	rjmp	.-1772   	; 0x2d48 <ProcessInput+0x502>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3434:	82 e6       	ldi	r24, 0x62	; 98
    3436:	95 e7       	ldi	r25, 0x75	; 117
    3438:	80 93 17 39 	sts	0x3917, r24	; 0x803917 <reactStr+0x2>
    343c:	90 93 18 39 	sts	0x3918, r25	; 0x803918 <reactStr+0x3>
    reactStr[1][number]=length;
    3440:	8b e2       	ldi	r24, 0x2B	; 43
    3442:	90 e0       	ldi	r25, 0x00	; 0
    3444:	80 93 57 39 	sts	0x3957, r24	; 0x803957 <reactStr+0x42>
    3448:	90 93 58 39 	sts	0x3958, r25	; 0x803958 <reactStr+0x43>
    reactStr[2][number]=type;
    344c:	e0 92 97 39 	sts	0x3997, r14	; 0x803997 <reactStr+0x82>
    3450:	f0 92 98 39 	sts	0x3998, r15	; 0x803998 <reactStr+0x83>
    3454:	c7 ca       	rjmp	.-2674   	; 0x29e4 <ProcessInput+0x19e>
                                if (data[2] == '1') {
                                    SetResponse(elements++, A_PLEASEOFFER, L_PLEASEOFFER, TEASER);
                                }

                            //General request
                            } else if (actObj1.lenStr[ACTION_STR1]) {
    3456:	e1 14       	cp	r14, r1
    3458:	f1 04       	cpc	r15, r1
    345a:	09 f4       	brne	.+2      	; 0x345e <ProcessInput+0xc18>
    345c:	59 c0       	rjmp	.+178    	; 0x3510 <ProcessInput+0xcca>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    345e:	80 91 e4 38 	lds	r24, 0x38E4	; 0x8038e4 <actObj1.3994+0x10>
    3462:	90 91 e5 38 	lds	r25, 0x38E5	; 0x8038e5 <actObj1.3994+0x11>
    3466:	80 93 17 39 	sts	0x3917, r24	; 0x803917 <reactStr+0x2>
    346a:	90 93 18 39 	sts	0x3918, r25	; 0x803918 <reactStr+0x3>
    reactStr[1][number]=length;
    346e:	e0 92 57 39 	sts	0x3957, r14	; 0x803957 <reactStr+0x42>
    3472:	f0 92 58 39 	sts	0x3958, r15	; 0x803958 <reactStr+0x43>
    reactStr[2][number]=type;
    3476:	10 92 97 39 	sts	0x3997, r1	; 0x803997 <reactStr+0x82>
    347a:	10 92 98 39 	sts	0x3998, r1	; 0x803998 <reactStr+0x83>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    347e:	8b e5       	ldi	r24, 0x5B	; 91
    3480:	9a e7       	ldi	r25, 0x7A	; 122
    3482:	80 93 19 39 	sts	0x3919, r24	; 0x803919 <reactStr+0x4>
    3486:	90 93 1a 39 	sts	0x391A, r25	; 0x80391a <reactStr+0x5>
    reactStr[1][number]=length;
    348a:	82 e0       	ldi	r24, 0x02	; 2
    348c:	90 e0       	ldi	r25, 0x00	; 0
    348e:	80 93 59 39 	sts	0x3959, r24	; 0x803959 <reactStr+0x44>
    3492:	90 93 5a 39 	sts	0x395A, r25	; 0x80395a <reactStr+0x45>
    reactStr[2][number]=type;
    3496:	81 e0       	ldi	r24, 0x01	; 1
    3498:	90 e0       	ldi	r25, 0x00	; 0
    349a:	80 93 99 39 	sts	0x3999, r24	; 0x803999 <reactStr+0x84>
    349e:	90 93 9a 39 	sts	0x399A, r25	; 0x80399a <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    34a2:	2f ea       	ldi	r18, 0xAF	; 175
    34a4:	38 e7       	ldi	r19, 0x78	; 120
    34a6:	20 93 1b 39 	sts	0x391B, r18	; 0x80391b <reactStr+0x6>
    34aa:	30 93 1c 39 	sts	0x391C, r19	; 0x80391c <reactStr+0x7>
    reactStr[1][number]=length;
    34ae:	22 e1       	ldi	r18, 0x12	; 18
    34b0:	30 e0       	ldi	r19, 0x00	; 0
    34b2:	20 93 5b 39 	sts	0x395B, r18	; 0x80395b <reactStr+0x46>
    34b6:	30 93 5c 39 	sts	0x395C, r19	; 0x80395c <reactStr+0x47>
    reactStr[2][number]=type;
    34ba:	80 93 9b 39 	sts	0x399B, r24	; 0x80399b <reactStr+0x86>
    34be:	90 93 9c 39 	sts	0x399C, r25	; 0x80399c <reactStr+0x87>
                            //General request
                            } else if (actObj1.lenStr[ACTION_STR1]) {
                                SetResponse(elements++, actObj1.addrStr[ACTION_STR1], actObj1.lenStr[ACTION_STR1], GAME);
                                SetResponse(elements++, A_LF, 2, TEASER);
                                SetResponse(elements++, A_RESPONSE, L_RESPONSE, TEASER);
                                if (actObj1.lenStr[ACTION_STR2]>(INP_LENGTH-1)) actObj1.lenStr[ACTION_STR2] = (INP_LENGTH-1);
    34c2:	80 91 f4 38 	lds	r24, 0x38F4	; 0x8038f4 <actObj1.3994+0x20>
    34c6:	90 91 f5 38 	lds	r25, 0x38F5	; 0x8038f5 <actObj1.3994+0x21>
    34ca:	40 97       	sbiw	r24, 0x10	; 16
    34cc:	30 f0       	brcs	.+12     	; 0x34da <ProcessInput+0xc94>
    34ce:	8f e0       	ldi	r24, 0x0F	; 15
    34d0:	90 e0       	ldi	r25, 0x00	; 0
    34d2:	80 93 f4 38 	sts	0x38F4, r24	; 0x8038f4 <actObj1.3994+0x20>
    34d6:	90 93 f5 38 	sts	0x38F5, r25	; 0x8038f5 <actObj1.3994+0x21>
                                ExtEERead(actObj1.addrStr[ACTION_STR2], actObj1.lenStr[ACTION_STR2], GAME, (uint8_t *)&specialInput[0]);
    34da:	24 e0       	ldi	r18, 0x04	; 4
    34dc:	39 e3       	ldi	r19, 0x39	; 57
    34de:	40 e0       	ldi	r20, 0x00	; 0
    34e0:	60 91 f4 38 	lds	r22, 0x38F4	; 0x8038f4 <actObj1.3994+0x20>
    34e4:	80 91 e6 38 	lds	r24, 0x38E6	; 0x8038e6 <actObj1.3994+0x12>
    34e8:	90 91 e7 38 	lds	r25, 0x38E7	; 0x8038e7 <actObj1.3994+0x13>
    34ec:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <ExtEERead>
                                UnflipData(actObj1.lenStr[ACTION_STR2], (uint8_t *)&specialInput[0]);
    34f0:	64 e0       	ldi	r22, 0x04	; 4
    34f2:	79 e3       	ldi	r23, 0x39	; 57
    34f4:	80 91 f4 38 	lds	r24, 0x38F4	; 0x8038f4 <actObj1.3994+0x20>
    34f8:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <UnflipData>
                                specialInput[actObj1.lenStr[ACTION_STR2]] = 0;
    34fc:	e0 91 f4 38 	lds	r30, 0x38F4	; 0x8038f4 <actObj1.3994+0x20>
    3500:	f0 91 f5 38 	lds	r31, 0x38F5	; 0x8038f5 <actObj1.3994+0x21>
    3504:	ec 5f       	subi	r30, 0xFC	; 252
    3506:	f6 4c       	sbci	r31, 0xC6	; 198
    3508:	10 82       	st	Z, r1

                            //General request
                            } else if (actObj1.lenStr[ACTION_STR1]) {
                                SetResponse(elements++, actObj1.addrStr[ACTION_STR1], actObj1.lenStr[ACTION_STR1], GAME);
                                SetResponse(elements++, A_LF, 2, TEASER);
                                SetResponse(elements++, A_RESPONSE, L_RESPONSE, TEASER);
    350a:	f4 e0       	ldi	r31, 0x04	; 4
    350c:	7f 2e       	mov	r7, r31
    350e:	8b c1       	rjmp	.+790    	; 0x3826 <ProcessInput+0xfe0>
                                ExtEERead(actObj1.addrStr[ACTION_STR2], actObj1.lenStr[ACTION_STR2], GAME, (uint8_t *)&specialInput[0]);
                                UnflipData(actObj1.lenStr[ACTION_STR2], (uint8_t *)&specialInput[0]);
                                specialInput[actObj1.lenStr[ACTION_STR2]] = 0;
                            
                            //Normal action    
                            } else if (CheckState(actObj1.byteField[ACTION_ACL])){
    3510:	80 91 db 38 	lds	r24, 0x38DB	; 0x8038db <actObj1.3994+0x7>
    3514:	0e 94 bf 0a 	call	0x157e	; 0x157e <CheckState>
    3518:	88 23       	and	r24, r24
    351a:	01 f1       	breq	.+64     	; 0x355c <ProcessInput+0xd16>
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    351c:	80 91 fa 38 	lds	r24, 0x38FA	; 0x8038fa <actObj1.3994+0x26>
    3520:	90 91 fb 38 	lds	r25, 0x38FB	; 0x8038fb <actObj1.3994+0x27>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3524:	20 91 ec 38 	lds	r18, 0x38EC	; 0x8038ec <actObj1.3994+0x18>
    3528:	30 91 ed 38 	lds	r19, 0x38ED	; 0x8038ed <actObj1.3994+0x19>
    352c:	20 93 17 39 	sts	0x3917, r18	; 0x803917 <reactStr+0x2>
    3530:	30 93 18 39 	sts	0x3918, r19	; 0x803918 <reactStr+0x3>
    reactStr[1][number]=length;
    3534:	80 93 57 39 	sts	0x3957, r24	; 0x803957 <reactStr+0x42>
    3538:	90 93 58 39 	sts	0x3958, r25	; 0x803958 <reactStr+0x43>
    reactStr[2][number]=type;
    353c:	10 92 97 39 	sts	0x3997, r1	; 0x803997 <reactStr+0x82>
    3540:	10 92 98 39 	sts	0x3998, r1	; 0x803998 <reactStr+0x83>
                                specialInput[actObj1.lenStr[ACTION_STR2]] = 0;
                            
                            //Normal action    
                            } else if (CheckState(actObj1.byteField[ACTION_ACL])){
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                                effect = actObj1.effect[2];
    3544:	80 91 fe 38 	lds	r24, 0x38FE	; 0x8038fe <actObj1.3994+0x2a>
    3548:	90 e0       	ldi	r25, 0x00	; 0
    354a:	80 93 36 38 	sts	0x3836, r24	; 0x803836 <effect>
    354e:	90 93 37 38 	sts	0x3837, r25	; 0x803837 <effect+0x1>
                                UpdateState(actObj1.byteField[ACTION_STATE]);
    3552:	80 91 de 38 	lds	r24, 0x38DE	; 0x8038de <actObj1.3994+0xa>
    3556:	0e 94 b5 0a 	call	0x156a	; 0x156a <UpdateState>
    355a:	44 ca       	rjmp	.-2936   	; 0x29e4 <ProcessInput+0x19e>
                            } else {
                                SetResponse(elements++, actObj1.addrStr[ACTION_ACL_MSG], actObj1.lenStr[ACTION_ACL_MSG], GAME);
    355c:	80 91 f8 38 	lds	r24, 0x38F8	; 0x8038f8 <actObj1.3994+0x24>
    3560:	90 91 f9 38 	lds	r25, 0x38F9	; 0x8038f9 <actObj1.3994+0x25>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3564:	20 91 ea 38 	lds	r18, 0x38EA	; 0x8038ea <actObj1.3994+0x16>
    3568:	30 91 eb 38 	lds	r19, 0x38EB	; 0x8038eb <actObj1.3994+0x17>
    356c:	20 93 17 39 	sts	0x3917, r18	; 0x803917 <reactStr+0x2>
    3570:	30 93 18 39 	sts	0x3918, r19	; 0x803918 <reactStr+0x3>
    reactStr[1][number]=length;
    3574:	80 93 57 39 	sts	0x3957, r24	; 0x803957 <reactStr+0x42>
    3578:	90 93 58 39 	sts	0x3958, r25	; 0x803958 <reactStr+0x43>
    reactStr[2][number]=type;
    357c:	10 92 97 39 	sts	0x3997, r1	; 0x803997 <reactStr+0x82>
    3580:	10 92 98 39 	sts	0x3998, r1	; 0x803998 <reactStr+0x83>
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                                effect = actObj1.effect[2];
                                UpdateState(actObj1.byteField[ACTION_STATE]);
                            } else {
                                SetResponse(elements++, actObj1.addrStr[ACTION_ACL_MSG], actObj1.lenStr[ACTION_ACL_MSG], GAME);
                                effect = actObj1.effect[1];
    3584:	80 91 fd 38 	lds	r24, 0x38FD	; 0x8038fd <actObj1.3994+0x29>
    3588:	90 e0       	ldi	r25, 0x00	; 0
    358a:	80 93 36 38 	sts	0x3836, r24	; 0x803836 <effect>
    358e:	90 93 37 38 	sts	0x3837, r25	; 0x803837 <effect+0x1>
    3592:	28 ca       	rjmp	.-2992   	; 0x29e4 <ProcessInput+0x19e>
                        }
                    }

                //Person or object not found
                } else {
                    if ((data[0] == 't')||(data[0] == 'g')){
    3594:	f8 01       	movw	r30, r16
    3596:	80 81       	ld	r24, Z
    3598:	84 37       	cpi	r24, 0x74	; 116
    359a:	11 f0       	breq	.+4      	; 0x35a0 <ProcessInput+0xd5a>
    359c:	87 36       	cpi	r24, 0x67	; 103
    359e:	19 f4       	brne	.+6      	; 0x35a6 <ProcessInput+0xd60>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    35a0:	8b e3       	ldi	r24, 0x3B	; 59
    35a2:	99 e7       	ldi	r25, 0x79	; 121
    35a4:	02 c0       	rjmp	.+4      	; 0x35aa <ProcessInput+0xd64>
    35a6:	8f e4       	ldi	r24, 0x4F	; 79
    35a8:	99 e7       	ldi	r25, 0x79	; 121
    35aa:	80 93 17 39 	sts	0x3917, r24	; 0x803917 <reactStr+0x2>
    35ae:	90 93 18 39 	sts	0x3918, r25	; 0x803918 <reactStr+0x3>
    reactStr[1][number]=length;
    35b2:	84 e1       	ldi	r24, 0x14	; 20
    35b4:	90 e0       	ldi	r25, 0x00	; 0
    35b6:	0c ca       	rjmp	.-3048   	; 0x29d0 <ProcessInput+0x18a>
                    }
                }
            }
        
        //Special answer given
        } else if (data[0] == 'a'){
    35b8:	81 36       	cpi	r24, 0x61	; 97
    35ba:	09 f0       	breq	.+2      	; 0x35be <ProcessInput+0xd78>
    35bc:	c5 cb       	rjmp	.-2166   	; 0x2d48 <ProcessInput+0x502>
            
            //Priest offerings
            if (specialPassed >= 2) {
    35be:	80 91 03 39 	lds	r24, 0x3903	; 0x803903 <specialPassed>
    35c2:	82 30       	cpi	r24, 0x02	; 2
    35c4:	08 f4       	brcc	.+2      	; 0x35c8 <ProcessInput+0xd82>
    35c6:	bd c0       	rjmp	.+378    	; 0x3742 <ProcessInput+0xefc>
                if (data[1] > 0) {
    35c8:	d8 01       	movw	r26, r16
    35ca:	11 96       	adiw	r26, 0x01	; 1
    35cc:	2c 91       	ld	r18, X
    35ce:	22 23       	and	r18, r18
    35d0:	09 f4       	brne	.+2      	; 0x35d4 <ProcessInput+0xd8e>
    35d2:	a4 c0       	rjmp	.+328    	; 0x371c <ProcessInput+0xed6>

                    uint8_t  digit[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    35d4:	fe 01       	movw	r30, r28
    35d6:	31 96       	adiw	r30, 0x01	; 1
    35d8:	7f 01       	movw	r14, r30
    35da:	8a e0       	ldi	r24, 0x0A	; 10
    35dc:	df 01       	movw	r26, r30
    35de:	1d 92       	st	X+, r1
    35e0:	8a 95       	dec	r24
    35e2:	e9 f7       	brne	.-6      	; 0x35de <ProcessInput+0xd98>
                        answer = ((offering  & 2) << 19) + ((offering  & 1) << 8) + \
                        ((element   & 2) << 15) + ((element   & 1) << 4) + \
                        ((kneelings & 2) << 11) + ((kneelings & 1))
                        answer = answer << (3-person)
                    */
                    data[1]-='1';
    35e4:	21 53       	subi	r18, 0x31	; 49
    35e6:	f8 01       	movw	r30, r16
    35e8:	21 83       	std	Z+1, r18	; 0x01
                    data[2]-='1';
    35ea:	32 81       	ldd	r19, Z+2	; 0x02
    35ec:	31 53       	subi	r19, 0x31	; 49
    35ee:	32 83       	std	Z+2, r19	; 0x02
                    if (data[3] == 'a') data[3] = 1;
    35f0:	83 81       	ldd	r24, Z+3	; 0x03
    35f2:	81 36       	cpi	r24, 0x61	; 97
    35f4:	11 f4       	brne	.+4      	; 0x35fa <ProcessInput+0xdb4>
    35f6:	81 e0       	ldi	r24, 0x01	; 1
    35f8:	08 c0       	rjmp	.+16     	; 0x360a <ProcessInput+0xdc4>
                    else if (data[3] == 'e') data[3] = 0;
    35fa:	85 36       	cpi	r24, 0x65	; 101
    35fc:	11 f4       	brne	.+4      	; 0x3602 <ProcessInput+0xdbc>
    35fe:	13 82       	std	Z+3, r1	; 0x03
    3600:	08 c0       	rjmp	.+16     	; 0x3612 <ProcessInput+0xdcc>
                    else if (data[3] == 'f') data[3] = 3;
    3602:	86 36       	cpi	r24, 0x66	; 102
    3604:	21 f4       	brne	.+8      	; 0x360e <ProcessInput+0xdc8>
    3606:	83 e0       	ldi	r24, 0x03	; 3
    3608:	f8 01       	movw	r30, r16
    360a:	83 83       	std	Z+3, r24	; 0x03
    360c:	02 c0       	rjmp	.+4      	; 0x3612 <ProcessInput+0xdcc>
                    else data[3] = 2;
    360e:	82 e0       	ldi	r24, 0x02	; 2
    3610:	83 83       	std	Z+3, r24	; 0x03

                    if (data[1] & 2) answer += (1UL << 20);
    3612:	21 fd       	sbrc	r18, 1
    3614:	04 c0       	rjmp	.+8      	; 0x361e <ProcessInput+0xdd8>
            //Priest offerings
            if (specialPassed >= 2) {
                if (data[1] > 0) {

                    uint8_t  digit[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
                    uint32_t answer = 0;
    3616:	80 e0       	ldi	r24, 0x00	; 0
    3618:	90 e0       	ldi	r25, 0x00	; 0
    361a:	dc 01       	movw	r26, r24
    361c:	04 c0       	rjmp	.+8      	; 0x3626 <ProcessInput+0xde0>
                    if (data[3] == 'a') data[3] = 1;
                    else if (data[3] == 'e') data[3] = 0;
                    else if (data[3] == 'f') data[3] = 3;
                    else data[3] = 2;

                    if (data[1] & 2) answer += (1UL << 20);
    361e:	80 e0       	ldi	r24, 0x00	; 0
    3620:	90 e0       	ldi	r25, 0x00	; 0
    3622:	a0 e1       	ldi	r26, 0x10	; 16
    3624:	b0 e0       	ldi	r27, 0x00	; 0
                    if (data[1] & 1) answer += (1 << 8);
    3626:	20 ff       	sbrs	r18, 0
    3628:	03 c0       	rjmp	.+6      	; 0x3630 <ProcessInput+0xdea>
    362a:	9f 5f       	subi	r25, 0xFF	; 255
    362c:	af 4f       	sbci	r26, 0xFF	; 255
    362e:	bf 4f       	sbci	r27, 0xFF	; 255
                    if (data[3] & 2) answer += (1UL << 16);
    3630:	f8 01       	movw	r30, r16
    3632:	23 81       	ldd	r18, Z+3	; 0x03
    3634:	21 fd       	sbrc	r18, 1
    3636:	11 96       	adiw	r26, 0x01	; 1
                    if (data[3] & 1) answer += (1 << 4);
    3638:	20 ff       	sbrs	r18, 0
    363a:	03 c0       	rjmp	.+6      	; 0x3642 <ProcessInput+0xdfc>
    363c:	40 96       	adiw	r24, 0x10	; 16
    363e:	a1 1d       	adc	r26, r1
    3640:	b1 1d       	adc	r27, r1
                    if (data[2] & 2) answer += (1 << 12);
    3642:	31 ff       	sbrs	r19, 1
    3644:	03 c0       	rjmp	.+6      	; 0x364c <ProcessInput+0xe06>
    3646:	90 5f       	subi	r25, 0xF0	; 240
    3648:	af 4f       	sbci	r26, 0xFF	; 255
    364a:	bf 4f       	sbci	r27, 0xFF	; 255
                    if (data[2] & 1) answer += 1;
    364c:	30 ff       	sbrs	r19, 0
    364e:	03 c0       	rjmp	.+6      	; 0x3656 <ProcessInput+0xe10>
    3650:	01 96       	adiw	r24, 0x01	; 1
    3652:	a1 1d       	adc	r26, r1
    3654:	b1 1d       	adc	r27, r1
                    answer <<= (4 - whoami);            
    3656:	40 91 39 38 	lds	r20, 0x3839	; 0x803839 <whoami>
    365a:	24 e0       	ldi	r18, 0x04	; 4
    365c:	30 e0       	ldi	r19, 0x00	; 0
    365e:	24 1b       	sub	r18, r20
    3660:	31 09       	sbc	r19, r1
    3662:	bc 01       	movw	r22, r24
    3664:	cd 01       	movw	r24, r26
    3666:	04 c0       	rjmp	.+8      	; 0x3670 <ProcessInput+0xe2a>
    3668:	66 0f       	add	r22, r22
    366a:	77 1f       	adc	r23, r23
    366c:	88 1f       	adc	r24, r24
    366e:	99 1f       	adc	r25, r25
    3670:	2a 95       	dec	r18
    3672:	d2 f7       	brpl	.-12     	; 0x3668 <ProcessInput+0xe22>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3674:	25 e0       	ldi	r18, 0x05	; 5
    3676:	35 e7       	ldi	r19, 0x75	; 117
    3678:	20 93 17 39 	sts	0x3917, r18	; 0x803917 <reactStr+0x2>
    367c:	30 93 18 39 	sts	0x3918, r19	; 0x803918 <reactStr+0x3>
    reactStr[1][number]=length;
    3680:	20 e2       	ldi	r18, 0x20	; 32
    3682:	30 e0       	ldi	r19, 0x00	; 0
    3684:	20 93 57 39 	sts	0x3957, r18	; 0x803957 <reactStr+0x42>
    3688:	30 93 58 39 	sts	0x3958, r19	; 0x803958 <reactStr+0x43>
    reactStr[2][number]=type;
    368c:	21 e0       	ldi	r18, 0x01	; 1
    368e:	30 e0       	ldi	r19, 0x00	; 0
    3690:	20 93 97 39 	sts	0x3997, r18	; 0x803997 <reactStr+0x82>
    3694:	30 93 98 39 	sts	0x3998, r19	; 0x803998 <reactStr+0x83>
                    answer <<= (4 - whoami);            

                    SetResponse(elements++, A_YOURPART, L_YOURPART, TEASER);
                    
                    //Set up sending out number
                    for (n=9; n>=0; --n) {
    3698:	59 e0       	ldi	r21, 0x09	; 9
                        digit[n] = answer % 10;
    369a:	b5 2e       	mov	r11, r21
    369c:	ea e0       	ldi	r30, 0x0A	; 10
    369e:	4e 2e       	mov	r4, r30
    36a0:	51 2c       	mov	r5, r1
    36a2:	61 2c       	mov	r6, r1
    36a4:	71 2c       	mov	r7, r1
    36a6:	67 01       	movw	r12, r14
    36a8:	cb 0c       	add	r12, r11
    36aa:	d1 1c       	adc	r13, r1
    36ac:	a3 01       	movw	r20, r6
    36ae:	92 01       	movw	r18, r4
    36b0:	d2 d2       	rcall	.+1444   	; 0x3c56 <__udivmodsi4>
    36b2:	d6 01       	movw	r26, r12
    36b4:	6c 93       	st	X, r22
                        answer /= 10;
    36b6:	b9 01       	movw	r22, r18
    36b8:	ca 01       	movw	r24, r20
                        if (answer == 0) break;
    36ba:	61 15       	cp	r22, r1
    36bc:	71 05       	cpc	r23, r1
    36be:	81 05       	cpc	r24, r1
    36c0:	91 05       	cpc	r25, r1
    36c2:	51 f4       	brne	.+20     	; 0x36d8 <ProcessInput+0xe92>
    36c4:	25 e1       	ldi	r18, 0x15	; 21
    36c6:	c2 2e       	mov	r12, r18
    36c8:	29 e3       	ldi	r18, 0x39	; 57
    36ca:	d2 2e       	mov	r13, r18
    36cc:	32 e0       	ldi	r19, 0x02	; 2
    36ce:	73 2e       	mov	r7, r19
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    reactStr[1][number]=length;
    36d0:	88 24       	eor	r8, r8
    36d2:	83 94       	inc	r8
    36d4:	91 2c       	mov	r9, r1
    36d6:	02 c0       	rjmp	.+4      	; 0x36dc <ProcessInput+0xe96>
                    answer <<= (4 - whoami);            

                    SetResponse(elements++, A_YOURPART, L_YOURPART, TEASER);
                    
                    //Set up sending out number
                    for (n=9; n>=0; --n) {
    36d8:	ba 94       	dec	r11
                        digit[n] = answer % 10;
                        answer /= 10;
                        if (answer == 0) break;
                    }
    36da:	e5 cf       	rjmp	.-54     	; 0x36a6 <ProcessInput+0xe60>
    36dc:	f2 e0       	ldi	r31, 0x02	; 2
    36de:	cf 0e       	add	r12, r31
    36e0:	d1 1c       	adc	r13, r1
                    for (; n<10; ++n) {
    36e2:	29 e0       	ldi	r18, 0x09	; 9
    36e4:	2b 15       	cp	r18, r11
    36e6:	08 f4       	brcc	.+2      	; 0x36ea <ProcessInput+0xea4>
    36e8:	9c c0       	rjmp	.+312    	; 0x3822 <ProcessInput+0xfdc>
                        SetResponse(elements++, A_DIGITS+digit[n], 1, TEASER);
    36ea:	73 94       	inc	r7
    36ec:	f7 01       	movw	r30, r14
    36ee:	eb 0d       	add	r30, r11
    36f0:	f1 1d       	adc	r31, r1
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    36f2:	80 81       	ld	r24, Z
    36f4:	90 e0       	ldi	r25, 0x00	; 0
    36f6:	8e 52       	subi	r24, 0x2E	; 46
    36f8:	9b 48       	sbci	r25, 0x8B	; 139
    36fa:	f6 01       	movw	r30, r12
    36fc:	82 83       	std	Z+2, r24	; 0x02
    36fe:	93 83       	std	Z+3, r25	; 0x03
    reactStr[1][number]=length;
    3700:	ee 5b       	subi	r30, 0xBE	; 190
    3702:	ff 4f       	sbci	r31, 0xFF	; 255
    3704:	80 82       	st	Z, r8
    3706:	91 82       	std	Z+1, r9	; 0x01
    reactStr[2][number]=type;
    3708:	e0 5c       	subi	r30, 0xC0	; 192
    370a:	ff 4f       	sbci	r31, 0xFF	; 255
    370c:	80 82       	st	Z, r8
    370e:	91 82       	std	Z+1, r9	; 0x01
                        answer /= 10;
                        if (answer == 0) break;
                    }
                    for (; n<10; ++n) {
                        SetResponse(elements++, A_DIGITS+digit[n], 1, TEASER);
                        UpdateState(actObj1.byteField[ACTION_STATE]);
    3710:	80 91 de 38 	lds	r24, 0x38DE	; 0x8038de <actObj1.3994+0xa>
    3714:	0e 94 b5 0a 	call	0x156a	; 0x156a <UpdateState>
                    for (n=9; n>=0; --n) {
                        digit[n] = answer % 10;
                        answer /= 10;
                        if (answer == 0) break;
                    }
                    for (; n<10; ++n) {
    3718:	b3 94       	inc	r11
    371a:	e0 cf       	rjmp	.-64     	; 0x36dc <ProcessInput+0xe96>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    371c:	85 e2       	ldi	r24, 0x25	; 37
    371e:	95 e7       	ldi	r25, 0x75	; 117
    3720:	80 93 17 39 	sts	0x3917, r24	; 0x803917 <reactStr+0x2>
    3724:	90 93 18 39 	sts	0x3918, r25	; 0x803918 <reactStr+0x3>
    reactStr[1][number]=length;
    3728:	8d e3       	ldi	r24, 0x3D	; 61
    372a:	90 e0       	ldi	r25, 0x00	; 0
    372c:	80 93 57 39 	sts	0x3957, r24	; 0x803957 <reactStr+0x42>
    3730:	90 93 58 39 	sts	0x3958, r25	; 0x803958 <reactStr+0x43>
    reactStr[2][number]=type;
    3734:	81 e0       	ldi	r24, 0x01	; 1
    3736:	90 e0       	ldi	r25, 0x00	; 0
    3738:	80 93 97 39 	sts	0x3997, r24	; 0x803997 <reactStr+0x82>
    373c:	90 93 98 39 	sts	0x3998, r25	; 0x803998 <reactStr+0x83>
    3740:	6e c0       	rjmp	.+220    	; 0x381e <ProcessInput+0xfd8>
    3742:	e0 91 29 38 	lds	r30, 0x3829	; 0x803829 <currDepth>
                    SetResponse(elements++, A_BADOFFERING, L_BADOFFERING, TEASER);
                }
            
            //Other questions    
            } else if (specialPassed == 1) {
                PopulateObject(route[currDepth+1], &actObj1);
    3746:	f0 e0       	ldi	r31, 0x00	; 0
    3748:	ee 0f       	add	r30, r30
    374a:	ff 1f       	adc	r31, r31
    374c:	e9 52       	subi	r30, 0x29	; 41
    374e:	f6 4c       	sbci	r31, 0xC6	; 198
    3750:	64 ed       	ldi	r22, 0xD4	; 212
    3752:	78 e3       	ldi	r23, 0x38	; 56
                } else {
                    SetResponse(elements++, A_BADOFFERING, L_BADOFFERING, TEASER);
                }
            
            //Other questions    
            } else if (specialPassed == 1) {
    3754:	81 30       	cpi	r24, 0x01	; 1
    3756:	09 f0       	breq	.+2      	; 0x375a <ProcessInput+0xf14>
    3758:	46 c0       	rjmp	.+140    	; 0x37e6 <ProcessInput+0xfa0>
                PopulateObject(route[currDepth+1], &actObj1);
    375a:	80 81       	ld	r24, Z
    375c:	91 81       	ldd	r25, Z+1	; 0x01
    375e:	0e 94 76 0f 	call	0x1eec	; 0x1eec <PopulateObject>
                if (CheckState(actObj1.byteField[ACTION_ACL])){
    3762:	80 91 db 38 	lds	r24, 0x38DB	; 0x8038db <actObj1.3994+0x7>
    3766:	0e 94 bf 0a 	call	0x157e	; 0x157e <CheckState>
    376a:	88 23       	and	r24, r24
    376c:	01 f1       	breq	.+64     	; 0x37ae <ProcessInput+0xf68>
                    SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    376e:	80 91 fa 38 	lds	r24, 0x38FA	; 0x8038fa <actObj1.3994+0x26>
    3772:	90 91 fb 38 	lds	r25, 0x38FB	; 0x8038fb <actObj1.3994+0x27>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3776:	20 91 ec 38 	lds	r18, 0x38EC	; 0x8038ec <actObj1.3994+0x18>
    377a:	30 91 ed 38 	lds	r19, 0x38ED	; 0x8038ed <actObj1.3994+0x19>
    377e:	20 93 17 39 	sts	0x3917, r18	; 0x803917 <reactStr+0x2>
    3782:	30 93 18 39 	sts	0x3918, r19	; 0x803918 <reactStr+0x3>
    reactStr[1][number]=length;
    3786:	80 93 57 39 	sts	0x3957, r24	; 0x803957 <reactStr+0x42>
    378a:	90 93 58 39 	sts	0x3958, r25	; 0x803958 <reactStr+0x43>
    reactStr[2][number]=type;
    378e:	10 92 97 39 	sts	0x3997, r1	; 0x803997 <reactStr+0x82>
    3792:	10 92 98 39 	sts	0x3998, r1	; 0x803998 <reactStr+0x83>
            //Other questions    
            } else if (specialPassed == 1) {
                PopulateObject(route[currDepth+1], &actObj1);
                if (CheckState(actObj1.byteField[ACTION_ACL])){
                    SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                    effect = actObj1.effect[2];
    3796:	80 91 fe 38 	lds	r24, 0x38FE	; 0x8038fe <actObj1.3994+0x2a>
    379a:	90 e0       	ldi	r25, 0x00	; 0
    379c:	80 93 36 38 	sts	0x3836, r24	; 0x803836 <effect>
    37a0:	90 93 37 38 	sts	0x3837, r25	; 0x803837 <effect+0x1>
                    UpdateState(actObj1.byteField[ACTION_STATE]);
    37a4:	80 91 de 38 	lds	r24, 0x38DE	; 0x8038de <actObj1.3994+0xa>
    37a8:	0e 94 b5 0a 	call	0x156a	; 0x156a <UpdateState>
    37ac:	38 c0       	rjmp	.+112    	; 0x381e <ProcessInput+0xfd8>
                } else {
                    SetResponse(elements++, actObj1.addrStr[ACTION_ACL_MSG], actObj1.lenStr[ACTION_ACL_MSG], GAME);
    37ae:	80 91 f8 38 	lds	r24, 0x38F8	; 0x8038f8 <actObj1.3994+0x24>
    37b2:	90 91 f9 38 	lds	r25, 0x38F9	; 0x8038f9 <actObj1.3994+0x25>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    37b6:	20 91 ea 38 	lds	r18, 0x38EA	; 0x8038ea <actObj1.3994+0x16>
    37ba:	30 91 eb 38 	lds	r19, 0x38EB	; 0x8038eb <actObj1.3994+0x17>
    37be:	20 93 17 39 	sts	0x3917, r18	; 0x803917 <reactStr+0x2>
    37c2:	30 93 18 39 	sts	0x3918, r19	; 0x803918 <reactStr+0x3>
    reactStr[1][number]=length;
    37c6:	80 93 57 39 	sts	0x3957, r24	; 0x803957 <reactStr+0x42>
    37ca:	90 93 58 39 	sts	0x3958, r25	; 0x803958 <reactStr+0x43>
    reactStr[2][number]=type;
    37ce:	10 92 97 39 	sts	0x3997, r1	; 0x803997 <reactStr+0x82>
    37d2:	10 92 98 39 	sts	0x3998, r1	; 0x803998 <reactStr+0x83>
                    SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                    effect = actObj1.effect[2];
                    UpdateState(actObj1.byteField[ACTION_STATE]);
                } else {
                    SetResponse(elements++, actObj1.addrStr[ACTION_ACL_MSG], actObj1.lenStr[ACTION_ACL_MSG], GAME);
                    effect = actObj1.effect[1];
    37d6:	80 91 fd 38 	lds	r24, 0x38FD	; 0x8038fd <actObj1.3994+0x29>
    37da:	90 e0       	ldi	r25, 0x00	; 0
    37dc:	80 93 36 38 	sts	0x3836, r24	; 0x803836 <effect>
    37e0:	90 93 37 38 	sts	0x3837, r25	; 0x803837 <effect+0x1>
    37e4:	1c c0       	rjmp	.+56     	; 0x381e <ProcessInput+0xfd8>
                }

            } else {
                PopulateObject(route[currDepth+1], &actObj1);
    37e6:	80 81       	ld	r24, Z
    37e8:	91 81       	ldd	r25, Z+1	; 0x01
    37ea:	0e 94 76 0f 	call	0x1eec	; 0x1eec <PopulateObject>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    37ee:	8d e9       	ldi	r24, 0x9D	; 157
    37f0:	98 e7       	ldi	r25, 0x78	; 120
    37f2:	80 93 17 39 	sts	0x3917, r24	; 0x803917 <reactStr+0x2>
    37f6:	90 93 18 39 	sts	0x3918, r25	; 0x803918 <reactStr+0x3>
    reactStr[1][number]=length;
    37fa:	82 e1       	ldi	r24, 0x12	; 18
    37fc:	90 e0       	ldi	r25, 0x00	; 0
    37fe:	80 93 57 39 	sts	0x3957, r24	; 0x803957 <reactStr+0x42>
    3802:	90 93 58 39 	sts	0x3958, r25	; 0x803958 <reactStr+0x43>
    reactStr[2][number]=type;
    3806:	81 e0       	ldi	r24, 0x01	; 1
    3808:	90 e0       	ldi	r25, 0x00	; 0
    380a:	80 93 97 39 	sts	0x3997, r24	; 0x803997 <reactStr+0x82>
    380e:	90 93 98 39 	sts	0x3998, r25	; 0x803998 <reactStr+0x83>
                }

            } else {
                PopulateObject(route[currDepth+1], &actObj1);
                SetResponse(elements++, A_INCORRECT, L_INCORRECT, TEASER);
                PunishmentTime = getClock();
    3812:	0e 94 bf 0c 	call	0x197e	; 0x197e <getClock>
    3816:	80 93 01 39 	sts	0x3901, r24	; 0x803901 <PunishmentTime>
    381a:	90 93 02 39 	sts	0x3902, r25	; 0x803902 <PunishmentTime+0x1>
                    effect = actObj1.effect[1];
                }

            } else {
                PopulateObject(route[currDepth+1], &actObj1);
                SetResponse(elements++, A_INCORRECT, L_INCORRECT, TEASER);
    381e:	82 e0       	ldi	r24, 0x02	; 2
    3820:	78 2e       	mov	r7, r24
                PunishmentTime = getClock();
            }
            specialInput[0] = 0;
    3822:	10 92 04 39 	sts	0x3904, r1	; 0x803904 <specialInput>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3826:	8b e5       	ldi	r24, 0x5B	; 91
    3828:	9a e7       	ldi	r25, 0x7A	; 122
    382a:	80 93 15 39 	sts	0x3915, r24	; 0x803915 <reactStr>
    382e:	90 93 16 39 	sts	0x3916, r25	; 0x803916 <reactStr+0x1>
    reactStr[1][number]=length;
    3832:	82 e0       	ldi	r24, 0x02	; 2
    3834:	90 e0       	ldi	r25, 0x00	; 0
    3836:	80 93 55 39 	sts	0x3955, r24	; 0x803955 <reactStr+0x40>
    383a:	90 93 56 39 	sts	0x3956, r25	; 0x803956 <reactStr+0x41>
    reactStr[2][number]=type;
    383e:	81 e0       	ldi	r24, 0x01	; 1
    3840:	90 e0       	ldi	r25, 0x00	; 0
    3842:	80 93 95 39 	sts	0x3995, r24	; 0x803995 <reactStr+0x80>
    3846:	90 93 96 39 	sts	0x3996, r25	; 0x803996 <reactStr+0x81>
               
        }
            
        //Input handled
        SetResponse(0, A_LF, 2, TEASER);
        if (specialInput[0]) responseList = elements; else responseList = SetStandardResponse(elements);
    384a:	80 91 04 39 	lds	r24, 0x3904	; 0x803904 <specialInput>
    384e:	88 23       	and	r24, r24
    3850:	19 f0       	breq	.+6      	; 0x3858 <ProcessInput+0x1012>
    3852:	70 92 14 39 	sts	0x3914, r7	; 0x803914 <responseList>
    3856:	9a c0       	rjmp	.+308    	; 0x398c <ProcessInput+0x1146>
    3858:	87 2d       	mov	r24, r7
    385a:	12 c0       	rjmp	.+36     	; 0x3880 <ProcessInput+0x103a>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    385c:	8b e5       	ldi	r24, 0x5B	; 91
    385e:	9a e7       	ldi	r25, 0x7A	; 122
    3860:	80 93 15 39 	sts	0x3915, r24	; 0x803915 <reactStr>
    3864:	90 93 16 39 	sts	0x3916, r25	; 0x803916 <reactStr+0x1>
    reactStr[1][number]=length;
    3868:	82 e0       	ldi	r24, 0x02	; 2
    386a:	90 e0       	ldi	r25, 0x00	; 0
    386c:	80 93 55 39 	sts	0x3955, r24	; 0x803955 <reactStr+0x40>
    3870:	90 93 56 39 	sts	0x3956, r25	; 0x803956 <reactStr+0x41>
    reactStr[2][number]=type;
    3874:	81 e0       	ldi	r24, 0x01	; 1
    3876:	90 e0       	ldi	r25, 0x00	; 0
    3878:	80 93 95 39 	sts	0x3995, r24	; 0x803995 <reactStr+0x80>
    387c:	90 93 96 39 	sts	0x3996, r25	; 0x803996 <reactStr+0x81>
        SetResponse(0, A_LF, 2, TEASER);
        if (specialInput[0]) responseList = elements; else responseList = SetStandardResponse(elements);

    } else {
        SetResponse(0, A_LF, 2, TEASER);
        responseList = SetStandardResponse(1);
    3880:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <SetStandardResponse>
    3884:	80 93 14 39 	sts	0x3914, r24	; 0x803914 <responseList>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3888:	81 c0       	rjmp	.+258    	; 0x398c <ProcessInput+0x1146>
    388a:	83 ed       	ldi	r24, 0xD3	; 211
    388c:	99 e7       	ldi	r25, 0x79	; 121

        //Drop item if in inventory
        if (data[0] == 'd') {
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
    388e:	a0 cd       	rjmp	.-1216   	; 0x33d0 <ProcessInput+0xb8a>
    3890:	b2 e0       	ldi	r27, 0x02	; 2
    3892:	fb 12       	cpse	r15, r27
    3894:	08 c8       	rjmp	.-4080   	; 0x28a6 <ProcessInput+0x60>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
                        if (CheckLetter(inventory[x], data[1])) {
    3896:	d8 01       	movw	r26, r16
    3898:	11 96       	adiw	r26, 0x01	; 1
    389a:	6c 91       	ld	r22, X
    389c:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <CheckLetter>
    38a0:	88 23       	and	r24, r24
    38a2:	09 f4       	brne	.+2      	; 0x38a6 <ProcessInput+0x1060>
    38a4:	5b c0       	rjmp	.+182    	; 0x395c <ProcessInput+0x1116>
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
    38a6:	80 e0       	ldi	r24, 0x00	; 0
    38a8:	90 e0       	ldi	r25, 0x00	; 0
                        if (CheckLetter(inventory[x], data[1])) {
                            PopulateObject(inventory[x], &actObj1);
    38aa:	88 0f       	add	r24, r24
    38ac:	99 1f       	adc	r25, r25
    38ae:	9c 01       	movw	r18, r24
    38b0:	26 5c       	subi	r18, 0xC6	; 198
    38b2:	37 4c       	sbci	r19, 0xC7	; 199
    38b4:	79 01       	movw	r14, r18
    38b6:	64 ed       	ldi	r22, 0xD4	; 212
    38b8:	78 e3       	ldi	r23, 0x38	; 56
    38ba:	d9 01       	movw	r26, r18
    38bc:	8d 91       	ld	r24, X+
    38be:	9c 91       	ld	r25, X
    38c0:	0e 94 76 0f 	call	0x1eec	; 0x1eec <PopulateObject>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    38c4:	83 ed       	ldi	r24, 0xD3	; 211
    38c6:	97 e7       	ldi	r25, 0x77	; 119
    38c8:	80 93 17 39 	sts	0x3917, r24	; 0x803917 <reactStr+0x2>
    38cc:	90 93 18 39 	sts	0x3918, r25	; 0x803918 <reactStr+0x3>
    reactStr[1][number]=length;
    38d0:	80 e1       	ldi	r24, 0x10	; 16
    38d2:	90 e0       	ldi	r25, 0x00	; 0
    38d4:	80 93 57 39 	sts	0x3957, r24	; 0x803957 <reactStr+0x42>
    38d8:	90 93 58 39 	sts	0x3958, r25	; 0x803958 <reactStr+0x43>
    reactStr[2][number]=type;
    38dc:	81 e0       	ldi	r24, 0x01	; 1
    38de:	90 e0       	ldi	r25, 0x00	; 0
    38e0:	80 93 97 39 	sts	0x3997, r24	; 0x803997 <reactStr+0x82>
    38e4:	90 93 98 39 	sts	0x3998, r25	; 0x803998 <reactStr+0x83>
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
                        if (CheckLetter(inventory[x], data[1])) {
                            PopulateObject(inventory[x], &actObj1);
                            SetResponse(elements++, A_DROPPING, L_DROPPING, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    38e8:	20 91 ee 38 	lds	r18, 0x38EE	; 0x8038ee <actObj1.3994+0x1a>
    38ec:	30 91 ef 38 	lds	r19, 0x38EF	; 0x8038ef <actObj1.3994+0x1b>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    38f0:	40 91 e0 38 	lds	r20, 0x38E0	; 0x8038e0 <actObj1.3994+0xc>
    38f4:	50 91 e1 38 	lds	r21, 0x38E1	; 0x8038e1 <actObj1.3994+0xd>
    38f8:	40 93 19 39 	sts	0x3919, r20	; 0x803919 <reactStr+0x4>
    38fc:	50 93 1a 39 	sts	0x391A, r21	; 0x80391a <reactStr+0x5>
    reactStr[1][number]=length;
    3900:	20 93 59 39 	sts	0x3959, r18	; 0x803959 <reactStr+0x44>
    3904:	30 93 5a 39 	sts	0x395A, r19	; 0x80395a <reactStr+0x45>
    reactStr[2][number]=type;
    3908:	10 92 99 39 	sts	0x3999, r1	; 0x803999 <reactStr+0x84>
    390c:	10 92 9a 39 	sts	0x399A, r1	; 0x80399a <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3910:	2b e5       	ldi	r18, 0x5B	; 91
    3912:	3a e7       	ldi	r19, 0x7A	; 122
    3914:	20 93 1b 39 	sts	0x391B, r18	; 0x80391b <reactStr+0x6>
    3918:	30 93 1c 39 	sts	0x391C, r19	; 0x80391c <reactStr+0x7>
    reactStr[1][number]=length;
    391c:	22 e0       	ldi	r18, 0x02	; 2
    391e:	30 e0       	ldi	r19, 0x00	; 0
    3920:	20 93 5b 39 	sts	0x395B, r18	; 0x80395b <reactStr+0x46>
    3924:	30 93 5c 39 	sts	0x395C, r19	; 0x80395c <reactStr+0x47>
    reactStr[2][number]=type;
    3928:	80 93 9b 39 	sts	0x399B, r24	; 0x80399b <reactStr+0x86>
    392c:	90 93 9c 39 	sts	0x399C, r25	; 0x80399c <reactStr+0x87>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3930:	26 e9       	ldi	r18, 0x96	; 150
    3932:	37 e7       	ldi	r19, 0x77	; 119
    3934:	20 93 1d 39 	sts	0x391D, r18	; 0x80391d <reactStr+0x8>
    3938:	30 93 1e 39 	sts	0x391E, r19	; 0x80391e <reactStr+0x9>
    reactStr[1][number]=length;
    393c:	2d e3       	ldi	r18, 0x3D	; 61
    393e:	30 e0       	ldi	r19, 0x00	; 0
    3940:	20 93 5d 39 	sts	0x395D, r18	; 0x80395d <reactStr+0x48>
    3944:	30 93 5e 39 	sts	0x395E, r19	; 0x80395e <reactStr+0x49>
    reactStr[2][number]=type;
    3948:	80 93 9d 39 	sts	0x399D, r24	; 0x80399d <reactStr+0x88>
    394c:	90 93 9e 39 	sts	0x399E, r25	; 0x80399e <reactStr+0x89>
                            PopulateObject(inventory[x], &actObj1);
                            SetResponse(elements++, A_DROPPING, L_DROPPING, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                            SetResponse(elements++, A_LF, 2, TEASER);
                            SetResponse(elements++, A_RETURNING, L_RETURNING, TEASER);
                            inventory[x] = 0;
    3950:	f7 01       	movw	r30, r14
    3952:	10 82       	st	Z, r1
    3954:	11 82       	std	Z+1, r1	; 0x01
                        if (CheckLetter(inventory[x], data[1])) {
                            PopulateObject(inventory[x], &actObj1);
                            SetResponse(elements++, A_DROPPING, L_DROPPING, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                            SetResponse(elements++, A_LF, 2, TEASER);
                            SetResponse(elements++, A_RETURNING, L_RETURNING, TEASER);
    3956:	f5 e0       	ldi	r31, 0x05	; 5
    3958:	7f 2e       	mov	r7, r31
                            inventory[x] = 0;
                            break;
    395a:	65 cf       	rjmp	.-310    	; 0x3826 <ProcessInput+0xfe0>
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
    395c:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <inventory+0x2>
    3960:	90 91 3d 38 	lds	r25, 0x383D	; 0x80383d <inventory+0x3>
    3964:	00 97       	sbiw	r24, 0x00	; 0
    3966:	49 f0       	breq	.+18     	; 0x397a <ProcessInput+0x1134>
                        if (CheckLetter(inventory[x], data[1])) {
    3968:	f8 01       	movw	r30, r16
    396a:	61 81       	ldd	r22, Z+1	; 0x01
    396c:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <CheckLetter>
    3970:	88 23       	and	r24, r24
    3972:	19 f0       	breq	.+6      	; 0x397a <ProcessInput+0x1134>
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
    3974:	81 e0       	ldi	r24, 0x01	; 1
    3976:	90 e0       	ldi	r25, 0x00	; 0
    3978:	98 cf       	rjmp	.-208    	; 0x38aa <ProcessInput+0x1064>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    397a:	83 e6       	ldi	r24, 0x63	; 99
    397c:	99 e7       	ldi	r25, 0x79	; 121
    397e:	80 93 17 39 	sts	0x3917, r24	; 0x803917 <reactStr+0x2>
    3982:	90 93 18 39 	sts	0x3918, r25	; 0x803918 <reactStr+0x3>
    reactStr[1][number]=length;
    3986:	81 e2       	ldi	r24, 0x21	; 33
    3988:	90 e0       	ldi	r25, 0x00	; 0
    398a:	22 c8       	rjmp	.-4028   	; 0x29d0 <ProcessInput+0x18a>
    } else {
        SetResponse(0, A_LF, 2, TEASER);
        responseList = SetStandardResponse(1);
    }

    data[0] = 0;
    398c:	d8 01       	movw	r26, r16
    398e:	1c 92       	st	X, r1
    serRxDone = 0;
    3990:	10 92 40 38 	sts	0x3840, r1	; 0x803840 <serRxDone>
    RXCNT = 0;    
    3994:	1d ba       	out	0x1d, r1	; 29
    return 0;
}
    3996:	80 e0       	ldi	r24, 0x00	; 0
    3998:	2a 96       	adiw	r28, 0x0a	; 10
    399a:	cd bf       	out	0x3d, r28	; 61
    399c:	de bf       	out	0x3e, r29	; 62
    399e:	df 91       	pop	r29
    39a0:	cf 91       	pop	r28
    39a2:	1f 91       	pop	r17
    39a4:	0f 91       	pop	r16
    39a6:	ff 90       	pop	r15
    39a8:	ef 90       	pop	r14
    39aa:	df 90       	pop	r13
    39ac:	cf 90       	pop	r12
    39ae:	bf 90       	pop	r11
    39b0:	af 90       	pop	r10
    39b2:	9f 90       	pop	r9
    39b4:	8f 90       	pop	r8
    39b6:	7f 90       	pop	r7
    39b8:	6f 90       	pop	r6
    39ba:	5f 90       	pop	r5
    39bc:	4f 90       	pop	r4
    39be:	08 95       	ret

000039c0 <TextAdventure>:


//MAIN GAME STRUCTURE
uint8_t TextAdventure(){
    39c0:	cf 93       	push	r28
    static uint8_t serInput[RXLEN];
    uint16_t PunishmentCount;
    
    /* Count down PunishmentTime on WING LEDs */
    if (PunishmentTime != 0) {
    39c2:	80 91 01 39 	lds	r24, 0x3901	; 0x803901 <PunishmentTime>
    39c6:	90 91 02 39 	lds	r25, 0x3902	; 0x803902 <PunishmentTime+0x1>
    39ca:	89 2b       	or	r24, r25
    39cc:	29 f4       	brne	.+10     	; 0x39d8 <TextAdventure+0x18>
            }
        }
    }

    //Still sending data to serial?
    if (CheckSend()) return 1;
    39ce:	0e 94 cc 10 	call	0x2198	; 0x2198 <CheckSend>
    39d2:	81 11       	cpse	r24, r1
    39d4:	49 c0       	rjmp	.+146    	; 0x3a68 <TextAdventure+0xa8>
    39d6:	43 c0       	rjmp	.+134    	; 0x3a5e <TextAdventure+0x9e>
    static uint8_t serInput[RXLEN];
    uint16_t PunishmentCount;
    
    /* Count down PunishmentTime on WING LEDs */
    if (PunishmentTime != 0) {
        PunishmentCount = getClock();
    39d8:	0e 94 bf 0c 	call	0x197e	; 0x197e <getClock>
        if (PunishmentCount < PunishmentTime)
    39dc:	20 91 01 39 	lds	r18, 0x3901	; 0x803901 <PunishmentTime>
    39e0:	30 91 02 39 	lds	r19, 0x3902	; 0x803902 <PunishmentTime+0x1>
    39e4:	82 17       	cp	r24, r18
    39e6:	93 07       	cpc	r25, r19
    39e8:	08 f4       	brcc	.+2      	; 0x39ec <TextAdventure+0x2c>
            PunishmentCount += 256 * 60;
    39ea:	94 5c       	subi	r25, 0xC4	; 196
        PunishmentCount -= PunishmentTime;
    39ec:	82 1b       	sub	r24, r18
    39ee:	93 0b       	sbc	r25, r19
        if (PunishmentCount > 10) {
    39f0:	8b 30       	cpi	r24, 0x0B	; 11
    39f2:	91 05       	cpc	r25, r1
    39f4:	30 f0       	brcs	.+12     	; 0x3a02 <TextAdventure+0x42>
            PunishmentTime = 0;
    39f6:	10 92 01 39 	sts	0x3901, r1	; 0x803901 <PunishmentTime>
    39fa:	10 92 02 39 	sts	0x3902, r1	; 0x803902 <PunishmentTime+0x1>
            PunishmentCount = 10;
    39fe:	8a e0       	ldi	r24, 0x0A	; 10
    3a00:	90 e0       	ldi	r25, 0x00	; 0
        }
        if (gameNow == TEXT ) {
    3a02:	20 91 38 38 	lds	r18, 0x3838	; 0x803838 <gameNow>
    3a06:	21 11       	cpse	r18, r1
    3a08:	e2 cf       	rjmp	.-60     	; 0x39ce <TextAdventure+0xe>
    3a0a:	ea ec       	ldi	r30, 0xCA	; 202
    3a0c:	fc eb       	ldi	r31, 0xBC	; 188
            for (uint8_t i=0; i<5; i++) {
                if (PunishmentCount + i + 5 < 10)
    3a0e:	9c 01       	movw	r18, r24
    3a10:	2b 5f       	subi	r18, 0xFB	; 251
    3a12:	3f 4f       	sbci	r19, 0xFF	; 255
                    iLED[WING[R][i]] = dimValue;
    3a14:	a0 81       	ld	r26, Z
    3a16:	b0 e0       	ldi	r27, 0x00	; 0
            PunishmentTime = 0;
            PunishmentCount = 10;
        }
        if (gameNow == TEXT ) {
            for (uint8_t i=0; i<5; i++) {
                if (PunishmentCount + i + 5 < 10)
    3a18:	2a 30       	cpi	r18, 0x0A	; 10
    3a1a:	31 05       	cpc	r19, r1
    3a1c:	30 f4       	brcc	.+12     	; 0x3a2a <TextAdventure+0x6a>
                    iLED[WING[R][i]] = dimValue;
    3a1e:	20 91 0b 38 	lds	r18, 0x380B	; 0x80380b <dimValue>
    3a22:	ac 53       	subi	r26, 0x3C	; 60
    3a24:	b5 4c       	sbci	r27, 0xC5	; 197
    3a26:	2c 93       	st	X, r18
    3a28:	06 c0       	rjmp	.+12     	; 0x3a36 <TextAdventure+0x76>
                else
                    iLED[WING[R][i]] = 0;
    3a2a:	ac 53       	subi	r26, 0x3C	; 60
    3a2c:	b5 4c       	sbci	r27, 0xC5	; 197
    3a2e:	1c 92       	st	X, r1

                if (PunishmentCount + i < 10)
    3a30:	8a 30       	cpi	r24, 0x0A	; 10
    3a32:	91 05       	cpc	r25, r1
    3a34:	40 f4       	brcc	.+16     	; 0x3a46 <TextAdventure+0x86>
                    iLED[WING[L][i]] = dimValue;
    3a36:	a5 81       	ldd	r26, Z+5	; 0x05
    3a38:	b0 e0       	ldi	r27, 0x00	; 0
    3a3a:	20 91 0b 38 	lds	r18, 0x380B	; 0x80380b <dimValue>
    3a3e:	ac 53       	subi	r26, 0x3C	; 60
    3a40:	b5 4c       	sbci	r27, 0xC5	; 197
    3a42:	2c 93       	st	X, r18
    3a44:	05 c0       	rjmp	.+10     	; 0x3a50 <TextAdventure+0x90>
                else
                    iLED[WING[L][i]] = 0;
    3a46:	a5 81       	ldd	r26, Z+5	; 0x05
    3a48:	b0 e0       	ldi	r27, 0x00	; 0
    3a4a:	ac 53       	subi	r26, 0x3C	; 60
    3a4c:	b5 4c       	sbci	r27, 0xC5	; 197
    3a4e:	1c 92       	st	X, r1
    3a50:	01 96       	adiw	r24, 0x01	; 1
    3a52:	31 96       	adiw	r30, 0x01	; 1
        if (PunishmentCount > 10) {
            PunishmentTime = 0;
            PunishmentCount = 10;
        }
        if (gameNow == TEXT ) {
            for (uint8_t i=0; i<5; i++) {
    3a54:	2c eb       	ldi	r18, 0xBC	; 188
    3a56:	ef 3c       	cpi	r30, 0xCF	; 207
    3a58:	f2 07       	cpc	r31, r18
    3a5a:	c9 f6       	brne	.-78     	; 0x3a0e <TextAdventure+0x4e>
    3a5c:	b8 cf       	rjmp	.-144    	; 0x39ce <TextAdventure+0xe>

    //Still sending data to serial?
    if (CheckSend()) return 1;

    //Not sending? Process next response part to send, if any.
    if (CheckResponse()) return 1;        
    3a5e:	0e 94 3a 11 	call	0x2274	; 0x2274 <CheckResponse>
    3a62:	c8 2f       	mov	r28, r24
    3a64:	88 23       	and	r24, r24
    3a66:	11 f0       	breq	.+4      	; 0x3a6c <TextAdventure+0xac>
            }
        }
    }

    //Still sending data to serial?
    if (CheckSend()) return 1;
    3a68:	c1 e0       	ldi	r28, 0x01	; 1
    3a6a:	13 c0       	rjmp	.+38     	; 0x3a92 <TextAdventure+0xd2>

    //Not sending? Process next response part to send, if any.
    if (CheckResponse()) return 1;        

    if (PunishmentTime == 0) {
    3a6c:	80 91 01 39 	lds	r24, 0x3901	; 0x803901 <PunishmentTime>
    3a70:	90 91 02 39 	lds	r25, 0x3902	; 0x803902 <PunishmentTime+0x1>
    3a74:	89 2b       	or	r24, r25
    3a76:	69 f4       	brne	.+26     	; 0x3a92 <TextAdventure+0xd2>
        //No responses to send, check if there is user input.
        if (CheckInput(&serInput[0])) return 2; 
    3a78:	88 e6       	ldi	r24, 0x68	; 104
    3a7a:	98 e3       	ldi	r25, 0x38	; 56
    3a7c:	0e 94 81 11 	call	0x2302	; 0x2302 <CheckInput>
    3a80:	c8 2f       	mov	r28, r24
    3a82:	81 11       	cpse	r24, r1
    3a84:	05 c0       	rjmp	.+10     	; 0x3a90 <TextAdventure+0xd0>

        //Input found, process and save (changes only)
        ProcessInput(&serInput[0]);
    3a86:	88 e6       	ldi	r24, 0x68	; 104
    3a88:	98 e3       	ldi	r25, 0x38	; 56
    3a8a:	0e 94 23 14 	call	0x2846	; 0x2846 <ProcessInput>
    3a8e:	01 c0       	rjmp	.+2      	; 0x3a92 <TextAdventure+0xd2>
    //Not sending? Process next response part to send, if any.
    if (CheckResponse()) return 1;        

    if (PunishmentTime == 0) {
        //No responses to send, check if there is user input.
        if (CheckInput(&serInput[0])) return 2; 
    3a90:	c2 e0       	ldi	r28, 0x02	; 2
        //Input found, process and save (changes only)
        ProcessInput(&serInput[0]);
    }

    return 0;
}
    3a92:	8c 2f       	mov	r24, r28
    3a94:	cf 91       	pop	r28
    3a96:	08 95       	ret

00003a98 <main>:


//This is where it begins, inits first and main program in while(1) loop.
int main(void)
{
    Setup();
    3a98:	0e 94 96 05 	call	0xb2c	; 0xb2c <Setup>

    SerSpeed(0xff);
    3a9c:	8f ef       	ldi	r24, 0xFF	; 255
    3a9e:	0e 94 06 09 	call	0x120c	; 0x120c <SerSpeed>
    3aa2:	a8 ed       	ldi	r26, 0xD8	; 216
    3aa4:	bc eb       	ldi	r27, 0xBC	; 188
    ////Turn on LEDs on low setting to check for interrupt glitches

    //"Hacker"
    for (uint8_t n=0; n<6; n++){
        iLED[HCKR[R][n]] = 1;
    3aa6:	81 e0       	ldi	r24, 0x01	; 1
    3aa8:	ed 91       	ld	r30, X+
    3aaa:	f0 e0       	ldi	r31, 0x00	; 0
    3aac:	ec 53       	subi	r30, 0x3C	; 60
    3aae:	f5 4c       	sbci	r31, 0xC5	; 197
    3ab0:	80 83       	st	Z, r24
        iLED[HCKR[G][n]] = 1;
    3ab2:	15 96       	adiw	r26, 0x05	; 5
    3ab4:	ec 91       	ld	r30, X
    3ab6:	15 97       	sbiw	r26, 0x05	; 5
    3ab8:	f0 e0       	ldi	r31, 0x00	; 0
    3aba:	ec 53       	subi	r30, 0x3C	; 60
    3abc:	f5 4c       	sbci	r31, 0xC5	; 197
    3abe:	80 83       	st	Z, r24

    SerSpeed(0xff);
    ////Turn on LEDs on low setting to check for interrupt glitches

    //"Hacker"
    for (uint8_t n=0; n<6; n++){
    3ac0:	2c eb       	ldi	r18, 0xBC	; 188
    3ac2:	ae 3d       	cpi	r26, 0xDE	; 222
    3ac4:	b2 07       	cpc	r27, r18
    3ac6:	81 f7       	brne	.-32     	; 0x3aa8 <main+0x10>
    3ac8:	ea ec       	ldi	r30, 0xCA	; 202
    3aca:	fc eb       	ldi	r31, 0xBC	; 188
        iLED[HCKR[G][n]] = 1;
    }

    //"Wings"
    for (uint8_t n=0; n<5; n++){
        iLED[WING[L][n]] = 1;
    3acc:	91 e0       	ldi	r25, 0x01	; 1
    3ace:	ef 01       	movw	r28, r30
    3ad0:	a5 81       	ldd	r26, Z+5	; 0x05
    3ad2:	b0 e0       	ldi	r27, 0x00	; 0
    3ad4:	ac 53       	subi	r26, 0x3C	; 60
    3ad6:	b5 4c       	sbci	r27, 0xC5	; 197
    3ad8:	81 e0       	ldi	r24, 0x01	; 1
    3ada:	9c 93       	st	X, r25
    3adc:	31 96       	adiw	r30, 0x01	; 1
        iLED[WING[R][n]] = 1;
    3ade:	a8 81       	ld	r26, Y
    3ae0:	b0 e0       	ldi	r27, 0x00	; 0
    3ae2:	ac 53       	subi	r26, 0x3C	; 60
    3ae4:	b5 4c       	sbci	r27, 0xC5	; 197
    3ae6:	9c 93       	st	X, r25
        iLED[HCKR[R][n]] = 1;
        iLED[HCKR[G][n]] = 1;
    }

    //"Wings"
    for (uint8_t n=0; n<5; n++){
    3ae8:	2c eb       	ldi	r18, 0xBC	; 188
    3aea:	ef 3c       	cpi	r30, 0xCF	; 207
    3aec:	f2 07       	cpc	r31, r18
    3aee:	79 f7       	brne	.-34     	; 0x3ace <main+0x36>
        iLED[WING[L][n]] = 1;
        iLED[WING[R][n]] = 1;
    }

    //"Others"
    iLED[EYE[G][R]] = 1;
    3af0:	e0 91 d6 bc 	lds	r30, 0xBCD6	; 0x80bcd6 <__bss_end+0x81c2>
    3af4:	f0 e0       	ldi	r31, 0x00	; 0
    3af6:	ec 53       	subi	r30, 0x3C	; 60
    3af8:	f5 4c       	sbci	r31, 0xC5	; 197
    3afa:	80 83       	st	Z, r24
    iLED[EYE[G][L]] = 1;
    3afc:	e0 91 d7 bc 	lds	r30, 0xBCD7	; 0x80bcd7 <__bss_end+0x81c3>
    3b00:	f0 e0       	ldi	r31, 0x00	; 0
    3b02:	ec 53       	subi	r30, 0x3C	; 60
    3b04:	f5 4c       	sbci	r31, 0xC5	; 197
    3b06:	80 83       	st	Z, r24
    iLED[EYE[R][R]] = 1;
    3b08:	e0 91 d4 bc 	lds	r30, 0xBCD4	; 0x80bcd4 <__bss_end+0x81c0>
    3b0c:	f0 e0       	ldi	r31, 0x00	; 0
    3b0e:	ec 53       	subi	r30, 0x3C	; 60
    3b10:	f5 4c       	sbci	r31, 0xC5	; 197
    3b12:	80 83       	st	Z, r24
    iLED[EYE[R][L]] = 1;
    3b14:	e0 91 d5 bc 	lds	r30, 0xBCD5	; 0x80bcd5 <__bss_end+0x81c1>
    3b18:	f0 e0       	ldi	r31, 0x00	; 0
    3b1a:	ec 53       	subi	r30, 0x3C	; 60
    3b1c:	f5 4c       	sbci	r31, 0xC5	; 197
    3b1e:	80 83       	st	Z, r24
    iLED[SCARAB[R]] = 1;
    3b20:	e0 91 c8 bc 	lds	r30, 0xBCC8	; 0x80bcc8 <__bss_end+0x81b4>
    3b24:	f0 e0       	ldi	r31, 0x00	; 0
    3b26:	ec 53       	subi	r30, 0x3C	; 60
    3b28:	f5 4c       	sbci	r31, 0xC5	; 197
    3b2a:	80 83       	st	Z, r24
    iLED[SCARAB[G]] = 1;
    3b2c:	e0 91 c9 bc 	lds	r30, 0xBCC9	; 0x80bcc9 <__bss_end+0x81b5>
    3b30:	f0 e0       	ldi	r31, 0x00	; 0
    3b32:	ec 53       	subi	r30, 0x3C	; 60
    3b34:	f5 4c       	sbci	r31, 0xC5	; 197
    3b36:	80 83       	st	Z, r24
    iLED[BADGER] = 1;
    3b38:	e0 91 c7 bc 	lds	r30, 0xBCC7	; 0x80bcc7 <__bss_end+0x81b3>
    3b3c:	f0 e0       	ldi	r31, 0x00	; 0
    3b3e:	ec 53       	subi	r30, 0x3C	; 60
    3b40:	f5 4c       	sbci	r31, 0xC5	; 197
    3b42:	80 83       	st	Z, r24
    iLED[CAT] = 1;
    3b44:	e0 91 c6 bc 	lds	r30, 0xBCC6	; 0x80bcc6 <__bss_end+0x81b2>
    3b48:	f0 e0       	ldi	r31, 0x00	; 0
    3b4a:	ec 53       	subi	r30, 0x3C	; 60
    3b4c:	f5 4c       	sbci	r31, 0xC5	; 197
    3b4e:	80 83       	st	Z, r24

    LoadGameState();
    3b50:	0e 94 06 0b 	call	0x160c	; 0x160c <LoadGameState>
            SaveGameState();

            //Check light sensor status (added hysteresis to preserve writing cycles to internal EEPROM)
            if (adcPhot < 10) WriteStatusBit(116, 1);
            if (adcPhot > 100) WriteStatusBit(116, 0);
            dimValue = 0 - QSINE[31-(adcPhot>>7)];
    3b54:	cf e1       	ldi	r28, 0x1F	; 31
    3b56:	d0 e0       	ldi	r29, 0x00	; 0
    iLED[CAT] = 1;

    LoadGameState();

    while (TRUE) {
        if (GenerateAudio()) {
    3b58:	0e 94 df 0b 	call	0x17be	; 0x17be <GenerateAudio>
    3b5c:	88 23       	and	r24, r24
    3b5e:	e1 f3       	breq	.-8      	; 0x3b58 <main+0xc0>
            buttonState = CheckButtons(buttonState);
    3b60:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <buttonState>
    3b64:	0e 94 35 09 	call	0x126a	; 0x126a <CheckButtons>
    3b68:	80 93 09 38 	sts	0x3809, r24	; 0x803809 <buttonState>
            buttonMark = 0;
    3b6c:	10 92 3e 38 	sts	0x383E, r1	; 0x80383e <buttonMark>

            if (VREF_CTRLA == 0x12) SelectAuIn(); else SelectTSens();
    3b70:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    3b74:	82 31       	cpi	r24, 0x12	; 18
    3b76:	19 f4       	brne	.+6      	; 0x3b7e <main+0xe6>
    3b78:	0e 94 26 09 	call	0x124c	; 0x124c <SelectAuIn>
    3b7c:	02 c0       	rjmp	.+4      	; 0x3b82 <main+0xea>
    3b7e:	0e 94 17 09 	call	0x122e	; 0x122e <SelectTSens>

            GenerateBlinks();
    3b82:	0e 94 98 0b 	call	0x1730	; 0x1730 <GenerateBlinks>

            //Main game, to complete: Finish sub-game MagnetMaze and MakeFriends too.
            TextAdventure();
    3b86:	1c df       	rcall	.-456    	; 0x39c0 <TextAdventure>

            //Other games & user interaction checks
            MagnetMaze();
    3b88:	0e 94 93 04 	call	0x926	; 0x926 <MagnetMaze>
            LanyardCode();
    3b8c:	0e 94 33 03 	call	0x666	; 0x666 <LanyardCode>
            BastetDictates();
    3b90:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <BastetDictates>
            MakeFriends();
    3b94:	0e 94 7c 00 	call	0xf8	; 0xf8 <MakeFriends>

            //Save progress
            SaveGameState();
    3b98:	0e 94 14 0a 	call	0x1428	; 0x1428 <SaveGameState>

            //Check light sensor status (added hysteresis to preserve writing cycles to internal EEPROM)
            if (adcPhot < 10) WriteStatusBit(116, 1);
    3b9c:	80 91 b7 3a 	lds	r24, 0x3AB7	; 0x803ab7 <adcPhot>
    3ba0:	90 91 b8 3a 	lds	r25, 0x3AB8	; 0x803ab8 <adcPhot+0x1>
    3ba4:	0a 97       	sbiw	r24, 0x0a	; 10
    3ba6:	20 f4       	brcc	.+8      	; 0x3bb0 <main+0x118>
    3ba8:	61 e0       	ldi	r22, 0x01	; 1
    3baa:	84 e7       	ldi	r24, 0x74	; 116
    3bac:	0e 94 9b 0a 	call	0x1536	; 0x1536 <WriteStatusBit>
            if (adcPhot > 100) WriteStatusBit(116, 0);
    3bb0:	80 91 b7 3a 	lds	r24, 0x3AB7	; 0x803ab7 <adcPhot>
    3bb4:	90 91 b8 3a 	lds	r25, 0x3AB8	; 0x803ab8 <adcPhot+0x1>
    3bb8:	85 36       	cpi	r24, 0x65	; 101
    3bba:	91 05       	cpc	r25, r1
    3bbc:	20 f0       	brcs	.+8      	; 0x3bc6 <main+0x12e>
    3bbe:	60 e0       	ldi	r22, 0x00	; 0
    3bc0:	84 e7       	ldi	r24, 0x74	; 116
    3bc2:	0e 94 9b 0a 	call	0x1536	; 0x1536 <WriteStatusBit>
            dimValue = 0 - QSINE[31-(adcPhot>>7)];
    3bc6:	80 91 b7 3a 	lds	r24, 0x3AB7	; 0x803ab7 <adcPhot>
    3bca:	90 91 b8 3a 	lds	r25, 0x3AB8	; 0x803ab8 <adcPhot+0x1>
    3bce:	88 0f       	add	r24, r24
    3bd0:	89 2f       	mov	r24, r25
    3bd2:	88 1f       	adc	r24, r24
    3bd4:	99 0b       	sbc	r25, r25
    3bd6:	91 95       	neg	r25
    3bd8:	fe 01       	movw	r30, r28
    3bda:	e8 1b       	sub	r30, r24
    3bdc:	f9 0b       	sbc	r31, r25
    3bde:	ec 51       	subi	r30, 0x1C	; 28
    3be0:	f3 44       	sbci	r31, 0x43	; 67
    3be2:	80 81       	ld	r24, Z
    3be4:	81 95       	neg	r24
    3be6:	80 93 0b 38 	sts	0x380B, r24	; 0x80380b <dimValue>

            //Check temperature
            HotSummer();
    3bea:	0e 94 33 0b 	call	0x1666	; 0x1666 <HotSummer>
    3bee:	b4 cf       	rjmp	.-152    	; 0x3b58 <main+0xc0>

00003bf0 <__udivmodqi4>:
    3bf0:	99 1b       	sub	r25, r25
    3bf2:	79 e0       	ldi	r23, 0x09	; 9
    3bf4:	04 c0       	rjmp	.+8      	; 0x3bfe <__udivmodqi4_ep>

00003bf6 <__udivmodqi4_loop>:
    3bf6:	99 1f       	adc	r25, r25
    3bf8:	96 17       	cp	r25, r22
    3bfa:	08 f0       	brcs	.+2      	; 0x3bfe <__udivmodqi4_ep>
    3bfc:	96 1b       	sub	r25, r22

00003bfe <__udivmodqi4_ep>:
    3bfe:	88 1f       	adc	r24, r24
    3c00:	7a 95       	dec	r23
    3c02:	c9 f7       	brne	.-14     	; 0x3bf6 <__udivmodqi4_loop>
    3c04:	80 95       	com	r24
    3c06:	08 95       	ret

00003c08 <__udivmodhi4>:
    3c08:	aa 1b       	sub	r26, r26
    3c0a:	bb 1b       	sub	r27, r27
    3c0c:	51 e1       	ldi	r21, 0x11	; 17
    3c0e:	07 c0       	rjmp	.+14     	; 0x3c1e <__udivmodhi4_ep>

00003c10 <__udivmodhi4_loop>:
    3c10:	aa 1f       	adc	r26, r26
    3c12:	bb 1f       	adc	r27, r27
    3c14:	a6 17       	cp	r26, r22
    3c16:	b7 07       	cpc	r27, r23
    3c18:	10 f0       	brcs	.+4      	; 0x3c1e <__udivmodhi4_ep>
    3c1a:	a6 1b       	sub	r26, r22
    3c1c:	b7 0b       	sbc	r27, r23

00003c1e <__udivmodhi4_ep>:
    3c1e:	88 1f       	adc	r24, r24
    3c20:	99 1f       	adc	r25, r25
    3c22:	5a 95       	dec	r21
    3c24:	a9 f7       	brne	.-22     	; 0x3c10 <__udivmodhi4_loop>
    3c26:	80 95       	com	r24
    3c28:	90 95       	com	r25
    3c2a:	bc 01       	movw	r22, r24
    3c2c:	cd 01       	movw	r24, r26
    3c2e:	08 95       	ret

00003c30 <__divmodhi4>:
    3c30:	97 fb       	bst	r25, 7
    3c32:	07 2e       	mov	r0, r23
    3c34:	16 f4       	brtc	.+4      	; 0x3c3a <__divmodhi4+0xa>
    3c36:	00 94       	com	r0
    3c38:	06 d0       	rcall	.+12     	; 0x3c46 <__divmodhi4_neg1>
    3c3a:	77 fd       	sbrc	r23, 7
    3c3c:	08 d0       	rcall	.+16     	; 0x3c4e <__divmodhi4_neg2>
    3c3e:	e4 df       	rcall	.-56     	; 0x3c08 <__udivmodhi4>
    3c40:	07 fc       	sbrc	r0, 7
    3c42:	05 d0       	rcall	.+10     	; 0x3c4e <__divmodhi4_neg2>
    3c44:	3e f4       	brtc	.+14     	; 0x3c54 <__divmodhi4_exit>

00003c46 <__divmodhi4_neg1>:
    3c46:	90 95       	com	r25
    3c48:	81 95       	neg	r24
    3c4a:	9f 4f       	sbci	r25, 0xFF	; 255
    3c4c:	08 95       	ret

00003c4e <__divmodhi4_neg2>:
    3c4e:	70 95       	com	r23
    3c50:	61 95       	neg	r22
    3c52:	7f 4f       	sbci	r23, 0xFF	; 255

00003c54 <__divmodhi4_exit>:
    3c54:	08 95       	ret

00003c56 <__udivmodsi4>:
    3c56:	a1 e2       	ldi	r26, 0x21	; 33
    3c58:	1a 2e       	mov	r1, r26
    3c5a:	aa 1b       	sub	r26, r26
    3c5c:	bb 1b       	sub	r27, r27
    3c5e:	fd 01       	movw	r30, r26
    3c60:	0d c0       	rjmp	.+26     	; 0x3c7c <__udivmodsi4_ep>

00003c62 <__udivmodsi4_loop>:
    3c62:	aa 1f       	adc	r26, r26
    3c64:	bb 1f       	adc	r27, r27
    3c66:	ee 1f       	adc	r30, r30
    3c68:	ff 1f       	adc	r31, r31
    3c6a:	a2 17       	cp	r26, r18
    3c6c:	b3 07       	cpc	r27, r19
    3c6e:	e4 07       	cpc	r30, r20
    3c70:	f5 07       	cpc	r31, r21
    3c72:	20 f0       	brcs	.+8      	; 0x3c7c <__udivmodsi4_ep>
    3c74:	a2 1b       	sub	r26, r18
    3c76:	b3 0b       	sbc	r27, r19
    3c78:	e4 0b       	sbc	r30, r20
    3c7a:	f5 0b       	sbc	r31, r21

00003c7c <__udivmodsi4_ep>:
    3c7c:	66 1f       	adc	r22, r22
    3c7e:	77 1f       	adc	r23, r23
    3c80:	88 1f       	adc	r24, r24
    3c82:	99 1f       	adc	r25, r25
    3c84:	1a 94       	dec	r1
    3c86:	69 f7       	brne	.-38     	; 0x3c62 <__udivmodsi4_loop>
    3c88:	60 95       	com	r22
    3c8a:	70 95       	com	r23
    3c8c:	80 95       	com	r24
    3c8e:	90 95       	com	r25
    3c90:	9b 01       	movw	r18, r22
    3c92:	ac 01       	movw	r20, r24
    3c94:	bd 01       	movw	r22, r26
    3c96:	cf 01       	movw	r24, r30
    3c98:	08 95       	ret

00003c9a <_exit>:
    3c9a:	f8 94       	cli

00003c9c <__stop_program>:
    3c9c:	ff cf       	rjmp	.-2      	; 0x3c9c <__stop_program>
