
ISR_IO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00803800  00003fcb  0000407f  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003f1e  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ad  0000bf1e  00003f1e  00003fd2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          000002e2  00803830  00803830  000040af  2**0
                  ALLOC
  4 .comment      00000030  00000000  00000000  000040af  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000040e0  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000338  00000000  00000000  00004120  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00006c22  00000000  00000000  00004458  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000028a1  00000000  00000000  0000b07a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003d99  00000000  00000000  0000d91b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000a04  00000000  00000000  000116b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001a8f  00000000  00000000  000120b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000041b2  00000000  00000000  00013b47  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000003a8  00000000  00000000  00017cf9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	46 c0       	rjmp	.+140    	; 0x8e <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	7a c7       	rjmp	.+3828   	; 0xf0e <__vector_6>
      1a:	00 00       	nop
      1c:	cf c7       	rjmp	.+3998   	; 0xfbc <__vector_7>
      1e:	00 00       	nop
      20:	b7 c5       	rjmp	.+2926   	; 0xb90 <__vector_8>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	fe c5       	rjmp	.+3068   	; 0xc32 <__vector_13>
      36:	00 00       	nop
      38:	2f c6       	rjmp	.+3166   	; 0xc98 <__vector_14>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	ea c6       	rjmp	.+3540   	; 0xe26 <__vector_20>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	12 c7       	rjmp	.+3620   	; 0xe7e <__vector_22>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	65 c6       	rjmp	.+3274   	; 0xd38 <__vector_27>
      6e:	00 00       	nop
      70:	be c6       	rjmp	.+3452   	; 0xdee <__vector_28>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	a4 0b       	sbc	r26, r20
      7e:	d2 0b       	sbc	r29, r18
      80:	d9 0b       	sbc	r29, r25
      82:	88 0c       	add	r8, r8
      84:	88 0c       	add	r8, r8
      86:	ed 0b       	sbc	r30, r29
      88:	ff 0b       	sbc	r31, r31
      8a:	2a 0c       	add	r2, r10
      8c:	4e 0c       	add	r4, r14

0000008e <__ctors_end>:
      8e:	11 24       	eor	r1, r1
      90:	1f be       	out	0x3f, r1	; 63
      92:	cf ef       	ldi	r28, 0xFF	; 255
      94:	cd bf       	out	0x3d, r28	; 61
      96:	df e3       	ldi	r29, 0x3F	; 63
      98:	de bf       	out	0x3e, r29	; 62

0000009a <__do_copy_data>:
      9a:	18 e3       	ldi	r17, 0x38	; 56
      9c:	a0 e0       	ldi	r26, 0x00	; 0
      9e:	b8 e3       	ldi	r27, 0x38	; 56
      a0:	eb ec       	ldi	r30, 0xCB	; 203
      a2:	ff e3       	ldi	r31, 0x3F	; 63
      a4:	02 c0       	rjmp	.+4      	; 0xaa <__do_copy_data+0x10>
      a6:	05 90       	lpm	r0, Z+
      a8:	0d 92       	st	X+, r0
      aa:	a0 33       	cpi	r26, 0x30	; 48
      ac:	b1 07       	cpc	r27, r17
      ae:	d9 f7       	brne	.-10     	; 0xa6 <__do_copy_data+0xc>

000000b0 <__do_clear_bss>:
      b0:	2b e3       	ldi	r18, 0x3B	; 59
      b2:	a0 e3       	ldi	r26, 0x30	; 48
      b4:	b8 e3       	ldi	r27, 0x38	; 56
      b6:	01 c0       	rjmp	.+2      	; 0xba <.do_clear_bss_start>

000000b8 <.do_clear_bss_loop>:
      b8:	1d 92       	st	X+, r1

000000ba <.do_clear_bss_start>:
      ba:	a2 31       	cpi	r26, 0x12	; 18
      bc:	b2 07       	cpc	r27, r18
      be:	e1 f7       	brne	.-8      	; 0xb8 <.do_clear_bss_loop>
      c0:	0e 94 05 1f 	call	0x3e0a	; 0x3e0a <main>
      c4:	0c 94 8d 1f 	jmp	0x3f1a	; 0x3f1a <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <chkVolt250>:
#include <main_def.h>
#include <resources.h>
#include <I2C.h>

//Returns measured voltage * 4 (2V returns 8) if it is in the expected range (DELTA)
uint8_t chkVolt250(){
      ca:	28 ed       	ldi	r18, 0xD8	; 216
      cc:	30 e0       	ldi	r19, 0x00	; 0
    uint8_t avgVolt = 9;
      ce:	89 e0       	ldi	r24, 0x09	; 9
        
    for (uint8_t x=225; x>24; x-=25) {
        if ((auIn > (x-DELTA)) && (auIn < (x+DELTA))) {
      d0:	40 91 c2 3a 	lds	r20, 0x3AC2	; 0x803ac2 <auIn>
      d4:	50 e0       	ldi	r21, 0x00	; 0
      d6:	42 17       	cp	r20, r18
      d8:	53 07       	cpc	r21, r19
      da:	4c f0       	brlt	.+18     	; 0xee <chkVolt250+0x24>
      dc:	40 91 c2 3a 	lds	r20, 0x3AC2	; 0x803ac2 <auIn>
      e0:	50 e0       	ldi	r21, 0x00	; 0
      e2:	b9 01       	movw	r22, r18
      e4:	6e 5e       	subi	r22, 0xEE	; 238
      e6:	7f 4f       	sbci	r23, 0xFF	; 255
      e8:	64 17       	cp	r22, r20
      ea:	75 07       	cpc	r23, r21
      ec:	2c f4       	brge	.+10     	; 0xf8 <chkVolt250+0x2e>
            break;
        }
        --avgVolt;
      ee:	81 50       	subi	r24, 0x01	; 1
      f0:	29 51       	subi	r18, 0x19	; 25
      f2:	31 09       	sbc	r19, r1

//Returns measured voltage * 4 (2V returns 8) if it is in the expected range (DELTA)
uint8_t chkVolt250(){
    uint8_t avgVolt = 9;
        
    for (uint8_t x=225; x>24; x-=25) {
      f4:	81 11       	cpse	r24, r1
      f6:	ec cf       	rjmp	.-40     	; 0xd0 <chkVolt250+0x6>
            break;
        }
        --avgVolt;
    }
    return avgVolt;
}
      f8:	08 95       	ret

000000fa <MakeFriends>:

// Main game loop
uint8_t MakeFriends(){
      fa:	cf 93       	push	r28
      fc:	df 93       	push	r29
      fe:	c4 e6       	ldi	r28, 0x64	; 100
    static uint8_t chkTmr = 0;
    static uint8_t jackIn = 0;
    static uint8_t candidate = 0;

    //Check if badge has found 3 friends
    uint8_t foundAll = 1;
     100:	d1 e0       	ldi	r29, 0x01	; 1
    for (uint8_t x=0; x<4; ++x){
        if (CheckState(100+x) == 0) foundAll = 0;
     102:	8c 2f       	mov	r24, r28
     104:	0e 94 0c 0a 	call	0x1418	; 0x1418 <CheckState>
     108:	81 11       	cpse	r24, r1
     10a:	01 c0       	rjmp	.+2      	; 0x10e <MakeFriends+0x14>
     10c:	d0 e0       	ldi	r29, 0x00	; 0
     10e:	cf 5f       	subi	r28, 0xFF	; 255
    static uint8_t jackIn = 0;
    static uint8_t candidate = 0;

    //Check if badge has found 3 friends
    uint8_t foundAll = 1;
    for (uint8_t x=0; x<4; ++x){
     110:	c8 36       	cpi	r28, 0x68	; 104
     112:	b9 f7       	brne	.-18     	; 0x102 <MakeFriends+0x8>
        if (CheckState(100+x) == 0) foundAll = 0;
    }
    if (foundAll) UpdateState(124);
     114:	dd 23       	and	r29, r29
     116:	19 f0       	breq	.+6      	; 0x11e <MakeFriends+0x24>
     118:	8c e7       	ldi	r24, 0x7C	; 124
     11a:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <UpdateState>

    //Set game state, must be able to hijack from other games.
    if (progress > FIRST_CONTACT) { 
     11e:	80 91 33 38 	lds	r24, 0x3833	; 0x803833 <progress.3788>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	20 f0       	brcs	.+8      	; 0x12e <MakeFriends+0x34>
        gameNow = FRIENDS; 
     126:	94 e0       	ldi	r25, 0x04	; 4
     128:	90 93 3c 38 	sts	0x383C, r25	; 0x80383c <gameNow>
     12c:	0d c0       	rjmp	.+26     	; 0x148 <MakeFriends+0x4e>
    }
    
    //Clear game state if not communicating properly or headphones detected
    if (((progress == NO_OTHER) && (gameNow == FRIENDS)) || detHdPh){
     12e:	81 11       	cpse	r24, r1
     130:	0b c0       	rjmp	.+22     	; 0x148 <MakeFriends+0x4e>
     132:	90 91 3c 38 	lds	r25, 0x383C	; 0x80383c <gameNow>
     136:	94 30       	cpi	r25, 0x04	; 4
     138:	39 f4       	brne	.+14     	; 0x148 <MakeFriends+0x4e>
        gameNow = TEXT; 
     13a:	10 92 3c 38 	sts	0x383C, r1	; 0x80383c <gameNow>
        effect = 0;
     13e:	10 92 3a 38 	sts	0x383A, r1	; 0x80383a <effect>
     142:	10 92 3b 38 	sts	0x383B, r1	; 0x80383b <effect+0x1>
     146:	04 c0       	rjmp	.+8      	; 0x150 <MakeFriends+0x56>
    if (progress > FIRST_CONTACT) { 
        gameNow = FRIENDS; 
    }
    
    //Clear game state if not communicating properly or headphones detected
    if (((progress == NO_OTHER) && (gameNow == FRIENDS)) || detHdPh){
     148:	90 91 bf 3a 	lds	r25, 0x3ABF	; 0x803abf <detHdPh>
     14c:	91 11       	cpse	r25, r1
     14e:	f5 cf       	rjmp	.-22     	; 0x13a <MakeFriends+0x40>
        gameNow = TEXT; 
        effect = 0;
    }

    //Audio off, set voltage level (setDAC[0]*10mV)
    if (progress == NO_OTHER) {
     150:	81 11       	cpse	r24, r1
     152:	12 c0       	rjmp	.+36     	; 0x178 <MakeFriends+0x7e>
        setDAC[0] = whoami * 51;
     154:	80 91 3d 38 	lds	r24, 0x383D	; 0x80383d <whoami>
     158:	93 e3       	ldi	r25, 0x33	; 51
     15a:	89 9f       	mul	r24, r25
     15c:	80 2d       	mov	r24, r0
     15e:	11 24       	eor	r1, r1
     160:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__data_start>
        auRepAddr = &setDAC[0];
     164:	80 e0       	ldi	r24, 0x00	; 0
     166:	98 e3       	ldi	r25, 0x38	; 56
     168:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
     16c:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
        auVolume = 255;
     170:	8f ef       	ldi	r24, 0xFF	; 255
     172:	80 93 b6 3a 	sts	0x3AB6, r24	; 0x803ab6 <auVolume>
     176:	0e c0       	rjmp	.+28     	; 0x194 <MakeFriends+0x9a>
    } else {
        ++chkTmr;
     178:	90 91 32 38 	lds	r25, 0x3832	; 0x803832 <chkTmr.3790>
     17c:	9f 5f       	subi	r25, 0xFF	; 255
     17e:	90 93 32 38 	sts	0x3832, r25	; 0x803832 <chkTmr.3790>
        if (progress & NEXT){
     182:	98 2f       	mov	r25, r24
     184:	90 7f       	andi	r25, 0xF0	; 240
     186:	31 f0       	breq	.+12     	; 0x194 <MakeFriends+0x9a>
            progress++;
            progress&=0x0f;
     188:	8f 5f       	subi	r24, 0xFF	; 255
     18a:	8f 70       	andi	r24, 0x0F	; 15
     18c:	80 93 33 38 	sts	0x3833, r24	; 0x803833 <progress.3788>
            chkTmr = 0;
     190:	10 92 32 38 	sts	0x3832, r1	; 0x803832 <chkTmr.3790>
        }
    }

    //Check for other badges ()
    if ((auIn < (setDAC[0] - DELTA)) || (auIn > (setDAC[0] + DELTA)) || (progress > FIRST_CONTACT)) {
     194:	40 91 c2 3a 	lds	r20, 0x3AC2	; 0x803ac2 <auIn>
     198:	20 91 00 38 	lds	r18, 0x3800	; 0x803800 <__data_start>
     19c:	30 e0       	ldi	r19, 0x00	; 0
     19e:	50 e0       	ldi	r21, 0x00	; 0
     1a0:	b9 01       	movw	r22, r18
     1a2:	6a 50       	subi	r22, 0x0A	; 10
     1a4:	71 09       	sbc	r23, r1
     1a6:	80 91 33 38 	lds	r24, 0x3833	; 0x803833 <progress.3788>
     1aa:	46 17       	cp	r20, r22
     1ac:	57 07       	cpc	r21, r23
     1ae:	5c f0       	brlt	.+22     	; 0x1c6 <MakeFriends+0xcc>
     1b0:	40 91 c2 3a 	lds	r20, 0x3AC2	; 0x803ac2 <auIn>
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	26 5f       	subi	r18, 0xF6	; 246
     1b8:	3f 4f       	sbci	r19, 0xFF	; 255
     1ba:	24 17       	cp	r18, r20
     1bc:	35 07       	cpc	r19, r21
     1be:	1c f0       	brlt	.+6      	; 0x1c6 <MakeFriends+0xcc>
     1c0:	82 30       	cpi	r24, 0x02	; 2
     1c2:	08 f4       	brcc	.+2      	; 0x1c6 <MakeFriends+0xcc>
     1c4:	3f c0       	rjmp	.+126    	; 0x244 <MakeFriends+0x14a>
        if (progress == NO_OTHER) {
     1c6:	81 11       	cpse	r24, r1
     1c8:	07 c0       	rjmp	.+14     	; 0x1d8 <MakeFriends+0xde>
            if (chkTmr >= 8) {
     1ca:	80 91 32 38 	lds	r24, 0x3832	; 0x803832 <chkTmr.3790>
     1ce:	88 30       	cpi	r24, 0x08	; 8
     1d0:	08 f4       	brcc	.+2      	; 0x1d4 <MakeFriends+0xda>
     1d2:	8a c0       	rjmp	.+276    	; 0x2e8 <MakeFriends+0x1ee>
                progress |= NEXT;
     1d4:	80 ef       	ldi	r24, 0xF0	; 240
     1d6:	5d c0       	rjmp	.+186    	; 0x292 <MakeFriends+0x198>
            }
        }

        //Candidate found, check ranges
        else if (progress == FIRST_CONTACT) {
     1d8:	81 30       	cpi	r24, 0x01	; 1
     1da:	41 f5       	brne	.+80     	; 0x22c <MakeFriends+0x132>
            jackIn = chkVolt250();
     1dc:	76 df       	rcall	.-276    	; 0xca <chkVolt250>
     1de:	80 93 31 38 	sts	0x3831, r24	; 0x803831 <jackIn.3791>
            if (jackIn) {
     1e2:	88 23       	and	r24, r24
     1e4:	79 f1       	breq	.+94     	; 0x244 <MakeFriends+0x14a>
                if (chkTmr >= SHORT_WAIT){
     1e6:	90 91 32 38 	lds	r25, 0x3832	; 0x803832 <chkTmr.3790>
     1ea:	98 30       	cpi	r25, 0x08	; 8
     1ec:	08 f4       	brcc	.+2      	; 0x1f0 <MakeFriends+0xf6>
     1ee:	7c c0       	rjmp	.+248    	; 0x2e8 <MakeFriends+0x1ee>
                    if (   ((whoami == 1)&&((jackIn >= 3)&&(jackIn <= 5))) 
     1f0:	90 91 3d 38 	lds	r25, 0x383D	; 0x80383d <whoami>
     1f4:	91 30       	cpi	r25, 0x01	; 1
     1f6:	11 f4       	brne	.+4      	; 0x1fc <MakeFriends+0x102>
     1f8:	83 50       	subi	r24, 0x03	; 3
     1fa:	14 c0       	rjmp	.+40     	; 0x224 <MakeFriends+0x12a>
                    || ((whoami == 2)&&((jackIn == 3)||(jackIn == 5)||(jackIn == 6)))  
     1fc:	92 30       	cpi	r25, 0x02	; 2
     1fe:	31 f4       	brne	.+12     	; 0x20c <MakeFriends+0x112>
     200:	83 30       	cpi	r24, 0x03	; 3
     202:	91 f0       	breq	.+36     	; 0x228 <MakeFriends+0x12e>
     204:	85 50       	subi	r24, 0x05	; 5
     206:	82 30       	cpi	r24, 0x02	; 2
     208:	e8 f4       	brcc	.+58     	; 0x244 <MakeFriends+0x14a>
     20a:	0e c0       	rjmp	.+28     	; 0x228 <MakeFriends+0x12e>
                    || ((whoami == 3)&&((jackIn == 4)||(jackIn == 5)||(jackIn == 7))) 
     20c:	93 30       	cpi	r25, 0x03	; 3
     20e:	39 f4       	brne	.+14     	; 0x21e <MakeFriends+0x124>
     210:	9c ef       	ldi	r25, 0xFC	; 252
     212:	98 0f       	add	r25, r24
     214:	92 30       	cpi	r25, 0x02	; 2
     216:	40 f0       	brcs	.+16     	; 0x228 <MakeFriends+0x12e>
     218:	87 30       	cpi	r24, 0x07	; 7
     21a:	a1 f4       	brne	.+40     	; 0x244 <MakeFriends+0x14a>
     21c:	05 c0       	rjmp	.+10     	; 0x228 <MakeFriends+0x12e>
                    || ((whoami == 4)&&((jackIn >= 5)&&(jackIn <= 7)))   ) {
     21e:	94 30       	cpi	r25, 0x04	; 4
     220:	89 f4       	brne	.+34     	; 0x244 <MakeFriends+0x14a>
     222:	85 50       	subi	r24, 0x05	; 5
     224:	83 30       	cpi	r24, 0x03	; 3
     226:	70 f4       	brcc	.+28     	; 0x244 <MakeFriends+0x14a>
                        progress |= NEXT;
     228:	81 ef       	ldi	r24, 0xF1	; 241
     22a:	33 c0       	rjmp	.+102    	; 0x292 <MakeFriends+0x198>
                progress = NO_OTHER;
            }
        }

        //Wait for the other badge (and a bit longer for effect)
        else if (progress == SECOND_LOVE){
     22c:	82 30       	cpi	r24, 0x02	; 2
     22e:	69 f0       	breq	.+26     	; 0x24a <MakeFriends+0x150>
                progress |= NEXT;
            }
        } 
        
        //Wait a bit, check Voltage again, if ok show who you connected with and your own number, save, exit
        else if (progress == THIRD_KISS) {
     230:	83 30       	cpi	r24, 0x03	; 3
     232:	91 f1       	breq	.+100    	; 0x298 <MakeFriends+0x19e>
                    progress |= NEXT;
                } else progress = NO_OTHER;                
            }

        //Wait for quit
        } else if (progress == FOURTH_BASE) {
     234:	84 30       	cpi	r24, 0x04	; 4
     236:	09 f0       	breq	.+2      	; 0x23a <MakeFriends+0x140>
     238:	57 c0       	rjmp	.+174    	; 0x2e8 <MakeFriends+0x1ee>
            if (chkTmr >= (SHORT_WAIT<<3)) {
     23a:	80 91 32 38 	lds	r24, 0x3832	; 0x803832 <chkTmr.3790>
     23e:	80 34       	cpi	r24, 0x40	; 64
     240:	08 f4       	brcc	.+2      	; 0x244 <MakeFriends+0x14a>
     242:	52 c0       	rjmp	.+164    	; 0x2e8 <MakeFriends+0x1ee>
                    if (   ((whoami == 1)&&((jackIn >= 3)&&(jackIn <= 5))) 
                    || ((whoami == 2)&&((jackIn == 3)||(jackIn == 5)||(jackIn == 6)))  
                    || ((whoami == 3)&&((jackIn == 4)||(jackIn == 5)||(jackIn == 7))) 
                    || ((whoami == 4)&&((jackIn >= 5)&&(jackIn <= 7)))   ) {
                        progress |= NEXT;
                    } else progress = NO_OTHER;
     244:	10 92 33 38 	sts	0x3833, r1	; 0x803833 <progress.3788>
     248:	4f c0       	rjmp	.+158    	; 0x2e8 <MakeFriends+0x1ee>
        }

        //Wait for the other badge (and a bit longer for effect)
        else if (progress == SECOND_LOVE){
            
            effect = 7;
     24a:	87 e0       	ldi	r24, 0x07	; 7
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <effect>
     252:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <effect+0x1>
            if (chkTmr >= SHORT_WAIT) {
     256:	80 91 32 38 	lds	r24, 0x3832	; 0x803832 <chkTmr.3790>
     25a:	88 30       	cpi	r24, 0x08	; 8
     25c:	38 f0       	brcs	.+14     	; 0x26c <MakeFriends+0x172>
                setDAC[0] = floatAround(0x80, 8, 100, 255); 
     25e:	2f ef       	ldi	r18, 0xFF	; 255
     260:	44 e6       	ldi	r20, 0x64	; 100
     262:	68 e0       	ldi	r22, 0x08	; 8
     264:	80 e8       	ldi	r24, 0x80	; 128
     266:	fe d7       	rcall	.+4092   	; 0x1264 <floatAround>
     268:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__data_start>
            }

            //The badge with the lowest voltage will now go to 2.5V (impedance check, for people tricking the things with a power supply)
            if (chkTmr >= LONG_WAIT){
     26c:	80 91 32 38 	lds	r24, 0x3832	; 0x803832 <chkTmr.3790>
     270:	8a 3f       	cpi	r24, 0xFA	; 250
     272:	d0 f1       	brcs	.+116    	; 0x2e8 <MakeFriends+0x1ee>
                candidate = jackIn-whoami;
     274:	90 91 3d 38 	lds	r25, 0x383D	; 0x80383d <whoami>
     278:	80 91 31 38 	lds	r24, 0x3831	; 0x803831 <jackIn.3791>
     27c:	89 1b       	sub	r24, r25
     27e:	80 93 30 38 	sts	0x3830, r24	; 0x803830 <__data_end>
                if (candidate > whoami) {
     282:	98 17       	cp	r25, r24
     284:	18 f4       	brcc	.+6      	; 0x28c <MakeFriends+0x192>
                    setDAC[0] = 249;
     286:	89 ef       	ldi	r24, 0xF9	; 249
     288:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__data_start>
                }
                progress |= NEXT;
     28c:	80 91 33 38 	lds	r24, 0x3833	; 0x803833 <progress.3788>
     290:	80 6f       	ori	r24, 0xF0	; 240
     292:	80 93 33 38 	sts	0x3833, r24	; 0x803833 <progress.3788>
     296:	28 c0       	rjmp	.+80     	; 0x2e8 <MakeFriends+0x1ee>
            }
        } 
        
        //Wait a bit, check Voltage again, if ok show who you connected with and your own number, save, exit
        else if (progress == THIRD_KISS) {
            if (chkTmr >= SHORT_WAIT) {
     298:	80 91 32 38 	lds	r24, 0x3832	; 0x803832 <chkTmr.3790>
     29c:	88 30       	cpi	r24, 0x08	; 8
                jackIn = chkVolt250();
     29e:	20 f1       	brcs	.+72     	; 0x2e8 <MakeFriends+0x1ee>
     2a0:	14 df       	rcall	.-472    	; 0xca <chkVolt250>
     2a2:	80 93 31 38 	sts	0x3831, r24	; 0x803831 <jackIn.3791>
                if (jackIn == (((candidate > whoami)?candidate:whoami) + 5)) {
     2a6:	90 91 30 38 	lds	r25, 0x3830	; 0x803830 <__data_end>
     2aa:	48 2f       	mov	r20, r24
     2ac:	50 e0       	ldi	r21, 0x00	; 0
     2ae:	20 91 3d 38 	lds	r18, 0x383D	; 0x80383d <whoami>
     2b2:	29 17       	cp	r18, r25
     2b4:	08 f4       	brcc	.+2      	; 0x2b8 <MakeFriends+0x1be>
     2b6:	29 2f       	mov	r18, r25
     2b8:	30 e0       	ldi	r19, 0x00	; 0
     2ba:	2b 5f       	subi	r18, 0xFB	; 251
     2bc:	3f 4f       	sbci	r19, 0xFF	; 255
     2be:	42 17       	cp	r20, r18
     2c0:	53 07       	cpc	r21, r19
     2c2:	09 f0       	breq	.+2      	; 0x2c6 <MakeFriends+0x1cc>
     2c4:	bf cf       	rjmp	.-130    	; 0x244 <MakeFriends+0x14a>
                    UpdateState(99+candidate);
     2c6:	83 e6       	ldi	r24, 0x63	; 99
     2c8:	89 0f       	add	r24, r25
     2ca:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <UpdateState>
                 
                    effect = 31;
     2ce:	8f e1       	ldi	r24, 0x1F	; 31
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <effect>
     2d6:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <effect+0x1>
                    WingBar(candidate, whoami);
     2da:	60 91 3d 38 	lds	r22, 0x383D	; 0x80383d <whoami>
     2de:	80 91 30 38 	lds	r24, 0x3830	; 0x803830 <__data_end>
     2e2:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <WingBar>
     2e6:	d2 cf       	rjmp	.-92     	; 0x28c <MakeFriends+0x192>
    } else {
        progress = NO_OTHER;
    }
      
    return 0;
}
     2e8:	80 e0       	ldi	r24, 0x00	; 0
     2ea:	df 91       	pop	r29
     2ec:	cf 91       	pop	r28
     2ee:	08 95       	ret

000002f0 <I2C_init>:
// the Atmel device documentation mentions a special command for repeated start TWI_MCMD_REPSTART_gc,
// but this is not used in Atmel's demo code, so we don't use it either

void I2C_rep_start(uint8_t shifted_addr)						    // send repeated start, device_addr + LSB set if READ
{
	TWI0.MADDR = shifted_addr;	
     2f0:	81 e0       	ldi	r24, 0x01	; 1
     2f2:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
     2f6:	e6 e2       	ldi	r30, 0x26	; 38
     2f8:	f4 e0       	ldi	r31, 0x04	; 4
     2fa:	80 83       	st	Z, r24
     2fc:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <__TEXT_REGION_LENGTH__+0x700430>
     300:	a1 e2       	ldi	r26, 0x21	; 33
     302:	b4 e0       	ldi	r27, 0x04	; 4
     304:	92 e0       	ldi	r25, 0x02	; 2
     306:	9c 93       	st	X, r25
     308:	90 83       	st	Z, r25
     30a:	10 92 31 04 	sts	0x0431, r1	; 0x800431 <__TEXT_REGION_LENGTH__+0x700431>
     30e:	e0 e1       	ldi	r30, 0x10	; 16
     310:	f8 e0       	ldi	r31, 0x08	; 8
     312:	97 e0       	ldi	r25, 0x07	; 7
     314:	96 83       	std	Z+6, r25	; 0x06
     316:	98 e0       	ldi	r25, 0x08	; 8
     318:	94 83       	std	Z+4, r25	; 0x04
     31a:	83 83       	std	Z+3, r24	; 0x03
     31c:	8c 93       	st	X, r24
     31e:	85 81       	ldd	r24, Z+5	; 0x05
     320:	81 60       	ori	r24, 0x01	; 1
     322:	85 83       	std	Z+5, r24	; 0x05
     324:	85 81       	ldd	r24, Z+5	; 0x05
     326:	84 6c       	ori	r24, 0xC4	; 196
     328:	85 83       	std	Z+5, r24	; 0x05
     32a:	08 95       	ret

0000032c <I2C_recover>:
     32c:	80 91 14 08 	lds	r24, 0x0814	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     330:	88 60       	ori	r24, 0x08	; 8
     332:	80 93 14 08 	sts	0x0814, r24	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     336:	10 92 13 08 	sts	0x0813, r1	; 0x800813 <__TEXT_REGION_LENGTH__+0x700813>
     33a:	82 e0       	ldi	r24, 0x02	; 2
     33c:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
     340:	99 e0       	ldi	r25, 0x09	; 9
     342:	21 e0       	ldi	r18, 0x01	; 1
     344:	81 e0       	ldi	r24, 0x01	; 1
     346:	20 93 21 04 	sts	0x0421, r18	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
     34a:	30 e1       	ldi	r19, 0x10	; 16
     34c:	3a 95       	dec	r19
     34e:	f1 f7       	brne	.-4      	; 0x34c <I2C_recover+0x20>
     350:	00 c0       	rjmp	.+0      	; 0x352 <I2C_recover+0x26>
     352:	20 93 22 04 	sts	0x0422, r18	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
     356:	30 e1       	ldi	r19, 0x10	; 16
     358:	3a 95       	dec	r19
     35a:	f1 f7       	brne	.-4      	; 0x358 <I2C_recover+0x2c>
     35c:	00 c0       	rjmp	.+0      	; 0x35e <I2C_recover+0x32>
     35e:	91 50       	subi	r25, 0x01	; 1
     360:	89 f7       	brne	.-30     	; 0x344 <I2C_recover+0x18>
     362:	28 e0       	ldi	r18, 0x08	; 8
     364:	20 93 14 08 	sts	0x0814, r18	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     368:	80 93 13 08 	sts	0x0813, r24	; 0x800813 <__TEXT_REGION_LENGTH__+0x700813>
     36c:	92 e0       	ldi	r25, 0x02	; 2
     36e:	90 93 21 04 	sts	0x0421, r25	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
     372:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     376:	91 60       	ori	r25, 0x01	; 1
     378:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     37c:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     380:	94 6c       	ori	r25, 0xC4	; 196
     382:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     386:	20 93 14 08 	sts	0x0814, r18	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     38a:	80 93 13 08 	sts	0x0813, r24	; 0x800813 <__TEXT_REGION_LENGTH__+0x700813>
     38e:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
     392:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     396:	81 60       	ori	r24, 0x01	; 1
     398:	80 93 15 08 	sts	0x0815, r24	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     39c:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     3a0:	84 6c       	ori	r24, 0xC4	; 196
     3a2:	80 93 15 08 	sts	0x0815, r24	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     3a6:	08 95       	ret

000003a8 <I2C_start>:
     3a8:	28 2f       	mov	r18, r24
     3aa:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     3ae:	90 6c       	ori	r25, 0xC0	; 192
     3b0:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     3b4:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     3b8:	89 2f       	mov	r24, r25
     3ba:	84 70       	andi	r24, 0x04	; 4
     3bc:	92 fd       	sbrc	r25, 2
     3be:	03 c0       	rjmp	.+6      	; 0x3c6 <I2C_start+0x1e>
     3c0:	20 93 17 08 	sts	0x0817, r18	; 0x800817 <__TEXT_REGION_LENGTH__+0x700817>
     3c4:	08 95       	ret
     3c6:	84 e0       	ldi	r24, 0x04	; 4
     3c8:	08 95       	ret

000003ca <I2C_wait_ACK>:
     3ca:	8c e0       	ldi	r24, 0x0C	; 12
     3cc:	80 93 60 3a 	sts	0x3A60, r24	; 0x803a60 <timeout_I2C>
     3d0:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     3d4:	87 fd       	sbrc	r24, 7
     3d6:	0a c0       	rjmp	.+20     	; 0x3ec <I2C_wait_ACK+0x22>
     3d8:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     3dc:	86 fd       	sbrc	r24, 6
     3de:	06 c0       	rjmp	.+12     	; 0x3ec <I2C_wait_ACK+0x22>
     3e0:	80 91 60 3a 	lds	r24, 0x3A60	; 0x803a60 <timeout_I2C>
     3e4:	81 11       	cpse	r24, r1
     3e6:	f4 cf       	rjmp	.-24     	; 0x3d0 <I2C_wait_ACK+0x6>
     3e8:	8f ef       	ldi	r24, 0xFF	; 255
     3ea:	08 95       	ret
     3ec:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     3f0:	80 6c       	ori	r24, 0xC0	; 192
     3f2:	80 93 15 08 	sts	0x0815, r24	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     3f6:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     3fa:	82 fd       	sbrc	r24, 2
     3fc:	09 c0       	rjmp	.+18     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
     3fe:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     402:	83 fd       	sbrc	r24, 3
     404:	07 c0       	rjmp	.+14     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     406:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     40a:	82 95       	swap	r24
     40c:	81 70       	andi	r24, 0x01	; 1
     40e:	08 95       	ret
     410:	84 e0       	ldi	r24, 0x04	; 4
     412:	08 95       	ret
     414:	82 e0       	ldi	r24, 0x02	; 2
     416:	08 95       	ret

00000418 <I2C_read>:
}

uint8_t	I2C_read(uint8_t *data, uint8_t ack_flag)					// read data, ack_flag 0: send ACK, 1: send NACK, returns status
{
     418:	fc 01       	movw	r30, r24
	timeout_I2C = READ_TIMEOUT;										// reset timeout counter, will be decremented by LED matrix interrupt
     41a:	8c e0       	ldi	r24, 0x0C	; 12
     41c:	80 93 60 3a 	sts	0x3A60, r24	; 0x803a60 <timeout_I2C>
	if ((TWI0.MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_OWNER_gc)	// if master controls bus
     420:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     424:	89 2f       	mov	r24, r25
     426:	83 70       	andi	r24, 0x03	; 3
     428:	82 30       	cpi	r24, 0x02	; 2
     42a:	11 f0       	breq	.+4      	; 0x430 <I2C_read+0x18>
		else		TWI0.MCTRLB |= TWI_ACKACT_NACK_gc;				// setup NACK (last byte read)
		*data = TWI0.MDATA;
		if (ack_flag == 0) TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;	// send ACK, more bytes to follow					
		return 0;
	}
	else return 8;													// master does not control bus
     42c:	88 e0       	ldi	r24, 0x08	; 8
     42e:	08 95       	ret
uint8_t	I2C_read(uint8_t *data, uint8_t ack_flag)					// read data, ack_flag 0: send ACK, 1: send NACK, returns status
{
	timeout_I2C = READ_TIMEOUT;										// reset timeout counter, will be decremented by LED matrix interrupt
	if ((TWI0.MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_OWNER_gc)	// if master controls bus
	{		
		while (!(TWI0.MSTATUS & TWI_RIF_bm))						// wait for RIF set (data byte received)
     430:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     434:	97 fd       	sbrc	r25, 7
     436:	06 c0       	rjmp	.+12     	; 0x444 <I2C_read+0x2c>
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
     438:	90 91 60 3a 	lds	r25, 0x3A60	; 0x803a60 <timeout_I2C>
     43c:	91 11       	cpse	r25, r1
     43e:	f8 cf       	rjmp	.-16     	; 0x430 <I2C_read+0x18>
     440:	8f ef       	ldi	r24, 0xFF	; 255
     442:	08 95       	ret
		}
		TWI0.MSTATUS |= (TWI_RIF_bm | TWI_WIF_bm);					// clear Read and Write interrupt flags	
     444:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     448:	90 6c       	ori	r25, 0xC0	; 192
     44a:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
     44e:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     452:	92 fd       	sbrc	r25, 2
     454:	1e c0       	rjmp	.+60     	; 0x492 <I2C_read+0x7a>
		if (TWI0.MSTATUS & TWI_ARBLOST_bm) return 2;				// Arbitration Lost, abort
     456:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     45a:	93 fd       	sbrc	r25, 3
     45c:	1d c0       	rjmp	.+58     	; 0x498 <I2C_read+0x80>
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort				
     45e:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     462:	89 2f       	mov	r24, r25
     464:	80 71       	andi	r24, 0x10	; 16
     466:	94 fd       	sbrc	r25, 4
     468:	16 c0       	rjmp	.+44     	; 0x496 <I2C_read+0x7e>
		if (ack_flag == 0) TWI0.MCTRLB &= ~(1 << TWI_ACKACT_bp);	// setup ACK
     46a:	90 91 14 08 	lds	r25, 0x0814	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     46e:	61 11       	cpse	r22, r1
     470:	02 c0       	rjmp	.+4      	; 0x476 <I2C_read+0x5e>
     472:	9b 7f       	andi	r25, 0xFB	; 251
     474:	01 c0       	rjmp	.+2      	; 0x478 <I2C_read+0x60>
		else		TWI0.MCTRLB |= TWI_ACKACT_NACK_gc;				// setup NACK (last byte read)
     476:	94 60       	ori	r25, 0x04	; 4
     478:	90 93 14 08 	sts	0x0814, r25	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
		*data = TWI0.MDATA;
     47c:	90 91 18 08 	lds	r25, 0x0818	; 0x800818 <__TEXT_REGION_LENGTH__+0x700818>
     480:	90 83       	st	Z, r25
		if (ack_flag == 0) TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;	// send ACK, more bytes to follow					
     482:	61 11       	cpse	r22, r1
     484:	09 c0       	rjmp	.+18     	; 0x498 <I2C_read+0x80>
     486:	90 91 14 08 	lds	r25, 0x0814	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     48a:	92 60       	ori	r25, 0x02	; 2
     48c:	90 93 14 08 	sts	0x0814, r25	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     490:	08 95       	ret
		while (!(TWI0.MSTATUS & TWI_RIF_bm))						// wait for RIF set (data byte received)
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
		}
		TWI0.MSTATUS |= (TWI_RIF_bm | TWI_WIF_bm);					// clear Read and Write interrupt flags	
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
     492:	84 e0       	ldi	r24, 0x04	; 4
     494:	08 95       	ret
		if (TWI0.MSTATUS & TWI_ARBLOST_bm) return 2;				// Arbitration Lost, abort
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort				
     496:	81 e0       	ldi	r24, 0x01	; 1
		*data = TWI0.MDATA;
		if (ack_flag == 0) TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;	// send ACK, more bytes to follow					
		return 0;
	}
	else return 8;													// master does not control bus
}
     498:	08 95       	ret

0000049a <I2C_write>:

uint8_t I2C_write(uint8_t *data)									// write data, return status
{
     49a:	fc 01       	movw	r30, r24
	timeout_I2C = WRITE_TIMEOUT;									// reset timeout counter, will be decremented by LED matrix interrupt
     49c:	8c e0       	ldi	r24, 0x0C	; 12
     49e:	80 93 60 3a 	sts	0x3A60, r24	; 0x803a60 <timeout_I2C>
	if ((TWI0.MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_OWNER_gc)	// if master controls bus
     4a2:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     4a6:	93 70       	andi	r25, 0x03	; 3
     4a8:	92 30       	cpi	r25, 0x02	; 2
     4aa:	b1 f4       	brne	.+44     	; 0x4d8 <I2C_write+0x3e>
	{
		TWI0.MDATA = *data;		
     4ac:	80 81       	ld	r24, Z
     4ae:	80 93 18 08 	sts	0x0818, r24	; 0x800818 <__TEXT_REGION_LENGTH__+0x700818>
		while (!(TWI0.MSTATUS & TWI_WIF_bm))						// wait until WIF set, status register contains ACK/NACK bit
     4b2:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     4b6:	86 fd       	sbrc	r24, 6
     4b8:	06 c0       	rjmp	.+12     	; 0x4c6 <I2C_write+0x2c>
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
     4ba:	80 91 60 3a 	lds	r24, 0x3A60	; 0x803a60 <timeout_I2C>
     4be:	81 11       	cpse	r24, r1
     4c0:	f8 cf       	rjmp	.-16     	; 0x4b2 <I2C_write+0x18>
     4c2:	8f ef       	ldi	r24, 0xFF	; 255
     4c4:	08 95       	ret
		}
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
     4c6:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     4ca:	82 fd       	sbrc	r24, 2
     4cc:	07 c0       	rjmp	.+14     	; 0x4dc <I2C_write+0x42>
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort
     4ce:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
	if ((TWI0.MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_OWNER_gc)	// if master controls bus
	{
		TWI0.MDATA = *data;		
		while (!(TWI0.MSTATUS & TWI_WIF_bm))						// wait until WIF set, status register contains ACK/NACK bit
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
     4d2:	82 95       	swap	r24
     4d4:	81 70       	andi	r24, 0x01	; 1
     4d6:	08 95       	ret
		}
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort
		return 0;													// no error	
	}
	else return 8;													// master does not control bus
     4d8:	88 e0       	ldi	r24, 0x08	; 8
     4da:	08 95       	ret
		TWI0.MDATA = *data;		
		while (!(TWI0.MSTATUS & TWI_WIF_bm))						// wait until WIF set, status register contains ACK/NACK bit
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
		}
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
     4dc:	84 e0       	ldi	r24, 0x04	; 4
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort
		return 0;													// no error	
	}
	else return 8;													// master does not control bus
}
     4de:	08 95       	ret

000004e0 <I2C_stop>:

void I2C_stop()
{
	TWI0.MCTRLB |= TWI_MCMD_STOP_gc;
     4e0:	e0 e1       	ldi	r30, 0x10	; 16
     4e2:	f8 e0       	ldi	r31, 0x08	; 8
     4e4:	84 81       	ldd	r24, Z+4	; 0x04
     4e6:	83 60       	ori	r24, 0x03	; 3
     4e8:	84 83       	std	Z+4, r24	; 0x04
     4ea:	08 95       	ret

000004ec <I2C_read_bytes>:
// addr_ptr		address of first array element to transfer
// slave reg	starting slave register
// num_bytes	number of bytes to transfer

uint8_t	I2C_read_bytes(uint8_t slave_addr, uint8_t *reg_ptr, uint8_t reg_len, uint8_t *dat_ptr, uint8_t dat_len)
{
     4ec:	cf 92       	push	r12
     4ee:	df 92       	push	r13
     4f0:	ff 92       	push	r15
     4f2:	0f 93       	push	r16
     4f4:	1f 93       	push	r17
     4f6:	cf 93       	push	r28
     4f8:	df 93       	push	r29
     4fa:	6b 01       	movw	r12, r22
     4fc:	f4 2e       	mov	r15, r20
     4fe:	e9 01       	movw	r28, r18
	uint8_t status;
	if (dat_len > MAX_LEN) dat_len = MAX_LEN;
	status = I2C_start(slave_addr << 1);							// slave write address, LSB 0
     500:	18 2f       	mov	r17, r24
     502:	11 0f       	add	r17, r17
     504:	81 2f       	mov	r24, r17
     506:	50 df       	rcall	.-352    	; 0x3a8 <I2C_start>
	if (status != 0) goto error;
     508:	81 11       	cpse	r24, r1
	status = I2C_wait_ACK();										// wait for slave ACK
     50a:	2b c0       	rjmp	.+86     	; 0x562 <I2C_read_bytes+0x76>
     50c:	5e df       	rcall	.-324    	; 0x3ca <I2C_wait_ACK>
	if (status == 1) {
     50e:	81 30       	cpi	r24, 0x01	; 1
		I2C_stop();													// NACK, abort
     510:	19 f4       	brne	.+6      	; 0x518 <I2C_read_bytes+0x2c>
     512:	e6 df       	rcall	.-52     	; 0x4e0 <I2C_stop>
		return 1;
     514:	81 e0       	ldi	r24, 0x01	; 1
     516:	27 c0       	rjmp	.+78     	; 0x566 <I2C_read_bytes+0x7a>
	}
	if (status != 0) goto error;
     518:	81 11       	cpse	r24, r1
     51a:	23 c0       	rjmp	.+70     	; 0x562 <I2C_read_bytes+0x76>
    while(reg_len > 0){
     51c:	ff 20       	and	r15, r15
	    status = I2C_write(reg_ptr);    							// send slave start register
     51e:	49 f0       	breq	.+18     	; 0x532 <I2C_read_bytes+0x46>
     520:	c6 01       	movw	r24, r12
     522:	bb df       	rcall	.-138    	; 0x49a <I2C_write>
	    if (status != 0) goto error;
     524:	81 11       	cpse	r24, r1
     526:	1d c0       	rjmp	.+58     	; 0x562 <I2C_read_bytes+0x76>
        ++reg_ptr;
     528:	8f ef       	ldi	r24, 0xFF	; 255
     52a:	c8 1a       	sub	r12, r24
     52c:	d8 0a       	sbc	r13, r24
        --reg_len;
     52e:	fa 94       	dec	r15
     530:	f5 cf       	rjmp	.-22     	; 0x51c <I2C_read_bytes+0x30>
     532:	01 34       	cpi	r16, 0x41	; 65
     534:	08 f0       	brcs	.+2      	; 0x538 <I2C_read_bytes+0x4c>
     536:	00 e4       	ldi	r16, 0x40	; 64
    }
	I2C_rep_start((slave_addr << 1) + 1);							// slave read address, LSB 1
     538:	1f 5f       	subi	r17, 0xFF	; 255
// the Atmel device documentation mentions a special command for repeated start TWI_MCMD_REPSTART_gc,
// but this is not used in Atmel's demo code, so we don't use it either

void I2C_rep_start(uint8_t shifted_addr)						    // send repeated start, device_addr + LSB set if READ
{
	TWI0.MADDR = shifted_addr;	
     53a:	10 93 17 08 	sts	0x0817, r17	; 0x800817 <__TEXT_REGION_LENGTH__+0x700817>
	    if (status != 0) goto error;
        ++reg_ptr;
        --reg_len;
    }
	I2C_rep_start((slave_addr << 1) + 1);							// slave read address, LSB 1
	while (dat_len > 1) {
     53e:	02 30       	cpi	r16, 0x02	; 2
		status = I2C_read(dat_ptr, 0);								// first bytes, send ACK
     540:	40 f0       	brcs	.+16     	; 0x552 <I2C_read_bytes+0x66>
     542:	60 e0       	ldi	r22, 0x00	; 0
     544:	ce 01       	movw	r24, r28
     546:	68 df       	rcall	.-304    	; 0x418 <I2C_read>
		if (status != 0) goto error;
     548:	81 11       	cpse	r24, r1
     54a:	0b c0       	rjmp	.+22     	; 0x562 <I2C_read_bytes+0x76>
		++dat_ptr;
		--dat_len;
     54c:	21 96       	adiw	r28, 0x01	; 1
     54e:	01 50       	subi	r16, 0x01	; 1
	}
	status = I2C_read(dat_ptr, 1);									// single or last byte, send NACK
     550:	f6 cf       	rjmp	.-20     	; 0x53e <I2C_read_bytes+0x52>
     552:	61 e0       	ldi	r22, 0x01	; 1
     554:	ce 01       	movw	r24, r28
	if (status != 0) goto error;
     556:	60 df       	rcall	.-320    	; 0x418 <I2C_read>
     558:	81 11       	cpse	r24, r1
	I2C_stop();
     55a:	03 c0       	rjmp	.+6      	; 0x562 <I2C_read_bytes+0x76>
     55c:	c1 df       	rcall	.-126    	; 0x4e0 <I2C_stop>
	return 0;
     55e:	80 e0       	ldi	r24, 0x00	; 0
     560:	02 c0       	rjmp	.+4      	; 0x566 <I2C_read_bytes+0x7a>
	
error:
	I2C_recover();													// clock out possibly stuck slave, reset master
     562:	e4 de       	rcall	.-568    	; 0x32c <I2C_recover>
     564:	8f ef       	ldi	r24, 0xFF	; 255
	return 0xff;													// flag error
     566:	df 91       	pop	r29
}
     568:	cf 91       	pop	r28
     56a:	1f 91       	pop	r17
     56c:	0f 91       	pop	r16
     56e:	ff 90       	pop	r15
     570:	df 90       	pop	r13
     572:	cf 90       	pop	r12
     574:	08 95       	ret

00000576 <initLanyard>:
uint8_t         lanyardCnt = 0;
uint8_t         lanyardState = TRUE;
uint16_t        lanyardLastActive = 0;

void initLanyard() {
    lanyardPos      = 0;
     576:	10 92 37 38 	sts	0x3837, r1	; 0x803837 <lanyardPos>
    lanyardCnt      = 0;
     57a:	10 92 36 38 	sts	0x3836, r1	; 0x803836 <lanyardCnt>
    lanyardState    = TRUE;
     57e:	81 e0       	ldi	r24, 0x01	; 1
     580:	80 93 02 38 	sts	0x3802, r24	; 0x803802 <lanyardState>
    ClearHackerLeds();
     584:	0c 94 1b 0b 	jmp	0x1636	; 0x1636 <ClearHackerLeds>

00000588 <LanyardCode>:
}

// Main game loop
uint8_t LanyardCode(){
     588:	cf 93       	push	r28
    if (gameNow == LANYARD && idleTimeout(lanyardLastActive,LANYARD_MAX_IDLE)) {
     58a:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <gameNow>
     58e:	83 30       	cpi	r24, 0x03	; 3
     590:	91 f4       	brne	.+36     	; 0x5b6 <LanyardCode+0x2e>
     592:	6a e0       	ldi	r22, 0x0A	; 10
     594:	70 e0       	ldi	r23, 0x00	; 0
     596:	80 91 34 38 	lds	r24, 0x3834	; 0x803834 <lanyardLastActive>
     59a:	90 91 35 38 	lds	r25, 0x3835	; 0x803835 <lanyardLastActive+0x1>
     59e:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <idleTimeout>
     5a2:	88 23       	and	r24, r24
     5a4:	41 f0       	breq	.+16     	; 0x5b6 <LanyardCode+0x2e>
        /* clean up maze game and go back to text game */
        initLanyard();
     5a6:	e7 df       	rcall	.-50     	; 0x576 <initLanyard>
        gameNow = TEXT;
     5a8:	10 92 3c 38 	sts	0x383C, r1	; 0x80383c <gameNow>
        effect = 0;
     5ac:	10 92 3a 38 	sts	0x383A, r1	; 0x80383a <effect>
     5b0:	10 92 3b 38 	sts	0x383B, r1	; 0x80383b <effect+0x1>
        return 0;
     5b4:	9b c0       	rjmp	.+310    	; 0x6ec <LanyardCode+0x164>
    }

    if (CheckState(LANYARD_COMPLETED))
     5b6:	8b e7       	ldi	r24, 0x7B	; 123
     5b8:	2f d7       	rcall	.+3678   	; 0x1418 <CheckState>
     5ba:	81 11       	cpse	r24, r1
     5bc:	97 c0       	rjmp	.+302    	; 0x6ec <LanyardCode+0x164>
        return 0;

    if ( gameNow != TEXT && gameNow != LANYARD )
     5be:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <gameNow>
     5c2:	88 23       	and	r24, r24
     5c4:	19 f0       	breq	.+6      	; 0x5cc <LanyardCode+0x44>
     5c6:	83 30       	cpi	r24, 0x03	; 3
     5c8:	09 f0       	breq	.+2      	; 0x5cc <LanyardCode+0x44>
     5ca:	90 c0       	rjmp	.+288    	; 0x6ec <LanyardCode+0x164>
        return 0;

    /* activate led for buttonstate */
    iLED[CAT] = (buttonState==0xff ? 0 : dimValue);
     5cc:	c0 91 46 bf 	lds	r28, 0xBF46	; 0x80bf46 <__bss_end+0x8434>
     5d0:	ec 2f       	mov	r30, r28
     5d2:	f0 e0       	ldi	r31, 0x00	; 0
     5d4:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <buttonState>
     5d8:	8f 3f       	cpi	r24, 0xFF	; 255
     5da:	19 f0       	breq	.+6      	; 0x5e2 <LanyardCode+0x5a>
     5dc:	90 91 0c 38 	lds	r25, 0x380C	; 0x80380c <dimValue>
     5e0:	01 c0       	rjmp	.+2      	; 0x5e4 <LanyardCode+0x5c>
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	ed 53       	subi	r30, 0x3D	; 61
     5e6:	f5 4c       	sbci	r31, 0xC5	; 197
     5e8:	90 83       	st	Z, r25

    if (buttonState == 0xff)
     5ea:	8f 3f       	cpi	r24, 0xFF	; 255
     5ec:	09 f4       	brne	.+2      	; 0x5f0 <LanyardCode+0x68>
     5ee:	7e c0       	rjmp	.+252    	; 0x6ec <LanyardCode+0x164>
        return 0;

    if (buttonState == lastButtonState)
     5f0:	90 91 07 38 	lds	r25, 0x3807	; 0x803807 <lastButtonState>
     5f4:	89 17       	cp	r24, r25
     5f6:	09 f4       	brne	.+2      	; 0x5fa <LanyardCode+0x72>
     5f8:	79 c0       	rjmp	.+242    	; 0x6ec <LanyardCode+0x164>
        return 0;

    lanyardLastActive = getClock();
     5fa:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <getClock>
     5fe:	80 93 34 38 	sts	0x3834, r24	; 0x803834 <lanyardLastActive>
     602:	90 93 35 38 	sts	0x3835, r25	; 0x803835 <lanyardLastActive+0x1>

    if (lastButtonState == 0xff){
     606:	80 91 07 38 	lds	r24, 0x3807	; 0x803807 <lastButtonState>
     60a:	8f 3f       	cpi	r24, 0xFF	; 255
     60c:	09 f0       	breq	.+2      	; 0x610 <LanyardCode+0x88>
     60e:	6e c0       	rjmp	.+220    	; 0x6ec <LanyardCode+0x164>
        effect = 0x13f + (buttonState << 5);
     610:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <buttonState>
     614:	20 e2       	ldi	r18, 0x20	; 32
     616:	82 9f       	mul	r24, r18
     618:	c0 01       	movw	r24, r0
     61a:	11 24       	eor	r1, r1
     61c:	81 5c       	subi	r24, 0xC1	; 193
     61e:	9e 4f       	sbci	r25, 0xFE	; 254
     620:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <effect>
     624:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <effect+0x1>

        if (gameNow != LANYARD)
     628:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <gameNow>
     62c:	83 30       	cpi	r24, 0x03	; 3
            initLanyard();
     62e:	09 f0       	breq	.+2      	; 0x632 <LanyardCode+0xaa>
     630:	a2 df       	rcall	.-188    	; 0x576 <initLanyard>
        gameNow = LANYARD;
     632:	83 e0       	ldi	r24, 0x03	; 3
     634:	80 93 3c 38 	sts	0x383C, r24	; 0x80383c <gameNow>

        if (buttonState == lanyardCode[lanyardPos]) {
     638:	80 91 37 38 	lds	r24, 0x3837	; 0x803837 <lanyardPos>
     63c:	e8 2f       	mov	r30, r24
     63e:	f0 e0       	ldi	r31, 0x00	; 0
     640:	e2 5d       	subi	r30, 0xD2	; 210
     642:	f0 44       	sbci	r31, 0x40	; 64
     644:	20 81       	ld	r18, Z
     646:	90 91 08 38 	lds	r25, 0x3808	; 0x803808 <buttonState>
     64a:	29 13       	cpse	r18, r25
     64c:	12 c0       	rjmp	.+36     	; 0x672 <LanyardCode+0xea>
            lanyardState &= TRUE;
     64e:	90 91 02 38 	lds	r25, 0x3802	; 0x803802 <lanyardState>
     652:	91 70       	andi	r25, 0x01	; 1
     654:	90 93 02 38 	sts	0x3802, r25	; 0x803802 <lanyardState>
            iLED[EYE[R][L]] = 0;
     658:	e0 91 55 bf 	lds	r30, 0xBF55	; 0x80bf55 <__bss_end+0x8443>
     65c:	f0 e0       	ldi	r31, 0x00	; 0
     65e:	ed 53       	subi	r30, 0x3D	; 61
     660:	f5 4c       	sbci	r31, 0xC5	; 197
     662:	10 82       	st	Z, r1
            iLED[EYE[R][R]] = 0;
     664:	e0 91 54 bf 	lds	r30, 0xBF54	; 0x80bf54 <__bss_end+0x8442>
     668:	f0 e0       	ldi	r31, 0x00	; 0
     66a:	ed 53       	subi	r30, 0x3D	; 61
     66c:	f5 4c       	sbci	r31, 0xC5	; 197
     66e:	10 82       	st	Z, r1
     670:	09 c0       	rjmp	.+18     	; 0x684 <LanyardCode+0xfc>
        } else {
            lanyardState = FALSE;
     672:	10 92 02 38 	sts	0x3802, r1	; 0x803802 <lanyardState>
            if (lanyardPos < 4 ) {
     676:	84 30       	cpi	r24, 0x04	; 4
                initLanyard();
     678:	28 f4       	brcc	.+10     	; 0x684 <LanyardCode+0xfc>
     67a:	7d df       	rcall	.-262    	; 0x576 <initLanyard>
                gameNow         = BASTET;
     67c:	82 e0       	ldi	r24, 0x02	; 2
     67e:	80 93 3c 38 	sts	0x383C, r24	; 0x80383c <gameNow>
                return 0;
     682:	34 c0       	rjmp	.+104    	; 0x6ec <LanyardCode+0x164>
            }
        }
        lanyardPos++;
     684:	8f 5f       	subi	r24, 0xFF	; 255
     686:	80 93 37 38 	sts	0x3837, r24	; 0x803837 <lanyardPos>
        lanyardCnt++;            
     68a:	90 91 36 38 	lds	r25, 0x3836	; 0x803836 <lanyardCnt>
     68e:	9f 5f       	subi	r25, 0xFF	; 255
        if (lanyardCnt >= 4) {
     690:	94 30       	cpi	r25, 0x04	; 4
     692:	18 f4       	brcc	.+6      	; 0x69a <LanyardCode+0x112>
                gameNow         = BASTET;
                return 0;
            }
        }
        lanyardPos++;
        lanyardCnt++;            
     694:	90 93 36 38 	sts	0x3836, r25	; 0x803836 <lanyardCnt>
     698:	29 c0       	rjmp	.+82     	; 0x6ec <LanyardCode+0x164>
        if (lanyardCnt >= 4) {
            lanyardCnt = 0;
     69a:	10 92 36 38 	sts	0x3836, r1	; 0x803836 <lanyardCnt>
            if (lanyardState == TRUE) {
     69e:	90 91 02 38 	lds	r25, 0x3802	; 0x803802 <lanyardState>
     6a2:	91 30       	cpi	r25, 0x01	; 1
     6a4:	e1 f4       	brne	.+56     	; 0x6de <LanyardCode+0x156>
                if ((lanyardPos % 4) == 0) {
     6a6:	98 2f       	mov	r25, r24
     6a8:	93 70       	andi	r25, 0x03	; 3
     6aa:	69 f4       	brne	.+26     	; 0x6c6 <LanyardCode+0x13e>
                    iLED[HCKR[G][(lanyardPos>>2)-1]] = dimValue;
     6ac:	e8 2f       	mov	r30, r24
     6ae:	e6 95       	lsr	r30
     6b0:	e6 95       	lsr	r30
     6b2:	f0 e0       	ldi	r31, 0x00	; 0
     6b4:	e8 5a       	subi	r30, 0xA8	; 168
     6b6:	f0 44       	sbci	r31, 0x40	; 64
     6b8:	e5 81       	ldd	r30, Z+5	; 0x05
     6ba:	f0 e0       	ldi	r31, 0x00	; 0
     6bc:	90 91 0c 38 	lds	r25, 0x380C	; 0x80380c <dimValue>
     6c0:	ed 53       	subi	r30, 0x3D	; 61
     6c2:	f5 4c       	sbci	r31, 0xC5	; 197
                }
                if (lanyardPos == sizeof(lanyardCode)) {
     6c4:	90 83       	st	Z, r25
     6c6:	88 31       	cpi	r24, 0x18	; 24
                    UpdateState(LANYARD_COMPLETED);
     6c8:	89 f4       	brne	.+34     	; 0x6ec <LanyardCode+0x164>
     6ca:	8b e7       	ldi	r24, 0x7B	; 123
     6cc:	84 d6       	rcall	.+3336   	; 0x13d6 <UpdateState>
                    iLED[CAT]       = 0;
     6ce:	ec 2f       	mov	r30, r28
     6d0:	f0 e0       	ldi	r31, 0x00	; 0
     6d2:	ed 53       	subi	r30, 0x3D	; 61
     6d4:	f5 4c       	sbci	r31, 0xC5	; 197
                    effect = 0x42;
     6d6:	10 82       	st	Z, r1
     6d8:	82 e4       	ldi	r24, 0x42	; 66
     6da:	90 e0       	ldi	r25, 0x00	; 0
                    /*TODO state = STATE_MUSIC;*/
                }
            } else {
                initLanyard();
     6dc:	03 c0       	rjmp	.+6      	; 0x6e4 <LanyardCode+0x15c>
     6de:	4b df       	rcall	.-362    	; 0x576 <initLanyard>
                effect = 0x21;
     6e0:	81 e2       	ldi	r24, 0x21	; 33
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <effect>
     6e8:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <effect+0x1>
            }
        }
    }

    return 0;
}
     6ec:	80 e0       	ldi	r24, 0x00	; 0
     6ee:	cf 91       	pop	r28
     6f0:	08 95       	ret

000006f2 <initMaze>:
uint8_t         mazeState = TRUE;
uint8_t         inverted  = FALSE;
uint16_t        mazeLastActive = 0;

void initMaze() {
    mazeHckrPos = 0;
     6f2:	10 92 49 38 	sts	0x3849, r1	; 0x803849 <mazeHckrPos>
    mazePos = 0;
     6f6:	10 92 4a 38 	sts	0x384A, r1	; 0x80384a <mazePos>
    mazeCnt = 0;
     6fa:	10 92 48 38 	sts	0x3848, r1	; 0x803848 <mazeCnt>
    mazeState = TRUE;
     6fe:	81 e0       	ldi	r24, 0x01	; 1
     700:	80 93 0d 38 	sts	0x380D, r24	; 0x80380d <mazeState>
    inverted  = FALSE;
     704:	10 92 47 38 	sts	0x3847, r1	; 0x803847 <inverted>
    effect = 0;
     708:	10 92 3a 38 	sts	0x383A, r1	; 0x80383a <effect>
     70c:	10 92 3b 38 	sts	0x383B, r1	; 0x80383b <effect+0x1>
     710:	08 95       	ret

00000712 <showFieldStrength>:
}

void showFieldStrength(int16_t val) {
    int16_t field;

    field = abs(val);
     712:	97 ff       	sbrs	r25, 7
     714:	03 c0       	rjmp	.+6      	; 0x71c <showFieldStrength+0xa>
     716:	91 95       	neg	r25
     718:	81 95       	neg	r24
     71a:	91 09       	sbc	r25, r1

    if ( field > HALL_FIELD_0 )
     71c:	8d 33       	cpi	r24, 0x3D	; 61
     71e:	91 05       	cpc	r25, r1
     720:	1c f0       	brlt	.+6      	; 0x728 <showFieldStrength+0x16>
        gameNow = MAZE;
     722:	21 e0       	ldi	r18, 0x01	; 1
     724:	20 93 3c 38 	sts	0x383C, r18	; 0x80383c <gameNow>

    if (gameNow == MAZE) {
     728:	20 91 3c 38 	lds	r18, 0x383C	; 0x80383c <gameNow>
     72c:	21 30       	cpi	r18, 0x01	; 1
     72e:	09 f5       	brne	.+66     	; 0x772 <showFieldStrength+0x60>
        if ( field < HALL_FIELD_0 )
     730:	8c 33       	cpi	r24, 0x3C	; 60
     732:	91 05       	cpc	r25, r1
     734:	1c f4       	brge	.+6      	; 0x73c <showFieldStrength+0x2a>
            WingBar(0,0);
     736:	60 e0       	ldi	r22, 0x00	; 0
     738:	80 e0       	ldi	r24, 0x00	; 0
     73a:	1a c0       	rjmp	.+52     	; 0x770 <showFieldStrength+0x5e>
        else if ( field < HALL_FIELD_1 )
     73c:	88 37       	cpi	r24, 0x78	; 120
     73e:	91 05       	cpc	r25, r1
     740:	1c f4       	brge	.+6      	; 0x748 <showFieldStrength+0x36>
            WingBar(1,1);
     742:	61 e0       	ldi	r22, 0x01	; 1
     744:	81 e0       	ldi	r24, 0x01	; 1
     746:	14 c0       	rjmp	.+40     	; 0x770 <showFieldStrength+0x5e>
        else if ( field < HALL_FIELD_2 )
     748:	86 39       	cpi	r24, 0x96	; 150
     74a:	91 05       	cpc	r25, r1
     74c:	1c f4       	brge	.+6      	; 0x754 <showFieldStrength+0x42>
            WingBar(2,2);
     74e:	62 e0       	ldi	r22, 0x02	; 2
     750:	82 e0       	ldi	r24, 0x02	; 2
     752:	0e c0       	rjmp	.+28     	; 0x770 <showFieldStrength+0x5e>
        else if ( field < HALL_FIELD_3 )
     754:	88 3c       	cpi	r24, 0xC8	; 200
     756:	91 05       	cpc	r25, r1
     758:	1c f4       	brge	.+6      	; 0x760 <showFieldStrength+0x4e>
            WingBar(3,3);
     75a:	63 e0       	ldi	r22, 0x03	; 3
     75c:	83 e0       	ldi	r24, 0x03	; 3
     75e:	08 c0       	rjmp	.+16     	; 0x770 <showFieldStrength+0x5e>
        else if ( field < HALL_FIELD_4 )
     760:	8c 32       	cpi	r24, 0x2C	; 44
     762:	91 40       	sbci	r25, 0x01	; 1
     764:	1c f4       	brge	.+6      	; 0x76c <showFieldStrength+0x5a>
            WingBar(4,4);
     766:	64 e0       	ldi	r22, 0x04	; 4
     768:	84 e0       	ldi	r24, 0x04	; 4
     76a:	02 c0       	rjmp	.+4      	; 0x770 <showFieldStrength+0x5e>
        else
            WingBar(5,5);
     76c:	65 e0       	ldi	r22, 0x05	; 5
     76e:	85 e0       	ldi	r24, 0x05	; 5
     770:	24 c7       	rjmp	.+3656   	; 0x15ba <WingBar>
     772:	08 95       	ret

00000774 <MagnetMaze>:
    }
}

// Main game loop
uint8_t MagnetMaze(){
     774:	cf 93       	push	r28
     776:	df 93       	push	r29
    if (gameNow == MAZE && idleTimeout(mazeLastActive,MAZE_MAX_IDLE)) {
     778:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <gameNow>
     77c:	81 30       	cpi	r24, 0x01	; 1
     77e:	71 f4       	brne	.+28     	; 0x79c <MagnetMaze+0x28>
     780:	6a e0       	ldi	r22, 0x0A	; 10
     782:	70 e0       	ldi	r23, 0x00	; 0
     784:	80 91 45 38 	lds	r24, 0x3845	; 0x803845 <mazeLastActive>
     788:	90 91 46 38 	lds	r25, 0x3846	; 0x803846 <mazeLastActive+0x1>
     78c:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <idleTimeout>
     790:	88 23       	and	r24, r24
     792:	21 f0       	breq	.+8      	; 0x79c <MagnetMaze+0x28>
        /* clean up maze game and go back to text game */
        initMaze();
     794:	ae df       	rcall	.-164    	; 0x6f2 <initMaze>
        gameNow = TEXT;
     796:	10 92 3c 38 	sts	0x383C, r1	; 0x80383c <gameNow>
        return 0;
     79a:	e5 c0       	rjmp	.+458    	; 0x966 <MagnetMaze+0x1f2>
    }
        
    if (CheckState(MAZE_INACTIVE))
     79c:	87 ef       	ldi	r24, 0xF7	; 247
     79e:	3c d6       	rcall	.+3192   	; 0x1418 <CheckState>
     7a0:	81 11       	cpse	r24, r1
     7a2:	e1 c0       	rjmp	.+450    	; 0x966 <MagnetMaze+0x1f2>
        return 0;

    if (CheckState(MAZE_COMPLETED))
     7a4:	8d e7       	ldi	r24, 0x7D	; 125
     7a6:	38 d6       	rcall	.+3184   	; 0x1418 <CheckState>
     7a8:	81 11       	cpse	r24, r1
     7aa:	dd c0       	rjmp	.+442    	; 0x966 <MagnetMaze+0x1f2>
     7ac:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <gameNow>
        return 0;

    if ( (gameNow != TEXT) && (gameNow != MAZE) )
     7b0:	82 30       	cpi	r24, 0x02	; 2
     7b2:	08 f0       	brcs	.+2      	; 0x7b6 <MagnetMaze+0x42>
     7b4:	d8 c0       	rjmp	.+432    	; 0x966 <MagnetMaze+0x1f2>
     7b6:	80 91 eb 3a 	lds	r24, 0x3AEB	; 0x803aeb <calHall>
        return 0;

    if (calHall == 0)
     7ba:	90 91 ec 3a 	lds	r25, 0x3AEC	; 0x803aec <calHall+0x1>
     7be:	89 2b       	or	r24, r25
     7c0:	41 f4       	brne	.+16     	; 0x7d2 <MagnetMaze+0x5e>
     7c2:	80 91 bb 3a 	lds	r24, 0x3ABB	; 0x803abb <adcHall>
        calHall = adcHall;
     7c6:	90 91 bc 3a 	lds	r25, 0x3ABC	; 0x803abc <adcHall+0x1>
     7ca:	80 93 eb 3a 	sts	0x3AEB, r24	; 0x803aeb <calHall>
     7ce:	90 93 ec 3a 	sts	0x3AEC, r25	; 0x803aec <calHall+0x1>
     7d2:	c0 91 bb 3a 	lds	r28, 0x3ABB	; 0x803abb <adcHall>

    int16_t valHall = adcHall - calHall;
     7d6:	d0 91 bc 3a 	lds	r29, 0x3ABC	; 0x803abc <adcHall+0x1>
     7da:	80 91 eb 3a 	lds	r24, 0x3AEB	; 0x803aeb <calHall>
     7de:	90 91 ec 3a 	lds	r25, 0x3AEC	; 0x803aec <calHall+0x1>
     7e2:	c8 1b       	sub	r28, r24
     7e4:	d9 0b       	sbc	r29, r25
    showFieldStrength(valHall);
     7e6:	ce 01       	movw	r24, r28
     7e8:	94 df       	rcall	.-216    	; 0x712 <showFieldStrength>
     7ea:	80 91 4c 38 	lds	r24, 0x384C	; 0x80384c <curHallState>

    switch (curHallState) {
     7ee:	81 30       	cpi	r24, 0x01	; 1
     7f0:	d1 f0       	breq	.+52     	; 0x826 <MagnetMaze+0xb2>
     7f2:	70 f0       	brcs	.+28     	; 0x810 <MagnetMaze+0x9c>
     7f4:	82 30       	cpi	r24, 0x02	; 2
     7f6:	f9 f4       	brne	.+62     	; 0x836 <MagnetMaze+0xc2>
     7f8:	c4 3d       	cpi	r28, 0xD4	; 212
        case HALL_IDLE:
            if ( valHall < NEG_HALL_HIGH ) {
     7fa:	9e ef       	ldi	r25, 0xFE	; 254
     7fc:	d9 07       	cpc	r29, r25
     7fe:	1c f4       	brge	.+6      	; 0x806 <MagnetMaze+0x92>
     800:	10 92 4b 38 	sts	0x384B, r1	; 0x80384b <newHallState>
                newHallState = HALL_N;
     804:	18 c0       	rjmp	.+48     	; 0x836 <MagnetMaze+0xc2>
     806:	cd 32       	cpi	r28, 0x2D	; 45
            } else if ( valHall > HALL_HIGH ) {
     808:	d1 40       	sbci	r29, 0x01	; 1
     80a:	4c f0       	brlt	.+18     	; 0x81e <MagnetMaze+0xaa>
     80c:	91 e0       	ldi	r25, 0x01	; 1
                newHallState = HALL_S;
     80e:	08 c0       	rjmp	.+16     	; 0x820 <MagnetMaze+0xac>
     810:	cd 32       	cpi	r28, 0x2D	; 45
                newHallState = HALL_IDLE;
            }
            break;
        
        case HALL_N:
            if ( valHall > HALL_HIGH ) {
     812:	91 e0       	ldi	r25, 0x01	; 1
     814:	d9 07       	cpc	r29, r25
     816:	d4 f7       	brge	.-12     	; 0x80c <MagnetMaze+0x98>
     818:	c9 38       	cpi	r28, 0x89	; 137
                newHallState = HALL_S;
            } else if ( valHall > NEG_HALL_LOW ) {
     81a:	df 4f       	sbci	r29, 0xFF	; 255
     81c:	8c f3       	brlt	.-30     	; 0x800 <MagnetMaze+0x8c>
     81e:	92 e0       	ldi	r25, 0x02	; 2
            if ( valHall < NEG_HALL_HIGH ) {
                newHallState = HALL_N;
            } else if ( valHall > HALL_HIGH ) {
                newHallState = HALL_S;
            } else {
                newHallState = HALL_IDLE;
     820:	90 93 4b 38 	sts	0x384B, r25	; 0x80384b <newHallState>
     824:	08 c0       	rjmp	.+16     	; 0x836 <MagnetMaze+0xc2>
     826:	c4 3d       	cpi	r28, 0xD4	; 212
                newHallState = HALL_N;
            }
            break;
        
        case HALL_S:
            if ( valHall < NEG_HALL_HIGH ) {
     828:	9e ef       	ldi	r25, 0xFE	; 254
     82a:	d9 07       	cpc	r29, r25
     82c:	4c f3       	brlt	.-46     	; 0x800 <MagnetMaze+0x8c>
     82e:	c8 37       	cpi	r28, 0x78	; 120
                newHallState = HALL_N;
            } else if ( valHall < HALL_LOW ) {
     830:	d1 05       	cpc	r29, r1
     832:	ac f3       	brlt	.-22     	; 0x81e <MagnetMaze+0xaa>
     834:	eb cf       	rjmp	.-42     	; 0x80c <MagnetMaze+0x98>
     836:	c0 91 46 bf 	lds	r28, 0xBF46	; 0x80bf46 <__bss_end+0x8434>
            }
            break;
    }

    /* Indicate that the magnet was read succesfully */
    iLED[CAT] = (newHallState == HALL_IDLE ? 0 : dimValue);
     83a:	ec 2f       	mov	r30, r28
     83c:	f0 e0       	ldi	r31, 0x00	; 0
     83e:	90 91 4b 38 	lds	r25, 0x384B	; 0x80384b <newHallState>
     842:	92 30       	cpi	r25, 0x02	; 2
     844:	19 f0       	breq	.+6      	; 0x84c <MagnetMaze+0xd8>
     846:	20 91 0c 38 	lds	r18, 0x380C	; 0x80380c <dimValue>
     84a:	01 c0       	rjmp	.+2      	; 0x84e <MagnetMaze+0xda>
     84c:	20 e0       	ldi	r18, 0x00	; 0
     84e:	ed 53       	subi	r30, 0x3D	; 61
     850:	f5 4c       	sbci	r31, 0xC5	; 197
     852:	20 83       	st	Z, r18
     854:	2f e9       	ldi	r18, 0x9F	; 159
    effect = 0x19f;
     856:	31 e0       	ldi	r19, 0x01	; 1
     858:	20 93 3a 38 	sts	0x383A, r18	; 0x80383a <effect>
     85c:	30 93 3b 38 	sts	0x383B, r19	; 0x80383b <effect+0x1>
     860:	89 17       	cp	r24, r25

    if (newHallState != curHallState) {
     862:	09 f4       	brne	.+2      	; 0x866 <MagnetMaze+0xf2>
     864:	80 c0       	rjmp	.+256    	; 0x966 <MagnetMaze+0x1f2>
     866:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <getClock>
        /* keep track of time to enable an idle timeout to exit the game */
        mazeLastActive = getClock();
     86a:	80 93 45 38 	sts	0x3845, r24	; 0x803845 <mazeLastActive>
     86e:	90 93 46 38 	sts	0x3846, r25	; 0x803846 <mazeLastActive+0x1>
     872:	90 91 4a 38 	lds	r25, 0x384A	; 0x80384a <mazePos>

        /* Make the maze work regardless of badge orientation */
        if ((mazePos == 0) && (newHallState != 0))
     876:	80 91 4b 38 	lds	r24, 0x384B	; 0x80384b <newHallState>
     87a:	91 11       	cpse	r25, r1
     87c:	05 c0       	rjmp	.+10     	; 0x888 <MagnetMaze+0x114>
     87e:	88 23       	and	r24, r24
     880:	19 f0       	breq	.+6      	; 0x888 <MagnetMaze+0x114>
     882:	91 e0       	ldi	r25, 0x01	; 1
            inverted = (newHallState != (mazeCode[0]&1)) ? TRUE : FALSE;
     884:	90 93 47 38 	sts	0x3847, r25	; 0x803847 <inverted>
     888:	80 93 4c 38 	sts	0x384C, r24	; 0x80384c <curHallState>

        curHallState = newHallState;
     88c:	88 23       	and	r24, r24
        
        if (curHallState != 0) {
     88e:	09 f4       	brne	.+2      	; 0x892 <MagnetMaze+0x11e>
     890:	6a c0       	rjmp	.+212    	; 0x966 <MagnetMaze+0x1f2>
     892:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <gameNow>
            if (gameNow == TEXT)
     896:	81 11       	cpse	r24, r1
     898:	01 c0       	rjmp	.+2      	; 0x89c <MagnetMaze+0x128>
                initMaze();
     89a:	2b df       	rcall	.-426    	; 0x6f2 <initMaze>
     89c:	81 e0       	ldi	r24, 0x01	; 1
            gameNow = MAZE;
     89e:	80 93 3c 38 	sts	0x383C, r24	; 0x80383c <gameNow>
     8a2:	90 91 47 38 	lds	r25, 0x3847	; 0x803847 <inverted>

            if ( (inverted ? curHallState^1 : curHallState) == (mazeCode[mazePos>>3]&(mazePos&7)) ) {
     8a6:	40 91 4c 38 	lds	r20, 0x384C	; 0x80384c <curHallState>
     8aa:	91 11       	cpse	r25, r1
     8ac:	48 27       	eor	r20, r24
     8ae:	50 e0       	ldi	r21, 0x00	; 0
     8b0:	80 91 4a 38 	lds	r24, 0x384A	; 0x80384a <mazePos>
     8b4:	e8 2f       	mov	r30, r24
     8b6:	e6 95       	lsr	r30
     8b8:	e6 95       	lsr	r30
     8ba:	e6 95       	lsr	r30
     8bc:	f0 e0       	ldi	r31, 0x00	; 0
     8be:	ec 56       	subi	r30, 0x6C	; 108
     8c0:	f0 44       	sbci	r31, 0x40	; 64
     8c2:	28 2f       	mov	r18, r24
     8c4:	27 70       	andi	r18, 0x07	; 7
     8c6:	90 81       	ld	r25, Z
     8c8:	29 23       	and	r18, r25
     8ca:	30 e0       	ldi	r19, 0x00	; 0
     8cc:	42 17       	cp	r20, r18
     8ce:	53 07       	cpc	r21, r19
     8d0:	91 f4       	brne	.+36     	; 0x8f6 <MagnetMaze+0x182>
     8d2:	90 91 0d 38 	lds	r25, 0x380D	; 0x80380d <mazeState>
                mazeState &= TRUE;
     8d6:	91 70       	andi	r25, 0x01	; 1
     8d8:	90 93 0d 38 	sts	0x380D, r25	; 0x80380d <mazeState>
     8dc:	e0 91 55 bf 	lds	r30, 0xBF55	; 0x80bf55 <__bss_end+0x8443>
                iLED[EYE[R][L]] = 0;
     8e0:	f0 e0       	ldi	r31, 0x00	; 0
     8e2:	ed 53       	subi	r30, 0x3D	; 61
     8e4:	f5 4c       	sbci	r31, 0xC5	; 197
     8e6:	10 82       	st	Z, r1
     8e8:	e0 91 54 bf 	lds	r30, 0xBF54	; 0x80bf54 <__bss_end+0x8442>
                iLED[EYE[R][R]] = 0;
     8ec:	f0 e0       	ldi	r31, 0x00	; 0
     8ee:	ed 53       	subi	r30, 0x3D	; 61
     8f0:	f5 4c       	sbci	r31, 0xC5	; 197
     8f2:	10 82       	st	Z, r1
     8f4:	02 c0       	rjmp	.+4      	; 0x8fa <MagnetMaze+0x186>
     8f6:	10 92 0d 38 	sts	0x380D, r1	; 0x80380d <mazeState>
            } else {
                mazeState = FALSE;
     8fa:	8f 5f       	subi	r24, 0xFF	; 255
            }
            mazePos++;
     8fc:	80 93 4a 38 	sts	0x384A, r24	; 0x80384a <mazePos>
     900:	90 91 48 38 	lds	r25, 0x3848	; 0x803848 <mazeCnt>
            mazeCnt++;            
     904:	9f 5f       	subi	r25, 0xFF	; 255
     906:	93 30       	cpi	r25, 0x03	; 3
            if (mazeCnt >= 3) {
     908:	18 f4       	brcc	.+6      	; 0x910 <MagnetMaze+0x19c>
     90a:	90 93 48 38 	sts	0x3848, r25	; 0x803848 <mazeCnt>
                iLED[EYE[R][R]] = 0;
            } else {
                mazeState = FALSE;
            }
            mazePos++;
            mazeCnt++;            
     90e:	2b c0       	rjmp	.+86     	; 0x966 <MagnetMaze+0x1f2>
     910:	10 92 48 38 	sts	0x3848, r1	; 0x803848 <mazeCnt>
            if (mazeCnt >= 3) {
                mazeCnt = 0;
     914:	90 91 0d 38 	lds	r25, 0x380D	; 0x80380d <mazeState>
                if (mazeState == TRUE) {
     918:	91 30       	cpi	r25, 0x01	; 1
     91a:	e1 f4       	brne	.+56     	; 0x954 <MagnetMaze+0x1e0>
     91c:	90 91 49 38 	lds	r25, 0x3849	; 0x803849 <mazeHckrPos>
                    iLED[HCKR[G][mazeHckrPos]] = dimValue;
     920:	e9 2f       	mov	r30, r25
     922:	f0 e0       	ldi	r31, 0x00	; 0
     924:	e8 5a       	subi	r30, 0xA8	; 168
     926:	f0 44       	sbci	r31, 0x40	; 64
     928:	e6 81       	ldd	r30, Z+6	; 0x06
     92a:	f0 e0       	ldi	r31, 0x00	; 0
     92c:	20 91 0c 38 	lds	r18, 0x380C	; 0x80380c <dimValue>
     930:	ed 53       	subi	r30, 0x3D	; 61
     932:	f5 4c       	sbci	r31, 0xC5	; 197
     934:	20 83       	st	Z, r18
     936:	9f 5f       	subi	r25, 0xFF	; 255
                    mazeHckrPos++;
     938:	90 93 49 38 	sts	0x3849, r25	; 0x803849 <mazeHckrPos>
                    if (mazePos == MAZE_LEN) {
     93c:	82 31       	cpi	r24, 0x12	; 18
     93e:	99 f4       	brne	.+38     	; 0x966 <MagnetMaze+0x1f2>
                        UpdateState(MAZE_COMPLETED);
     940:	8d e7       	ldi	r24, 0x7D	; 125
     942:	49 d5       	rcall	.+2706   	; 0x13d6 <UpdateState>
     944:	ec 2f       	mov	r30, r28
                        iLED[CAT]       = 0;
     946:	f0 e0       	ldi	r31, 0x00	; 0
     948:	ed 53       	subi	r30, 0x3D	; 61
     94a:	f5 4c       	sbci	r31, 0xC5	; 197
     94c:	10 82       	st	Z, r1
                        effect = 0x42;
     94e:	82 e4       	ldi	r24, 0x42	; 66
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	05 c0       	rjmp	.+10     	; 0x95e <MagnetMaze+0x1ea>
                        /*TODO state = STATE_MUSIC;*/
                    }
                } else {
                    initMaze();
     954:	ce de       	rcall	.-612    	; 0x6f2 <initMaze>
     956:	10 92 3c 38 	sts	0x383C, r1	; 0x80383c <gameNow>
                    gameNow   = TEXT;
     95a:	81 e2       	ldi	r24, 0x21	; 33
                    effect = 0x21;
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <effect>
     962:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <effect+0x1>
     966:	80 e0       	ldi	r24, 0x00	; 0
                }
            }
        }
    }
    return 0;
}
     968:	df 91       	pop	r29
     96a:	cf 91       	pop	r28
     96c:	08 95       	ret

0000096e <Setup>:
     96e:	cf 93       	push	r28
volatile uint16_t tmp16bit;    
volatile uint8_t mask[8] = {0x01, 0x03, 0x07, 0x0f, 0x1f, 0x3f, 0x7f, 0xff};
uint8_t HeartCount = 0;
uint8_t LedCount = 0;

void Setup(){
     970:	df 93       	push	r29
    cli();
     972:	f8 94       	cli

    //Set up clock at 10MHz
    CCP = CCP_IOREG_gc;
     974:	88 ed       	ldi	r24, 0xD8	; 216
     976:	84 bf       	out	0x34, r24	; 52
    CLKCTRL_MCLKCTRLB = 0x01;
     978:	c1 e0       	ldi	r28, 0x01	; 1
     97a:	c0 93 61 00 	sts	0x0061, r28	; 0x800061 <__TEXT_REGION_LENGTH__+0x700061>

    //Set I/O direction registers
    PORTA_DIR = 0b01001010;
     97e:	8a e4       	ldi	r24, 0x4A	; 74
     980:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <__TEXT_REGION_LENGTH__+0x700400>
    PORTB_DIR = 0b01111100;
     984:	8c e7       	ldi	r24, 0x7C	; 124
     986:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <__TEXT_REGION_LENGTH__+0x700420>
    PORTC_DIR = 0b00111111;
     98a:	9f e3       	ldi	r25, 0x3F	; 63
     98c:	90 93 40 04 	sts	0x0440, r25	; 0x800440 <__TEXT_REGION_LENGTH__+0x700440>

    //Invert some pins for correcting LED reversal error
    PORTC_PIN3CTRL |= 0x80;
     990:	80 91 53 04 	lds	r24, 0x0453	; 0x800453 <__TEXT_REGION_LENGTH__+0x700453>
     994:	80 68       	ori	r24, 0x80	; 128
     996:	80 93 53 04 	sts	0x0453, r24	; 0x800453 <__TEXT_REGION_LENGTH__+0x700453>
    PORTC_PIN4CTRL |= 0x80;
     99a:	80 91 54 04 	lds	r24, 0x0454	; 0x800454 <__TEXT_REGION_LENGTH__+0x700454>
     99e:	80 68       	ori	r24, 0x80	; 128
     9a0:	80 93 54 04 	sts	0x0454, r24	; 0x800454 <__TEXT_REGION_LENGTH__+0x700454>
    PORTC_PIN5CTRL |= 0x80;
     9a4:	80 91 55 04 	lds	r24, 0x0455	; 0x800455 <__TEXT_REGION_LENGTH__+0x700455>
     9a8:	80 68       	ori	r24, 0x80	; 128
     9aa:	80 93 55 04 	sts	0x0455, r24	; 0x800455 <__TEXT_REGION_LENGTH__+0x700455>
    PORTB_PIN3CTRL |= 0x80;
     9ae:	80 91 33 04 	lds	r24, 0x0433	; 0x800433 <__TEXT_REGION_LENGTH__+0x700433>
     9b2:	80 68       	ori	r24, 0x80	; 128
     9b4:	80 93 33 04 	sts	0x0433, r24	; 0x800433 <__TEXT_REGION_LENGTH__+0x700433>
    PORTB_PIN4CTRL |= 0x80;
     9b8:	80 91 34 04 	lds	r24, 0x0434	; 0x800434 <__TEXT_REGION_LENGTH__+0x700434>
     9bc:	80 68       	ori	r24, 0x80	; 128
     9be:	80 93 34 04 	sts	0x0434, r24	; 0x800434 <__TEXT_REGION_LENGTH__+0x700434>
    PORTB_PIN5CTRL |= 0x80;
     9c2:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <__TEXT_REGION_LENGTH__+0x700435>
     9c6:	80 68       	ori	r24, 0x80	; 128
     9c8:	80 93 35 04 	sts	0x0435, r24	; 0x800435 <__TEXT_REGION_LENGTH__+0x700435>
    PORTB_PIN2CTRL |= 0x80;
    PORTB_PIN6CTRL |= 0x80;
    */

    //UART (Alternative pins PA1=TxD, PA2=RxD, baudrate 9600, 8n1, RX and Buffer empty interrupts on)
    PORTMUX_CTRLB = 0x01;
     9cc:	c0 93 01 02 	sts	0x0201, r28	; 0x800201 <__TEXT_REGION_LENGTH__+0x700201>
    PORTA_OUTSET = 0x02;
     9d0:	d2 e0       	ldi	r29, 0x02	; 2
     9d2:	d0 93 05 04 	sts	0x0405, r29	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
    USART0_BAUD = (uint16_t)USART0_BAUD_RATE(115200);
     9d6:	2b e5       	ldi	r18, 0x5B	; 91
     9d8:	31 e0       	ldi	r19, 0x01	; 1
     9da:	20 93 08 08 	sts	0x0808, r18	; 0x800808 <__TEXT_REGION_LENGTH__+0x700808>
     9de:	30 93 09 08 	sts	0x0809, r19	; 0x800809 <__TEXT_REGION_LENGTH__+0x700809>
    USART0_CTRLA = 0xA0; //Interrupts on
     9e2:	80 ea       	ldi	r24, 0xA0	; 160
     9e4:	80 93 05 08 	sts	0x0805, r24	; 0x800805 <__TEXT_REGION_LENGTH__+0x700805>
    USART0_CTRLB = 0xC0; //RX and TX on
     9e8:	80 ec       	ldi	r24, 0xC0	; 192
     9ea:	80 93 06 08 	sts	0x0806, r24	; 0x800806 <__TEXT_REGION_LENGTH__+0x700806>
    USART0_CTRLC = 0x03; //8 bits data, no parity, 1 stop bit
     9ee:	83 e0       	ldi	r24, 0x03	; 3
     9f0:	80 93 07 08 	sts	0x0807, r24	; 0x800807 <__TEXT_REGION_LENGTH__+0x700807>
     
    //GPIO registers 0..3 can be used for global variables used in ISR routines (ASM capability: IN, OUT, SBI, CBI, SBIS, SBIC)
    L_COL = 0;     //Used in LED array to hold currently driven column value
     9f4:	1c ba       	out	0x1c, r1	; 28
    RXCNT = 0;     //Used as UART receive counter
     9f6:	1d ba       	out	0x1d, r1	; 29
    GPIOR3 = 0;    //
     9f8:	1f ba       	out	0x1f, r1	; 31

    //Init TCA (split mode, f_CLK/16, PWM on 6 alternative pins, underflow int enabled, synced and started)
    TCA0_SPLIT_CTRLD = 1;
     9fa:	c0 93 03 0a 	sts	0x0A03, r28	; 0x800a03 <__TEXT_REGION_LENGTH__+0x700a03>
    TCA0_SPLIT_CTRLA = (0x4)<<1;
     9fe:	88 e0       	ldi	r24, 0x08	; 8
     a00:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
    PORTMUX_CTRLC = 0x3F;
     a04:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <__TEXT_REGION_LENGTH__+0x700202>
    TCA0_SPLIT_CTRLB = 0x77;
     a08:	87 e7       	ldi	r24, 0x77	; 119
     a0a:	80 93 01 0a 	sts	0x0A01, r24	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
    TCA0_SPLIT_INTCTRL = 0x1;
     a0e:	c0 93 0a 0a 	sts	0x0A0A, r28	; 0x800a0a <__TEXT_REGION_LENGTH__+0x700a0a>
    TCA0_SPLIT_CTRLESET = ((0x2)<<2)|0x3;
     a12:	8b e0       	ldi	r24, 0x0B	; 11
     a14:	80 93 05 0a 	sts	0x0A05, r24	; 0x800a05 <__TEXT_REGION_LENGTH__+0x700a05>
    TCA0_SPLIT_CTRLA |= 1;
     a18:	80 91 00 0a 	lds	r24, 0x0A00	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
     a1c:	81 60       	ori	r24, 0x01	; 1
     a1e:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
     
    //Init TCB0 (compare value sets serial Tx pause between characters, uses TCA0 prescaler, enabled, interrupt disabled)
    TCB0_CTRLA = ((0x02)<<1)|0x01;
     a22:	85 e0       	ldi	r24, 0x05	; 5
     a24:	80 93 40 0a 	sts	0x0A40, r24	; 0x800a40 <__TEXT_REGION_LENGTH__+0x700a40>
    TCB0_CTRLB = 0;
     a28:	10 92 41 0a 	sts	0x0A41, r1	; 0x800a41 <__TEXT_REGION_LENGTH__+0x700a41>
    TCB0_CCMP = 0x01FF;
     a2c:	8f ef       	ldi	r24, 0xFF	; 255
     a2e:	91 e0       	ldi	r25, 0x01	; 1
     a30:	80 93 4c 0a 	sts	0x0A4C, r24	; 0x800a4c <__TEXT_REGION_LENGTH__+0x700a4c>
     a34:	90 93 4d 0a 	sts	0x0A4D, r25	; 0x800a4d <__TEXT_REGION_LENGTH__+0x700a4d>
    TCB0_INTCTRL = 0x00;     
     a38:	10 92 45 0a 	sts	0x0A45, r1	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
     
    //Init TCB1 (compare value sets audio sample rate (0x038B = 11025sps), enabled, interrupt enabled)
    TCB1_CTRLA = 0x01;
     a3c:	c0 93 50 0a 	sts	0x0A50, r28	; 0x800a50 <__TEXT_REGION_LENGTH__+0x700a50>
    TCB1_CTRLB = 0;
     a40:	10 92 51 0a 	sts	0x0A51, r1	; 0x800a51 <__TEXT_REGION_LENGTH__+0x700a51>
    TCB1_CCMP = 0x038B;
     a44:	8b e8       	ldi	r24, 0x8B	; 139
     a46:	93 e0       	ldi	r25, 0x03	; 3
     a48:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
     a4c:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
    TCB1_INTCTRL = 0x01;
     a50:	c0 93 55 0a 	sts	0x0A55, r28	; 0x800a55 <__TEXT_REGION_LENGTH__+0x700a55>

    //Init I2C (100kHz)
    I2C_init();
     a54:	4d dc       	rcall	.-1894   	; 0x2f0 <I2C_init>

    //VREF (DAC, ADC's)
    VREF_CTRLA   = 0x12;    //0x22 for audio in/out (2.5V), 0x12 for temperature in, audio out (1.1V/2.5V)
     a56:	82 e1       	ldi	r24, 0x12	; 18
     a58:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    VREF_CTRLC   = 0x20;    //ADC1 reference at 2.5V
     a5c:	80 e2       	ldi	r24, 0x20	; 32
     a5e:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    VREF_CTRLB   = 0x01;    //DAC0 ref forced enabled
     a62:	c0 93 a1 00 	sts	0x00A1, r28	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>

    //Init ADC0 (audio in, also controls DAC output rate, internal temperature?)
    ADC0_CTRLA   = 0x02;    //10 bit resolution, free running
     a66:	d0 93 00 06 	sts	0x0600, r29	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
    ADC0_CTRLC   = 0x44;    //Reduced sample capacitor, internal reference, clock/32 => 24038sps
     a6a:	84 e4       	ldi	r24, 0x44	; 68
     a6c:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__TEXT_REGION_LENGTH__+0x700602>
    ADC0_MUXPOS  = 0x1E;    //Audio in: AIN7 at (0x07), Temperature: Internal sensor at (0x1E)
     a70:	8e e1       	ldi	r24, 0x1E	; 30
     a72:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
    ADC0_INTCTRL = 0x01;    //Result ready interrupt enabled
     a76:	c0 93 0a 06 	sts	0x060A, r28	; 0x80060a <__TEXT_REGION_LENGTH__+0x70060a>
    ADC0_CTRLA  |= 0x01;    //ADC0 enabled
     a7a:	80 91 00 06 	lds	r24, 0x0600	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
     a7e:	81 60       	ori	r24, 0x01	; 1
     a80:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
    ADC0_COMMAND = 0x01;    //Start first conversion, after that it will run periodically.
     a84:	c0 93 08 06 	sts	0x0608, r28	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>

    //Init ADC1 (buttons and sensors: CH0=Photo transistor, CH1=Hall, CH4=Buttons)
    ADC1_CTRLA   = 0;
     a88:	10 92 40 06 	sts	0x0640, r1	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
    ADC1_CTRLB   = 0x02;    //4 results automatically accumulated
     a8c:	d0 93 41 06 	sts	0x0641, r29	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
    ADC1_CTRLC   = 0x52;    //Reduced sample capacitor, VDD as reference, clock/8
     a90:	82 e5       	ldi	r24, 0x52	; 82
     a92:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <__TEXT_REGION_LENGTH__+0x700642>
    ADC1_SAMPCTRL= 0x04;    //Extend sampling time with 4 cycles (6 total)
     a96:	84 e0       	ldi	r24, 0x04	; 4
     a98:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
    ADC1_MUXPOS  = 0x04;    //Start with Buttons, for sensors, activate sensor power first.
     a9c:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
    ADC1_INTCTRL = 0x01;    //Result ready interrupt enabled
     aa0:	c0 93 4a 06 	sts	0x064A, r28	; 0x80064a <__TEXT_REGION_LENGTH__+0x70064a>
    ADC1_CTRLA  |= 0x01;    //ADC0 enabled
     aa4:	80 91 40 06 	lds	r24, 0x0640	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
     aa8:	81 60       	ori	r24, 0x01	; 1
     aaa:	80 93 40 06 	sts	0x0640, r24	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
    ADC1_COMMAND = 0x01;    //Start single conversion
     aae:	c0 93 48 06 	sts	0x0648, r28	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>

    //Init DAC0
    DAC0_CTRLA = 0x40;     //Enable output buffer (connect to pin)
     ab2:	80 e4       	ldi	r24, 0x40	; 64
     ab4:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
    DAC0_DATA = 0x80;      //Data value at half point (about 1.25V)
     ab8:	80 e8       	ldi	r24, 0x80	; 128
     aba:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
    DAC0_CTRLA |= 0x01;    //Enable DAC
     abe:	80 91 a0 06 	lds	r24, 0x06A0	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
     ac2:	81 60       	ori	r24, 0x01	; 1
     ac4:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
     
    //PIT and RTC interrupts
    while(RTC_STATUS & RTC_CTRLABUSY_bm);
     ac8:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     acc:	80 fd       	sbrc	r24, 0
     ace:	fc cf       	rjmp	.-8      	; 0xac8 <Setup+0x15a>
    RTC_CTRLA          = (0x6)<<3;                         //Prescaler: /64
     ad0:	80 e3       	ldi	r24, 0x30	; 48
     ad2:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__TEXT_REGION_LENGTH__+0x700140>
    RTC_CLKSEL         = 0;                                //Clock source: internal 32768Hz clock
     ad6:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <__TEXT_REGION_LENGTH__+0x700147>
    while(RTC_STATUS & RTC_PERBUSY_bm);
     ada:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     ade:	82 fd       	sbrc	r24, 2
     ae0:	fc cf       	rjmp	.-8      	; 0xada <Setup+0x16c>
    RTC_PER            = 512*60;                           //60 second period (for clocking how long the device has been running?)
     ae2:	80 e0       	ldi	r24, 0x00	; 0
     ae4:	98 e7       	ldi	r25, 0x78	; 120
     ae6:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     aea:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
    tmp16bit = (RTC_CNT + BTN_TMR);
     aee:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     af2:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     af6:	82 96       	adiw	r24, 0x22	; 34
     af8:	80 93 ef 3a 	sts	0x3AEF, r24	; 0x803aef <tmp16bit>
     afc:	90 93 f0 3a 	sts	0x3AF0, r25	; 0x803af0 <tmp16bit+0x1>
    if (tmp16bit > RTC_PER) tmp16bit -= RTC_PER;
     b00:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     b04:	30 91 4b 01 	lds	r19, 0x014B	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
     b08:	80 91 ef 3a 	lds	r24, 0x3AEF	; 0x803aef <tmp16bit>
     b0c:	90 91 f0 3a 	lds	r25, 0x3AF0	; 0x803af0 <tmp16bit+0x1>
     b10:	28 17       	cp	r18, r24
     b12:	39 07       	cpc	r19, r25
     b14:	70 f4       	brcc	.+28     	; 0xb32 <Setup+0x1c4>
     b16:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     b1a:	30 91 4b 01 	lds	r19, 0x014B	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
     b1e:	80 91 ef 3a 	lds	r24, 0x3AEF	; 0x803aef <tmp16bit>
     b22:	90 91 f0 3a 	lds	r25, 0x3AF0	; 0x803af0 <tmp16bit+0x1>
     b26:	82 1b       	sub	r24, r18
     b28:	93 0b       	sbc	r25, r19
     b2a:	80 93 ef 3a 	sts	0x3AEF, r24	; 0x803aef <tmp16bit>
     b2e:	90 93 f0 3a 	sts	0x3AF0, r25	; 0x803af0 <tmp16bit+0x1>
    while(RTC_STATUS & RTC_CMPBUSY_bm);
     b32:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     b36:	83 fd       	sbrc	r24, 3
     b38:	fc cf       	rjmp	.-8      	; 0xb32 <Setup+0x1c4>
    RTC_CMP            = tmp16bit;                         //Button timing
     b3a:	80 91 ef 3a 	lds	r24, 0x3AEF	; 0x803aef <tmp16bit>
     b3e:	90 91 f0 3a 	lds	r25, 0x3AF0	; 0x803af0 <tmp16bit+0x1>
     b42:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     b46:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
    RTC_INTCTRL        = 0x03;                             //RTC overflow interrupt enabled
     b4a:	83 e0       	ldi	r24, 0x03	; 3
     b4c:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
    RTC_PITINTCTRL     = 0x01;                             //PIT interrupt enabled
     b50:	81 e0       	ldi	r24, 0x01	; 1
     b52:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <__TEXT_REGION_LENGTH__+0x700152>
    RTC_PITCTRLA       = (0x1)<<3;                         //Interrupt fires after 4 RTC clock cycles Rate=(RTCCLK/(PRESC*PERIOD)) 32768/256=128Hz
     b56:	88 e0       	ldi	r24, 0x08	; 8
     b58:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__TEXT_REGION_LENGTH__+0x700150>
    while(RTC_STATUS & RTC_CTRLABUSY_bm);      
     b5c:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     b60:	80 fd       	sbrc	r24, 0
     b62:	fc cf       	rjmp	.-8      	; 0xb5c <Setup+0x1ee>
    RTC_CTRLA          |= 0x01;                            //Enable RTC
     b64:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <__TEXT_REGION_LENGTH__+0x700140>
     b68:	81 60       	ori	r24, 0x01	; 1
     b6a:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__TEXT_REGION_LENGTH__+0x700140>
    RTC_PITCTRLA       |= 0x01;                            //Enable PIT
     b6e:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <__TEXT_REGION_LENGTH__+0x700150>
     b72:	81 60       	ori	r24, 0x01	; 1
     b74:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__TEXT_REGION_LENGTH__+0x700150>
     
    //Other inits
    serRx[0] = 0;           // Empty Rx buffer (first char is enough)
     b78:	10 92 75 3a 	sts	0x3A75, r1	; 0x803a75 <serRx>
    serTxAddr = &serRx[0];  // Point to first address of the Rx buffer
     b7c:	85 e7       	ldi	r24, 0x75	; 117
     b7e:	9a e3       	ldi	r25, 0x3A	; 58
     b80:	80 93 b9 3a 	sts	0x3AB9, r24	; 0x803ab9 <serTxAddr>
     b84:	90 93 ba 3a 	sts	0x3ABA, r25	; 0x803aba <serTxAddr+0x1>

    sei();
     b88:	78 94       	sei
}
     b8a:	df 91       	pop	r29
     b8c:	cf 91       	pop	r28
     b8e:	08 95       	ret

00000b90 <__vector_8>:

// TCA0 is used for driving the LED matrix at 488Hz (* 5 columns = 2440Hz). The lower 8 bit underflow interrupt is used to load new values and shift between columns.
ISR(TCA0_LUNF_vect){
     b90:	1f 92       	push	r1
     b92:	0f 92       	push	r0
     b94:	0f b6       	in	r0, 0x3f	; 63
     b96:	0f 92       	push	r0
     b98:	11 24       	eor	r1, r1
     b9a:	8f 93       	push	r24
     b9c:	9f 93       	push	r25
     b9e:	af 93       	push	r26
     ba0:	bf 93       	push	r27
     ba2:	ef 93       	push	r30
     ba4:	ff 93       	push	r31
    //Turn off all columns
    PORTC_OUTCLR = 0x07;
     ba6:	87 e0       	ldi	r24, 0x07	; 7
     ba8:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x700446>
    PORTB_OUTCLR = 0x44;
     bac:	84 e4       	ldi	r24, 0x44	; 68
     bae:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
    "ldi r25, 6        \n"
    "ld r24, %a[arr]+  \n"
    "st %a[wo]+, r24   \n"
    "dec r25           \n"
    "brne .-8          \n"
    :: [wo] "e" (&TCA0_SPLIT_LCMP0), [arr] "e" (&iLED[(L_COL<<3)]) : "r25", "r24", "cc", "memory");
     bb2:	ec b3       	in	r30, 0x1c	; 28
     bb4:	88 e0       	ldi	r24, 0x08	; 8
     bb6:	e8 9f       	mul	r30, r24
     bb8:	f0 01       	movw	r30, r0
     bba:	11 24       	eor	r1, r1
     bbc:	ed 53       	subi	r30, 0x3D	; 61
     bbe:	f5 4c       	sbci	r31, 0xC5	; 197
    //Turn off all columns
    PORTC_OUTCLR = 0x07;
    PORTB_OUTCLR = 0x44;

    //Write all of the compare registers of TCA0 with PWM values in array (rows)
    asm(
     bc0:	a8 e2       	ldi	r26, 0x28	; 40
     bc2:	ba e0       	ldi	r27, 0x0A	; 10
     bc4:	96 e0       	ldi	r25, 0x06	; 6
     bc6:	81 91       	ld	r24, Z+
     bc8:	8d 93       	st	X+, r24
     bca:	9a 95       	dec	r25
     bcc:	e1 f7       	brne	.-8      	; 0xbc6 <__vector_8+0x36>
    "st %a[wo]+, r24   \n"
    "dec r25           \n"
    "brne .-8          \n"
    :: [wo] "e" (&TCA0_SPLIT_LCMP0), [arr] "e" (&iLED[(L_COL<<3)]) : "r25", "r24", "cc", "memory");

    TCA0_SPLIT_CTRLESET = ((0x2)<<2)|0x3; //Sync timers: Moved this below the PWM value loading to fix the data shifting in asm above.
     bce:	8b e0       	ldi	r24, 0x0B	; 11
     bd0:	80 93 05 0a 	sts	0x0A05, r24	; 0x800a05 <__TEXT_REGION_LENGTH__+0x700a05>

    //Turn on the right column
    if (L_COL<3) {
     bd4:	8c b3       	in	r24, 0x1c	; 28
     bd6:	83 30       	cpi	r24, 0x03	; 3
     bd8:	58 f4       	brcc	.+22     	; 0xbf0 <__vector_8+0x60>
        asm(
     bda:	8c b3       	in	r24, 0x1c	; 28
     bdc:	91 e0       	ldi	r25, 0x01	; 1
     bde:	01 c0       	rjmp	.+2      	; 0xbe2 <__vector_8+0x52>
     be0:	99 0f       	add	r25, r25
     be2:	8a 95       	dec	r24
     be4:	ea f7       	brpl	.-6      	; 0xbe0 <__vector_8+0x50>
     be6:	99 b9       	out	0x09, r25	; 9
     be8:	8c b3       	in	r24, 0x1c	; 28
     bea:	83 95       	inc	r24
     bec:	8c bb       	out	0x1c, r24	; 28
     bee:	0a c0       	rjmp	.+20     	; 0xc04 <__vector_8+0x74>
        "in r24, %[io0]  \n"
        "inc r24         \n"
        "out %[io0], r24 \n"
        :: [io0] "I" (&L_COL), [vpc] "I" (&VPORTC_OUT) : "r24", "r25", "cc");
        } else {
        asm(
     bf0:	8c b3       	in	r24, 0x1c	; 28
     bf2:	83 30       	cpi	r24, 0x03	; 3
     bf4:	21 f4       	brne	.+8      	; 0xbfe <__vector_8+0x6e>
     bf6:	2a 9a       	sbi	0x05, 2	; 5
     bf8:	83 95       	inc	r24
     bfa:	8c bb       	out	0x1c, r24	; 28
     bfc:	03 c0       	rjmp	.+6      	; 0xc04 <__vector_8+0x74>
     bfe:	2e 9a       	sbi	0x05, 6	; 5
     c00:	88 27       	eor	r24, r24
     c02:	8c bb       	out	0x1c, r24	; 28
        "clr r24         \n"
        "out %[io0], r24 \n"
        :: [io0] "I" (&L_COL), [vpb] "I" (&VPORTB_OUT) : "r24", "cc");
    }
    
    if(timeout_I2C) --timeout_I2C;
     c04:	80 91 60 3a 	lds	r24, 0x3A60	; 0x803a60 <timeout_I2C>
     c08:	88 23       	and	r24, r24
     c0a:	29 f0       	breq	.+10     	; 0xc16 <__vector_8+0x86>
     c0c:	80 91 60 3a 	lds	r24, 0x3A60	; 0x803a60 <timeout_I2C>
     c10:	81 50       	subi	r24, 0x01	; 1
     c12:	80 93 60 3a 	sts	0x3A60, r24	; 0x803a60 <timeout_I2C>
    TCA0_SPLIT_INTFLAGS = 0xFF;
     c16:	8f ef       	ldi	r24, 0xFF	; 255
     c18:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <__TEXT_REGION_LENGTH__+0x700a0b>
}
     c1c:	ff 91       	pop	r31
     c1e:	ef 91       	pop	r30
     c20:	bf 91       	pop	r27
     c22:	af 91       	pop	r26
     c24:	9f 91       	pop	r25
     c26:	8f 91       	pop	r24
     c28:	0f 90       	pop	r0
     c2a:	0f be       	out	0x3f, r0	; 63
     c2c:	0f 90       	pop	r0
     c2e:	1f 90       	pop	r1
     c30:	18 95       	reti

00000c32 <__vector_13>:

// TCB0 is used for (slowly) sending serial characters. A 0x00 character code is needed to terminate sending or it will leak memory to serial. It's a feature, honest! 
ISR(TCB0_INT_vect){
     c32:	1f 92       	push	r1
     c34:	0f 92       	push	r0
     c36:	0f b6       	in	r0, 0x3f	; 63
     c38:	0f 92       	push	r0
     c3a:	11 24       	eor	r1, r1
     c3c:	8f 93       	push	r24
     c3e:	9f 93       	push	r25
     c40:	ef 93       	push	r30
     c42:	ff 93       	push	r31
    if (*serTxAddr) {
     c44:	e0 91 b9 3a 	lds	r30, 0x3AB9	; 0x803ab9 <serTxAddr>
     c48:	f0 91 ba 3a 	lds	r31, 0x3ABA	; 0x803aba <serTxAddr+0x1>
     c4c:	80 81       	ld	r24, Z
     c4e:	88 23       	and	r24, r24
     c50:	91 f0       	breq	.+36     	; 0xc76 <__vector_13+0x44>
        USART0_TXDATAL = *serTxAddr;
     c52:	80 81       	ld	r24, Z
     c54:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
        serTxAddr++;
     c58:	80 91 b9 3a 	lds	r24, 0x3AB9	; 0x803ab9 <serTxAddr>
     c5c:	90 91 ba 3a 	lds	r25, 0x3ABA	; 0x803aba <serTxAddr+0x1>
     c60:	01 96       	adiw	r24, 0x01	; 1
     c62:	80 93 b9 3a 	sts	0x3AB9, r24	; 0x803ab9 <serTxAddr>
     c66:	90 93 ba 3a 	sts	0x3ABA, r25	; 0x803aba <serTxAddr+0x1>
        USART0_CTRLA |= USART_DREIE_bm;
     c6a:	80 91 05 08 	lds	r24, 0x0805	; 0x800805 <__TEXT_REGION_LENGTH__+0x700805>
     c6e:	80 62       	ori	r24, 0x20	; 32
     c70:	80 93 05 08 	sts	0x0805, r24	; 0x800805 <__TEXT_REGION_LENGTH__+0x700805>
     c74:	05 c0       	rjmp	.+10     	; 0xc80 <__vector_13+0x4e>
    } else {
        serTxDone = 1;
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	80 93 09 38 	sts	0x3809, r24	; 0x803809 <serTxDone>
        TCB0_INTCTRL = 0x00;
     c7c:	10 92 45 0a 	sts	0x0A45, r1	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
    }
    TCB0_INTFLAGS = TCB_CAPT_bm;
     c80:	81 e0       	ldi	r24, 0x01	; 1
     c82:	80 93 46 0a 	sts	0x0A46, r24	; 0x800a46 <__TEXT_REGION_LENGTH__+0x700a46>
}
     c86:	ff 91       	pop	r31
     c88:	ef 91       	pop	r30
     c8a:	9f 91       	pop	r25
     c8c:	8f 91       	pop	r24
     c8e:	0f 90       	pop	r0
     c90:	0f be       	out	0x3f, r0	; 63
     c92:	0f 90       	pop	r0
     c94:	1f 90       	pop	r1
     c96:	18 95       	reti

00000c98 <__vector_14>:

// TCB1 is used for audio generation. Keeps playing "data" until 0 is reached. Audio sample data can contain 0x01 to 0xFF, centered around 0x80
ISR(TCB1_INT_vect){
     c98:	1f 92       	push	r1
     c9a:	0f 92       	push	r0
     c9c:	0f b6       	in	r0, 0x3f	; 63
     c9e:	0f 92       	push	r0
     ca0:	11 24       	eor	r1, r1
     ca2:	2f 93       	push	r18
     ca4:	3f 93       	push	r19
     ca6:	4f 93       	push	r20
     ca8:	8f 93       	push	r24
     caa:	9f 93       	push	r25
     cac:	ef 93       	push	r30
     cae:	ff 93       	push	r31
    int16_t volCtrl;
    if (*auSmpAddr == 0) auSmpAddr = auRepAddr;
     cb0:	e0 91 05 38 	lds	r30, 0x3805	; 0x803805 <auSmpAddr>
     cb4:	f0 91 06 38 	lds	r31, 0x3806	; 0x803806 <auSmpAddr+0x1>
     cb8:	80 81       	ld	r24, Z
     cba:	81 11       	cpse	r24, r1
     cbc:	08 c0       	rjmp	.+16     	; 0xcce <__vector_14+0x36>
     cbe:	80 91 03 38 	lds	r24, 0x3803	; 0x803803 <auRepAddr>
     cc2:	90 91 04 38 	lds	r25, 0x3804	; 0x803804 <auRepAddr+0x1>
     cc6:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <auSmpAddr>
     cca:	90 93 06 38 	sts	0x3806, r25	; 0x803806 <auSmpAddr+0x1>
    if (*auSmpAddr) {
     cce:	e0 91 05 38 	lds	r30, 0x3805	; 0x803805 <auSmpAddr>
     cd2:	f0 91 06 38 	lds	r31, 0x3806	; 0x803806 <auSmpAddr+0x1>
     cd6:	80 81       	ld	r24, Z
     cd8:	88 23       	and	r24, r24
     cda:	e1 f0       	breq	.+56     	; 0xd14 <__vector_14+0x7c>
        volCtrl = ((((int16_t)(*auSmpAddr) - 0x7f) * auVolume) >> 8) + 0x80;
     cdc:	20 81       	ld	r18, Z
     cde:	40 91 b6 3a 	lds	r20, 0x3AB6	; 0x803ab6 <auVolume>
        DAC0_DATA = (uint8_t)(volCtrl);
     ce2:	30 e0       	ldi	r19, 0x00	; 0
     ce4:	2f 57       	subi	r18, 0x7F	; 127
     ce6:	31 09       	sbc	r19, r1
     ce8:	42 9f       	mul	r20, r18
     cea:	c0 01       	movw	r24, r0
     cec:	43 9f       	mul	r20, r19
     cee:	90 0d       	add	r25, r0
     cf0:	11 24       	eor	r1, r1
     cf2:	89 2f       	mov	r24, r25
     cf4:	99 0f       	add	r25, r25
     cf6:	99 0b       	sbc	r25, r25
     cf8:	80 58       	subi	r24, 0x80	; 128
     cfa:	9f 4f       	sbci	r25, 0xFF	; 255
     cfc:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
        ++auSmpAddr;
     d00:	80 91 05 38 	lds	r24, 0x3805	; 0x803805 <auSmpAddr>
     d04:	90 91 06 38 	lds	r25, 0x3806	; 0x803806 <auSmpAddr+0x1>
     d08:	01 96       	adiw	r24, 0x01	; 1
     d0a:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <auSmpAddr>
     d0e:	90 93 06 38 	sts	0x3806, r25	; 0x803806 <auSmpAddr+0x1>
     d12:	03 c0       	rjmp	.+6      	; 0xd1a <__vector_14+0x82>
    } else {
        DAC0_DATA = 0x80;
     d14:	80 e8       	ldi	r24, 0x80	; 128
     d16:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
    }
    TCB1_INTFLAGS = TCB_CAPT_bm;
     d1a:	81 e0       	ldi	r24, 0x01	; 1
     d1c:	80 93 56 0a 	sts	0x0A56, r24	; 0x800a56 <__TEXT_REGION_LENGTH__+0x700a56>
}
     d20:	ff 91       	pop	r31
     d22:	ef 91       	pop	r30
     d24:	9f 91       	pop	r25
     d26:	8f 91       	pop	r24
     d28:	4f 91       	pop	r20
     d2a:	3f 91       	pop	r19
     d2c:	2f 91       	pop	r18
     d2e:	0f 90       	pop	r0
     d30:	0f be       	out	0x3f, r0	; 63
     d32:	0f 90       	pop	r0
     d34:	1f 90       	pop	r1
     d36:	18 95       	reti

00000d38 <__vector_27>:

// Reads up to RXLEN characters until LF is found, LF sets the serRxDone flag and writes 0 instead of LF.
ISR(USART0_RXC_vect){
     d38:	1f 92       	push	r1
     d3a:	0f 92       	push	r0
     d3c:	0f b6       	in	r0, 0x3f	; 63
     d3e:	0f 92       	push	r0
     d40:	11 24       	eor	r1, r1
     d42:	8f 93       	push	r24
     d44:	ef 93       	push	r30
     d46:	ff 93       	push	r31
    if (serRxDone == 0){
     d48:	80 91 44 38 	lds	r24, 0x3844	; 0x803844 <serRxDone>
     d4c:	81 11       	cpse	r24, r1
     d4e:	44 c0       	rjmp	.+136    	; 0xdd8 <__vector_27+0xa0>
        serRx[RXCNT] = USART0.RXDATAL;
     d50:	ed b3       	in	r30, 0x1d	; 29
     d52:	f0 e0       	ldi	r31, 0x00	; 0
     d54:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
     d58:	eb 58       	subi	r30, 0x8B	; 139
     d5a:	f5 4c       	sbci	r31, 0xC5	; 197
     d5c:	80 83       	st	Z, r24
        USART0_TXDATAL = serRx[RXCNT];
     d5e:	ed b3       	in	r30, 0x1d	; 29
     d60:	f0 e0       	ldi	r31, 0x00	; 0
     d62:	eb 58       	subi	r30, 0x8B	; 139
     d64:	f5 4c       	sbci	r31, 0xC5	; 197
     d66:	80 81       	ld	r24, Z
     d68:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
        if ((serRx[RXCNT] == 0x0A)||(serRx[RXCNT] == 0x0D)){
     d6c:	ed b3       	in	r30, 0x1d	; 29
     d6e:	f0 e0       	ldi	r31, 0x00	; 0
     d70:	eb 58       	subi	r30, 0x8B	; 139
     d72:	f5 4c       	sbci	r31, 0xC5	; 197
     d74:	80 81       	ld	r24, Z
     d76:	8a 30       	cpi	r24, 0x0A	; 10
     d78:	39 f0       	breq	.+14     	; 0xd88 <__vector_27+0x50>
     d7a:	ed b3       	in	r30, 0x1d	; 29
     d7c:	f0 e0       	ldi	r31, 0x00	; 0
     d7e:	eb 58       	subi	r30, 0x8B	; 139
     d80:	f5 4c       	sbci	r31, 0xC5	; 197
     d82:	80 81       	ld	r24, Z
     d84:	8d 30       	cpi	r24, 0x0D	; 13
     d86:	49 f4       	brne	.+18     	; 0xd9a <__vector_27+0x62>
            serRx[RXCNT] = 0;
     d88:	ed b3       	in	r30, 0x1d	; 29
     d8a:	f0 e0       	ldi	r31, 0x00	; 0
     d8c:	eb 58       	subi	r30, 0x8B	; 139
     d8e:	f5 4c       	sbci	r31, 0xC5	; 197
     d90:	10 82       	st	Z, r1
            serRxDone = 1;
     d92:	81 e0       	ldi	r24, 0x01	; 1
     d94:	80 93 44 38 	sts	0x3844, r24	; 0x803844 <serRxDone>
     d98:	1f c0       	rjmp	.+62     	; 0xdd8 <__vector_27+0xa0>
        } else if (((serRx[RXCNT] == 0x08)||(serRx[RXCNT] == 0x7F))&&(RXCNT > 0)) {
     d9a:	ed b3       	in	r30, 0x1d	; 29
     d9c:	f0 e0       	ldi	r31, 0x00	; 0
     d9e:	eb 58       	subi	r30, 0x8B	; 139
     da0:	f5 4c       	sbci	r31, 0xC5	; 197
     da2:	80 81       	ld	r24, Z
     da4:	88 30       	cpi	r24, 0x08	; 8
     da6:	39 f0       	breq	.+14     	; 0xdb6 <__vector_27+0x7e>
     da8:	ed b3       	in	r30, 0x1d	; 29
     daa:	f0 e0       	ldi	r31, 0x00	; 0
     dac:	eb 58       	subi	r30, 0x8B	; 139
     dae:	f5 4c       	sbci	r31, 0xC5	; 197
     db0:	80 81       	ld	r24, Z
     db2:	8f 37       	cpi	r24, 0x7F	; 127
     db4:	59 f4       	brne	.+22     	; 0xdcc <__vector_27+0x94>
     db6:	8d b3       	in	r24, 0x1d	; 29
     db8:	88 23       	and	r24, r24
     dba:	41 f0       	breq	.+16     	; 0xdcc <__vector_27+0x94>
            serRx[RXCNT] = 0;
     dbc:	ed b3       	in	r30, 0x1d	; 29
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	eb 58       	subi	r30, 0x8B	; 139
     dc2:	f5 4c       	sbci	r31, 0xC5	; 197
     dc4:	10 82       	st	Z, r1
            --RXCNT;
     dc6:	8d b3       	in	r24, 0x1d	; 29
     dc8:	81 50       	subi	r24, 0x01	; 1
     dca:	05 c0       	rjmp	.+10     	; 0xdd6 <__vector_27+0x9e>
        } else if (RXCNT < (RXLEN-1)) ++RXCNT;
     dcc:	8d b3       	in	r24, 0x1d	; 29
     dce:	80 34       	cpi	r24, 0x40	; 64
     dd0:	18 f4       	brcc	.+6      	; 0xdd8 <__vector_27+0xa0>
     dd2:	8d b3       	in	r24, 0x1d	; 29
     dd4:	8f 5f       	subi	r24, 0xFF	; 255
     dd6:	8d bb       	out	0x1d, r24	; 29
    }
    USART0_STATUS = USART_RXCIF_bm;
     dd8:	80 e8       	ldi	r24, 0x80	; 128
     dda:	80 93 04 08 	sts	0x0804, r24	; 0x800804 <__TEXT_REGION_LENGTH__+0x700804>
};
     dde:	ff 91       	pop	r31
     de0:	ef 91       	pop	r30
     de2:	8f 91       	pop	r24
     de4:	0f 90       	pop	r0
     de6:	0f be       	out	0x3f, r0	; 63
     de8:	0f 90       	pop	r0
     dea:	1f 90       	pop	r1
     dec:	18 95       	reti

00000dee <__vector_28>:

// Trigger new data write and turn off DRE interrupt.
ISR(USART0_DRE_vect){
     dee:	1f 92       	push	r1
     df0:	0f 92       	push	r0
     df2:	0f b6       	in	r0, 0x3f	; 63
     df4:	0f 92       	push	r0
     df6:	11 24       	eor	r1, r1
     df8:	8f 93       	push	r24
     dfa:	ef 93       	push	r30
     dfc:	ff 93       	push	r31
    TCB0_CNT = 0;
     dfe:	10 92 4a 0a 	sts	0x0A4A, r1	; 0x800a4a <__TEXT_REGION_LENGTH__+0x700a4a>
     e02:	10 92 4b 0a 	sts	0x0A4B, r1	; 0x800a4b <__TEXT_REGION_LENGTH__+0x700a4b>
    TCB0_INTCTRL = 0x01;
     e06:	81 e0       	ldi	r24, 0x01	; 1
     e08:	80 93 45 0a 	sts	0x0A45, r24	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
    USART0_CTRLA &= ~(USART_DREIE_bm);
     e0c:	e5 e0       	ldi	r30, 0x05	; 5
     e0e:	f8 e0       	ldi	r31, 0x08	; 8
     e10:	80 81       	ld	r24, Z
     e12:	8f 7d       	andi	r24, 0xDF	; 223
     e14:	80 83       	st	Z, r24
};
     e16:	ff 91       	pop	r31
     e18:	ef 91       	pop	r30
     e1a:	8f 91       	pop	r24
     e1c:	0f 90       	pop	r0
     e1e:	0f be       	out	0x3f, r0	; 63
     e20:	0f 90       	pop	r0
     e22:	1f 90       	pop	r1
     e24:	18 95       	reti

00000e26 <__vector_20>:

// ADC used for audio input and temperature sensor.
ISR(ADC0_RESRDY_vect){
     e26:	1f 92       	push	r1
     e28:	0f 92       	push	r0
     e2a:	0f b6       	in	r0, 0x3f	; 63
     e2c:	0f 92       	push	r0
     e2e:	11 24       	eor	r1, r1
     e30:	8f 93       	push	r24
     e32:	9f 93       	push	r25
    //If just switched reference, discard first few samples
    if (adc0Chg == 0){
     e34:	80 91 38 38 	lds	r24, 0x3838	; 0x803838 <adc0Chg>
     e38:	81 11       	cpse	r24, r1
     e3a:	12 c0       	rjmp	.+36     	; 0xe60 <__vector_20+0x3a>
        if (ADC0_MUXPOS == 0x1E) adcTemp = ADC0_RES; else auIn=ADC0_RESL;
     e3c:	80 91 06 06 	lds	r24, 0x0606	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
     e40:	8e 31       	cpi	r24, 0x1E	; 30
     e42:	49 f4       	brne	.+18     	; 0xe56 <__vector_20+0x30>
     e44:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x700610>
     e48:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x700611>
     e4c:	80 93 ed 3a 	sts	0x3AED, r24	; 0x803aed <adcTemp>
     e50:	90 93 ee 3a 	sts	0x3AEE, r25	; 0x803aee <adcTemp+0x1>
     e54:	0a c0       	rjmp	.+20     	; 0xe6a <__vector_20+0x44>
     e56:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x700610>
     e5a:	80 93 c2 3a 	sts	0x3AC2, r24	; 0x803ac2 <auIn>
     e5e:	05 c0       	rjmp	.+10     	; 0xe6a <__vector_20+0x44>
    } else --adc0Chg;
     e60:	80 91 38 38 	lds	r24, 0x3838	; 0x803838 <adc0Chg>
     e64:	81 50       	subi	r24, 0x01	; 1
     e66:	80 93 38 38 	sts	0x3838, r24	; 0x803838 <adc0Chg>
    ADC0_INTFLAGS = ADC_RESRDY_bm;
     e6a:	81 e0       	ldi	r24, 0x01	; 1
     e6c:	80 93 0b 06 	sts	0x060B, r24	; 0x80060b <__TEXT_REGION_LENGTH__+0x70060b>
}
     e70:	9f 91       	pop	r25
     e72:	8f 91       	pop	r24
     e74:	0f 90       	pop	r0
     e76:	0f be       	out	0x3f, r0	; 63
     e78:	0f 90       	pop	r0
     e7a:	1f 90       	pop	r1
     e7c:	18 95       	reti

00000e7e <__vector_22>:

// Reads out sensors at 8Hz and buttons at 42Hz (timed by PIT), power for the sensors is on 1/8th of the time to save power.
ISR(ADC1_RESRDY_vect){
     e7e:	1f 92       	push	r1
     e80:	0f 92       	push	r0
     e82:	0f b6       	in	r0, 0x3f	; 63
     e84:	0f 92       	push	r0
     e86:	11 24       	eor	r1, r1
     e88:	8f 93       	push	r24
     e8a:	9f 93       	push	r25
    if (ADC1_MUXPOS == 0) {
     e8c:	80 91 46 06 	lds	r24, 0x0646	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     e90:	81 11       	cpse	r24, r1
     e92:	0a c0       	rjmp	.+20     	; 0xea8 <__vector_22+0x2a>
        adcPhot = ADC1_RES;
     e94:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <__TEXT_REGION_LENGTH__+0x700650>
     e98:	90 91 51 06 	lds	r25, 0x0651	; 0x800651 <__TEXT_REGION_LENGTH__+0x700651>
     e9c:	80 93 bd 3a 	sts	0x3ABD, r24	; 0x803abd <adcPhot>
     ea0:	90 93 be 3a 	sts	0x3ABE, r25	; 0x803abe <adcPhot+0x1>
        ADC1_MUXPOS = 0x01;             //Select Hall sensor
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	10 c0       	rjmp	.+32     	; 0xec8 <__vector_22+0x4a>
    } else if (ADC1_MUXPOS == 1){
     ea8:	80 91 46 06 	lds	r24, 0x0646	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     eac:	81 30       	cpi	r24, 0x01	; 1
     eae:	79 f4       	brne	.+30     	; 0xece <__vector_22+0x50>
        PORTA_OUTCLR = 0b00001000;      //Turn off sensor power
     eb0:	88 e0       	ldi	r24, 0x08	; 8
     eb2:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x700406>
        adcHall = ADC1_RES;
     eb6:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <__TEXT_REGION_LENGTH__+0x700650>
     eba:	90 91 51 06 	lds	r25, 0x0651	; 0x800651 <__TEXT_REGION_LENGTH__+0x700651>
     ebe:	80 93 bb 3a 	sts	0x3ABB, r24	; 0x803abb <adcHall>
     ec2:	90 93 bc 3a 	sts	0x3ABC, r25	; 0x803abc <adcHall+0x1>
        ADC1_MUXPOS = 0x04;             //select buttons
     ec6:	84 e0       	ldi	r24, 0x04	; 4
     ec8:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     ecc:	10 c0       	rjmp	.+32     	; 0xeee <__vector_22+0x70>
    } else {
        adcBtns = ADC1_RES;
     ece:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <__TEXT_REGION_LENGTH__+0x700650>
     ed2:	90 91 51 06 	lds	r25, 0x0651	; 0x800651 <__TEXT_REGION_LENGTH__+0x700651>
     ed6:	80 93 b7 3a 	sts	0x3AB7, r24	; 0x803ab7 <adcBtns>
     eda:	90 93 b8 3a 	sts	0x3AB8, r25	; 0x803ab8 <adcBtns+0x1>
        if (A1CNT == 15){
     ede:	8f b3       	in	r24, 0x1f	; 31
     ee0:	8f 30       	cpi	r24, 0x0F	; 15
     ee2:	29 f4       	brne	.+10     	; 0xeee <__vector_22+0x70>
            ADC1_MUXPOS = 0x00;         //Select photo transistor
     ee4:	10 92 46 06 	sts	0x0646, r1	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
            PORTA_OUTSET = 0b00001000;  //Turn on sensor power
     ee8:	88 e0       	ldi	r24, 0x08	; 8
     eea:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
        }
    }

    A1CNT=(A1CNT+1)%16;        
     eee:	8f b3       	in	r24, 0x1f	; 31
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	01 96       	adiw	r24, 0x01	; 1
     ef4:	8f 70       	andi	r24, 0x0F	; 15
     ef6:	99 27       	eor	r25, r25
     ef8:	8f bb       	out	0x1f, r24	; 31
    ADC1_INTFLAGS = ADC_RESRDY_bm;
     efa:	81 e0       	ldi	r24, 0x01	; 1
     efc:	80 93 4b 06 	sts	0x064B, r24	; 0x80064b <__TEXT_REGION_LENGTH__+0x70064b>
}
     f00:	9f 91       	pop	r25
     f02:	8f 91       	pop	r24
     f04:	0f 90       	pop	r0
     f06:	0f be       	out	0x3f, r0	; 63
     f08:	0f 90       	pop	r0
     f0a:	1f 90       	pop	r1
     f0c:	18 95       	reti

00000f0e <__vector_6>:

// RTC compare interrupt, triggers at 512/BTN_TMR rate, also RTC overflow interrupt, triggers once a minute
ISR(RTC_CNT_vect) {
     f0e:	1f 92       	push	r1
     f10:	0f 92       	push	r0
     f12:	0f b6       	in	r0, 0x3f	; 63
     f14:	0f 92       	push	r0
     f16:	11 24       	eor	r1, r1
     f18:	2f 93       	push	r18
     f1a:	3f 93       	push	r19
     f1c:	8f 93       	push	r24
     f1e:	9f 93       	push	r25
    if (RTC_INTFLAGS & RTC_CMP_bm){
     f20:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     f24:	81 ff       	sbrs	r24, 1
     f26:	39 c0       	rjmp	.+114    	; 0xf9a <__vector_6+0x8c>
        if (buttonMark<0xff) buttonMark++;   // For button timing purposes
     f28:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <buttonMark>
     f2c:	8f 3f       	cpi	r24, 0xFF	; 255
     f2e:	29 f0       	breq	.+10     	; 0xf3a <__vector_6+0x2c>
     f30:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <buttonMark>
     f34:	8f 5f       	subi	r24, 0xFF	; 255
     f36:	80 93 42 38 	sts	0x3842, r24	; 0x803842 <buttonMark>
        //tmp16bit = (RTC_CNT + BTN_TMR)%RTC_PER;
        tmp16bit = (RTC_CNT + BTN_TMR);
     f3a:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     f3e:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     f42:	82 96       	adiw	r24, 0x22	; 34
     f44:	80 93 ef 3a 	sts	0x3AEF, r24	; 0x803aef <tmp16bit>
     f48:	90 93 f0 3a 	sts	0x3AF0, r25	; 0x803af0 <tmp16bit+0x1>
        if (tmp16bit > RTC_PER) tmp16bit -= RTC_PER;
     f4c:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     f50:	30 91 4b 01 	lds	r19, 0x014B	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
     f54:	80 91 ef 3a 	lds	r24, 0x3AEF	; 0x803aef <tmp16bit>
     f58:	90 91 f0 3a 	lds	r25, 0x3AF0	; 0x803af0 <tmp16bit+0x1>
     f5c:	28 17       	cp	r18, r24
     f5e:	39 07       	cpc	r19, r25
     f60:	70 f4       	brcc	.+28     	; 0xf7e <__vector_6+0x70>
     f62:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     f66:	30 91 4b 01 	lds	r19, 0x014B	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
     f6a:	80 91 ef 3a 	lds	r24, 0x3AEF	; 0x803aef <tmp16bit>
     f6e:	90 91 f0 3a 	lds	r25, 0x3AF0	; 0x803af0 <tmp16bit+0x1>
     f72:	82 1b       	sub	r24, r18
     f74:	93 0b       	sbc	r25, r19
     f76:	80 93 ef 3a 	sts	0x3AEF, r24	; 0x803aef <tmp16bit>
     f7a:	90 93 f0 3a 	sts	0x3AF0, r25	; 0x803af0 <tmp16bit+0x1>
        while(RTC_STATUS & RTC_CMPBUSY_bm);
     f7e:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     f82:	83 fd       	sbrc	r24, 3
     f84:	fc cf       	rjmp	.-8      	; 0xf7e <__vector_6+0x70>
        RTC_CMP = tmp16bit;                 // Button timing: next interrupt set
     f86:	80 91 ef 3a 	lds	r24, 0x3AEF	; 0x803aef <tmp16bit>
     f8a:	90 91 f0 3a 	lds	r25, 0x3AF0	; 0x803af0 <tmp16bit+0x1>
     f8e:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     f92:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
        RTC_INTFLAGS = RTC_CMP_bm;		    // clear interrupt flag
     f96:	82 e0       	ldi	r24, 0x02	; 2
     f98:	06 c0       	rjmp	.+12     	; 0xfa6 <__vector_6+0x98>
    } else {
        minuteMark++;                       // For very slow timing purposes, overflows to 0
     f9a:	80 91 43 38 	lds	r24, 0x3843	; 0x803843 <minuteMark>
     f9e:	8f 5f       	subi	r24, 0xFF	; 255
     fa0:	80 93 43 38 	sts	0x3843, r24	; 0x803843 <minuteMark>
        RTC_INTFLAGS = RTC_OVF_bm;		    // clear interrupt flag
     fa4:	81 e0       	ldi	r24, 0x01	; 1
     fa6:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
    }
}
     faa:	9f 91       	pop	r25
     fac:	8f 91       	pop	r24
     fae:	3f 91       	pop	r19
     fb0:	2f 91       	pop	r18
     fb2:	0f 90       	pop	r0
     fb4:	0f be       	out	0x3f, r0	; 63
     fb6:	0f 90       	pop	r0
     fb8:	1f 90       	pop	r1
     fba:	18 95       	reti

00000fbc <__vector_7>:

// PIT interrupt (timing of ADC1: sensor values)
ISR(RTC_PIT_vect) {						// PIT interrupt handling code
     fbc:	1f 92       	push	r1
     fbe:	0f 92       	push	r0
     fc0:	0f b6       	in	r0, 0x3f	; 63
     fc2:	0f 92       	push	r0
     fc4:	11 24       	eor	r1, r1
     fc6:	8f 93       	push	r24
    ADC1_COMMAND = 0x01;
     fc8:	81 e0       	ldi	r24, 0x01	; 1
     fca:	80 93 48 06 	sts	0x0648, r24	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
    RTC_PITINTFLAGS = RTC_PI_bm;		// clear interrupt flag
     fce:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <__TEXT_REGION_LENGTH__+0x700153>
}
     fd2:	8f 91       	pop	r24
     fd4:	0f 90       	pop	r0
     fd6:	0f be       	out	0x3f, r0	; 63
     fd8:	0f 90       	pop	r0
     fda:	1f 90       	pop	r1
     fdc:	18 95       	reti

00000fde <EERead>:

// Read bytes from EEPROM
void EERead(uint8_t eeAddr, uint8_t *eeValues, uint8_t size)
{
    while(NVMCTRL_STATUS & NVMCTRL_EEBUSY_bm);              // Wait until any write operation has finished
     fde:	90 91 02 10 	lds	r25, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x701002>
     fe2:	91 fd       	sbrc	r25, 1
     fe4:	fc cf       	rjmp	.-8      	; 0xfde <EERead>
     fe6:	fb 01       	movw	r30, r22
     fe8:	48 0f       	add	r20, r24

    while(size){
     fea:	84 17       	cp	r24, r20
     fec:	39 f0       	breq	.+14     	; 0xffc <EERead+0x1e>
        *eeValues++ = *(uint8_t *)(EEPROM_START+eeAddr++);  // Read data from buffer
     fee:	a8 2f       	mov	r26, r24
     ff0:	b0 e0       	ldi	r27, 0x00	; 0
     ff2:	bc 5e       	subi	r27, 0xEC	; 236
     ff4:	9c 91       	ld	r25, X
     ff6:	91 93       	st	Z+, r25
     ff8:	8f 5f       	subi	r24, 0xFF	; 255
     ffa:	f7 cf       	rjmp	.-18     	; 0xfea <EERead+0xc>
        --size;
    }
}
     ffc:	08 95       	ret

00000ffe <EEWrite>:
{
    uint8_t lastByteOfPage;
    while(size){
        lastByteOfPage = 0;
        while(NVMCTRL_STATUS & NVMCTRL_EEBUSY_bm);              // Wait until any write operation has finished
        CCP = CCP_SPM_gc;                                       // Gain access to NVMCTRL_CTRLA
     ffe:	9d e9       	ldi	r25, 0x9D	; 157
        NVMCTRL_CTRLA = NVMCTRL_CMD_PAGEBUFCLR_gc;              // Clear page buffer
    1000:	24 e0       	ldi	r18, 0x04	; 4
            if ((eeAddr % EEPROM_PAGE_SIZE) == (EEPROM_PAGE_SIZE-1)) lastByteOfPage = 1;
            *(uint8_t *)(EEPROM_START+eeAddr++) = *eeValues++;  // Write data to buffer
            --size;
        }
        CCP = CCP_SPM_gc;
        NVMCTRL_CTRLA = NVMCTRL_CMD_PAGEERASEWRITE_gc;          // Erase old data and write new data to EEPROM
    1002:	33 e0       	ldi	r19, 0x03	; 3

// Write bytes to the EEPROM, if address exceeds EEPROM space data wraps around
uint8_t EEWrite(uint8_t eeAddr, uint8_t *eeValues, uint8_t size)
{
    uint8_t lastByteOfPage;
    while(size){
    1004:	44 23       	and	r20, r20
    1006:	09 f1       	breq	.+66     	; 0x104a <EEWrite+0x4c>
        lastByteOfPage = 0;
        while(NVMCTRL_STATUS & NVMCTRL_EEBUSY_bm);              // Wait until any write operation has finished
    1008:	50 91 02 10 	lds	r21, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x701002>
    100c:	51 fd       	sbrc	r21, 1
    100e:	fc cf       	rjmp	.-8      	; 0x1008 <EEWrite+0xa>
        CCP = CCP_SPM_gc;                                       // Gain access to NVMCTRL_CTRLA
    1010:	94 bf       	out	0x34, r25	; 52
        NVMCTRL_CTRLA = NVMCTRL_CMD_PAGEBUFCLR_gc;              // Clear page buffer
    1012:	20 93 00 10 	sts	0x1000, r18	; 0x801000 <__TEXT_REGION_LENGTH__+0x701000>
    1016:	e8 2f       	mov	r30, r24
        while((size) && (lastByteOfPage == 0)){
            if ((eeAddr % EEPROM_PAGE_SIZE) == (EEPROM_PAGE_SIZE-1)) lastByteOfPage = 1;
    1018:	58 2f       	mov	r21, r24
    101a:	5f 71       	andi	r21, 0x1F	; 31
            *(uint8_t *)(EEPROM_START+eeAddr++) = *eeValues++;  // Write data to buffer
    101c:	8f 5f       	subi	r24, 0xFF	; 255
    101e:	6f 5f       	subi	r22, 0xFF	; 255
    1020:	7f 4f       	sbci	r23, 0xFF	; 255
    1022:	db 01       	movw	r26, r22
    1024:	11 97       	sbiw	r26, 0x01	; 1
    1026:	ac 91       	ld	r26, X
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	fc 5e       	subi	r31, 0xEC	; 236
    102c:	a0 83       	st	Z, r26
            --size;
    102e:	41 50       	subi	r20, 0x01	; 1
    while(size){
        lastByteOfPage = 0;
        while(NVMCTRL_STATUS & NVMCTRL_EEBUSY_bm);              // Wait until any write operation has finished
        CCP = CCP_SPM_gc;                                       // Gain access to NVMCTRL_CTRLA
        NVMCTRL_CTRLA = NVMCTRL_CMD_PAGEBUFCLR_gc;              // Clear page buffer
        while((size) && (lastByteOfPage == 0)){
    1030:	19 f0       	breq	.+6      	; 0x1038 <EEWrite+0x3a>
            if ((eeAddr % EEPROM_PAGE_SIZE) == (EEPROM_PAGE_SIZE-1)) lastByteOfPage = 1;
            *(uint8_t *)(EEPROM_START+eeAddr++) = *eeValues++;  // Write data to buffer
    1032:	e8 2f       	mov	r30, r24
    while(size){
        lastByteOfPage = 0;
        while(NVMCTRL_STATUS & NVMCTRL_EEBUSY_bm);              // Wait until any write operation has finished
        CCP = CCP_SPM_gc;                                       // Gain access to NVMCTRL_CTRLA
        NVMCTRL_CTRLA = NVMCTRL_CMD_PAGEBUFCLR_gc;              // Clear page buffer
        while((size) && (lastByteOfPage == 0)){
    1034:	5f 31       	cpi	r21, 0x1F	; 31
    1036:	81 f7       	brne	.-32     	; 0x1018 <EEWrite+0x1a>
            if ((eeAddr % EEPROM_PAGE_SIZE) == (EEPROM_PAGE_SIZE-1)) lastByteOfPage = 1;
            *(uint8_t *)(EEPROM_START+eeAddr++) = *eeValues++;  // Write data to buffer
            --size;
        }
        CCP = CCP_SPM_gc;
    1038:	94 bf       	out	0x34, r25	; 52
        NVMCTRL_CTRLA = NVMCTRL_CMD_PAGEERASEWRITE_gc;          // Erase old data and write new data to EEPROM
    103a:	30 93 00 10 	sts	0x1000, r19	; 0x801000 <__TEXT_REGION_LENGTH__+0x701000>
        if (NVMCTRL_STATUS & NVMCTRL_WRERROR_bm) return 1;
    103e:	50 91 02 10 	lds	r21, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x701002>
    1042:	52 ff       	sbrs	r21, 2
    1044:	df cf       	rjmp	.-66     	; 0x1004 <EEWrite+0x6>
    1046:	81 e0       	ldi	r24, 0x01	; 1
    }
    return 0;
}
    1048:	08 95       	ret
        }
        CCP = CCP_SPM_gc;
        NVMCTRL_CTRLA = NVMCTRL_CMD_PAGEERASEWRITE_gc;          // Erase old data and write new data to EEPROM
        if (NVMCTRL_STATUS & NVMCTRL_WRERROR_bm) return 1;
    }
    return 0;
    104a:	80 e0       	ldi	r24, 0x00	; 0
    104c:	08 95       	ret

0000104e <DecryptData>:
}

//Decrypts data read from I2C EEPROM, max 255 bytes at a time
void DecryptData(uint16_t offset, uint8_t length, uint8_t type, uint8_t *data){
    104e:	f9 01       	movw	r30, r18
    //offset += L_BOILER;
    while(length){
        *data ^= xor_key[type][(uint8_t)(offset%KEY_LENGTH)];
    1050:	9c 01       	movw	r18, r24
    1052:	2e 1b       	sub	r18, r30
    1054:	3f 0b       	sbc	r19, r31
    1056:	88 e0       	ldi	r24, 0x08	; 8
    1058:	48 9f       	mul	r20, r24
    105a:	a0 01       	movw	r20, r0
    105c:	11 24       	eor	r1, r1
    105e:	4c 57       	subi	r20, 0x7C	; 124
    1060:	50 44       	sbci	r21, 0x40	; 64
}

//Decrypts data read from I2C EEPROM, max 255 bytes at a time
void DecryptData(uint16_t offset, uint8_t length, uint8_t type, uint8_t *data){
    //offset += L_BOILER;
    while(length){
    1062:	66 23       	and	r22, r22
    1064:	69 f0       	breq	.+26     	; 0x1080 <DecryptData+0x32>
        *data ^= xor_key[type][(uint8_t)(offset%KEY_LENGTH)];
    1066:	df 01       	movw	r26, r30
    1068:	a2 0f       	add	r26, r18
    106a:	b3 1f       	adc	r27, r19
    106c:	a7 70       	andi	r26, 0x07	; 7
    106e:	bb 27       	eor	r27, r27
    1070:	a4 0f       	add	r26, r20
    1072:	b5 1f       	adc	r27, r21
    1074:	80 81       	ld	r24, Z
    1076:	9c 91       	ld	r25, X
    1078:	98 27       	eor	r25, r24
    107a:	91 93       	st	Z+, r25
        ++data;
        ++offset;
        --length;
    107c:	61 50       	subi	r22, 0x01	; 1
    107e:	f1 cf       	rjmp	.-30     	; 0x1062 <DecryptData+0x14>
    }
}
    1080:	08 95       	ret

00001082 <ExtEERead>:

//Game data: Read a number of bytes and decrypt
uint8_t ExtEERead(uint16_t offset, uint8_t length, uint8_t type, uint8_t *data){
    1082:	af 92       	push	r10
    1084:	bf 92       	push	r11
    1086:	cf 92       	push	r12
    1088:	df 92       	push	r13
    108a:	ef 92       	push	r14
    108c:	ff 92       	push	r15
    108e:	0f 93       	push	r16
    1090:	1f 93       	push	r17
    1092:	cf 93       	push	r28
    1094:	df 93       	push	r29
    1096:	00 d0       	rcall	.+0      	; 0x1098 <ExtEERead+0x16>
    1098:	cd b7       	in	r28, 0x3d	; 61
    109a:	de b7       	in	r29, 0x3e	; 62
    109c:	d6 2e       	mov	r13, r22
    109e:	c4 2e       	mov	r12, r20
    10a0:	59 01       	movw	r10, r18
    offset &=EXT_EE_MAX;
    10a2:	7c 01       	movw	r14, r24
    10a4:	e8 94       	clt
    10a6:	f7 f8       	bld	r15, 7
    uint8_t reg[2] = {(uint8_t)(offset>>8), (uint8_t)(offset&0xff)};
    10a8:	f9 82       	std	Y+1, r15	; 0x01
    10aa:	ea 82       	std	Y+2, r14	; 0x02
    uint8_t error = (I2C_read_bytes(EE_I2C_ADDR, &reg[0], 2, data, length));
    10ac:	06 2f       	mov	r16, r22
    10ae:	42 e0       	ldi	r20, 0x02	; 2
    10b0:	be 01       	movw	r22, r28
    10b2:	6f 5f       	subi	r22, 0xFF	; 255
    10b4:	7f 4f       	sbci	r23, 0xFF	; 255
    10b6:	80 e5       	ldi	r24, 0x50	; 80
    10b8:	19 da       	rcall	.-3022   	; 0x4ec <I2C_read_bytes>
    10ba:	18 2f       	mov	r17, r24
    if (error) return error;
    10bc:	81 11       	cpse	r24, r1
    10be:	05 c0       	rjmp	.+10     	; 0x10ca <ExtEERead+0x48>
    DecryptData(offset, length, type, data);
    10c0:	95 01       	movw	r18, r10
    10c2:	4c 2d       	mov	r20, r12
    10c4:	6d 2d       	mov	r22, r13
    10c6:	c7 01       	movw	r24, r14
    10c8:	c2 df       	rcall	.-124    	; 0x104e <DecryptData>
    return 0;
}
    10ca:	81 2f       	mov	r24, r17
    10cc:	0f 90       	pop	r0
    10ce:	0f 90       	pop	r0
    10d0:	df 91       	pop	r29
    10d2:	cf 91       	pop	r28
    10d4:	1f 91       	pop	r17
    10d6:	0f 91       	pop	r16
    10d8:	ff 90       	pop	r15
    10da:	ef 90       	pop	r14
    10dc:	df 90       	pop	r13
    10de:	cf 90       	pop	r12
    10e0:	bf 90       	pop	r11
    10e2:	af 90       	pop	r10
    10e4:	08 95       	ret

000010e6 <SerSend>:

// Sends a set of characters to the serial port, stops only when character value 0 is reached.
uint8_t SerSend(unsigned char *addr){
    if (serTxDone){
    10e6:	20 91 09 38 	lds	r18, 0x3809	; 0x803809 <serTxDone>
    10ea:	22 23       	and	r18, r18
    10ec:	59 f0       	breq	.+22     	; 0x1104 <SerSend+0x1e>
        serTxAddr = addr;
    10ee:	80 93 b9 3a 	sts	0x3AB9, r24	; 0x803ab9 <serTxAddr>
    10f2:	90 93 ba 3a 	sts	0x3ABA, r25	; 0x803aba <serTxAddr+0x1>
        serTxDone = 0;
    10f6:	10 92 09 38 	sts	0x3809, r1	; 0x803809 <serTxDone>
        TCB0_INTCTRL = 0x01;
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	80 93 45 0a 	sts	0x0A45, r24	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
        return 0;
    1100:	80 e0       	ldi	r24, 0x00	; 0
    1102:	08 95       	ret
    } else return 1;    //Error: Still sending data
    1104:	81 e0       	ldi	r24, 0x01	; 1
};
    1106:	08 95       	ret

00001108 <SerSpeed>:

// Set serial character output speed, 255-0 (0.8 to 100ms delay between characters)
void SerSpeed(uint8_t serSpd){
    1108:	28 2f       	mov	r18, r24
    if (serSpd<1) serSpd = 1;
    110a:	81 11       	cpse	r24, r1
    110c:	01 c0       	rjmp	.+2      	; 0x1110 <SerSpeed+0x8>
    110e:	21 e0       	ldi	r18, 0x01	; 1
    TCB0_CCMP = ((uint16_t)(0xFF-serSpd)<<8) + 0xFF;
    1110:	8f ef       	ldi	r24, 0xFF	; 255
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	82 1b       	sub	r24, r18
    1116:	91 09       	sbc	r25, r1
    1118:	98 2f       	mov	r25, r24
    111a:	88 27       	eor	r24, r24
    111c:	81 50       	subi	r24, 0x01	; 1
    111e:	9f 4f       	sbci	r25, 0xFF	; 255
    1120:	80 93 4c 0a 	sts	0x0A4C, r24	; 0x800a4c <__TEXT_REGION_LENGTH__+0x700a4c>
    1124:	90 93 4d 0a 	sts	0x0A4D, r25	; 0x800a4d <__TEXT_REGION_LENGTH__+0x700a4d>
    1128:	08 95       	ret

0000112a <SelectTSens>:
};

// Select temperature sensor
void SelectTSens(){
     VREF_CTRLA   = 0x12;    //0x22 for audio in/out (2.5V), 0x12 for temperature in, audio out (1.1V/2.5V)
    112a:	82 e1       	ldi	r24, 0x12	; 18
    112c:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     ADC0_CTRLA   &= ~(ADC_RESSEL_bm);
    1130:	e0 e0       	ldi	r30, 0x00	; 0
    1132:	f6 e0       	ldi	r31, 0x06	; 6
    1134:	80 81       	ld	r24, Z
    1136:	8b 7f       	andi	r24, 0xFB	; 251
    1138:	80 83       	st	Z, r24
     ADC0_MUXPOS  = 0x1E;    //Audio in: AIN7 at (0x07), Temperature: Internal sensor at (0x1E)
    113a:	8e e1       	ldi	r24, 0x1E	; 30
    113c:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
     adc0Chg = 3;
    1140:	83 e0       	ldi	r24, 0x03	; 3
    1142:	80 93 38 38 	sts	0x3838, r24	; 0x803838 <adc0Chg>
    1146:	08 95       	ret

00001148 <SelectAuIn>:
};

// Select "audio" input (0-2.5V)
void SelectAuIn(){
     VREF_CTRLA   = 0x22;    //0x22 for audio in/out (2.5V), 0x12 for temperature in, audio out (1.1V/2.5V)
    1148:	82 e2       	ldi	r24, 0x22	; 34
    114a:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     ADC0_CTRLA   |= ADC_RESSEL_bm;
    114e:	e0 e0       	ldi	r30, 0x00	; 0
    1150:	f6 e0       	ldi	r31, 0x06	; 6
    1152:	80 81       	ld	r24, Z
    1154:	84 60       	ori	r24, 0x04	; 4
    1156:	80 83       	st	Z, r24
     ADC0_MUXPOS  = 0x07;    //Audio in: AIN7 at (0x07), Temperature: Internal sensor at (0x1E)
    1158:	87 e0       	ldi	r24, 0x07	; 7
    115a:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
     adc0Chg = 3;
    115e:	83 e0       	ldi	r24, 0x03	; 3
    1160:	80 93 38 38 	sts	0x3838, r24	; 0x803838 <adc0Chg>
    1164:	08 95       	ret

00001166 <CheckButtons>:
};

// Returns button combination (4LSB) and number of consecutive times this combination is detected. First read should always be ignored! 
uint8_t CheckButtons(){
    static uint8_t previousValue = 0xFF;
    uint8_t bADC = (uint8_t)(adcBtns>>4);
    1166:	80 91 b7 3a 	lds	r24, 0x3AB7	; 0x803ab7 <adcBtns>
    116a:	90 91 b8 3a 	lds	r25, 0x3AB8	; 0x803ab8 <adcBtns+0x1>
    uint8_t button = 0xFF;     //FF = released or error

        switch(bADC){
    116e:	24 e0       	ldi	r18, 0x04	; 4
    1170:	96 95       	lsr	r25
    1172:	87 95       	ror	r24
    1174:	2a 95       	dec	r18
    1176:	e1 f7       	brne	.-8      	; 0x1170 <CheckButtons+0xa>
    1178:	99 27       	eor	r25, r25
    117a:	80 36       	cpi	r24, 0x60	; 96
    117c:	91 05       	cpc	r25, r1
    117e:	40 f4       	brcc	.+16     	; 0x1190 <CheckButtons+0x2a>
    1180:	8f 34       	cpi	r24, 0x4F	; 79
    1182:	91 05       	cpc	r25, r1
    1184:	88 f4       	brcc	.+34     	; 0x11a8 <CheckButtons+0x42>
    1186:	c0 97       	sbiw	r24, 0x30	; 48
    1188:	09 97       	sbiw	r24, 0x09	; 9
    118a:	90 f4       	brcc	.+36     	; 0x11b0 <CheckButtons+0x4a>

            case 48 ... 56:          //52: Bottom left (+/-4)
            button = 2;
    118c:	92 e0       	ldi	r25, 0x02	; 2
    118e:	11 c0       	rjmp	.+34     	; 0x11b2 <CheckButtons+0x4c>
uint8_t CheckButtons(){
    static uint8_t previousValue = 0xFF;
    uint8_t bADC = (uint8_t)(adcBtns>>4);
    uint8_t button = 0xFF;     //FF = released or error

        switch(bADC){
    1190:	85 37       	cpi	r24, 0x75	; 117
    1192:	91 05       	cpc	r25, r1
    1194:	68 f0       	brcs	.+26     	; 0x11b0 <CheckButtons+0x4a>
    1196:	8e 38       	cpi	r24, 0x8E	; 142
    1198:	91 05       	cpc	r25, r1
    119a:	40 f0       	brcs	.+16     	; 0x11ac <CheckButtons+0x46>
    119c:	8e 59       	subi	r24, 0x9E	; 158
    119e:	91 09       	sbc	r25, r1
    11a0:	81 97       	sbiw	r24, 0x21	; 33
    11a2:	30 f4       	brcc	.+12     	; 0x11b0 <CheckButtons+0x4a>
            case 117 ... 141:        //129: Top right (+/- 12)
            button = 1;
            break;

            case 158 ... 190:        //174: Bottom right (+/- 16)
            button = 0;
    11a4:	90 e0       	ldi	r25, 0x00	; 0
            break;
    11a6:	05 c0       	rjmp	.+10     	; 0x11b2 <CheckButtons+0x4c>
            case 48 ... 56:          //52: Bottom left (+/-4)
            button = 2;
            break;

            case 79 ... 95:          //87: Top left (+/-8)
            button = 3;
    11a8:	93 e0       	ldi	r25, 0x03	; 3
            break;
    11aa:	03 c0       	rjmp	.+6      	; 0x11b2 <CheckButtons+0x4c>

            case 117 ... 141:        //129: Top right (+/- 12)
            button = 1;
    11ac:	91 e0       	ldi	r25, 0x01	; 1
            break;
    11ae:	01 c0       	rjmp	.+2      	; 0x11b2 <CheckButtons+0x4c>

// Returns button combination (4LSB) and number of consecutive times this combination is detected. First read should always be ignored! 
uint8_t CheckButtons(){
    static uint8_t previousValue = 0xFF;
    uint8_t bADC = (uint8_t)(adcBtns>>4);
    uint8_t button = 0xFF;     //FF = released or error
    11b0:	9f ef       	ldi	r25, 0xFF	; 255
            case 158 ... 190:        //174: Bottom right (+/- 16)
            button = 0;
            break;
        }

        if (((previousValue+1)== 0) || (button != previousValue)) {
    11b2:	80 91 24 38 	lds	r24, 0x3824	; 0x803824 <previousValue.3900>
    11b6:	98 17       	cp	r25, r24
    11b8:	19 f0       	breq	.+6      	; 0x11c0 <CheckButtons+0x5a>
            previousValue = button;
    11ba:	90 93 24 38 	sts	0x3824, r25	; 0x803824 <previousValue.3900>
            return 0xFF;
    11be:	8f ef       	ldi	r24, 0xFF	; 255
        } else return button;

}
    11c0:	08 95       	ret

000011c2 <lfsr>:

uint8_t lfsr(){
    static uint16_t state = 0xd401;
    state ^= (state << 13);
    11c2:	80 91 22 38 	lds	r24, 0x3822	; 0x803822 <state.3910>
    11c6:	90 91 23 38 	lds	r25, 0x3823	; 0x803823 <state.3910+0x1>
    11ca:	9c 01       	movw	r18, r24
    11cc:	32 2f       	mov	r19, r18
    11ce:	22 27       	eor	r18, r18
    11d0:	32 95       	swap	r19
    11d2:	33 0f       	add	r19, r19
    11d4:	30 7e       	andi	r19, 0xE0	; 224
    11d6:	82 27       	eor	r24, r18
    11d8:	93 27       	eor	r25, r19
    state ^= (state >> 9);
    11da:	9c 01       	movw	r18, r24
    11dc:	23 2f       	mov	r18, r19
    11de:	33 27       	eor	r19, r19
    11e0:	26 95       	lsr	r18
    11e2:	82 27       	eor	r24, r18
    11e4:	93 27       	eor	r25, r19
    state ^= (state << 7);
    11e6:	9c 01       	movw	r18, r24
    11e8:	36 95       	lsr	r19
    11ea:	32 2f       	mov	r19, r18
    11ec:	22 27       	eor	r18, r18
    11ee:	37 95       	ror	r19
    11f0:	27 95       	ror	r18
    11f2:	82 27       	eor	r24, r18
    11f4:	93 27       	eor	r25, r19
    11f6:	80 93 22 38 	sts	0x3822, r24	; 0x803822 <state.3910>
    11fa:	90 93 23 38 	sts	0x3823, r25	; 0x803823 <state.3910+0x1>
    return (state & 0xff);
}
    11fe:	08 95       	ret

00001200 <floatSpeed>:

void floatSpeed(uint8_t bits, uint16_t min, uint16_t max){
    1200:	df 92       	push	r13
    1202:	ef 92       	push	r14
    1204:	ff 92       	push	r15
    1206:	0f 93       	push	r16
    1208:	1f 93       	push	r17
    120a:	cf 93       	push	r28
    120c:	df 93       	push	r29
    120e:	7b 01       	movw	r14, r22
    1210:	8a 01       	movw	r16, r20
    uint16_t val = TCB1_CCMP;
    1212:	c0 91 5c 0a 	lds	r28, 0x0A5C	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    1216:	d0 91 5d 0a 	lds	r29, 0x0A5D	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
    bits = mask[(bits-1)&0x07];
    121a:	e8 2f       	mov	r30, r24
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	31 97       	sbiw	r30, 0x01	; 1
    1220:	e7 70       	andi	r30, 0x07	; 7
    1222:	ff 27       	eor	r31, r31
    1224:	eb 5d       	subi	r30, 0xDB	; 219
    1226:	f7 4c       	sbci	r31, 0xC7	; 199
    1228:	d0 80       	ld	r13, Z
    val += (lfsr()&bits);
    122a:	cb df       	rcall	.-106    	; 0x11c2 <lfsr>
    122c:	8d 21       	and	r24, r13
    122e:	c8 0f       	add	r28, r24
    1230:	d1 1d       	adc	r29, r1
    val -= (lfsr()&bits);
    1232:	c7 df       	rcall	.-114    	; 0x11c2 <lfsr>
    1234:	8d 21       	and	r24, r13
    1236:	c8 1b       	sub	r28, r24
    1238:	d1 09       	sbc	r29, r1
    123a:	0c 17       	cp	r16, r28
    123c:	1d 07       	cpc	r17, r29
    123e:	08 f4       	brcc	.+2      	; 0x1242 <floatSpeed+0x42>
    1240:	e8 01       	movw	r28, r16
    1242:	c7 01       	movw	r24, r14
    1244:	ec 16       	cp	r14, r28
    1246:	fd 06       	cpc	r15, r29
    1248:	08 f4       	brcc	.+2      	; 0x124c <floatSpeed+0x4c>
    124a:	ce 01       	movw	r24, r28
    124c:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    if (val > max) val = max;    
    if (val < min) val = min;  
    TCB1_CCMP = val;
    1250:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
    1254:	df 91       	pop	r29
}
    1256:	cf 91       	pop	r28
    1258:	1f 91       	pop	r17
    125a:	0f 91       	pop	r16
    125c:	ff 90       	pop	r15
    125e:	ef 90       	pop	r14
    1260:	df 90       	pop	r13
    1262:	08 95       	ret

00001264 <floatAround>:
    1264:	0f 93       	push	r16

uint8_t floatAround(uint8_t sample, uint8_t bits, uint8_t min, uint8_t max){
    1266:	1f 93       	push	r17
    1268:	cf 93       	push	r28
    126a:	df 93       	push	r29
    126c:	c8 2f       	mov	r28, r24
    126e:	d4 2f       	mov	r29, r20
    1270:	02 2f       	mov	r16, r18
    bits = mask[(bits-1)&0x07];
    1272:	e6 2f       	mov	r30, r22
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	31 97       	sbiw	r30, 0x01	; 1
    1278:	e7 70       	andi	r30, 0x07	; 7
    127a:	ff 27       	eor	r31, r31
    127c:	eb 5d       	subi	r30, 0xDB	; 219
    127e:	f7 4c       	sbci	r31, 0xC7	; 199
    1280:	10 81       	ld	r17, Z
    sample += lfsr()&bits;
    1282:	9f df       	rcall	.-194    	; 0x11c2 <lfsr>
    1284:	81 23       	and	r24, r17
    1286:	c8 0f       	add	r28, r24
    sample -= lfsr()&bits;
    1288:	9c df       	rcall	.-200    	; 0x11c2 <lfsr>
    128a:	81 23       	and	r24, r17
    128c:	c8 1b       	sub	r28, r24
    128e:	8c 2f       	mov	r24, r28
    1290:	00 23       	and	r16, r16
    if (max){
    1292:	41 f0       	breq	.+16     	; 0x12a4 <floatAround+0x40>
    1294:	9c 2f       	mov	r25, r28
    1296:	0c 17       	cp	r16, r28
    1298:	08 f4       	brcc	.+2      	; 0x129c <floatAround+0x38>
    129a:	90 2f       	mov	r25, r16
    129c:	8d 2f       	mov	r24, r29
    129e:	d9 17       	cp	r29, r25
    12a0:	08 f4       	brcc	.+2      	; 0x12a4 <floatAround+0x40>
    12a2:	89 2f       	mov	r24, r25
    12a4:	41 e0       	ldi	r20, 0x01	; 1
        if (sample > max) sample = max;
        if (sample < min) sample = min;
    }
    if (min & (sample < min)) sample = min;
    12a6:	50 e0       	ldi	r21, 0x00	; 0
    12a8:	8d 17       	cp	r24, r29
    12aa:	10 f0       	brcs	.+4      	; 0x12b0 <floatAround+0x4c>
    12ac:	40 e0       	ldi	r20, 0x00	; 0
    12ae:	50 e0       	ldi	r21, 0x00	; 0
    12b0:	2d 2f       	mov	r18, r29
    12b2:	30 e0       	ldi	r19, 0x00	; 0
    12b4:	24 23       	and	r18, r20
    12b6:	35 23       	and	r19, r21
    12b8:	23 2b       	or	r18, r19
    12ba:	09 f0       	breq	.+2      	; 0x12be <floatAround+0x5a>
    12bc:	8d 2f       	mov	r24, r29
    12be:	df 91       	pop	r29

    return sample;
}
    12c0:	cf 91       	pop	r28
    12c2:	1f 91       	pop	r17
    12c4:	0f 91       	pop	r16
    12c6:	08 95       	ret

000012c8 <SaveGameState>:
    12c8:	cf 92       	push	r12
    inventory[0] = (gameState[INVADDR]<<8|gameState[INVADDR+1]);
    inventory[1] = (gameState[INVADDR+2]<<8|gameState[INVADDR+3]);
}

//Save changed data to EEPROM
uint8_t SaveGameState(){
    12ca:	df 92       	push	r13
    12cc:	ff 92       	push	r15
    12ce:	0f 93       	push	r16
    12d0:	1f 93       	push	r17
    12d2:	cf 93       	push	r28
    12d4:	df 93       	push	r29
    12d6:	cd b7       	in	r28, 0x3d	; 61
    12d8:	de b7       	in	r29, 0x3e	; 62
    12da:	64 97       	sbiw	r28, 0x14	; 20
    12dc:	cd bf       	out	0x3d, r28	; 61
    12de:	de bf       	out	0x3e, r29	; 62
    uint8_t gameCheck[BOOTCHK];

    //Read all data up to the boot/check result address from EEPROM
    EERead(0, &gameCheck[0], BOOTCHK);
    12e0:	44 e1       	ldi	r20, 0x14	; 20
    12e2:	be 01       	movw	r22, r28
    12e4:	6f 5f       	subi	r22, 0xFF	; 255
    12e6:	7f 4f       	sbci	r23, 0xFF	; 255
    12e8:	80 e0       	ldi	r24, 0x00	; 0
    12ea:	79 de       	rcall	.-782    	; 0xfde <EERead>
    12ec:	81 e6       	ldi	r24, 0x61	; 97
    12ee:	c8 2e       	mov	r12, r24
    12f0:	8a e3       	ldi	r24, 0x3A	; 58
    12f2:	d8 2e       	mov	r13, r24
    12f4:	8e 01       	movw	r16, r28
    12f6:	0f 5f       	subi	r16, 0xFF	; 255
    12f8:	1f 4f       	sbci	r17, 0xFF	; 255

    //Check game status bits
    for (uint8_t x=0; x<STATLEN; ++x){
    12fa:	f1 2c       	mov	r15, r1
        if (gameState[x] != gameCheck[x]){
    12fc:	f8 01       	movw	r30, r16
    12fe:	81 91       	ld	r24, Z+
    1300:	8f 01       	movw	r16, r30
    1302:	f6 01       	movw	r30, r12
    1304:	90 81       	ld	r25, Z
    1306:	98 13       	cpse	r25, r24
    1308:	08 c0       	rjmp	.+16     	; 0x131a <SaveGameState+0x52>

    //Read all data up to the boot/check result address from EEPROM
    EERead(0, &gameCheck[0], BOOTCHK);

    //Check game status bits
    for (uint8_t x=0; x<STATLEN; ++x){
    130a:	f3 94       	inc	r15
    130c:	ff ef       	ldi	r31, 0xFF	; 255
    130e:	cf 1a       	sub	r12, r31
    1310:	df 0a       	sbc	r13, r31
    1312:	80 e1       	ldi	r24, 0x10	; 16
    1314:	f8 12       	cpse	r15, r24
    1316:	f2 cf       	rjmp	.-28     	; 0x12fc <SaveGameState+0x34>
    1318:	08 c0       	rjmp	.+16     	; 0x132a <SaveGameState+0x62>
        if (gameState[x] != gameCheck[x]){
            if (EEWrite(x, &gameState[x], 1)) return 1;
    131a:	41 e0       	ldi	r20, 0x01	; 1
    131c:	b6 01       	movw	r22, r12
    131e:	8f 2d       	mov	r24, r15
    1320:	6e de       	rcall	.-804    	; 0xffe <EEWrite>
    1322:	88 23       	and	r24, r24
    1324:	91 f3       	breq	.-28     	; 0x130a <SaveGameState+0x42>
    1326:	91 e0       	ldi	r25, 0x01	; 1
    1328:	36 c0       	rjmp	.+108    	; 0x1396 <SaveGameState+0xce>
        }
    }

    //Check the inventory too
    gameState[INVADDR] = (uint8_t)(inventory[0]>>8);
    132a:	20 91 3e 38 	lds	r18, 0x383E	; 0x80383e <inventory>
    132e:	30 91 3f 38 	lds	r19, 0x383F	; 0x80383f <inventory+0x1>
    1332:	30 93 71 3a 	sts	0x3A71, r19	; 0x803a71 <gameState+0x10>
    gameState[INVADDR+1] = (uint8_t)(inventory[0]&0xff);
    1336:	20 93 72 3a 	sts	0x3A72, r18	; 0x803a72 <gameState+0x11>
    gameState[INVADDR+2] = (uint8_t)(inventory[1]>>8);
    133a:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <inventory+0x2>
    133e:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <inventory+0x3>
    1342:	90 93 73 3a 	sts	0x3A73, r25	; 0x803a73 <gameState+0x12>
    gameState[INVADDR+3] = (uint8_t)(inventory[1]&0xff);
    1346:	80 93 74 3a 	sts	0x3A74, r24	; 0x803a74 <gameState+0x13>
    if (inventory[0] != (gameCheck[INVADDR]<<8|gameCheck[INVADDR+1])) {
    134a:	89 89       	ldd	r24, Y+17	; 0x11
    134c:	9a 89       	ldd	r25, Y+18	; 0x12
    134e:	98 27       	eor	r25, r24
    1350:	89 27       	eor	r24, r25
    1352:	98 27       	eor	r25, r24
    1354:	28 17       	cp	r18, r24
    1356:	39 07       	cpc	r19, r25
    1358:	69 f4       	brne	.+26     	; 0x1374 <SaveGameState+0xac>
        if (EEWrite(INVADDR, &gameState[INVADDR], 2)) return 1;
    }
    if (inventory[1] != (gameCheck[INVADDR+2]<<8|gameCheck[INVADDR+3])) {
    135a:	8b 89       	ldd	r24, Y+19	; 0x13
    135c:	9c 89       	ldd	r25, Y+20	; 0x14
    135e:	98 27       	eor	r25, r24
    1360:	89 27       	eor	r24, r25
    1362:	98 27       	eor	r25, r24
    1364:	20 91 40 38 	lds	r18, 0x3840	; 0x803840 <inventory+0x2>
    1368:	30 91 41 38 	lds	r19, 0x3841	; 0x803841 <inventory+0x3>
    136c:	28 17       	cp	r18, r24
    136e:	39 07       	cpc	r19, r25
    1370:	49 f4       	brne	.+18     	; 0x1384 <SaveGameState+0xbc>
    1372:	10 c0       	rjmp	.+32     	; 0x1394 <SaveGameState+0xcc>
    gameState[INVADDR] = (uint8_t)(inventory[0]>>8);
    gameState[INVADDR+1] = (uint8_t)(inventory[0]&0xff);
    gameState[INVADDR+2] = (uint8_t)(inventory[1]>>8);
    gameState[INVADDR+3] = (uint8_t)(inventory[1]&0xff);
    if (inventory[0] != (gameCheck[INVADDR]<<8|gameCheck[INVADDR+1])) {
        if (EEWrite(INVADDR, &gameState[INVADDR], 2)) return 1;
    1374:	42 e0       	ldi	r20, 0x02	; 2
    1376:	61 e7       	ldi	r22, 0x71	; 113
    1378:	7a e3       	ldi	r23, 0x3A	; 58
    137a:	80 e1       	ldi	r24, 0x10	; 16
    137c:	40 de       	rcall	.-896    	; 0xffe <EEWrite>
    137e:	88 23       	and	r24, r24
    1380:	61 f3       	breq	.-40     	; 0x135a <SaveGameState+0x92>
    1382:	d1 cf       	rjmp	.-94     	; 0x1326 <SaveGameState+0x5e>
    }
    if (inventory[1] != (gameCheck[INVADDR+2]<<8|gameCheck[INVADDR+3])) {
        if (EEWrite(INVADDR+2, &gameState[INVADDR+2], 2)) return 1;
    1384:	42 e0       	ldi	r20, 0x02	; 2
    1386:	63 e7       	ldi	r22, 0x73	; 115
    1388:	7a e3       	ldi	r23, 0x3A	; 58
    138a:	82 e1       	ldi	r24, 0x12	; 18
    138c:	38 de       	rcall	.-912    	; 0xffe <EEWrite>
    EERead(0, &gameCheck[0], BOOTCHK);

    //Check game status bits
    for (uint8_t x=0; x<STATLEN; ++x){
        if (gameState[x] != gameCheck[x]){
            if (EEWrite(x, &gameState[x], 1)) return 1;
    138e:	91 e0       	ldi	r25, 0x01	; 1
    1390:	81 11       	cpse	r24, r1
    1392:	01 c0       	rjmp	.+2      	; 0x1396 <SaveGameState+0xce>
    1394:	90 e0       	ldi	r25, 0x00	; 0
    if (inventory[1] != (gameCheck[INVADDR+2]<<8|gameCheck[INVADDR+3])) {
        if (EEWrite(INVADDR+2, &gameState[INVADDR+2], 2)) return 1;
    }

    return 0;
}
    1396:	89 2f       	mov	r24, r25
    1398:	64 96       	adiw	r28, 0x14	; 20
    139a:	cd bf       	out	0x3d, r28	; 61
    139c:	de bf       	out	0x3e, r29	; 62
    139e:	df 91       	pop	r29
    13a0:	cf 91       	pop	r28
    13a2:	1f 91       	pop	r17
    13a4:	0f 91       	pop	r16
    13a6:	ff 90       	pop	r15
    13a8:	df 90       	pop	r13
    13aa:	cf 90       	pop	r12
    13ac:	08 95       	ret

000013ae <ReadStatusBit>:

uint8_t ReadStatusBit(uint8_t number){
    number &= 0x7f;
    if (gameState[number>>3] & (1<<(number&7))) return 1; else return 0;
    13ae:	e8 2f       	mov	r30, r24
    13b0:	ef 77       	andi	r30, 0x7F	; 127
    13b2:	e6 95       	lsr	r30
    13b4:	e6 95       	lsr	r30
    13b6:	e6 95       	lsr	r30
    13b8:	f0 e0       	ldi	r31, 0x00	; 0
    13ba:	ef 59       	subi	r30, 0x9F	; 159
    13bc:	f5 4c       	sbci	r31, 0xC5	; 197
    13be:	20 81       	ld	r18, Z
    13c0:	30 e0       	ldi	r19, 0x00	; 0
    13c2:	87 70       	andi	r24, 0x07	; 7
    13c4:	a9 01       	movw	r20, r18
    13c6:	02 c0       	rjmp	.+4      	; 0x13cc <ReadStatusBit+0x1e>
    13c8:	55 95       	asr	r21
    13ca:	47 95       	ror	r20
    13cc:	8a 95       	dec	r24
    13ce:	e2 f7       	brpl	.-8      	; 0x13c8 <ReadStatusBit+0x1a>
    13d0:	ca 01       	movw	r24, r20
}
    13d2:	81 70       	andi	r24, 0x01	; 1
    13d4:	08 95       	ret

000013d6 <UpdateState>:

//Update game state: num -> vBBBBbbb v=value(0 is set!), BBBB=Byte number, bbb=bit number
void UpdateState(uint8_t num){
    uint8_t clearBit = num & 0x80;
    num &= 0x7f;
    13d6:	e8 2f       	mov	r30, r24
    13d8:	ef 77       	andi	r30, 0x7F	; 127
    if (num) {
    13da:	e9 f0       	breq	.+58     	; 0x1416 <UpdateState+0x40>
    13dc:	e6 95       	lsr	r30
    13de:	e6 95       	lsr	r30
    13e0:	e6 95       	lsr	r30
    13e2:	28 2f       	mov	r18, r24
    13e4:	27 70       	andi	r18, 0x07	; 7
        if (clearBit) {
            gameState[num>>3] &= ~(1<<(num&7));
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	ef 59       	subi	r30, 0x9F	; 159
    13ea:	f5 4c       	sbci	r31, 0xC5	; 197
//Update game state: num -> vBBBBbbb v=value(0 is set!), BBBB=Byte number, bbb=bit number
void UpdateState(uint8_t num){
    uint8_t clearBit = num & 0x80;
    num &= 0x7f;
    if (num) {
        if (clearBit) {
    13ec:	87 ff       	sbrs	r24, 7
    13ee:	0a c0       	rjmp	.+20     	; 0x1404 <UpdateState+0x2e>
            gameState[num>>3] &= ~(1<<(num&7));
    13f0:	81 e0       	ldi	r24, 0x01	; 1
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	01 c0       	rjmp	.+2      	; 0x13f8 <UpdateState+0x22>
    13f6:	88 0f       	add	r24, r24
    13f8:	2a 95       	dec	r18
    13fa:	ea f7       	brpl	.-6      	; 0x13f6 <UpdateState+0x20>
    13fc:	80 95       	com	r24
    13fe:	90 81       	ld	r25, Z
    1400:	89 23       	and	r24, r25
    1402:	08 c0       	rjmp	.+16     	; 0x1414 <UpdateState+0x3e>
        } else {
            gameState[num>>3] |= 1<<(num&7);
    1404:	81 e0       	ldi	r24, 0x01	; 1
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	01 c0       	rjmp	.+2      	; 0x140c <UpdateState+0x36>
    140a:	88 0f       	add	r24, r24
    140c:	2a 95       	dec	r18
    140e:	ea f7       	brpl	.-6      	; 0x140a <UpdateState+0x34>
    1410:	90 81       	ld	r25, Z
    1412:	89 2b       	or	r24, r25
    1414:	80 83       	st	Z, r24
    1416:	08 95       	ret

00001418 <CheckState>:
        }
    }
}

//Checks if state of bit BBBBbbb matches with v (inverted) bit
uint8_t CheckState(uint8_t num){
    1418:	cf 93       	push	r28
    141a:	c8 2f       	mov	r28, r24
    uint8_t bitSet = 0;
    if (ReadStatusBit(num & 0x7f)){
    141c:	8f 77       	andi	r24, 0x7F	; 127
    141e:	c7 df       	rcall	.-114    	; 0x13ae <ReadStatusBit>
    1420:	2c 2f       	mov	r18, r28
    1422:	22 1f       	adc	r18, r18
    1424:	22 27       	eor	r18, r18
    1426:	22 1f       	adc	r18, r18
    1428:	91 e0       	ldi	r25, 0x01	; 1
    142a:	81 11       	cpse	r24, r1
    142c:	01 c0       	rjmp	.+2      	; 0x1430 <CheckState+0x18>
    142e:	90 e0       	ldi	r25, 0x00	; 0
    }
    if (((num & 0x80)>0)^(bitSet>0)){
        return 1;
    }
    return 0;
}
    1430:	82 2f       	mov	r24, r18
    1432:	89 27       	eor	r24, r25
    1434:	cf 91       	pop	r28
    1436:	08 95       	ret

00001438 <getID>:

//Give out a number 0..3, calculated using serial number fields
uint8_t getID(){
    uint8_t id = 0;
    uint8_t *serNum;
    serNum = (uint8_t*)&SIGROW_SERNUM0;
    1438:	e3 e0       	ldi	r30, 0x03	; 3
    143a:	f1 e1       	ldi	r31, 0x11	; 17
    return 0;
}

//Give out a number 0..3, calculated using serial number fields
uint8_t getID(){
    uint8_t id = 0;
    143c:	80 e0       	ldi	r24, 0x00	; 0
    uint8_t *serNum;
    serNum = (uint8_t*)&SIGROW_SERNUM0;

    for (uint8_t x=0; x<10; ++x){
        id += *serNum;
    143e:	91 91       	ld	r25, Z+
    1440:	89 0f       	add	r24, r25
uint8_t getID(){
    uint8_t id = 0;
    uint8_t *serNum;
    serNum = (uint8_t*)&SIGROW_SERNUM0;

    for (uint8_t x=0; x<10; ++x){
    1442:	ed 30       	cpi	r30, 0x0D	; 13
    1444:	91 e1       	ldi	r25, 0x11	; 17
    1446:	f9 07       	cpc	r31, r25
    1448:	d1 f7       	brne	.-12     	; 0x143e <getID+0x6>
        id += *serNum;
        ++serNum;
    }
    id %= 4;
    144a:	83 70       	andi	r24, 0x03	; 3
    whoami = id+1;
    144c:	91 e0       	ldi	r25, 0x01	; 1
    144e:	98 0f       	add	r25, r24
    1450:	90 93 3d 38 	sts	0x383D, r25	; 0x80383d <whoami>
    return id;
}
    1454:	08 95       	ret

00001456 <Reset>:

void Reset(){
    1456:	cf 93       	push	r28
    1458:	e1 e6       	ldi	r30, 0x61	; 97
    145a:	fa e3       	ldi	r31, 0x3A	; 58
    //# 110   set to 1 by FW if badge UUID mod 4 == 0
    //# 111   set to 1 by FW if badge UUID mod 4 == 1
    //# 112   set to 1 by FW if badge UUID mod 4 == 2
    //# 113   set to 1 by FW if badge UUID mod 4 == 3
    for (uint8_t x=0; x<sizeof(gameState); ++x){
        gameState[x] = 0;
    145c:	11 92       	st	Z+, r1
    //Reset game progress (all zeros) and load some bits:
    //# 110   set to 1 by FW if badge UUID mod 4 == 0
    //# 111   set to 1 by FW if badge UUID mod 4 == 1
    //# 112   set to 1 by FW if badge UUID mod 4 == 2
    //# 113   set to 1 by FW if badge UUID mod 4 == 3
    for (uint8_t x=0; x<sizeof(gameState); ++x){
    145e:	8a e3       	ldi	r24, 0x3A	; 58
    1460:	e5 37       	cpi	r30, 0x75	; 117
    1462:	f8 07       	cpc	r31, r24
    1464:	d9 f7       	brne	.-10     	; 0x145c <Reset+0x6>
        gameState[x] = 0;
    }

    uint8_t id = getID();
    1466:	e8 df       	rcall	.-48     	; 0x1438 <getID>
    1468:	c8 2f       	mov	r28, r24

    //Write bit in gameState location 110..113
    if (id == 0) UpdateState(110);
    146a:	81 11       	cpse	r24, r1
    146c:	02 c0       	rjmp	.+4      	; 0x1472 <Reset+0x1c>
    146e:	8e e6       	ldi	r24, 0x6E	; 110
    1470:	0b c0       	rjmp	.+22     	; 0x1488 <Reset+0x32>
    else if (id == 1) UpdateState(111);
    1472:	81 30       	cpi	r24, 0x01	; 1
    1474:	11 f4       	brne	.+4      	; 0x147a <Reset+0x24>
    1476:	8f e6       	ldi	r24, 0x6F	; 111
    1478:	07 c0       	rjmp	.+14     	; 0x1488 <Reset+0x32>
    else if (id == 2) UpdateState(112);
    147a:	82 30       	cpi	r24, 0x02	; 2
    147c:	11 f4       	brne	.+4      	; 0x1482 <Reset+0x2c>
    147e:	80 e7       	ldi	r24, 0x70	; 112
    1480:	03 c0       	rjmp	.+6      	; 0x1488 <Reset+0x32>
    else if (id == 3) UpdateState(113);
    1482:	83 30       	cpi	r24, 0x03	; 3
    1484:	11 f4       	brne	.+4      	; 0x148a <Reset+0x34>
    1486:	81 e7       	ldi	r24, 0x71	; 113
    1488:	a6 df       	rcall	.-180    	; 0x13d6 <UpdateState>
    UpdateState(100+id);
    148a:	84 e6       	ldi	r24, 0x64	; 100
    148c:	8c 0f       	add	r24, r28
    148e:	a3 df       	rcall	.-186    	; 0x13d6 <UpdateState>

    //Write bit 0, must always be 1!
    UpdateState(0);
    1490:	80 e0       	ldi	r24, 0x00	; 0
}
    1492:	cf 91       	pop	r28
    else if (id == 2) UpdateState(112);
    else if (id == 3) UpdateState(113);
    UpdateState(100+id);

    //Write bit 0, must always be 1!
    UpdateState(0);
    1494:	a0 cf       	rjmp	.-192    	; 0x13d6 <UpdateState>

00001496 <LoadGameState>:
    1496:	cf 93       	push	r28

    return sample;
}

//Load game status
void LoadGameState(){
    1498:	df 93       	push	r29
    EERead(0, &gameState[0], BOOTCHK);   //Load game status bits from EEPROM
    149a:	44 e1       	ldi	r20, 0x14	; 20
    149c:	61 e6       	ldi	r22, 0x61	; 97
    149e:	7a e3       	ldi	r23, 0x3A	; 58
    14a0:	80 e0       	ldi	r24, 0x00	; 0
    14a2:	9d dd       	rcall	.-1222   	; 0xfde <EERead>
    14a4:	ce e6       	ldi	r28, 0x6E	; 110

    uint8_t idSet = 0;
    14a6:	d0 e0       	ldi	r29, 0x00	; 0
    for (uint8_t x=0; x<4; ++x){
        idSet += ReadStatusBit(110+x);
    14a8:	8c 2f       	mov	r24, r28
    14aa:	81 df       	rcall	.-254    	; 0x13ae <ReadStatusBit>
    14ac:	d8 0f       	add	r29, r24
    14ae:	cf 5f       	subi	r28, 0xFF	; 255
//Load game status
void LoadGameState(){
    EERead(0, &gameState[0], BOOTCHK);   //Load game status bits from EEPROM

    uint8_t idSet = 0;
    for (uint8_t x=0; x<4; ++x){
    14b0:	c2 37       	cpi	r28, 0x72	; 114
    14b2:	d1 f7       	brne	.-12     	; 0x14a8 <LoadGameState+0x12>
        idSet += ReadStatusBit(110+x);
    }

    //Check if badge is reset(0 = cheated!) or new(3) or error(2)
    if (idSet != 1) {
    14b4:	d1 30       	cpi	r29, 0x01	; 1
        Reset();
    14b6:	11 f0       	breq	.+4      	; 0x14bc <LoadGameState+0x26>
    14b8:	ce df       	rcall	.-100    	; 0x1456 <Reset>
    } else getID();
    14ba:	01 c0       	rjmp	.+2      	; 0x14be <LoadGameState+0x28>
    14bc:	bd df       	rcall	.-134    	; 0x1438 <getID>

    inventory[0] = (gameState[INVADDR]<<8|gameState[INVADDR+1]);
    14be:	80 91 71 3a 	lds	r24, 0x3A71	; 0x803a71 <gameState+0x10>
    14c2:	90 91 72 3a 	lds	r25, 0x3A72	; 0x803a72 <gameState+0x11>
    14c6:	98 27       	eor	r25, r24
    14c8:	89 27       	eor	r24, r25
    14ca:	98 27       	eor	r25, r24
    14cc:	80 93 3e 38 	sts	0x383E, r24	; 0x80383e <inventory>
    14d0:	90 93 3f 38 	sts	0x383F, r25	; 0x80383f <inventory+0x1>
    inventory[1] = (gameState[INVADDR+2]<<8|gameState[INVADDR+3]);
    14d4:	80 91 73 3a 	lds	r24, 0x3A73	; 0x803a73 <gameState+0x12>
    14d8:	90 91 74 3a 	lds	r25, 0x3A74	; 0x803a74 <gameState+0x13>
    14dc:	98 27       	eor	r25, r24
    14de:	89 27       	eor	r24, r25
    14e0:	98 27       	eor	r25, r24
    14e2:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <inventory+0x2>
    14e6:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <inventory+0x3>
}
    14ea:	df 91       	pop	r29
    14ec:	cf 91       	pop	r28
    14ee:	08 95       	ret

000014f0 <HotSummer>:
    //Write bit 0, must always be 1!
    UpdateState(0);
}

//Sets specific game bits after the badge is heated for one and two times.
uint8_t HotSummer(){
    14f0:	cf 93       	push	r28
    static uint8_t cooledDown = 0;

    if (CheckState(SUMMERS_COMPLETED)){
    14f2:	86 e7       	ldi	r24, 0x76	; 118
    14f4:	91 df       	rcall	.-222    	; 0x1418 <CheckState>
    14f6:	c8 2f       	mov	r28, r24
    14f8:	88 23       	and	r24, r24
    14fa:	81 f0       	breq	.+32     	; 0x151c <HotSummer+0x2c>
        iLED[SCARAB[R]] = 0;
    14fc:	e0 91 48 bf 	lds	r30, 0xBF48	; 0x80bf48 <__bss_end+0x8436>
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	ed 53       	subi	r30, 0x3D	; 61
    1504:	f5 4c       	sbci	r31, 0xC5	; 197
    1506:	10 82       	st	Z, r1
        iLED[SCARAB[G]] = dimValue;
    1508:	e0 91 49 bf 	lds	r30, 0xBF49	; 0x80bf49 <__bss_end+0x8437>
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1512:	ed 53       	subi	r30, 0x3D	; 61
    1514:	f5 4c       	sbci	r31, 0xC5	; 197
    1516:	80 83       	st	Z, r24
        return 1;
    1518:	c1 e0       	ldi	r28, 0x01	; 1
    151a:	4c c0       	rjmp	.+152    	; 0x15b4 <HotSummer+0xc4>
    }

    if (CheckState(FIRST_SUMMER)) {
    151c:	85 e7       	ldi	r24, 0x75	; 117
    151e:	7c df       	rcall	.-264    	; 0x1418 <CheckState>
    1520:	88 23       	and	r24, r24
    1522:	59 f1       	breq	.+86     	; 0x157a <HotSummer+0x8a>
        iLED[SCARAB[R]] = dimValue;
    1524:	e0 91 48 bf 	lds	r30, 0xBF48	; 0x80bf48 <__bss_end+0x8436>
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    152e:	ed 53       	subi	r30, 0x3D	; 61
    1530:	f5 4c       	sbci	r31, 0xC5	; 197
    1532:	80 83       	st	Z, r24
        if ((cooledDown) && (adcTemp >= (calTemp + 32))) {
    1534:	80 91 59 38 	lds	r24, 0x3859	; 0x803859 <cooledDown.3965>
    1538:	88 23       	and	r24, r24
    153a:	79 f0       	breq	.+30     	; 0x155a <HotSummer+0x6a>
    153c:	80 91 c0 3a 	lds	r24, 0x3AC0	; 0x803ac0 <calTemp>
    1540:	90 91 c1 3a 	lds	r25, 0x3AC1	; 0x803ac1 <calTemp+0x1>
    1544:	20 91 ed 3a 	lds	r18, 0x3AED	; 0x803aed <adcTemp>
    1548:	30 91 ee 3a 	lds	r19, 0x3AEE	; 0x803aee <adcTemp+0x1>
    154c:	80 96       	adiw	r24, 0x20	; 32
    154e:	28 17       	cp	r18, r24
    1550:	39 07       	cpc	r19, r25
            UpdateState(SUMMERS_COMPLETED);
    1552:	18 f0       	brcs	.+6      	; 0x155a <HotSummer+0x6a>
    1554:	86 e7       	ldi	r24, 0x76	; 118
    1556:	3f df       	rcall	.-386    	; 0x13d6 <UpdateState>
            return 0;
    1558:	2d c0       	rjmp	.+90     	; 0x15b4 <HotSummer+0xc4>
        }
        if (adcTemp <= (calTemp + 8)) cooledDown = 1;
    155a:	80 91 c0 3a 	lds	r24, 0x3AC0	; 0x803ac0 <calTemp>
    155e:	90 91 c1 3a 	lds	r25, 0x3AC1	; 0x803ac1 <calTemp+0x1>
    1562:	20 91 ed 3a 	lds	r18, 0x3AED	; 0x803aed <adcTemp>
    1566:	30 91 ee 3a 	lds	r19, 0x3AEE	; 0x803aee <adcTemp+0x1>
    156a:	08 96       	adiw	r24, 0x08	; 8
    156c:	82 17       	cp	r24, r18
    156e:	93 07       	cpc	r25, r19
    1570:	08 f1       	brcs	.+66     	; 0x15b4 <HotSummer+0xc4>
    1572:	81 e0       	ldi	r24, 0x01	; 1
    1574:	80 93 59 38 	sts	0x3859, r24	; 0x803859 <cooledDown.3965>
    1578:	1d c0       	rjmp	.+58     	; 0x15b4 <HotSummer+0xc4>
                   
    } else {
        if (calTemp == 0) calTemp = adcTemp;
    157a:	80 91 c0 3a 	lds	r24, 0x3AC0	; 0x803ac0 <calTemp>
    157e:	90 91 c1 3a 	lds	r25, 0x3AC1	; 0x803ac1 <calTemp+0x1>
    1582:	89 2b       	or	r24, r25
    1584:	41 f4       	brne	.+16     	; 0x1596 <HotSummer+0xa6>
    1586:	80 91 ed 3a 	lds	r24, 0x3AED	; 0x803aed <adcTemp>
    158a:	90 91 ee 3a 	lds	r25, 0x3AEE	; 0x803aee <adcTemp+0x1>
    158e:	80 93 c0 3a 	sts	0x3AC0, r24	; 0x803ac0 <calTemp>
    1592:	90 93 c1 3a 	sts	0x3AC1, r25	; 0x803ac1 <calTemp+0x1>
        if (adcTemp >= (calTemp + 32)) {
    1596:	80 91 c0 3a 	lds	r24, 0x3AC0	; 0x803ac0 <calTemp>
    159a:	90 91 c1 3a 	lds	r25, 0x3AC1	; 0x803ac1 <calTemp+0x1>
    159e:	20 91 ed 3a 	lds	r18, 0x3AED	; 0x803aed <adcTemp>
    15a2:	30 91 ee 3a 	lds	r19, 0x3AEE	; 0x803aee <adcTemp+0x1>
    15a6:	80 96       	adiw	r24, 0x20	; 32
    15a8:	28 17       	cp	r18, r24
    15aa:	39 07       	cpc	r19, r25
            UpdateState(FIRST_SUMMER);
    15ac:	18 f0       	brcs	.+6      	; 0x15b4 <HotSummer+0xc4>
    15ae:	85 e7       	ldi	r24, 0x75	; 117
    15b0:	12 df       	rcall	.-476    	; 0x13d6 <UpdateState>
        }
    }
    return 0;
    15b2:	c0 e0       	ldi	r28, 0x00	; 0
}
    15b4:	8c 2f       	mov	r24, r28
    15b6:	cf 91       	pop	r28
    15b8:	08 95       	ret

000015ba <WingBar>:

void WingBar(int8_t l, int8_t r) {
    15ba:	ea e4       	ldi	r30, 0x4A	; 74
    15bc:	ff eb       	ldi	r31, 0xBF	; 191
    for (int8_t i=0; i<5; i++) {
    15be:	90 e0       	ldi	r25, 0x00	; 0
        if (i<l)
            iLED[WING[L][i]] = dimValue;
    15c0:	a5 81       	ldd	r26, Z+5	; 0x05
    15c2:	b0 e0       	ldi	r27, 0x00	; 0
    return 0;
}

void WingBar(int8_t l, int8_t r) {
    for (int8_t i=0; i<5; i++) {
        if (i<l)
    15c4:	98 17       	cp	r25, r24
    15c6:	34 f4       	brge	.+12     	; 0x15d4 <WingBar+0x1a>
            iLED[WING[L][i]] = dimValue;
    15c8:	20 91 0c 38 	lds	r18, 0x380C	; 0x80380c <dimValue>
    15cc:	ad 53       	subi	r26, 0x3D	; 61
    15ce:	b5 4c       	sbci	r27, 0xC5	; 197
    15d0:	2c 93       	st	X, r18
    15d2:	03 c0       	rjmp	.+6      	; 0x15da <WingBar+0x20>
        else
            iLED[WING[L][i]] = 0;
    15d4:	ad 53       	subi	r26, 0x3D	; 61
    15d6:	b5 4c       	sbci	r27, 0xC5	; 197
    15d8:	1c 92       	st	X, r1
        if (i<r)
            iLED[WING[R][i]] = dimValue;
    15da:	a0 81       	ld	r26, Z
    15dc:	b0 e0       	ldi	r27, 0x00	; 0
    for (int8_t i=0; i<5; i++) {
        if (i<l)
            iLED[WING[L][i]] = dimValue;
        else
            iLED[WING[L][i]] = 0;
        if (i<r)
    15de:	96 17       	cp	r25, r22
    15e0:	34 f4       	brge	.+12     	; 0x15ee <WingBar+0x34>
            iLED[WING[R][i]] = dimValue;
    15e2:	20 91 0c 38 	lds	r18, 0x380C	; 0x80380c <dimValue>
    15e6:	ad 53       	subi	r26, 0x3D	; 61
    15e8:	b5 4c       	sbci	r27, 0xC5	; 197
    15ea:	2c 93       	st	X, r18
    15ec:	03 c0       	rjmp	.+6      	; 0x15f4 <WingBar+0x3a>
        else
            iLED[WING[R][i]] = 0;
    15ee:	ad 53       	subi	r26, 0x3D	; 61
    15f0:	b5 4c       	sbci	r27, 0xC5	; 197
    15f2:	1c 92       	st	X, r1
    15f4:	9f 5f       	subi	r25, 0xFF	; 255
    15f6:	31 96       	adiw	r30, 0x01	; 1
    }
    return 0;
}

void WingBar(int8_t l, int8_t r) {
    for (int8_t i=0; i<5; i++) {
    15f8:	95 30       	cpi	r25, 0x05	; 5
    15fa:	11 f7       	brne	.-60     	; 0x15c0 <WingBar+0x6>
        if (i<r)
            iLED[WING[R][i]] = dimValue;
        else
            iLED[WING[R][i]] = 0;
    }
}
    15fc:	08 95       	ret

000015fe <SetBothEyes>:

void SetBothEyes(uint8_t r, uint8_t g) {
    for (uint8_t i=0; i<2; i++) {
        iLED[EYE[R][i]] = r;
    15fe:	a4 e5       	ldi	r26, 0x54	; 84
    1600:	bf eb       	ldi	r27, 0xBF	; 191
    1602:	ec 91       	ld	r30, X
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	ed 53       	subi	r30, 0x3D	; 61
    1608:	f5 4c       	sbci	r31, 0xC5	; 197
    160a:	80 83       	st	Z, r24
        iLED[EYE[G][i]] = g;
    160c:	12 96       	adiw	r26, 0x02	; 2
    160e:	ec 91       	ld	r30, X
    1610:	12 97       	sbiw	r26, 0x02	; 2
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	ed 53       	subi	r30, 0x3D	; 61
    1616:	f5 4c       	sbci	r31, 0xC5	; 197
    1618:	60 83       	st	Z, r22
    }
}

void SetBothEyes(uint8_t r, uint8_t g) {
    for (uint8_t i=0; i<2; i++) {
        iLED[EYE[R][i]] = r;
    161a:	11 96       	adiw	r26, 0x01	; 1
    161c:	ec 91       	ld	r30, X
    161e:	11 97       	sbiw	r26, 0x01	; 1
    1620:	f0 e0       	ldi	r31, 0x00	; 0
    1622:	ed 53       	subi	r30, 0x3D	; 61
    1624:	f5 4c       	sbci	r31, 0xC5	; 197
    1626:	80 83       	st	Z, r24
        iLED[EYE[G][i]] = g;
    1628:	13 96       	adiw	r26, 0x03	; 3
    162a:	ec 91       	ld	r30, X
    162c:	f0 e0       	ldi	r31, 0x00	; 0
    162e:	ed 53       	subi	r30, 0x3D	; 61
    1630:	f5 4c       	sbci	r31, 0xC5	; 197
    1632:	60 83       	st	Z, r22
    1634:	08 95       	ret

00001636 <ClearHackerLeds>:
    }
}

void ClearHackerLeds() {
    1636:	cf 93       	push	r28
    1638:	df 93       	push	r29
    163a:	e8 e5       	ldi	r30, 0x58	; 88
    163c:	ff eb       	ldi	r31, 0xBF	; 191
    163e:	ef 01       	movw	r28, r30
    for (uint8_t i=0;i<6;i++) {
        iLED[HCKR[G][i]] = 0;
    1640:	a6 81       	ldd	r26, Z+6	; 0x06
    1642:	b0 e0       	ldi	r27, 0x00	; 0
    1644:	ad 53       	subi	r26, 0x3D	; 61
    1646:	b5 4c       	sbci	r27, 0xC5	; 197
    1648:	1c 92       	st	X, r1
    164a:	31 96       	adiw	r30, 0x01	; 1
        iLED[HCKR[R][i]] = 0;
    164c:	a8 81       	ld	r26, Y
    164e:	b0 e0       	ldi	r27, 0x00	; 0
    1650:	ad 53       	subi	r26, 0x3D	; 61
    1652:	b5 4c       	sbci	r27, 0xC5	; 197
    1654:	1c 92       	st	X, r1
        iLED[EYE[G][i]] = g;
    }
}

void ClearHackerLeds() {
    for (uint8_t i=0;i<6;i++) {
    1656:	8f eb       	ldi	r24, 0xBF	; 191
    1658:	ee 35       	cpi	r30, 0x5E	; 94
    165a:	f8 07       	cpc	r31, r24
    165c:	81 f7       	brne	.-32     	; 0x163e <ClearHackerLeds+0x8>
        iLED[HCKR[G][i]] = 0;
        iLED[HCKR[R][i]] = 0;
    }
}
    165e:	df 91       	pop	r29
    1660:	cf 91       	pop	r28
    1662:	08 95       	ret

00001664 <GenerateBlinks>:


void GenerateBlinks(){
    1664:	ef 92       	push	r14
    1666:	ff 92       	push	r15
    1668:	0f 93       	push	r16
    166a:	1f 93       	push	r17
    166c:	cf 93       	push	r28
    166e:	df 93       	push	r29
    used by the games, the other LEDs can be used by setting 
    effect (or be set directly)
    */

    //Activate HCKR & BADGER leds based on the state-bits
    if (gameNow == TEXT) {
    1670:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <gameNow>
    1674:	88 23       	and	r24, r24
    1676:	29 f0       	breq	.+10     	; 0x1682 <GenerateBlinks+0x1e>
                iLED[HCKR[R][i]] = dimValue;
            }
        }
    }

    if (CheckState(GEM_STATE)) {
    1678:	80 e4       	ldi	r24, 0x40	; 64
    167a:	ce de       	rcall	.-612    	; 0x1418 <CheckState>
    167c:	81 11       	cpse	r24, r1
    167e:	24 c0       	rjmp	.+72     	; 0x16c8 <GenerateBlinks+0x64>
    1680:	50 c0       	rjmp	.+160    	; 0x1722 <GenerateBlinks+0xbe>
    1682:	c8 e5       	ldi	r28, 0x58	; 88
    1684:	df eb       	ldi	r29, 0xBF	; 191
    used by the games, the other LEDs can be used by setting 
    effect (or be set directly)
    */

    //Activate HCKR & BADGER leds based on the state-bits
    if (gameNow == TEXT) {
    1686:	1a e7       	ldi	r17, 0x7A	; 122
        for (uint8_t i=0;i<6;i++) {
            if(CheckState(HACKER_STATES + i)) {
    1688:	81 2f       	mov	r24, r17
    168a:	c6 de       	rcall	.-628    	; 0x1418 <CheckState>
                iLED[HCKR[G][i]] = dimValue;
    168c:	ee 81       	ldd	r30, Y+6	; 0x06
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    */

    //Activate HCKR & BADGER leds based on the state-bits
    if (gameNow == TEXT) {
        for (uint8_t i=0;i<6;i++) {
            if(CheckState(HACKER_STATES + i)) {
    1690:	88 23       	and	r24, r24
    1692:	59 f0       	breq	.+22     	; 0x16aa <GenerateBlinks+0x46>
                iLED[HCKR[G][i]] = dimValue;
    1694:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1698:	ed 53       	subi	r30, 0x3D	; 61
    169a:	f5 4c       	sbci	r31, 0xC5	; 197
    169c:	80 83       	st	Z, r24
                iLED[HCKR[R][i]] = 0;
    169e:	e8 81       	ld	r30, Y
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	ed 53       	subi	r30, 0x3D	; 61
    16a4:	f5 4c       	sbci	r31, 0xC5	; 197
    16a6:	10 82       	st	Z, r1
    16a8:	0a c0       	rjmp	.+20     	; 0x16be <GenerateBlinks+0x5a>
            } else {
                iLED[HCKR[G][i]] = 0;
    16aa:	ed 53       	subi	r30, 0x3D	; 61
    16ac:	f5 4c       	sbci	r31, 0xC5	; 197
    16ae:	10 82       	st	Z, r1
                iLED[HCKR[R][i]] = dimValue;
    16b0:	e8 81       	ld	r30, Y
    16b2:	f0 e0       	ldi	r31, 0x00	; 0
    16b4:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    16b8:	ed 53       	subi	r30, 0x3D	; 61
    16ba:	f5 4c       	sbci	r31, 0xC5	; 197
    16bc:	80 83       	st	Z, r24
    16be:	1f 5f       	subi	r17, 0xFF	; 255
    16c0:	21 96       	adiw	r28, 0x01	; 1
    effect (or be set directly)
    */

    //Activate HCKR & BADGER leds based on the state-bits
    if (gameNow == TEXT) {
        for (uint8_t i=0;i<6;i++) {
    16c2:	10 38       	cpi	r17, 0x80	; 128
    16c4:	09 f7       	brne	.-62     	; 0x1688 <GenerateBlinks+0x24>
    16c6:	d8 cf       	rjmp	.-80     	; 0x1678 <GenerateBlinks+0x14>
            }
        }
    }

    if (CheckState(GEM_STATE)) {
        if ( HeartCount == 1 || HeartCount == 3 || HeartCount == 5 )
    16c8:	80 91 5b 38 	lds	r24, 0x385B	; 0x80385b <HeartCount>
    16cc:	98 2f       	mov	r25, r24
    16ce:	9d 7f       	andi	r25, 0xFD	; 253
    16d0:	e0 91 47 bf 	lds	r30, 0xBF47	; 0x80bf47 <__bss_end+0x8435>
            iLED[BADGER] = dimValue>>1 ;
    16d4:	f0 e0       	ldi	r31, 0x00	; 0
            }
        }
    }

    if (CheckState(GEM_STATE)) {
        if ( HeartCount == 1 || HeartCount == 3 || HeartCount == 5 )
    16d6:	91 30       	cpi	r25, 0x01	; 1
    16d8:	11 f0       	breq	.+4      	; 0x16de <GenerateBlinks+0x7a>
    16da:	85 30       	cpi	r24, 0x05	; 5
    16dc:	21 f4       	brne	.+8      	; 0x16e6 <GenerateBlinks+0x82>
            iLED[BADGER] = dimValue>>1 ;
    16de:	90 91 0c 38 	lds	r25, 0x380C	; 0x80380c <dimValue>
    16e2:	96 95       	lsr	r25
    16e4:	06 c0       	rjmp	.+12     	; 0x16f2 <GenerateBlinks+0x8e>
        else if ( HeartCount == 2 || HeartCount == 4 )
    16e6:	82 30       	cpi	r24, 0x02	; 2
    16e8:	11 f0       	breq	.+4      	; 0x16ee <GenerateBlinks+0x8a>
    16ea:	84 30       	cpi	r24, 0x04	; 4
    16ec:	31 f4       	brne	.+12     	; 0x16fa <GenerateBlinks+0x96>
            iLED[BADGER] = dimValue;
    16ee:	90 91 0c 38 	lds	r25, 0x380C	; 0x80380c <dimValue>
    16f2:	ed 53       	subi	r30, 0x3D	; 61
    16f4:	f5 4c       	sbci	r31, 0xC5	; 197
    16f6:	90 83       	st	Z, r25
    16f8:	0c c0       	rjmp	.+24     	; 0x1712 <GenerateBlinks+0xae>
        else if ( HeartCount == 0 || HeartCount == 6 )
    16fa:	88 23       	and	r24, r24
    16fc:	11 f0       	breq	.+4      	; 0x1702 <GenerateBlinks+0x9e>
    16fe:	86 30       	cpi	r24, 0x06	; 6
    1700:	29 f4       	brne	.+10     	; 0x170c <GenerateBlinks+0xa8>
            iLED[BADGER] = dimValue>>2;
    1702:	90 91 0c 38 	lds	r25, 0x380C	; 0x80380c <dimValue>
    1706:	96 95       	lsr	r25
    1708:	96 95       	lsr	r25
    170a:	f3 cf       	rjmp	.-26     	; 0x16f2 <GenerateBlinks+0x8e>
        else
            iLED[BADGER] = 0;
    170c:	ed 53       	subi	r30, 0x3D	; 61
    170e:	f5 4c       	sbci	r31, 0xC5	; 197
    1710:	10 82       	st	Z, r1
        if (HeartCount<32)
    1712:	80 32       	cpi	r24, 0x20	; 32
    1714:	20 f4       	brcc	.+8      	; 0x171e <GenerateBlinks+0xba>
            HeartCount++;
    1716:	8f 5f       	subi	r24, 0xFF	; 255
    1718:	80 93 5b 38 	sts	0x385B, r24	; 0x80385b <HeartCount>
    171c:	02 c0       	rjmp	.+4      	; 0x1722 <GenerateBlinks+0xbe>
        else
            HeartCount = 0;
    171e:	10 92 5b 38 	sts	0x385B, r1	; 0x80385b <HeartCount>
    }

    //LEDs effects for all games
    // Keep a counter for dynamic effects
    LedCount++;
    1722:	90 91 5a 38 	lds	r25, 0x385A	; 0x80385a <LedCount>
    1726:	9f 5f       	subi	r25, 0xFF	; 255
    1728:	90 93 5a 38 	sts	0x385A, r25	; 0x80385a <LedCount>

    switch (effect&0x1f) {
    172c:	e0 91 3a 38 	lds	r30, 0x383A	; 0x80383a <effect>
    1730:	f0 91 3b 38 	lds	r31, 0x383B	; 0x80383b <effect+0x1>
    1734:	ef 71       	andi	r30, 0x1F	; 31
    1736:	ff 27       	eor	r31, r31
    1738:	e9 30       	cpi	r30, 0x09	; 9
    173a:	f1 05       	cpc	r31, r1
    173c:	08 f0       	brcs	.+2      	; 0x1740 <GenerateBlinks+0xdc>
    173e:	e8 c0       	rjmp	.+464    	; 0x1910 <GenerateBlinks+0x2ac>
    1740:	e2 5c       	subi	r30, 0xC2	; 194
    1742:	ff 4f       	sbci	r31, 0xFF	; 255
    1744:	0c 94 87 1f 	jmp	0x3f0e	; 0x3f0e <__tablejump2__>
        // All LEDs off
        case 0:
            WingBar(0,0);
    1748:	60 e0       	ldi	r22, 0x00	; 0
    174a:	80 e0       	ldi	r24, 0x00	; 0
    174c:	36 df       	rcall	.-404    	; 0x15ba <WingBar>
            for (uint8_t i=0; i<2; i++) {
                iLED[EYE[R][i]] = 0;
    174e:	e0 91 54 bf 	lds	r30, 0xBF54	; 0x80bf54 <__bss_end+0x8442>
    1752:	f0 e0       	ldi	r31, 0x00	; 0
    1754:	ed 53       	subi	r30, 0x3D	; 61
    1756:	f5 4c       	sbci	r31, 0xC5	; 197
    1758:	10 82       	st	Z, r1
                iLED[EYE[G][i]] = 0; 
    175a:	e0 91 56 bf 	lds	r30, 0xBF56	; 0x80bf56 <__bss_end+0x8444>
    175e:	f0 e0       	ldi	r31, 0x00	; 0
    1760:	ed 53       	subi	r30, 0x3D	; 61
    1762:	f5 4c       	sbci	r31, 0xC5	; 197
    1764:	10 82       	st	Z, r1
                iLED[SCARAB[i]] = 0;
    1766:	e0 91 48 bf 	lds	r30, 0xBF48	; 0x80bf48 <__bss_end+0x8436>
    176a:	f0 e0       	ldi	r31, 0x00	; 0
    176c:	ed 53       	subi	r30, 0x3D	; 61
    176e:	f5 4c       	sbci	r31, 0xC5	; 197
    1770:	10 82       	st	Z, r1
    switch (effect&0x1f) {
        // All LEDs off
        case 0:
            WingBar(0,0);
            for (uint8_t i=0; i<2; i++) {
                iLED[EYE[R][i]] = 0;
    1772:	e0 91 55 bf 	lds	r30, 0xBF55	; 0x80bf55 <__bss_end+0x8443>
    1776:	f0 e0       	ldi	r31, 0x00	; 0
    1778:	ed 53       	subi	r30, 0x3D	; 61
    177a:	f5 4c       	sbci	r31, 0xC5	; 197
    177c:	10 82       	st	Z, r1
                iLED[EYE[G][i]] = 0; 
    177e:	e0 91 57 bf 	lds	r30, 0xBF57	; 0x80bf57 <__bss_end+0x8445>
    1782:	f0 e0       	ldi	r31, 0x00	; 0
    1784:	ed 53       	subi	r30, 0x3D	; 61
    1786:	f5 4c       	sbci	r31, 0xC5	; 197
    1788:	10 82       	st	Z, r1
                iLED[SCARAB[i]] = 0;
    178a:	e0 91 49 bf 	lds	r30, 0xBF49	; 0x80bf49 <__bss_end+0x8437>
    178e:	f0 e0       	ldi	r31, 0x00	; 0
    1790:	ed 53       	subi	r30, 0x3D	; 61
    1792:	f5 4c       	sbci	r31, 0xC5	; 197
    1794:	10 82       	st	Z, r1
            }
            iLED[CAT] = 0;
    1796:	e0 91 46 bf 	lds	r30, 0xBF46	; 0x80bf46 <__bss_end+0x8434>
    179a:	f0 e0       	ldi	r31, 0x00	; 0
    179c:	ed 53       	subi	r30, 0x3D	; 61
    179e:	f5 4c       	sbci	r31, 0xC5	; 197
    17a0:	10 82       	st	Z, r1
            break;
    17a2:	b6 c0       	rjmp	.+364    	; 0x1910 <GenerateBlinks+0x2ac>

        //'flashing red eyes',       # 1 can be used when a bad answer is given
        case 1:
            SetBothEyes((LedCount & 1 ? dimValue : 0),0);
    17a4:	89 2f       	mov	r24, r25
    17a6:	81 70       	andi	r24, 0x01	; 1
    17a8:	90 fd       	sbrc	r25, 0
    17aa:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    17ae:	60 e0       	ldi	r22, 0x00	; 0
    17b0:	0d c0       	rjmp	.+26     	; 0x17cc <GenerateBlinks+0x168>
    17b2:	69 2f       	mov	r22, r25
    17b4:	70 e0       	ldi	r23, 0x00	; 0
            break;

        //'flashing green eyes',     # 2 can be used when a good answer is given
        case 2:
            SetBothEyes(0, 0x1f + (((LedCount & 0x08) ? ((LedCount&0x07)^0x07) : (LedCount&0x07))<<5));
    17b6:	93 ff       	sbrs	r25, 3
    17b8:	02 c0       	rjmp	.+4      	; 0x17be <GenerateBlinks+0x15a>
    17ba:	60 95       	com	r22
    17bc:	70 95       	com	r23
    17be:	85 e0       	ldi	r24, 0x05	; 5
    17c0:	66 0f       	add	r22, r22
    17c2:	77 1f       	adc	r23, r23
    17c4:	8a 95       	dec	r24
    17c6:	e1 f7       	brne	.-8      	; 0x17c0 <GenerateBlinks+0x15c>
    17c8:	61 5e       	subi	r22, 0xE1	; 225
    17ca:	80 e0       	ldi	r24, 0x00	; 0
        // No LED action, game will do it's own LED magic
        case 31:
        default:
            break;
    }
}
    17cc:	df 91       	pop	r29
    17ce:	cf 91       	pop	r28
    17d0:	1f 91       	pop	r17
    17d2:	0f 91       	pop	r16
    17d4:	ff 90       	pop	r15
            SetBothEyes((LedCount & 1 ? dimValue : 0),0);
            break;

        //'flashing green eyes',     # 2 can be used when a good answer is given
        case 2:
            SetBothEyes(0, 0x1f + (((LedCount & 0x08) ? ((LedCount&0x07)^0x07) : (LedCount&0x07))<<5));
    17d6:	ef 90       	pop	r14
    17d8:	12 cf       	rjmp	.-476    	; 0x15fe <SetBothEyes>
            break;

        //'flash both wings'
        case 5:
            if ((LedCount & 3) == 0) {
    17da:	89 2f       	mov	r24, r25
    17dc:	83 70       	andi	r24, 0x03	; 3
    17de:	09 f0       	breq	.+2      	; 0x17e2 <GenerateBlinks+0x17e>
    17e0:	97 c0       	rjmp	.+302    	; 0x1910 <GenerateBlinks+0x2ac>
                if (LedCount & 4)
    17e2:	92 ff       	sbrs	r25, 2
    17e4:	03 c0       	rjmp	.+6      	; 0x17ec <GenerateBlinks+0x188>
                    WingBar(5,5);
    17e6:	65 e0       	ldi	r22, 0x05	; 5
    17e8:	85 e0       	ldi	r24, 0x05	; 5
    17ea:	02 c0       	rjmp	.+4      	; 0x17f0 <GenerateBlinks+0x18c>
                else
                    WingBar(0,0);
    17ec:	60 e0       	ldi	r22, 0x00	; 0
    17ee:	80 e0       	ldi	r24, 0x00	; 0
        // No LED action, game will do it's own LED magic
        case 31:
        default:
            break;
    }
}
    17f0:	df 91       	pop	r29
    17f2:	cf 91       	pop	r28
    17f4:	1f 91       	pop	r17
    17f6:	0f 91       	pop	r16
    17f8:	ff 90       	pop	r15
        case 5:
            if ((LedCount & 3) == 0) {
                if (LedCount & 4)
                    WingBar(5,5);
                else
                    WingBar(0,0);
    17fa:	ef 90       	pop	r14
    17fc:	de ce       	rjmp	.-580    	; 0x15ba <WingBar>
            }
            break;

        //'circle the wing leds'
        case 6:
            if (LedCount > 4) LedCount = 0;
    17fe:	95 30       	cpi	r25, 0x05	; 5
    1800:	10 f0       	brcs	.+4      	; 0x1806 <GenerateBlinks+0x1a2>
    1802:	10 92 5a 38 	sts	0x385A, r1	; 0x80385a <LedCount>
            iLED[WING[L][LedCount]] = 0;
    1806:	e0 91 5a 38 	lds	r30, 0x385A	; 0x80385a <LedCount>
    180a:	f0 e0       	ldi	r31, 0x00	; 0
    180c:	e6 5b       	subi	r30, 0xB6	; 182
    180e:	f0 44       	sbci	r31, 0x40	; 64
    1810:	a5 81       	ldd	r26, Z+5	; 0x05
    1812:	b0 e0       	ldi	r27, 0x00	; 0
    1814:	ad 53       	subi	r26, 0x3D	; 61
    1816:	b5 4c       	sbci	r27, 0xC5	; 197
    1818:	1c 92       	st	X, r1
            iLED[WING[L][(LedCount+1)]] = dimValue;
    181a:	e6 81       	ldd	r30, Z+6	; 0x06
    181c:	f0 e0       	ldi	r31, 0x00	; 0
    181e:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1822:	ed 53       	subi	r30, 0x3D	; 61
    1824:	f5 4c       	sbci	r31, 0xC5	; 197
    1826:	80 83       	st	Z, r24
    1828:	8a e4       	ldi	r24, 0x4A	; 74
    182a:	9f eb       	ldi	r25, 0xBF	; 191
    182c:	c4 e5       	ldi	r28, 0x54	; 84
    182e:	df eb       	ldi	r29, 0xBF	; 191
    1830:	2f e4       	ldi	r18, 0x4F	; 79
    1832:	3f eb       	ldi	r19, 0xBF	; 191

            for (uint8_t x=0; x<5; ++x){
                iLED[WING[R][x]] = iLED[WING[L][4-x]];
    1834:	dc 01       	movw	r26, r24
    1836:	ed 91       	ld	r30, X+
    1838:	cd 01       	movw	r24, r26
    183a:	f0 e0       	ldi	r31, 0x00	; 0
    183c:	aa 91       	ld	r26, -Y
    183e:	b0 e0       	ldi	r27, 0x00	; 0
    1840:	ad 53       	subi	r26, 0x3D	; 61
    1842:	b5 4c       	sbci	r27, 0xC5	; 197
    1844:	4c 91       	ld	r20, X
    1846:	ed 53       	subi	r30, 0x3D	; 61
    1848:	f5 4c       	sbci	r31, 0xC5	; 197
    184a:	40 83       	st	Z, r20
        case 6:
            if (LedCount > 4) LedCount = 0;
            iLED[WING[L][LedCount]] = 0;
            iLED[WING[L][(LedCount+1)]] = dimValue;

            for (uint8_t x=0; x<5; ++x){
    184c:	2c 17       	cp	r18, r28
    184e:	3d 07       	cpc	r19, r29
    1850:	89 f7       	brne	.-30     	; 0x1834 <GenerateBlinks+0x1d0>
    1852:	5e c0       	rjmp	.+188    	; 0x1910 <GenerateBlinks+0x2ac>
    1854:	ca e4       	ldi	r28, 0x4A	; 74
    1856:	df eb       	ldi	r29, 0xBF	; 191
            break;

        //'random wing leds'
        case 7:
            for (uint8_t x=0; x<5; ++x){
                iLED[WING[L][x]] = (lfsr() > 127)?dimValue:0;
    1858:	7e 01       	movw	r14, r28
    185a:	0d 81       	ldd	r16, Y+5	; 0x05
    185c:	10 e0       	ldi	r17, 0x00	; 0
    185e:	b1 dc       	rcall	.-1694   	; 0x11c2 <lfsr>
    1860:	87 ff       	sbrs	r24, 7
    1862:	03 c0       	rjmp	.+6      	; 0x186a <GenerateBlinks+0x206>
    1864:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1868:	01 c0       	rjmp	.+2      	; 0x186c <GenerateBlinks+0x208>
    186a:	80 e0       	ldi	r24, 0x00	; 0
    186c:	f8 01       	movw	r30, r16
    186e:	ed 53       	subi	r30, 0x3D	; 61
    1870:	f5 4c       	sbci	r31, 0xC5	; 197
    1872:	80 83       	st	Z, r24
                iLED[WING[R][x]] = (lfsr() > 127)?dimValue:0;
    1874:	21 96       	adiw	r28, 0x01	; 1
    1876:	f7 01       	movw	r30, r14
    1878:	00 81       	ld	r16, Z
    187a:	10 e0       	ldi	r17, 0x00	; 0
    187c:	a2 dc       	rcall	.-1724   	; 0x11c2 <lfsr>
    187e:	87 ff       	sbrs	r24, 7
    1880:	03 c0       	rjmp	.+6      	; 0x1888 <GenerateBlinks+0x224>
    1882:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1886:	01 c0       	rjmp	.+2      	; 0x188a <GenerateBlinks+0x226>
    1888:	80 e0       	ldi	r24, 0x00	; 0
    188a:	f8 01       	movw	r30, r16
    188c:	ed 53       	subi	r30, 0x3D	; 61
    188e:	f5 4c       	sbci	r31, 0xC5	; 197
    1890:	80 83       	st	Z, r24
            }
            break;

        //'random wing leds'
        case 7:
            for (uint8_t x=0; x<5; ++x){
    1892:	ff eb       	ldi	r31, 0xBF	; 191
    1894:	cf 34       	cpi	r28, 0x4F	; 79
    1896:	df 07       	cpc	r29, r31
    1898:	f9 f6       	brne	.-66     	; 0x1858 <GenerateBlinks+0x1f4>
    189a:	3a c0       	rjmp	.+116    	; 0x1910 <GenerateBlinks+0x2ac>
            }
            break;

        //'falling rain'
        case 8:
            if ((LedCount & 1) == 0) {
    189c:	90 fd       	sbrc	r25, 0
    189e:	38 c0       	rjmp	.+112    	; 0x1910 <GenerateBlinks+0x2ac>
    18a0:	ea e4       	ldi	r30, 0x4A	; 74
    18a2:	ff eb       	ldi	r31, 0xBF	; 191
    18a4:	8e e4       	ldi	r24, 0x4E	; 78
    18a6:	9f eb       	ldi	r25, 0xBF	; 191
    18a8:	9f 01       	movw	r18, r30
                for (uint8_t x=0; x<4; ++x){
                    iLED[WING[L][x]] = iLED[WING[L][x+1]];
    18aa:	a5 81       	ldd	r26, Z+5	; 0x05
    18ac:	b0 e0       	ldi	r27, 0x00	; 0
    18ae:	c6 81       	ldd	r28, Z+6	; 0x06
    18b0:	d0 e0       	ldi	r29, 0x00	; 0
    18b2:	cd 53       	subi	r28, 0x3D	; 61
    18b4:	d5 4c       	sbci	r29, 0xC5	; 197
    18b6:	48 81       	ld	r20, Y
    18b8:	ad 53       	subi	r26, 0x3D	; 61
    18ba:	b5 4c       	sbci	r27, 0xC5	; 197
    18bc:	4c 93       	st	X, r20
    18be:	31 96       	adiw	r30, 0x01	; 1
                    iLED[WING[R][x]] = iLED[WING[R][x+1]];
    18c0:	e9 01       	movw	r28, r18
    18c2:	a8 81       	ld	r26, Y
    18c4:	b0 e0       	ldi	r27, 0x00	; 0
    18c6:	c0 81       	ld	r28, Z
    18c8:	d0 e0       	ldi	r29, 0x00	; 0
    18ca:	cd 53       	subi	r28, 0x3D	; 61
    18cc:	d5 4c       	sbci	r29, 0xC5	; 197
    18ce:	28 81       	ld	r18, Y
    18d0:	ad 53       	subi	r26, 0x3D	; 61
    18d2:	b5 4c       	sbci	r27, 0xC5	; 197
            break;

        //'falling rain'
        case 8:
            if ((LedCount & 1) == 0) {
                for (uint8_t x=0; x<4; ++x){
    18d4:	2c 93       	st	X, r18
    18d6:	8e 17       	cp	r24, r30
    18d8:	9f 07       	cpc	r25, r31
                    iLED[WING[L][x]] = iLED[WING[L][x+1]];
                    iLED[WING[R][x]] = iLED[WING[R][x+1]];
                }
                iLED[WING[L][4]] = (lfsr() > 224)?dimValue:0;
    18da:	31 f7       	brne	.-52     	; 0x18a8 <GenerateBlinks+0x244>
    18dc:	c0 91 53 bf 	lds	r28, 0xBF53	; 0x80bf53 <__bss_end+0x8441>
    18e0:	d0 e0       	ldi	r29, 0x00	; 0
    18e2:	6f dc       	rcall	.-1826   	; 0x11c2 <lfsr>
    18e4:	81 3e       	cpi	r24, 0xE1	; 225
    18e6:	18 f0       	brcs	.+6      	; 0x18ee <GenerateBlinks+0x28a>
    18e8:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    18ec:	01 c0       	rjmp	.+2      	; 0x18f0 <GenerateBlinks+0x28c>
    18ee:	80 e0       	ldi	r24, 0x00	; 0
    18f0:	cd 53       	subi	r28, 0x3D	; 61
    18f2:	d5 4c       	sbci	r29, 0xC5	; 197
                iLED[WING[R][4]] = (lfsr() > 224)?dimValue:0;
    18f4:	88 83       	st	Y, r24
    18f6:	c0 91 4e bf 	lds	r28, 0xBF4E	; 0x80bf4e <__bss_end+0x843c>
    18fa:	d0 e0       	ldi	r29, 0x00	; 0
    18fc:	62 dc       	rcall	.-1852   	; 0x11c2 <lfsr>
    18fe:	81 3e       	cpi	r24, 0xE1	; 225
    1900:	18 f0       	brcs	.+6      	; 0x1908 <GenerateBlinks+0x2a4>
    1902:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1906:	01 c0       	rjmp	.+2      	; 0x190a <GenerateBlinks+0x2a6>
    1908:	80 e0       	ldi	r24, 0x00	; 0
    190a:	cd 53       	subi	r28, 0x3D	; 61
    190c:	d5 4c       	sbci	r29, 0xC5	; 197
    190e:	88 83       	st	Y, r24
        // No LED action, game will do it's own LED magic
        case 31:
        default:
            break;
    }
}
    1910:	df 91       	pop	r29
    1912:	cf 91       	pop	r28
    1914:	1f 91       	pop	r17
    1916:	0f 91       	pop	r16
    1918:	ff 90       	pop	r15
    191a:	ef 90       	pop	r14
    191c:	08 95       	ret

0000191e <GenerateAudio>:


uint8_t GenerateAudio(){
    191e:	0f 93       	push	r16
    1920:	1f 93       	push	r17
    1922:	cf 93       	push	r28

    if (auIn < HPLVL) {
    1924:	80 91 c2 3a 	lds	r24, 0x3AC2	; 0x803ac2 <auIn>
    1928:	89 31       	cpi	r24, 0x19	; 25
    192a:	08 f0       	brcs	.+2      	; 0x192e <GenerateAudio+0x10>
    192c:	27 c1       	rjmp	.+590    	; 0x1b7c <GenerateAudio+0x25e>

        detHdPh = 1;
    192e:	c1 e0       	ldi	r28, 0x01	; 1
    1930:	c0 93 bf 3a 	sts	0x3ABF, r28	; 0x803abf <detHdPh>

        //Audio for text adventure
        if ((effect&0xff00)==0) {
    1934:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <effect>
    1938:	90 91 3b 38 	lds	r25, 0x383B	; 0x80383b <effect+0x1>
    193c:	88 27       	eor	r24, r24
    193e:	89 2b       	or	r24, r25
    1940:	09 f0       	breq	.+2      	; 0x1944 <GenerateAudio+0x26>
    1942:	bf c0       	rjmp	.+382    	; 0x1ac2 <GenerateAudio+0x1a4>

            //Silence
            if ((effect&0xE0)==0){
    1944:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <effect>
    1948:	90 91 3b 38 	lds	r25, 0x383B	; 0x80383b <effect+0x1>
    194c:	80 7e       	andi	r24, 0xE0	; 224
    194e:	99 27       	eor	r25, r25
    1950:	89 2b       	or	r24, r25
    1952:	31 f4       	brne	.+12     	; 0x1960 <GenerateAudio+0x42>
                auRepAddr = &zero;
    1954:	89 e3       	ldi	r24, 0x39	; 57
    1956:	98 e3       	ldi	r25, 0x38	; 56
    1958:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    195c:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
            }

            //Bad (buzzer)
            if ((effect&0xE0)==32){
    1960:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <effect>
    1964:	90 91 3b 38 	lds	r25, 0x383B	; 0x80383b <effect+0x1>
    1968:	80 7e       	andi	r24, 0xE0	; 224
    196a:	99 27       	eor	r25, r25
    196c:	80 97       	sbiw	r24, 0x20	; 32
    196e:	09 f0       	breq	.+2      	; 0x1972 <GenerateAudio+0x54>
    1970:	59 c0       	rjmp	.+178    	; 0x1a24 <GenerateAudio+0x106>
                static uint8_t auBuffer[17] = {1, 255, 128, 128, 192, 255, 64, 255, 192, 128, 64, 1, 192, 1, 64, 128, 0}; 
                static uint8_t loudness, duration, start;
                floatSpeed(1, 0x2000, 0x2200);
    1972:	40 e0       	ldi	r20, 0x00	; 0
    1974:	52 e2       	ldi	r21, 0x22	; 34
    1976:	60 e0       	ldi	r22, 0x00	; 0
    1978:	70 e2       	ldi	r23, 0x20	; 32
    197a:	81 e0       	ldi	r24, 0x01	; 1
    197c:	41 dc       	rcall	.-1918   	; 0x1200 <floatSpeed>
                auBuffer[2] = floatAround(0x80, 5, 0x01, 0x00);
    197e:	20 e0       	ldi	r18, 0x00	; 0
    1980:	41 e0       	ldi	r20, 0x01	; 1
    1982:	65 e0       	ldi	r22, 0x05	; 5
    1984:	80 e8       	ldi	r24, 0x80	; 128
    1986:	6e dc       	rcall	.-1828   	; 0x1264 <floatAround>
    1988:	80 93 13 38 	sts	0x3813, r24	; 0x803813 <auBuffer.4022+0x2>

                if (buttonMark) {
    198c:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <buttonMark>
    1990:	88 23       	and	r24, r24
    1992:	09 f4       	brne	.+2      	; 0x1996 <GenerateAudio+0x78>
    1994:	47 c0       	rjmp	.+142    	; 0x1a24 <GenerateAudio+0x106>
                    if (start == 0) {
    1996:	80 91 58 38 	lds	r24, 0x3858	; 0x803858 <start.4025>
    199a:	81 11       	cpse	r24, r1
    199c:	15 c0       	rjmp	.+42     	; 0x19c8 <GenerateAudio+0xaa>
                        duration = 4;
    199e:	84 e0       	ldi	r24, 0x04	; 4
    19a0:	80 93 57 38 	sts	0x3857, r24	; 0x803857 <duration.4024>
                        loudness = 0xff;
    19a4:	8f ef       	ldi	r24, 0xFF	; 255
    19a6:	80 93 56 38 	sts	0x3856, r24	; 0x803856 <loudness.4023>
                        TCB1_CCMP = 0x2000;
    19aa:	80 e0       	ldi	r24, 0x00	; 0
    19ac:	90 e2       	ldi	r25, 0x20	; 32
    19ae:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    19b2:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
                        auRepAddr = &auBuffer[0];
    19b6:	81 e1       	ldi	r24, 0x11	; 17
    19b8:	98 e3       	ldi	r25, 0x38	; 56
    19ba:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    19be:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
                        start = 1;
    19c2:	81 e0       	ldi	r24, 0x01	; 1
    19c4:	80 93 58 38 	sts	0x3858, r24	; 0x803858 <start.4025>
                    }

                    if (loudness) {
    19c8:	80 91 56 38 	lds	r24, 0x3856	; 0x803856 <loudness.4023>
    19cc:	88 23       	and	r24, r24
    19ce:	69 f0       	breq	.+26     	; 0x19ea <GenerateAudio+0xcc>
                        auVolume = loudness;
    19d0:	80 93 b6 3a 	sts	0x3AB6, r24	; 0x803ab6 <auVolume>
                        if (duration) duration--; else loudness >>= 1;
    19d4:	90 91 57 38 	lds	r25, 0x3857	; 0x803857 <duration.4024>
    19d8:	99 23       	and	r25, r25
    19da:	21 f0       	breq	.+8      	; 0x19e4 <GenerateAudio+0xc6>
    19dc:	91 50       	subi	r25, 0x01	; 1
    19de:	90 93 57 38 	sts	0x3857, r25	; 0x803857 <duration.4024>
    19e2:	03 c0       	rjmp	.+6      	; 0x19ea <GenerateAudio+0xcc>
    19e4:	86 95       	lsr	r24
    19e6:	80 93 56 38 	sts	0x3856, r24	; 0x803856 <loudness.4023>
                    } 

                    if (loudness == 0) {
    19ea:	80 91 56 38 	lds	r24, 0x3856	; 0x803856 <loudness.4023>
    19ee:	81 11       	cpse	r24, r1
    19f0:	19 c0       	rjmp	.+50     	; 0x1a24 <GenerateAudio+0x106>
                        effect &= 0x1f;
    19f2:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <effect>
    19f6:	90 91 3b 38 	lds	r25, 0x383B	; 0x80383b <effect+0x1>
    19fa:	8f 71       	andi	r24, 0x1F	; 31
    19fc:	99 27       	eor	r25, r25
    19fe:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <effect>
    1a02:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <effect+0x1>
                        auRepAddr = &zero;
    1a06:	89 e3       	ldi	r24, 0x39	; 57
    1a08:	98 e3       	ldi	r25, 0x38	; 56
    1a0a:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    1a0e:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
                        auSmpAddr = &zero;
    1a12:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <auSmpAddr>
    1a16:	90 93 06 38 	sts	0x3806, r25	; 0x803806 <auSmpAddr+0x1>
                        auVolume = 0xff;
    1a1a:	8f ef       	ldi	r24, 0xFF	; 255
    1a1c:	80 93 b6 3a 	sts	0x3AB6, r24	; 0x803ab6 <auVolume>
                        start = 0;
    1a20:	10 92 58 38 	sts	0x3858, r1	; 0x803858 <start.4025>
                    }
                }
            }

            //Good (bell)
            if ((effect&0xE0)==64){
    1a24:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <effect>
    1a28:	90 91 3b 38 	lds	r25, 0x383B	; 0x80383b <effect+0x1>
                //auBuffer = 
            }

            //Rain storm with whistling wind
            if ((effect&0xE0)==96){
    1a2c:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <effect>
    1a30:	90 91 3b 38 	lds	r25, 0x383B	; 0x80383b <effect+0x1>
    1a34:	80 7e       	andi	r24, 0xE0	; 224
    1a36:	99 27       	eor	r25, r25
    1a38:	80 36       	cpi	r24, 0x60	; 96
    1a3a:	91 05       	cpc	r25, r1
    1a3c:	a9 f5       	brne	.+106    	; 0x1aa8 <GenerateAudio+0x18a>
                static uint8_t auBuffer[7];
                auBuffer[6]= 0;        
    1a3e:	10 92 55 38 	sts	0x3855, r1	; 0x803855 <auBuffer.4026+0x6>
                auRepAddr = &auBuffer[0];
    1a42:	8f e4       	ldi	r24, 0x4F	; 79
    1a44:	98 e3       	ldi	r25, 0x38	; 56
    1a46:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    1a4a:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
    1a4e:	8c 01       	movw	r16, r24

                //Noise is to be generated fast, outside of buttonMark loop
                for (uint8_t x=1; x<6; ++x){
    1a50:	c1 e0       	ldi	r28, 0x01	; 1
                    if ((x>0) && (x!=3)) auBuffer[x] = floatAround(0x80, 5, 0x01, 0x00);
    1a52:	c3 30       	cpi	r28, 0x03	; 3
    1a54:	39 f0       	breq	.+14     	; 0x1a64 <GenerateAudio+0x146>
    1a56:	20 e0       	ldi	r18, 0x00	; 0
    1a58:	41 e0       	ldi	r20, 0x01	; 1
    1a5a:	65 e0       	ldi	r22, 0x05	; 5
    1a5c:	80 e8       	ldi	r24, 0x80	; 128
    1a5e:	02 dc       	rcall	.-2044   	; 0x1264 <floatAround>
    1a60:	f8 01       	movw	r30, r16
    1a62:	81 83       	std	Z+1, r24	; 0x01
                static uint8_t auBuffer[7];
                auBuffer[6]= 0;        
                auRepAddr = &auBuffer[0];

                //Noise is to be generated fast, outside of buttonMark loop
                for (uint8_t x=1; x<6; ++x){
    1a64:	cf 5f       	subi	r28, 0xFF	; 255
    1a66:	0f 5f       	subi	r16, 0xFF	; 255
    1a68:	1f 4f       	sbci	r17, 0xFF	; 255
    1a6a:	c6 30       	cpi	r28, 0x06	; 6
    1a6c:	91 f7       	brne	.-28     	; 0x1a52 <GenerateAudio+0x134>
                    if ((x>0) && (x!=3)) auBuffer[x] = floatAround(0x80, 5, 0x01, 0x00);
                }

                if (buttonMark){
    1a6e:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <buttonMark>
    1a72:	88 23       	and	r24, r24
    1a74:	c9 f0       	breq	.+50     	; 0x1aa8 <GenerateAudio+0x18a>
                    //"Floating" speed for howl (and noise, but that's hardly audible)
                    floatSpeed(5, 0x0280, 0x0400);
    1a76:	40 e0       	ldi	r20, 0x00	; 0
    1a78:	54 e0       	ldi	r21, 0x04	; 4
    1a7a:	60 e8       	ldi	r22, 0x80	; 128
    1a7c:	72 e0       	ldi	r23, 0x02	; 2
    1a7e:	85 e0       	ldi	r24, 0x05	; 5
    1a80:	bf db       	rcall	.-2178   	; 0x1200 <floatSpeed>
            
                    //"Floating" volume and wind howl during 8 bit rainstorm needs some randomness
                    auVolume = floatAround(auVolume, 2, 0x10, 0xA0);
    1a82:	80 91 b6 3a 	lds	r24, 0x3AB6	; 0x803ab6 <auVolume>
    1a86:	20 ea       	ldi	r18, 0xA0	; 160
    1a88:	40 e1       	ldi	r20, 0x10	; 16
    1a8a:	62 e0       	ldi	r22, 0x02	; 2
    1a8c:	eb db       	rcall	.-2090   	; 0x1264 <floatAround>
    1a8e:	80 93 b6 3a 	sts	0x3AB6, r24	; 0x803ab6 <auVolume>
                    auBuffer[0] = floatAround(auBuffer[0], 2, 0x70, 0x90);
    1a92:	20 e9       	ldi	r18, 0x90	; 144
    1a94:	40 e7       	ldi	r20, 0x70	; 112
    1a96:	62 e0       	ldi	r22, 0x02	; 2
    1a98:	80 91 4f 38 	lds	r24, 0x384F	; 0x80384f <auBuffer.4026>
    1a9c:	e3 db       	rcall	.-2106   	; 0x1264 <floatAround>
    1a9e:	80 93 4f 38 	sts	0x384F, r24	; 0x80384f <auBuffer.4026>
                    auBuffer[3] = 0xFF-auBuffer[0];  //Inverse value of wind[0] produces a whistle
    1aa2:	80 95       	com	r24
    1aa4:	80 93 52 38 	sts	0x3852, r24	; 0x803852 <auBuffer.4026+0x3>
                }
            }

            //Footsteps
            if ((effect&0xE0)==128){
    1aa8:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <effect>
    1aac:	90 91 3b 38 	lds	r25, 0x383B	; 0x80383b <effect+0x1>

            }

            //
            if ((effect&0xE0)==160){
    1ab0:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <effect>
    1ab4:	90 91 3b 38 	lds	r25, 0x383B	; 0x80383b <effect+0x1>

            }

            //
            if ((effect&0xE0)==192){
    1ab8:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <effect>
    1abc:	90 91 3b 38 	lds	r25, 0x383B	; 0x80383b <effect+0x1>
    1ac0:	5f c0       	rjmp	.+190    	; 0x1b80 <GenerateAudio+0x262>
            }

            //
            else {
            }
        } else if ((effect&0xff00)==0x0100) {
    1ac2:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <effect>
    1ac6:	90 91 3b 38 	lds	r25, 0x383B	; 0x80383b <effect+0x1>
    1aca:	88 27       	eor	r24, r24
    1acc:	81 15       	cp	r24, r1
    1ace:	91 40       	sbci	r25, 0x01	; 1
    1ad0:	09 f0       	breq	.+2      	; 0x1ad4 <GenerateAudio+0x1b6>
    1ad2:	56 c0       	rjmp	.+172    	; 0x1b80 <GenerateAudio+0x262>
            if ((effect&0xE0) <= 0x90) {
    1ad4:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <effect>
    1ad8:	90 91 3b 38 	lds	r25, 0x383B	; 0x80383b <effect+0x1>
    1adc:	80 7e       	andi	r24, 0xE0	; 224
    1ade:	99 27       	eor	r25, r25
    1ae0:	81 39       	cpi	r24, 0x91	; 145
    1ae2:	91 05       	cpc	r25, r1
    1ae4:	08 f0       	brcs	.+2      	; 0x1ae8 <GenerateAudio+0x1ca>
    1ae6:	4c c0       	rjmp	.+152    	; 0x1b80 <GenerateAudio+0x262>
                
                static uint8_t auBuffer[3] = {255, 1, 0};
                static uint8_t duration, start;
                uint16_t freq = ((effect&0xE0)+1)<<6;
    1ae8:	60 91 3a 38 	lds	r22, 0x383A	; 0x80383a <effect>
    1aec:	70 91 3b 38 	lds	r23, 0x383B	; 0x80383b <effect+0x1>
    1af0:	60 7e       	andi	r22, 0xE0	; 224
    1af2:	77 27       	eor	r23, r23
    1af4:	6f 5f       	subi	r22, 0xFF	; 255
    1af6:	7f 4f       	sbci	r23, 0xFF	; 255
    1af8:	86 e0       	ldi	r24, 0x06	; 6
    1afa:	66 0f       	add	r22, r22
    1afc:	77 1f       	adc	r23, r23
    1afe:	8a 95       	dec	r24
                floatSpeed(1, freq+0x0200, freq+0x0300);
    1b00:	e1 f7       	brne	.-8      	; 0x1afa <GenerateAudio+0x1dc>
    1b02:	ab 01       	movw	r20, r22
    1b04:	5d 5f       	subi	r21, 0xFD	; 253
    1b06:	7e 5f       	subi	r23, 0xFE	; 254
    1b08:	81 e0       	ldi	r24, 0x01	; 1
    1b0a:	7a db       	rcall	.-2316   	; 0x1200 <floatSpeed>
                //auBuffer[] = floatAround(0x80, 5, 0x01, 0x00);

                if (buttonMark) {
    1b0c:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <buttonMark>
    1b10:	88 23       	and	r24, r24
    1b12:	b1 f1       	breq	.+108    	; 0x1b80 <GenerateAudio+0x262>
                    if (start == 0) {
    1b14:	80 91 4e 38 	lds	r24, 0x384E	; 0x80384e <start.4033>
    1b18:	81 11       	cpse	r24, r1
    1b1a:	0e c0       	rjmp	.+28     	; 0x1b38 <GenerateAudio+0x21a>
                        duration = 3;
    1b1c:	83 e0       	ldi	r24, 0x03	; 3
    1b1e:	80 93 4d 38 	sts	0x384D, r24	; 0x80384d <duration.4032>
                        auRepAddr = &auBuffer[0];
    1b22:	8e e0       	ldi	r24, 0x0E	; 14
    1b24:	98 e3       	ldi	r25, 0x38	; 56
    1b26:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    1b2a:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
                        auVolume = 255;
    1b2e:	8f ef       	ldi	r24, 0xFF	; 255
    1b30:	80 93 b6 3a 	sts	0x3AB6, r24	; 0x803ab6 <auVolume>
                        start = 1;
    1b34:	c0 93 4e 38 	sts	0x384E, r28	; 0x80384e <start.4033>
                    }   if (duration == 0) {
    1b38:	80 91 4d 38 	lds	r24, 0x384D	; 0x80384d <duration.4032>
    1b3c:	81 11       	cpse	r24, r1
    1b3e:	1a c0       	rjmp	.+52     	; 0x1b74 <GenerateAudio+0x256>
                        effect &= 0x1f;
    1b40:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <effect>
    1b44:	90 91 3b 38 	lds	r25, 0x383B	; 0x80383b <effect+0x1>
    1b48:	8f 71       	andi	r24, 0x1F	; 31
    1b4a:	99 27       	eor	r25, r25
    1b4c:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <effect>
    1b50:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <effect+0x1>
                        auRepAddr = &zero;
    1b54:	89 e3       	ldi	r24, 0x39	; 57
    1b56:	98 e3       	ldi	r25, 0x38	; 56
    1b58:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    1b5c:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
                        auSmpAddr = &zero;
    1b60:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <auSmpAddr>
    1b64:	90 93 06 38 	sts	0x3806, r25	; 0x803806 <auSmpAddr+0x1>
                        auVolume = 0xff;
    1b68:	8f ef       	ldi	r24, 0xFF	; 255
    1b6a:	80 93 b6 3a 	sts	0x3AB6, r24	; 0x803ab6 <auVolume>
                        start = 0;
    1b6e:	10 92 4e 38 	sts	0x384E, r1	; 0x80384e <start.4033>
    1b72:	06 c0       	rjmp	.+12     	; 0x1b80 <GenerateAudio+0x262>
                    } else duration--;
    1b74:	81 50       	subi	r24, 0x01	; 1
    1b76:	80 93 4d 38 	sts	0x384D, r24	; 0x80384d <duration.4032>
    1b7a:	02 c0       	rjmp	.+4      	; 0x1b80 <GenerateAudio+0x262>
                }
            }
        }
    } else {
        detHdPh = 0;
    1b7c:	10 92 bf 3a 	sts	0x3ABF, r1	; 0x803abf <detHdPh>
    }
    return buttonMark;
    1b80:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <buttonMark>
}
    1b84:	cf 91       	pop	r28
    1b86:	1f 91       	pop	r17
    1b88:	0f 91       	pop	r16
    1b8a:	08 95       	ret

00001b8c <getClock>:

uint16_t getClock() {
    return 60 * minuteMark + (RTC_CNT>>9);
    1b8c:	20 91 43 38 	lds	r18, 0x3843	; 0x803843 <minuteMark>
    1b90:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
    1b94:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
    1b98:	89 2f       	mov	r24, r25
    1b9a:	99 27       	eor	r25, r25
    1b9c:	86 95       	lsr	r24
}
    1b9e:	3c e3       	ldi	r19, 0x3C	; 60
    1ba0:	23 9f       	mul	r18, r19
    1ba2:	80 0d       	add	r24, r0
    1ba4:	91 1d       	adc	r25, r1
    1ba6:	11 24       	eor	r1, r1
    1ba8:	08 95       	ret

00001baa <idleTimeout>:

uint8_t idleTimeout(uint16_t lastActive, uint16_t maxIdle) {
    1baa:	0f 93       	push	r16
    1bac:	1f 93       	push	r17
    1bae:	cf 93       	push	r28
    1bb0:	df 93       	push	r29
    1bb2:	8c 01       	movw	r16, r24
    1bb4:	eb 01       	movw	r28, r22
    uint16_t curClock;

    curClock = getClock();
    1bb6:	ea df       	rcall	.-44     	; 0x1b8c <getClock>
    1bb8:	9c 01       	movw	r18, r24
    if (curClock < lastActive)
    1bba:	80 17       	cp	r24, r16
    1bbc:	91 07       	cpc	r25, r17
    1bbe:	08 f4       	brcc	.+2      	; 0x1bc2 <idleTimeout+0x18>
        curClock += 256 * 60;
    1bc0:	34 5c       	subi	r19, 0xC4	; 196

    return (curClock > (lastActive + maxIdle));
    1bc2:	c0 0f       	add	r28, r16
    1bc4:	d1 1f       	adc	r29, r17
    1bc6:	81 e0       	ldi	r24, 0x01	; 1
    1bc8:	c2 17       	cp	r28, r18
    1bca:	d3 07       	cpc	r29, r19
    1bcc:	08 f0       	brcs	.+2      	; 0x1bd0 <idleTimeout+0x26>
    1bce:	80 e0       	ldi	r24, 0x00	; 0
}
    1bd0:	df 91       	pop	r29
    1bd2:	cf 91       	pop	r28
    1bd4:	1f 91       	pop	r17
    1bd6:	0f 91       	pop	r16
    1bd8:	08 95       	ret

00001bda <SelfTest>:

uint8_t SelfTest(){
    1bda:	df 92       	push	r13
    1bdc:	ef 92       	push	r14
    1bde:	ff 92       	push	r15
    1be0:	0f 93       	push	r16
    1be2:	1f 93       	push	r17
    1be4:	cf 93       	push	r28
    1be6:	df 93       	push	r29
    1be8:	00 d0       	rcall	.+0      	; 0x1bea <SelfTest+0x10>
    1bea:	00 d0       	rcall	.+0      	; 0x1bec <SelfTest+0x12>
    1bec:	cd b7       	in	r28, 0x3d	; 61
    1bee:	de b7       	in	r29, 0x3e	; 62
    uint8_t tstVal[4] = {0x01, 0};
    1bf0:	19 82       	std	Y+1, r1	; 0x01
    1bf2:	1a 82       	std	Y+2, r1	; 0x02
    1bf4:	1b 82       	std	Y+3, r1	; 0x03
    1bf6:	1c 82       	std	Y+4, r1	; 0x04
    1bf8:	81 e0       	ldi	r24, 0x01	; 1
    1bfa:	89 83       	std	Y+1, r24	; 0x01
    1bfc:	a8 e5       	ldi	r26, 0x58	; 88
    1bfe:	bf eb       	ldi	r27, 0xBF	; 191

    //Red HCKR all on 100%
    for (uint8_t x=0; x<6; ++x) {
        iLED[HCKR[R][x]] = 0xff;
    1c00:	8f ef       	ldi	r24, 0xFF	; 255
    1c02:	ed 91       	ld	r30, X+
    1c04:	f0 e0       	ldi	r31, 0x00	; 0
    1c06:	ed 53       	subi	r30, 0x3D	; 61
    1c08:	f5 4c       	sbci	r31, 0xC5	; 197
    1c0a:	80 83       	st	Z, r24

uint8_t SelfTest(){
    uint8_t tstVal[4] = {0x01, 0};

    //Red HCKR all on 100%
    for (uint8_t x=0; x<6; ++x) {
    1c0c:	2f eb       	ldi	r18, 0xBF	; 191
    1c0e:	ae 35       	cpi	r26, 0x5E	; 94
    1c10:	b2 07       	cpc	r27, r18
    1c12:	b9 f7       	brne	.-18     	; 0x1c02 <SelfTest+0x28>
        iLED[HCKR[R][x]] = 0xff;
    }

    //Audio in/out
    SelectAuIn();
    1c14:	99 da       	rcall	.-2766   	; 0x1148 <SelectAuIn>
    auRepAddr = &tstVal[0];
    while (auIn > 0x04) ;
    1c16:	80 91 c2 3a 	lds	r24, 0x3AC2	; 0x803ac2 <auIn>
    1c1a:	85 30       	cpi	r24, 0x05	; 5
    1c1c:	e0 f7       	brcc	.-8      	; 0x1c16 <SelfTest+0x3c>
    tstVal[0] = 0xff;
    while (auIn < 0x04) ;
    1c1e:	80 91 c2 3a 	lds	r24, 0x3AC2	; 0x803ac2 <auIn>
    1c22:	84 30       	cpi	r24, 0x04	; 4
    1c24:	e0 f3       	brcs	.-8      	; 0x1c1e <SelfTest+0x44>
    iLED[HCKR[R][0]] = 0x00;
    1c26:	e0 91 58 bf 	lds	r30, 0xBF58	; 0x80bf58 <__bss_end+0x8446>
    1c2a:	f0 e0       	ldi	r31, 0x00	; 0
    1c2c:	ed 53       	subi	r30, 0x3D	; 61
    1c2e:	f5 4c       	sbci	r31, 0xC5	; 197
    1c30:	10 82       	st	Z, r1
    iLED[HCKR[G][0]] = 0xff;
    1c32:	e0 91 5e bf 	lds	r30, 0xBF5E	; 0x80bf5e <__bss_end+0x844c>
    1c36:	f0 e0       	ldi	r31, 0x00	; 0
    1c38:	ed 53       	subi	r30, 0x3D	; 61
    1c3a:	f5 4c       	sbci	r31, 0xC5	; 197
    1c3c:	8f ef       	ldi	r24, 0xFF	; 255
    1c3e:	80 83       	st	Z, r24
    auRepAddr = &zero;
    1c40:	89 e3       	ldi	r24, 0x39	; 57
    1c42:	98 e3       	ldi	r25, 0x38	; 56
    1c44:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    1c48:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>

    //Light sensor
    tstVal[0] = adcPhot&0xff;
    1c4c:	80 91 bd 3a 	lds	r24, 0x3ABD	; 0x803abd <adcPhot>
    1c50:	90 91 be 3a 	lds	r25, 0x3ABE	; 0x803abe <adcPhot+0x1>
    while (tstVal[0] == (adcPhot&0xff)) ;
    1c54:	99 27       	eor	r25, r25
    1c56:	20 91 bd 3a 	lds	r18, 0x3ABD	; 0x803abd <adcPhot>
    1c5a:	30 91 be 3a 	lds	r19, 0x3ABE	; 0x803abe <adcPhot+0x1>
    1c5e:	33 27       	eor	r19, r19
    1c60:	28 17       	cp	r18, r24
    1c62:	39 07       	cpc	r19, r25
    1c64:	c1 f3       	breq	.-16     	; 0x1c56 <SelfTest+0x7c>
    iLED[HCKR[R][1]] = 0x00;
    1c66:	e0 91 59 bf 	lds	r30, 0xBF59	; 0x80bf59 <__bss_end+0x8447>
    1c6a:	f0 e0       	ldi	r31, 0x00	; 0
    1c6c:	ed 53       	subi	r30, 0x3D	; 61
    1c6e:	f5 4c       	sbci	r31, 0xC5	; 197
    1c70:	10 82       	st	Z, r1
    iLED[HCKR[G][1]] = 0xff;
    1c72:	e0 91 5f bf 	lds	r30, 0xBF5F	; 0x80bf5f <__bss_end+0x844d>
    1c76:	f0 e0       	ldi	r31, 0x00	; 0
    1c78:	ed 53       	subi	r30, 0x3D	; 61
    1c7a:	f5 4c       	sbci	r31, 0xC5	; 197
    1c7c:	8f ef       	ldi	r24, 0xFF	; 255
    1c7e:	80 83       	st	Z, r24

    //Magnet
    tstVal[0] = adcHall&0xff;
    1c80:	80 91 bb 3a 	lds	r24, 0x3ABB	; 0x803abb <adcHall>
    1c84:	90 91 bc 3a 	lds	r25, 0x3ABC	; 0x803abc <adcHall+0x1>
    1c88:	89 83       	std	Y+1, r24	; 0x01
    while (tstVal[0] == (adcHall&0xff)) ;
    1c8a:	99 27       	eor	r25, r25
    1c8c:	20 91 bb 3a 	lds	r18, 0x3ABB	; 0x803abb <adcHall>
    1c90:	30 91 bc 3a 	lds	r19, 0x3ABC	; 0x803abc <adcHall+0x1>
    1c94:	33 27       	eor	r19, r19
    1c96:	28 17       	cp	r18, r24
    1c98:	39 07       	cpc	r19, r25
    1c9a:	c1 f3       	breq	.-16     	; 0x1c8c <SelfTest+0xb2>
    iLED[HCKR[R][2]] = 0x00;
    1c9c:	e0 91 5a bf 	lds	r30, 0xBF5A	; 0x80bf5a <__bss_end+0x8448>
    1ca0:	f0 e0       	ldi	r31, 0x00	; 0
    1ca2:	ed 53       	subi	r30, 0x3D	; 61
    1ca4:	f5 4c       	sbci	r31, 0xC5	; 197
    1ca6:	10 82       	st	Z, r1
    iLED[HCKR[G][2]] = 0xff;
    1ca8:	e0 91 60 bf 	lds	r30, 0xBF60	; 0x80bf60 <__bss_end+0x844e>
    1cac:	f0 e0       	ldi	r31, 0x00	; 0
    1cae:	ed 53       	subi	r30, 0x3D	; 61
    1cb0:	f5 4c       	sbci	r31, 0xC5	; 197
    1cb2:	8f ef       	ldi	r24, 0xFF	; 255

    //Temperature
    SelectTSens();
    1cb4:	80 83       	st	Z, r24
    1cb6:	39 da       	rcall	.-2958   	; 0x112a <SelectTSens>
    tstVal[0] = adcTemp&0xff;
    1cb8:	80 91 ed 3a 	lds	r24, 0x3AED	; 0x803aed <adcTemp>
    1cbc:	90 91 ee 3a 	lds	r25, 0x3AEE	; 0x803aee <adcTemp+0x1>
    1cc0:	89 83       	std	Y+1, r24	; 0x01
    while (tstVal[0] == (adcTemp&0xff)) ;
    1cc2:	99 27       	eor	r25, r25
    1cc4:	20 91 ed 3a 	lds	r18, 0x3AED	; 0x803aed <adcTemp>
    1cc8:	30 91 ee 3a 	lds	r19, 0x3AEE	; 0x803aee <adcTemp+0x1>
    1ccc:	33 27       	eor	r19, r19
    1cce:	28 17       	cp	r18, r24
    1cd0:	39 07       	cpc	r19, r25
    1cd2:	c1 f3       	breq	.-16     	; 0x1cc4 <SelfTest+0xea>
    iLED[HCKR[R][3]] = 0x00;
    1cd4:	e0 91 5b bf 	lds	r30, 0xBF5B	; 0x80bf5b <__bss_end+0x8449>
    1cd8:	f0 e0       	ldi	r31, 0x00	; 0
    1cda:	ed 53       	subi	r30, 0x3D	; 61
    1cdc:	f5 4c       	sbci	r31, 0xC5	; 197
    1cde:	10 82       	st	Z, r1
    iLED[HCKR[G][3]] = 0xff;
    1ce0:	e0 91 61 bf 	lds	r30, 0xBF61	; 0x80bf61 <__bss_end+0x844f>
    1ce4:	f0 e0       	ldi	r31, 0x00	; 0
    1ce6:	ed 53       	subi	r30, 0x3D	; 61
    1ce8:	f5 4c       	sbci	r31, 0xC5	; 197
    1cea:	8f ef       	ldi	r24, 0xFF	; 255
    1cec:	80 83       	st	Z, r24

    //Buttons (none pressed / shorted)
    while ((adcBtns>>4) < 200) ;
    1cee:	80 91 b7 3a 	lds	r24, 0x3AB7	; 0x803ab7 <adcBtns>
    1cf2:	90 91 b8 3a 	lds	r25, 0x3AB8	; 0x803ab8 <adcBtns+0x1>
    1cf6:	80 38       	cpi	r24, 0x80	; 128
    1cf8:	9c 40       	sbci	r25, 0x0C	; 12
    1cfa:	c8 f3       	brcs	.-14     	; 0x1cee <SelfTest+0x114>
    iLED[HCKR[R][4]] = 0x00;
    1cfc:	e0 90 5c bf 	lds	r14, 0xBF5C	; 0x80bf5c <__bss_end+0x844a>
    1d00:	8e 2d       	mov	r24, r14
    1d02:	90 e0       	ldi	r25, 0x00	; 0
    1d04:	fc 01       	movw	r30, r24
    1d06:	ed 53       	subi	r30, 0x3D	; 61
    1d08:	f5 4c       	sbci	r31, 0xC5	; 197
    1d0a:	7f 01       	movw	r14, r30
    1d0c:	10 82       	st	Z, r1
    iLED[HCKR[G][4]] = 0xff;
    1d0e:	00 91 62 bf 	lds	r16, 0xBF62	; 0x80bf62 <__bss_end+0x8450>
    1d12:	10 e0       	ldi	r17, 0x00	; 0
    1d14:	0d 53       	subi	r16, 0x3D	; 61
    1d16:	15 4c       	sbci	r17, 0xC5	; 197
    1d18:	dd 24       	eor	r13, r13
    1d1a:	da 94       	dec	r13
    1d1c:	f8 01       	movw	r30, r16
    1d1e:	d0 82       	st	Z, r13
        0x3CCD              Level 6, open_acl=0
        0x3CCE              Level 6, action_acl=192
        0x3CCF              Level 6, action_mask=20
    */

    ExtEERead(0x3CCC, 4, 0, &tstVal[0]);
    1d20:	9e 01       	movw	r18, r28
    1d22:	2f 5f       	subi	r18, 0xFF	; 255
    1d24:	3f 4f       	sbci	r19, 0xFF	; 255
    1d26:	40 e0       	ldi	r20, 0x00	; 0
    1d28:	64 e0       	ldi	r22, 0x04	; 4
    1d2a:	8c ec       	ldi	r24, 0xCC	; 204
    1d2c:	9c e3       	ldi	r25, 0x3C	; 60
    1d2e:	a9 d9       	rcall	.-3246   	; 0x1082 <ExtEERead>
    if ((tstVal[0] != 63) || (tstVal[1] != 0) || (tstVal[2] != 192) || (tstVal[3] != 20)){
    1d30:	89 81       	ldd	r24, Y+1	; 0x01
    1d32:	8f 33       	cpi	r24, 0x3F	; 63
    1d34:	49 f4       	brne	.+18     	; 0x1d48 <SelfTest+0x16e>
    1d36:	8a 81       	ldd	r24, Y+2	; 0x02
    1d38:	81 11       	cpse	r24, r1
    1d3a:	06 c0       	rjmp	.+12     	; 0x1d48 <SelfTest+0x16e>
    1d3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d3e:	80 3c       	cpi	r24, 0xC0	; 192
    1d40:	19 f4       	brne	.+6      	; 0x1d48 <SelfTest+0x16e>
    1d42:	8c 81       	ldd	r24, Y+4	; 0x04
    1d44:	84 31       	cpi	r24, 0x14	; 20
    1d46:	09 f0       	breq	.+2      	; 0x1d4a <SelfTest+0x170>
    1d48:	ff cf       	rjmp	.-2      	; 0x1d48 <SelfTest+0x16e>
        while(1);
    } else {
        iLED[HCKR[R][4]] = 0x00;
    1d4a:	f7 01       	movw	r30, r14
    1d4c:	10 82       	st	Z, r1
        iLED[HCKR[G][4]] = 0xff;
    1d4e:	f8 01       	movw	r30, r16
    1d50:	d0 82       	st	Z, r13
    1d52:	80 e0       	ldi	r24, 0x00	; 0
    1d54:	90 e0       	ldi	r25, 0x00	; 0
    }

        //All LEDs off
    for (uint8_t x=0; x<40; ++x) {
        iLED[x]=0;
    1d56:	fc 01       	movw	r30, r24
    1d58:	ed 53       	subi	r30, 0x3D	; 61
    1d5a:	f5 4c       	sbci	r31, 0xC5	; 197
    1d5c:	10 82       	st	Z, r1
    1d5e:	01 96       	adiw	r24, 0x01	; 1
        iLED[HCKR[R][4]] = 0x00;
        iLED[HCKR[G][4]] = 0xff;
    }

        //All LEDs off
    for (uint8_t x=0; x<40; ++x) {
    1d60:	88 32       	cpi	r24, 0x28	; 40
    1d62:	91 05       	cpc	r25, r1
    1d64:	c1 f7       	brne	.-16     	; 0x1d56 <SelfTest+0x17c>
    1d66:	10 e0       	ldi	r17, 0x00	; 0
        iLED[x]=0;
    }

    for(uint8_t x=0; x<((adcPhot+adcTemp)&0x3f); ++x) lfsr();
    1d68:	40 91 bd 3a 	lds	r20, 0x3ABD	; 0x803abd <adcPhot>
    1d6c:	50 91 be 3a 	lds	r21, 0x3ABE	; 0x803abe <adcPhot+0x1>
    1d70:	80 91 ed 3a 	lds	r24, 0x3AED	; 0x803aed <adcTemp>
    1d74:	90 91 ee 3a 	lds	r25, 0x3AEE	; 0x803aee <adcTemp+0x1>
    1d78:	21 2f       	mov	r18, r17
    1d7a:	30 e0       	ldi	r19, 0x00	; 0
    1d7c:	84 0f       	add	r24, r20
    1d7e:	95 1f       	adc	r25, r21
    1d80:	8f 73       	andi	r24, 0x3F	; 63
    1d82:	99 27       	eor	r25, r25
    1d84:	28 17       	cp	r18, r24
    1d86:	39 07       	cpc	r19, r25
    1d88:	18 f4       	brcc	.+6      	; 0x1d90 <SelfTest+0x1b6>
    1d8a:	1b da       	rcall	.-3018   	; 0x11c2 <lfsr>
    1d8c:	1f 5f       	subi	r17, 0xFF	; 255
    1d8e:	ec cf       	rjmp	.-40     	; 0x1d68 <SelfTest+0x18e>

    return 0;
}
    1d90:	80 e0       	ldi	r24, 0x00	; 0
    1d92:	24 96       	adiw	r28, 0x04	; 4
    1d94:	cd bf       	out	0x3d, r28	; 61
    1d96:	de bf       	out	0x3e, r29	; 62
    1d98:	df 91       	pop	r29
    1d9a:	cf 91       	pop	r28
    1d9c:	1f 91       	pop	r17
    1d9e:	0f 91       	pop	r16
    1da0:	ff 90       	pop	r15
    1da2:	ef 90       	pop	r14
    1da4:	df 90       	pop	r13
    1da6:	08 95       	ret

00001da8 <simonLed>:

/**
 * Set the wing LED blocks to selected option
 * @param val
 */
void simonLed(uint8_t val) {
    1da8:	cf 93       	push	r28
    1daa:	df 93       	push	r29
    1dac:	ea e4       	ldi	r30, 0x4A	; 74
    1dae:	ff eb       	ldi	r31, 0xBF	; 191
    1db0:	ef 01       	movw	r28, r30
    for (uint8_t n = 0; n < 5; n++) {
        iLED[WING[L][n]] = 0;
    1db2:	a5 81       	ldd	r26, Z+5	; 0x05
    1db4:	b0 e0       	ldi	r27, 0x00	; 0
    1db6:	ad 53       	subi	r26, 0x3D	; 61
    1db8:	b5 4c       	sbci	r27, 0xC5	; 197
    1dba:	1c 92       	st	X, r1
    1dbc:	31 96       	adiw	r30, 0x01	; 1
        iLED[WING[R][n]] = 0;
    1dbe:	a8 81       	ld	r26, Y
    1dc0:	b0 e0       	ldi	r27, 0x00	; 0
    1dc2:	ad 53       	subi	r26, 0x3D	; 61
    1dc4:	b5 4c       	sbci	r27, 0xC5	; 197
    1dc6:	1c 92       	st	X, r1
/**
 * Set the wing LED blocks to selected option
 * @param val
 */
void simonLed(uint8_t val) {
    for (uint8_t n = 0; n < 5; n++) {
    1dc8:	9f eb       	ldi	r25, 0xBF	; 191
    1dca:	ef 34       	cpi	r30, 0x4F	; 79
    1dcc:	f9 07       	cpc	r31, r25
    1dce:	81 f7       	brne	.-32     	; 0x1db0 <simonLed+0x8>
        iLED[WING[L][n]] = 0;
        iLED[WING[R][n]] = 0;
    }
    if (val == 3) {         // II
    1dd0:	83 30       	cpi	r24, 0x03	; 3
    1dd2:	d9 f4       	brne	.+54     	; 0x1e0a <simonLed+0x62>
        iLED[WING[L][0]] = dimValue;
    1dd4:	e0 91 4f bf 	lds	r30, 0xBF4F	; 0x80bf4f <__bss_end+0x843d>
    1dd8:	f0 e0       	ldi	r31, 0x00	; 0
    1dda:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1dde:	ed 53       	subi	r30, 0x3D	; 61
    1de0:	f5 4c       	sbci	r31, 0xC5	; 197
    1de2:	80 83       	st	Z, r24
        iLED[WING[L][1]] = dimValue;
    1de4:	e0 91 50 bf 	lds	r30, 0xBF50	; 0x80bf50 <__bss_end+0x843e>
    1de8:	f0 e0       	ldi	r31, 0x00	; 0
    1dea:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1dee:	ed 53       	subi	r30, 0x3D	; 61
    1df0:	f5 4c       	sbci	r31, 0xC5	; 197
    1df2:	80 83       	st	Z, r24
        iLED[WING[L][2]] = dimValue;
    1df4:	e0 91 51 bf 	lds	r30, 0xBF51	; 0x80bf51 <__bss_end+0x843f>
    1df8:	f0 e0       	ldi	r31, 0x00	; 0
    1dfa:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1dfe:	ed 53       	subi	r30, 0x3D	; 61
    1e00:	f5 4c       	sbci	r31, 0xC5	; 197
    1e02:	80 83       	st	Z, r24
        effect = 0x013f;
    1e04:	8f e3       	ldi	r24, 0x3F	; 63
    1e06:	91 e0       	ldi	r25, 0x01	; 1
    1e08:	46 c0       	rjmp	.+140    	; 0x1e96 <simonLed+0xee>
    } else if (val == 1) {  //
    1e0a:	81 30       	cpi	r24, 0x01	; 1
    1e0c:	99 f4       	brne	.+38     	; 0x1e34 <simonLed+0x8c>
        iLED[WING[L][3]] = dimValue;
    1e0e:	e0 91 52 bf 	lds	r30, 0xBF52	; 0x80bf52 <__bss_end+0x8440>
    1e12:	f0 e0       	ldi	r31, 0x00	; 0
    1e14:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1e18:	ed 53       	subi	r30, 0x3D	; 61
    1e1a:	f5 4c       	sbci	r31, 0xC5	; 197
    1e1c:	80 83       	st	Z, r24
        iLED[WING[L][4]] = dimValue;
    1e1e:	e0 91 53 bf 	lds	r30, 0xBF53	; 0x80bf53 <__bss_end+0x8441>
    1e22:	f0 e0       	ldi	r31, 0x00	; 0
    1e24:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1e28:	ed 53       	subi	r30, 0x3D	; 61
    1e2a:	f5 4c       	sbci	r31, 0xC5	; 197
    1e2c:	80 83       	st	Z, r24
        effect = 0x015f;
    1e2e:	8f e5       	ldi	r24, 0x5F	; 95
    1e30:	91 e0       	ldi	r25, 0x01	; 1
    1e32:	31 c0       	rjmp	.+98     	; 0x1e96 <simonLed+0xee>
    } else if (val == 4) {  // III
    1e34:	84 30       	cpi	r24, 0x04	; 4
    1e36:	d9 f4       	brne	.+54     	; 0x1e6e <simonLed+0xc6>
        iLED[WING[R][0]] = dimValue;
    1e38:	e0 91 4a bf 	lds	r30, 0xBF4A	; 0x80bf4a <__bss_end+0x8438>
    1e3c:	f0 e0       	ldi	r31, 0x00	; 0
    1e3e:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1e42:	ed 53       	subi	r30, 0x3D	; 61
    1e44:	f5 4c       	sbci	r31, 0xC5	; 197
    1e46:	80 83       	st	Z, r24
        iLED[WING[R][1]] = dimValue;
    1e48:	e0 91 4b bf 	lds	r30, 0xBF4B	; 0x80bf4b <__bss_end+0x8439>
    1e4c:	f0 e0       	ldi	r31, 0x00	; 0
    1e4e:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1e52:	ed 53       	subi	r30, 0x3D	; 61
    1e54:	f5 4c       	sbci	r31, 0xC5	; 197
    1e56:	80 83       	st	Z, r24
        iLED[WING[R][2]] = dimValue;
    1e58:	e0 91 4c bf 	lds	r30, 0xBF4C	; 0x80bf4c <__bss_end+0x843a>
    1e5c:	f0 e0       	ldi	r31, 0x00	; 0
    1e5e:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1e62:	ed 53       	subi	r30, 0x3D	; 61
    1e64:	f5 4c       	sbci	r31, 0xC5	; 197
    1e66:	80 83       	st	Z, r24
        effect = 0x017f;
    1e68:	8f e7       	ldi	r24, 0x7F	; 127
    1e6a:	91 e0       	ldi	r25, 0x01	; 1
    1e6c:	14 c0       	rjmp	.+40     	; 0x1e96 <simonLed+0xee>
    } else if (val == 2) {  // I
    1e6e:	82 30       	cpi	r24, 0x02	; 2
    1e70:	b1 f4       	brne	.+44     	; 0x1e9e <simonLed+0xf6>
        iLED[WING[R][3]] = dimValue;
    1e72:	e0 91 4d bf 	lds	r30, 0xBF4D	; 0x80bf4d <__bss_end+0x843b>
    1e76:	f0 e0       	ldi	r31, 0x00	; 0
    1e78:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1e7c:	ed 53       	subi	r30, 0x3D	; 61
    1e7e:	f5 4c       	sbci	r31, 0xC5	; 197
    1e80:	80 83       	st	Z, r24
        iLED[WING[R][4]] = dimValue;
    1e82:	e0 91 4e bf 	lds	r30, 0xBF4E	; 0x80bf4e <__bss_end+0x843c>
    1e86:	f0 e0       	ldi	r31, 0x00	; 0
    1e88:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1e8c:	ed 53       	subi	r30, 0x3D	; 61
    1e8e:	f5 4c       	sbci	r31, 0xC5	; 197
    1e90:	80 83       	st	Z, r24
        effect = 0x019f;
    1e92:	8f e9       	ldi	r24, 0x9F	; 159
    1e94:	91 e0       	ldi	r25, 0x01	; 1
    1e96:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <effect>
    1e9a:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <effect+0x1>
    }
}
    1e9e:	df 91       	pop	r29
    1ea0:	cf 91       	pop	r28
    1ea2:	08 95       	ret

00001ea4 <BastetDictates>:

/**
 * Main game loop
 * @return 0
 */
uint8_t BastetDictates() {
    1ea4:	cf 93       	push	r28
    1ea6:	df 93       	push	r29
    if ((TEXT != gameNow) && (BASTET != gameNow))
    1ea8:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <gameNow>
    1eac:	8d 7f       	andi	r24, 0xFD	; 253
    1eae:	09 f0       	breq	.+2      	; 0x1eb2 <BastetDictates+0xe>
    1eb0:	73 c1       	rjmp	.+742    	; 0x2198 <BastetDictates+0x2f4>
        return 0;

    if (CheckState(BASTET_COMPLETED)) {
    1eb2:	8a e7       	ldi	r24, 0x7A	; 122
    1eb4:	b1 da       	rcall	.-2718   	; 0x1418 <CheckState>
    1eb6:	88 23       	and	r24, r24
    1eb8:	41 f0       	breq	.+16     	; 0x1eca <BastetDictates+0x26>
        if (BASTET == gameNow) {
    1eba:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <gameNow>
    1ebe:	82 30       	cpi	r24, 0x02	; 2
    1ec0:	09 f0       	breq	.+2      	; 0x1ec4 <BastetDictates+0x20>
    1ec2:	6a c1       	rjmp	.+724    	; 0x2198 <BastetDictates+0x2f4>
            gameNow = TEXT;
    1ec4:	10 92 3c 38 	sts	0x383C, r1	; 0x80383c <gameNow>
    1ec8:	67 c1       	rjmp	.+718    	; 0x2198 <BastetDictates+0x2f4>
        }
        return 0;
    }

    if (CheckState(LANYARD_COMPLETED))
    1eca:	8b e7       	ldi	r24, 0x7B	; 123
    1ecc:	a5 da       	rcall	.-2742   	; 0x1418 <CheckState>
    1ece:	90 91 08 38 	lds	r25, 0x3808	; 0x803808 <buttonState>
    1ed2:	88 23       	and	r24, r24
    1ed4:	29 f0       	breq	.+10     	; 0x1ee0 <BastetDictates+0x3c>
        if (buttonState!=0xff)
    1ed6:	9f 3f       	cpi	r25, 0xFF	; 255
    1ed8:	19 f0       	breq	.+6      	; 0x1ee0 <BastetDictates+0x3c>
            gameNow = BASTET;
    1eda:	82 e0       	ldi	r24, 0x02	; 2
    1edc:	80 93 3c 38 	sts	0x383C, r24	; 0x80383c <gameNow>

    iLED[CAT] = (buttonState==0xff ? 0 : dimValue);
    1ee0:	e0 91 46 bf 	lds	r30, 0xBF46	; 0x80bf46 <__bss_end+0x8434>
    1ee4:	f0 e0       	ldi	r31, 0x00	; 0
    1ee6:	9f 3f       	cpi	r25, 0xFF	; 255
    1ee8:	19 f0       	breq	.+6      	; 0x1ef0 <BastetDictates+0x4c>
    1eea:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1eee:	01 c0       	rjmp	.+2      	; 0x1ef2 <BastetDictates+0x4e>
    1ef0:	80 e0       	ldi	r24, 0x00	; 0
    1ef2:	ed 53       	subi	r30, 0x3D	; 61
    1ef4:	f5 4c       	sbci	r31, 0xC5	; 197
    1ef6:	80 83       	st	Z, r24

    if (BASTET_BOOT == simonGameState) {
    1ef8:	80 91 5c 38 	lds	r24, 0x385C	; 0x80385c <simonGameState>
    1efc:	81 11       	cpse	r24, r1
    1efe:	0c c0       	rjmp	.+24     	; 0x1f18 <BastetDictates+0x74>
    1f00:	c2 e6       	ldi	r28, 0x62	; 98
        for (uint8_t i = 0; i < BASTET_LENGTH; i++) {
            simonState[i] = (lfsr() % 4);
    1f02:	d8 e3       	ldi	r29, 0x38	; 56
    1f04:	5e d9       	rcall	.-3396   	; 0x11c2 <lfsr>
    1f06:	83 70       	andi	r24, 0x03	; 3
    1f08:	89 93       	st	Y+, r24
            gameNow = BASTET;

    iLED[CAT] = (buttonState==0xff ? 0 : dimValue);

    if (BASTET_BOOT == simonGameState) {
        for (uint8_t i = 0; i < BASTET_LENGTH; i++) {
    1f0a:	88 e3       	ldi	r24, 0x38	; 56
    1f0c:	ce 36       	cpi	r28, 0x6E	; 110
    1f0e:	d8 07       	cpc	r29, r24
    1f10:	c9 f7       	brne	.-14     	; 0x1f04 <BastetDictates+0x60>
            simonState[i] = (lfsr() % 4);
        }
        simonGameState = BASTET_GAME_START;
    1f12:	81 e0       	ldi	r24, 0x01	; 1
    1f14:	80 93 5c 38 	sts	0x385C, r24	; 0x80385c <simonGameState>
    }

    if (BASTET_GAME_START == simonGameState && BASTET == gameNow) {
    1f18:	80 91 5c 38 	lds	r24, 0x385C	; 0x80385c <simonGameState>
    1f1c:	81 30       	cpi	r24, 0x01	; 1
    1f1e:	71 f4       	brne	.+28     	; 0x1f3c <BastetDictates+0x98>
    1f20:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <gameNow>
    1f24:	82 30       	cpi	r24, 0x02	; 2
    1f26:	51 f4       	brne	.+20     	; 0x1f3c <BastetDictates+0x98>
        simonGameState = BASTET_GAME_INTRO;
    1f28:	80 93 5c 38 	sts	0x385C, r24	; 0x80385c <simonGameState>
        simonPos = 0;
    1f2c:	10 92 61 38 	sts	0x3861, r1	; 0x803861 <simonPos>
        simonInputPos = 0;
    1f30:	10 92 60 38 	sts	0x3860, r1	; 0x803860 <simonInputPos>
        simonTimer = 0;
    1f34:	10 92 5f 38 	sts	0x385F, r1	; 0x80385f <simonTimer>
        simonCounter = 0;
    1f38:	10 92 5d 38 	sts	0x385D, r1	; 0x80385d <simonCounter>
    }

    if (BASTET_GAME_INTRO == simonGameState) {
    1f3c:	80 91 5c 38 	lds	r24, 0x385C	; 0x80385c <simonGameState>
    1f40:	82 30       	cpi	r24, 0x02	; 2
    1f42:	19 f5       	brne	.+70     	; 0x1f8a <BastetDictates+0xe6>
        if (simonTimer > 5) {   // ±.33 seconds
    1f44:	80 91 5f 38 	lds	r24, 0x385F	; 0x80385f <simonTimer>
    1f48:	86 30       	cpi	r24, 0x06	; 6
    1f4a:	38 f0       	brcs	.+14     	; 0x1f5a <BastetDictates+0xb6>
            simonCounter++;
    1f4c:	80 91 5d 38 	lds	r24, 0x385D	; 0x80385d <simonCounter>
    1f50:	8f 5f       	subi	r24, 0xFF	; 255
    1f52:	80 93 5d 38 	sts	0x385D, r24	; 0x80385d <simonCounter>
            simonTimer = 0;
    1f56:	10 92 5f 38 	sts	0x385F, r1	; 0x80385f <simonTimer>
        }
        if (simonCounter > 5) {
    1f5a:	e0 91 5d 38 	lds	r30, 0x385D	; 0x80385d <simonCounter>
    1f5e:	e6 30       	cpi	r30, 0x06	; 6
    1f60:	48 f0       	brcs	.+18     	; 0x1f74 <BastetDictates+0xd0>
            simonGameState = BASTET_GAME_SHOW_PATTERN;
    1f62:	83 e0       	ldi	r24, 0x03	; 3
    1f64:	80 93 5c 38 	sts	0x385C, r24	; 0x80385c <simonGameState>
            simonTimer = 0;
    1f68:	10 92 5f 38 	sts	0x385F, r1	; 0x80385f <simonTimer>
            simonCounter = 0;
    1f6c:	10 92 5d 38 	sts	0x385D, r1	; 0x80385d <simonCounter>
            ClearHackerLeds();
    1f70:	62 db       	rcall	.-2364   	; 0x1636 <ClearHackerLeds>
            return 0;
    1f72:	12 c1       	rjmp	.+548    	; 0x2198 <BastetDictates+0x2f4>
        }
        iLED[HCKR[R][simonCounter]] = dimValue;
    1f74:	f0 e0       	ldi	r31, 0x00	; 0
    1f76:	e8 5a       	subi	r30, 0xA8	; 168
    1f78:	f0 44       	sbci	r31, 0x40	; 64
    1f7a:	e0 81       	ld	r30, Z
    1f7c:	f0 e0       	ldi	r31, 0x00	; 0
    1f7e:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1f82:	ed 53       	subi	r30, 0x3D	; 61
    1f84:	f5 4c       	sbci	r31, 0xC5	; 197
    1f86:	80 83       	st	Z, r24
    1f88:	2b c0       	rjmp	.+86     	; 0x1fe0 <BastetDictates+0x13c>
    }

    if (BASTET_GAME_SHOW_PATTERN == simonGameState) {
    1f8a:	83 30       	cpi	r24, 0x03	; 3
    1f8c:	49 f5       	brne	.+82     	; 0x1fe0 <BastetDictates+0x13c>
        if (simonTimer > 7) {   // ±.5 second
    1f8e:	80 91 5f 38 	lds	r24, 0x385F	; 0x80385f <simonTimer>
    1f92:	88 30       	cpi	r24, 0x08	; 8
    1f94:	38 f0       	brcs	.+14     	; 0x1fa4 <BastetDictates+0x100>
            simonCounter++;
    1f96:	80 91 5d 38 	lds	r24, 0x385D	; 0x80385d <simonCounter>
    1f9a:	8f 5f       	subi	r24, 0xFF	; 255
    1f9c:	80 93 5d 38 	sts	0x385D, r24	; 0x80385d <simonCounter>
            simonTimer = 0;
    1fa0:	10 92 5f 38 	sts	0x385F, r1	; 0x80385f <simonTimer>
        }
        if (simonCounter > simonPos) {
    1fa4:	e0 91 5d 38 	lds	r30, 0x385D	; 0x80385d <simonCounter>
    1fa8:	80 91 61 38 	lds	r24, 0x3861	; 0x803861 <simonPos>
    1fac:	8e 17       	cp	r24, r30
    1fae:	40 f4       	brcc	.+16     	; 0x1fc0 <BastetDictates+0x11c>
            simonInputPos = 0;
    1fb0:	10 92 60 38 	sts	0x3860, r1	; 0x803860 <simonInputPos>
            simonGameState = BASTET_GAME_INPUT;
    1fb4:	85 e0       	ldi	r24, 0x05	; 5
    1fb6:	80 93 5c 38 	sts	0x385C, r24	; 0x80385c <simonGameState>
            simonLed(0);
    1fba:	80 e0       	ldi	r24, 0x00	; 0
    1fbc:	f5 de       	rcall	.-534    	; 0x1da8 <simonLed>
    1fbe:	98 c0       	rjmp	.+304    	; 0x20f0 <BastetDictates+0x24c>
            simonTimer = 0;
            return 0;
        }
        if (simonTimer < 3) {
    1fc0:	80 91 5f 38 	lds	r24, 0x385F	; 0x80385f <simonTimer>
    1fc4:	83 30       	cpi	r24, 0x03	; 3
    1fc6:	30 f4       	brcc	.+12     	; 0x1fd4 <BastetDictates+0x130>
            simonLed(simonState[simonCounter] + 1);
    1fc8:	f0 e0       	ldi	r31, 0x00	; 0
    1fca:	ee 59       	subi	r30, 0x9E	; 158
    1fcc:	f7 4c       	sbci	r31, 0xC7	; 199
    1fce:	80 81       	ld	r24, Z
    1fd0:	8f 5f       	subi	r24, 0xFF	; 255
    1fd2:	ea de       	rcall	.-556    	; 0x1da8 <simonLed>
        }
        if (simonTimer > 6) {
    1fd4:	80 91 5f 38 	lds	r24, 0x385F	; 0x80385f <simonTimer>
    1fd8:	87 30       	cpi	r24, 0x07	; 7
    1fda:	10 f0       	brcs	.+4      	; 0x1fe0 <BastetDictates+0x13c>
            simonLed(0);
    1fdc:	80 e0       	ldi	r24, 0x00	; 0
    1fde:	e4 de       	rcall	.-568    	; 0x1da8 <simonLed>
    1fe0:	c0 91 5c 38 	lds	r28, 0x385C	; 0x80385c <simonGameState>
        }
    }

    if (BASTET_GAME_INPUT == simonGameState) {
    1fe4:	c5 30       	cpi	r28, 0x05	; 5
    1fe6:	09 f0       	breq	.+2      	; 0x1fea <BastetDictates+0x146>
    1fe8:	86 c0       	rjmp	.+268    	; 0x20f6 <BastetDictates+0x252>
    1fea:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <buttonState>
        //Button pressed
        if (lastButtonState != buttonState && (buttonState+1) > 0) {
    1fee:	90 91 07 38 	lds	r25, 0x3807	; 0x803807 <lastButtonState>
    1ff2:	98 17       	cp	r25, r24
    1ff4:	09 f4       	brne	.+2      	; 0x1ff8 <BastetDictates+0x154>
    1ff6:	71 c0       	rjmp	.+226    	; 0x20da <BastetDictates+0x236>
    1ff8:	90 91 5e 38 	lds	r25, 0x385E	; 0x80385e <simonWait>
            if (simonWait == 0 && buttonState < 4) {
    1ffc:	91 11       	cpse	r25, r1
    1ffe:	6f c0       	rjmp	.+222    	; 0x20de <BastetDictates+0x23a>
    2000:	84 30       	cpi	r24, 0x04	; 4
    2002:	08 f0       	brcs	.+2      	; 0x2006 <BastetDictates+0x162>
    2004:	6c c0       	rjmp	.+216    	; 0x20de <BastetDictates+0x23a>
                simonWait = 1;
    2006:	91 e0       	ldi	r25, 0x01	; 1
    2008:	90 93 5e 38 	sts	0x385E, r25	; 0x80385e <simonWait>
                simonTimer = 0;
    200c:	10 92 5f 38 	sts	0x385F, r1	; 0x80385f <simonTimer>
                simonLed(buttonState+1);
    2010:	8f 5f       	subi	r24, 0xFF	; 255
    2012:	ca de       	rcall	.-620    	; 0x1da8 <simonLed>
    2014:	84 e0       	ldi	r24, 0x04	; 4
                simonGameState = BASTET_GAME_WAIT_LEDS;
    2016:	80 93 5c 38 	sts	0x385C, r24	; 0x80385c <simonGameState>
    201a:	c0 93 2d 38 	sts	0x382D, r28	; 0x80382d <simonNextGameState>
                simonNextGameState = BASTET_GAME_INPUT;
    201e:	80 91 60 38 	lds	r24, 0x3860	; 0x803860 <simonInputPos>

                if (simonState[simonInputPos] == buttonState) {
    2022:	e8 2f       	mov	r30, r24
    2024:	f0 e0       	ldi	r31, 0x00	; 0
    2026:	ee 59       	subi	r30, 0x9E	; 158
    2028:	f7 4c       	sbci	r31, 0xC7	; 199
    202a:	20 81       	ld	r18, Z
    202c:	90 91 08 38 	lds	r25, 0x3808	; 0x803808 <buttonState>
    2030:	29 13       	cpse	r18, r25
    2032:	1d c0       	rjmp	.+58     	; 0x206e <BastetDictates+0x1ca>
    2034:	8f 5f       	subi	r24, 0xFF	; 255
                    simonInputPos++;
    2036:	80 93 60 38 	sts	0x3860, r24	; 0x803860 <simonInputPos>
    203a:	e0 91 61 38 	lds	r30, 0x3861	; 0x803861 <simonPos>
                    if (simonInputPos > simonPos) {
    203e:	e8 17       	cp	r30, r24
    2040:	a0 f5       	brcc	.+104    	; 0x20aa <BastetDictates+0x206>
    2042:	ef 5f       	subi	r30, 0xFF	; 255
                        simonPos++;
    2044:	e0 93 61 38 	sts	0x3861, r30	; 0x803861 <simonPos>
    2048:	10 92 5f 38 	sts	0x385F, r1	; 0x80385f <simonTimer>
                        simonTimer = 0;
    204c:	10 92 5d 38 	sts	0x385D, r1	; 0x80385d <simonCounter>
                        simonCounter = 0;
    2050:	e1 30       	cpi	r30, 0x01	; 1
                        if (simonPos > 1) { // BASTET_LENGTH = 12
    2052:	59 f0       	breq	.+22     	; 0x206a <BastetDictates+0x1c6>
    2054:	e6 95       	lsr	r30
                            iLED[HCKR[G][(simonPos / 2) - 1]] = dimValue;
    2056:	f0 e0       	ldi	r31, 0x00	; 0
    2058:	e8 5a       	subi	r30, 0xA8	; 168
    205a:	f0 44       	sbci	r31, 0x40	; 64
    205c:	e5 81       	ldd	r30, Z+5	; 0x05
    205e:	f0 e0       	ldi	r31, 0x00	; 0
    2060:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    2064:	ed 53       	subi	r30, 0x3D	; 61
    2066:	f5 4c       	sbci	r31, 0xC5	; 197
    2068:	80 83       	st	Z, r24
    206a:	83 e0       	ldi	r24, 0x03	; 3
                        }
                        simonNextGameState = BASTET_GAME_SHOW_PATTERN;
    206c:	1c c0       	rjmp	.+56     	; 0x20a6 <BastetDictates+0x202>
    206e:	80 e2       	ldi	r24, 0x20	; 32
                    }
                } else {
                    effect = 32;
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <effect>
    2076:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <effect+0x1>
    207a:	a8 e5       	ldi	r26, 0x58	; 88
    207c:	bf eb       	ldi	r27, 0xBF	; 191
    207e:	ed 91       	ld	r30, X+
                    for (uint8_t n=0; n<6; n++){
                        iLED[HCKR[R][n]] = dimValue;
    2080:	f0 e0       	ldi	r31, 0x00	; 0
    2082:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    2086:	ed 53       	subi	r30, 0x3D	; 61
    2088:	f5 4c       	sbci	r31, 0xC5	; 197
    208a:	80 83       	st	Z, r24
    208c:	8f eb       	ldi	r24, 0xBF	; 191
                        }
                        simonNextGameState = BASTET_GAME_SHOW_PATTERN;
                    }
                } else {
                    effect = 32;
                    for (uint8_t n=0; n<6; n++){
    208e:	ae 35       	cpi	r26, 0x5E	; 94
    2090:	b8 07       	cpc	r27, r24
    2092:	a9 f7       	brne	.-22     	; 0x207e <BastetDictates+0x1da>
    2094:	10 92 60 38 	sts	0x3860, r1	; 0x803860 <simonInputPos>
                        iLED[HCKR[R][n]] = dimValue;
                    }
                    simonInputPos = 0;
    2098:	10 92 61 38 	sts	0x3861, r1	; 0x803861 <simonPos>
                    simonPos = 0;
    209c:	10 92 5f 38 	sts	0x385F, r1	; 0x80385f <simonTimer>
                    simonTimer = 0;
    20a0:	10 92 5d 38 	sts	0x385D, r1	; 0x80385d <simonCounter>
                    simonCounter = 0;
    20a4:	86 e0       	ldi	r24, 0x06	; 6
                    simonNextGameState = BASTET_GAME_OUTRO;
    20a6:	80 93 2d 38 	sts	0x382D, r24	; 0x80382d <simonNextGameState>
    20aa:	80 91 60 38 	lds	r24, 0x3860	; 0x803860 <simonInputPos>
                }

                if (simonInputPos >= BASTET_LENGTH || simonPos >= BASTET_LENGTH) { // beetje dubbel
    20ae:	8c 30       	cpi	r24, 0x0C	; 12
    20b0:	20 f4       	brcc	.+8      	; 0x20ba <BastetDictates+0x216>
    20b2:	80 91 61 38 	lds	r24, 0x3861	; 0x803861 <simonPos>
    20b6:	8c 30       	cpi	r24, 0x0C	; 12
    20b8:	90 f0       	brcs	.+36     	; 0x20de <BastetDictates+0x23a>
                    effect = 64|2;
    20ba:	82 e4       	ldi	r24, 0x42	; 66
    20bc:	90 e0       	ldi	r25, 0x00	; 0
    20be:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <effect>
    20c2:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <effect+0x1>
                    UpdateState(BASTET_COMPLETED);
    20c6:	8a e7       	ldi	r24, 0x7A	; 122
    20c8:	86 d9       	rcall	.-3316   	; 0x13d6 <UpdateState>
    20ca:	10 92 5f 38 	sts	0x385F, r1	; 0x80385f <simonTimer>
                    simonTimer = 0;
    20ce:	10 92 5d 38 	sts	0x385D, r1	; 0x80385d <simonCounter>
                    simonCounter = 0;
    20d2:	87 e0       	ldi	r24, 0x07	; 7
                    simonNextGameState = BASTET_GAME_OVER;
    20d4:	80 93 2d 38 	sts	0x382D, r24	; 0x80382d <simonNextGameState>
    20d8:	02 c0       	rjmp	.+4      	; 0x20de <BastetDictates+0x23a>
    20da:	10 92 5e 38 	sts	0x385E, r1	; 0x80385e <simonWait>
                }
            }
        
        //Button released, next or reset!
        } else {
            simonWait = 0;
    20de:	80 91 5f 38 	lds	r24, 0x385F	; 0x80385f <simonTimer>
        }

        if (simonTimer == 200) {    // did you forget about Bastet?
    20e2:	88 3c       	cpi	r24, 0xC8	; 200
    20e4:	41 f4       	brne	.+16     	; 0x20f6 <BastetDictates+0x252>
    20e6:	83 e0       	ldi	r24, 0x03	; 3
            simonGameState = BASTET_GAME_SHOW_PATTERN;
    20e8:	80 93 5c 38 	sts	0x385C, r24	; 0x80385c <simonGameState>
    20ec:	10 92 5d 38 	sts	0x385D, r1	; 0x80385d <simonCounter>
            simonCounter = 0;
    20f0:	10 92 5f 38 	sts	0x385F, r1	; 0x80385f <simonTimer>
            simonTimer = 0;
    20f4:	51 c0       	rjmp	.+162    	; 0x2198 <BastetDictates+0x2f4>
            return 0;
    20f6:	80 91 5c 38 	lds	r24, 0x385C	; 0x80385c <simonGameState>
        }
    }

    if (BASTET_GAME_WAIT_LEDS == simonGameState) {
    20fa:	84 30       	cpi	r24, 0x04	; 4
    20fc:	81 f4       	brne	.+32     	; 0x211e <BastetDictates+0x27a>
        if (simonTimer >= 7) {
    20fe:	80 91 5f 38 	lds	r24, 0x385F	; 0x80385f <simonTimer>
    2102:	87 30       	cpi	r24, 0x07	; 7
    2104:	60 f0       	brcs	.+24     	; 0x211e <BastetDictates+0x27a>
            // on to next state after ±.5 second
            simonLed(0);  // LEDs off
    2106:	80 e0       	ldi	r24, 0x00	; 0
    2108:	4f de       	rcall	.-866    	; 0x1da8 <simonLed>
    210a:	10 92 5e 38 	sts	0x385E, r1	; 0x80385e <simonWait>
            simonWait = 0;
    210e:	10 92 5f 38 	sts	0x385F, r1	; 0x80385f <simonTimer>
            simonTimer = 0;
    2112:	10 92 5d 38 	sts	0x385D, r1	; 0x80385d <simonCounter>
            simonCounter = 0;
    2116:	80 91 2d 38 	lds	r24, 0x382D	; 0x80382d <simonNextGameState>
            simonGameState = simonNextGameState;
    211a:	80 93 5c 38 	sts	0x385C, r24	; 0x80385c <simonGameState>
    211e:	80 91 5c 38 	lds	r24, 0x385C	; 0x80385c <simonGameState>
        }
    }

    if (BASTET_GAME_OUTRO == simonGameState) {
    2122:	86 30       	cpi	r24, 0x06	; 6
    2124:	41 f5       	brne	.+80     	; 0x2176 <BastetDictates+0x2d2>
    2126:	80 91 5f 38 	lds	r24, 0x385F	; 0x80385f <simonTimer>
        if (simonTimer > 3) {
    212a:	84 30       	cpi	r24, 0x04	; 4
    212c:	38 f0       	brcs	.+14     	; 0x213c <BastetDictates+0x298>
    212e:	80 91 5d 38 	lds	r24, 0x385D	; 0x80385d <simonCounter>
            simonCounter++;
    2132:	8f 5f       	subi	r24, 0xFF	; 255
    2134:	80 93 5d 38 	sts	0x385D, r24	; 0x80385d <simonCounter>
    2138:	10 92 5f 38 	sts	0x385F, r1	; 0x80385f <simonTimer>
            simonTimer = 0;
    213c:	80 91 5d 38 	lds	r24, 0x385D	; 0x80385d <simonCounter>
        }
        if (simonCounter > 5) {
    2140:	86 30       	cpi	r24, 0x06	; 6
    2142:	40 f0       	brcs	.+16     	; 0x2154 <BastetDictates+0x2b0>
    2144:	10 92 5f 38 	sts	0x385F, r1	; 0x80385f <simonTimer>
            simonTimer = 0;
    2148:	10 92 5d 38 	sts	0x385D, r1	; 0x80385d <simonCounter>
            simonCounter = 0;
    214c:	87 e0       	ldi	r24, 0x07	; 7
            simonGameState = BASTET_GAME_OVER;
    214e:	80 93 5c 38 	sts	0x385C, r24	; 0x80385c <simonGameState>
    2152:	22 c0       	rjmp	.+68     	; 0x2198 <BastetDictates+0x2f4>
            return 0;
    2154:	e5 e0       	ldi	r30, 0x05	; 5
        }
        iLED[HCKR[R][5-simonCounter]] = 0;
    2156:	f0 e0       	ldi	r31, 0x00	; 0
    2158:	e8 1b       	sub	r30, r24
    215a:	f1 09       	sbc	r31, r1
    215c:	e8 5a       	subi	r30, 0xA8	; 168
    215e:	f0 44       	sbci	r31, 0x40	; 64
    2160:	a0 81       	ld	r26, Z
    2162:	b0 e0       	ldi	r27, 0x00	; 0
    2164:	ad 53       	subi	r26, 0x3D	; 61
    2166:	b5 4c       	sbci	r27, 0xC5	; 197
    2168:	1c 92       	st	X, r1
    216a:	e6 81       	ldd	r30, Z+6	; 0x06
        iLED[HCKR[G][5-simonCounter]] = 0;
    216c:	f0 e0       	ldi	r31, 0x00	; 0
    216e:	ed 53       	subi	r30, 0x3D	; 61
    2170:	f5 4c       	sbci	r31, 0xC5	; 197
    2172:	10 82       	st	Z, r1
    2174:	0c c0       	rjmp	.+24     	; 0x218e <BastetDictates+0x2ea>
    2176:	87 30       	cpi	r24, 0x07	; 7
    }

    if (BASTET_GAME_OVER == simonGameState) {
    2178:	51 f4       	brne	.+20     	; 0x218e <BastetDictates+0x2ea>
        simonInputPos = 0;
    217a:	10 92 60 38 	sts	0x3860, r1	; 0x803860 <simonInputPos>
        simonPos = 0;
    217e:	10 92 61 38 	sts	0x3861, r1	; 0x803861 <simonPos>
        simonGameState = BASTET_BOOT; // BASTET_GAME_START for stale "field" ツs
    2182:	10 92 5c 38 	sts	0x385C, r1	; 0x80385c <simonGameState>
        gameNow = TEXT;
    2186:	10 92 3c 38 	sts	0x383C, r1	; 0x80383c <gameNow>
        simonLed(0);
    218a:	80 e0       	ldi	r24, 0x00	; 0
    218c:	0d de       	rcall	.-998    	; 0x1da8 <simonLed>
    218e:	80 91 5f 38 	lds	r24, 0x385F	; 0x80385f <simonTimer>
    }

    ++simonTimer;
    2192:	8f 5f       	subi	r24, 0xFF	; 255
    2194:	80 93 5f 38 	sts	0x385F, r24	; 0x80385f <simonTimer>
    2198:	80 e0       	ldi	r24, 0x00	; 0
    return 0;
}
    219a:	df 91       	pop	r29
    219c:	cf 91       	pop	r28
    219e:	08 95       	ret

000021a0 <Cheat>:
    21a0:	1f 93       	push	r17

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    reactStr[1][number]=length;
    reactStr[2][number]=type;
    21a2:	cf 93       	push	r28
    21a4:	df 93       	push	r29
    21a6:	cd b7       	in	r28, 0x3d	; 61
    21a8:	de b7       	in	r29, 0x3e	; 62
    21aa:	62 97       	sbiw	r28, 0x12	; 18
    21ac:	cd bf       	out	0x3d, r28	; 61
    21ae:	de bf       	out	0x3e, r29	; 62
    21b0:	8a 8b       	std	Y+18, r24	; 0x12
    21b2:	80 e1       	ldi	r24, 0x10	; 16
    21b4:	ee e1       	ldi	r30, 0x1E	; 30
    21b6:	ff eb       	ldi	r31, 0xBF	; 191
    21b8:	de 01       	movw	r26, r28
    21ba:	11 96       	adiw	r26, 0x01	; 1
    21bc:	01 90       	ld	r0, Z+
    21be:	0d 92       	st	X+, r0
    21c0:	8a 95       	dec	r24
    21c2:	e1 f7       	brne	.-8      	; 0x21bc <Cheat+0x1c>
    21c4:	fe 01       	movw	r30, r28
    21c6:	31 96       	adiw	r30, 0x01	; 1
    21c8:	90 e0       	ldi	r25, 0x00	; 0
    21ca:	8f ef       	ldi	r24, 0xFF	; 255
    21cc:	21 91       	ld	r18, Z+
    21ce:	31 91       	ld	r19, Z+
    21d0:	26 17       	cp	r18, r22
    21d2:	37 07       	cpc	r19, r23
    21d4:	09 f4       	brne	.+2      	; 0x21d8 <Cheat+0x38>
    21d6:	89 2f       	mov	r24, r25
    21d8:	9f 5f       	subi	r25, 0xFF	; 255
    21da:	98 30       	cpi	r25, 0x08	; 8
    21dc:	b9 f7       	brne	.-18     	; 0x21cc <Cheat+0x2c>
    21de:	88 30       	cpi	r24, 0x08	; 8
    21e0:	10 f0       	brcs	.+4      	; 0x21e6 <Cheat+0x46>
    21e2:	80 e0       	ldi	r24, 0x00	; 0
    21e4:	14 c0       	rjmp	.+40     	; 0x220e <Cheat+0x6e>
    21e6:	18 e1       	ldi	r17, 0x18	; 24
    21e8:	18 0f       	add	r17, r24
    21ea:	41 e0       	ldi	r20, 0x01	; 1
    21ec:	be 01       	movw	r22, r28
    21ee:	6f 5e       	subi	r22, 0xEF	; 239
    21f0:	7f 4f       	sbci	r23, 0xFF	; 255
    21f2:	81 2f       	mov	r24, r17
    21f4:	0e 94 ef 07 	call	0xfde	; 0xfde <EERead>
    21f8:	89 89       	ldd	r24, Y+17	; 0x11
    21fa:	8f 3f       	cpi	r24, 0xFF	; 255
    21fc:	91 f7       	brne	.-28     	; 0x21e2 <Cheat+0x42>
    21fe:	41 e0       	ldi	r20, 0x01	; 1
    2200:	be 01       	movw	r22, r28
    2202:	6e 5e       	subi	r22, 0xEE	; 238
    2204:	7f 4f       	sbci	r23, 0xFF	; 255
    2206:	81 2f       	mov	r24, r17
    2208:	0e 94 ff 07 	call	0xffe	; 0xffe <EEWrite>
    220c:	81 e0       	ldi	r24, 0x01	; 1
    220e:	62 96       	adiw	r28, 0x12	; 18
    2210:	cd bf       	out	0x3d, r28	; 61
    2212:	de bf       	out	0x3e, r29	; 62
    2214:	df 91       	pop	r29
    2216:	cf 91       	pop	r28
    2218:	1f 91       	pop	r17
    221a:	08 95       	ret

0000221c <UnflipData>:
    221c:	26 2f       	mov	r18, r22
    221e:	fb 01       	movw	r30, r22
    2220:	35 e5       	ldi	r19, 0x55	; 85
    2222:	9e 2f       	mov	r25, r30
    2224:	92 1b       	sub	r25, r18
    2226:	98 17       	cp	r25, r24
    2228:	28 f4       	brcc	.+10     	; 0x2234 <UnflipData+0x18>
    222a:	90 81       	ld	r25, Z
    222c:	92 95       	swap	r25
    222e:	93 27       	eor	r25, r19
    2230:	91 93       	st	Z+, r25
    2232:	f7 cf       	rjmp	.-18     	; 0x2222 <UnflipData+0x6>
    2234:	08 95       	ret

00002236 <ClearTxAfter>:
    2236:	8f 5f       	subi	r24, 0xFF	; 255
    2238:	88 30       	cpi	r24, 0x08	; 8
    223a:	30 f4       	brcc	.+12     	; 0x2248 <ClearTxAfter+0x12>
    223c:	e8 2f       	mov	r30, r24
    223e:	f0 e0       	ldi	r31, 0x00	; 0
    2240:	e8 5b       	subi	r30, 0xB8	; 184
    2242:	f5 4c       	sbci	r31, 0xC5	; 197
    2244:	10 82       	st	Z, r1
    2246:	f7 cf       	rjmp	.-18     	; 0x2236 <ClearTxAfter>
    2248:	08 95       	ret

0000224a <StartsWith>:
    224a:	ac 01       	movw	r20, r24
    224c:	90 e0       	ldi	r25, 0x00	; 0
    224e:	e9 2f       	mov	r30, r25
    2250:	f0 e0       	ldi	r31, 0x00	; 0
    2252:	da 01       	movw	r26, r20
    2254:	ae 0f       	add	r26, r30
    2256:	bf 1f       	adc	r27, r31
    2258:	3c 91       	ld	r19, X
    225a:	e6 0f       	add	r30, r22
    225c:	f7 1f       	adc	r31, r23
    225e:	31 11       	cpse	r19, r1
    2260:	05 c0       	rjmp	.+10     	; 0x226c <StartsWith+0x22>
    2262:	81 e0       	ldi	r24, 0x01	; 1
    2264:	90 81       	ld	r25, Z
    2266:	99 23       	and	r25, r25
    2268:	49 f0       	breq	.+18     	; 0x227c <StartsWith+0x32>
    226a:	07 c0       	rjmp	.+14     	; 0x227a <StartsWith+0x30>
    226c:	20 81       	ld	r18, Z
    226e:	22 23       	and	r18, r18
    2270:	c1 f3       	breq	.-16     	; 0x2262 <StartsWith+0x18>
    2272:	32 13       	cpse	r19, r18
    2274:	02 c0       	rjmp	.+4      	; 0x227a <StartsWith+0x30>
    2276:	9f 5f       	subi	r25, 0xFF	; 255
    2278:	ea cf       	rjmp	.-44     	; 0x224e <StartsWith+0x4>
    227a:	80 e0       	ldi	r24, 0x00	; 0
    227c:	08 95       	ret

0000227e <PrepareSending>:
    227e:	cf 93       	push	r28
    2280:	df 93       	push	r29
    2282:	fc 01       	movw	r30, r24
    2284:	61 15       	cp	r22, r1
    2286:	71 05       	cpc	r23, r1
    2288:	59 f1       	breq	.+86     	; 0x22e0 <PrepareSending+0x62>
    228a:	a0 e5       	ldi	r26, 0x50	; 80
    228c:	ba e3       	ldi	r27, 0x3A	; 58
    228e:	c8 e4       	ldi	r28, 0x48	; 72
    2290:	da e3       	ldi	r29, 0x3A	; 58
    2292:	80 e0       	ldi	r24, 0x00	; 0
    2294:	9f ef       	ldi	r25, 0xFF	; 255
    2296:	6f 3f       	cpi	r22, 0xFF	; 255
    2298:	71 05       	cpc	r23, r1
    229a:	69 f0       	breq	.+26     	; 0x22b6 <PrepareSending+0x38>
    229c:	60 f0       	brcs	.+24     	; 0x22b6 <PrepareSending+0x38>
    229e:	ed 93       	st	X+, r30
    22a0:	fd 93       	st	X+, r31
    22a2:	99 93       	st	Y+, r25
    22a4:	e1 50       	subi	r30, 0x01	; 1
    22a6:	ff 4f       	sbci	r31, 0xFF	; 255
    22a8:	6f 5f       	subi	r22, 0xFF	; 255
    22aa:	71 09       	sbc	r23, r1
    22ac:	8f 5f       	subi	r24, 0xFF	; 255
    22ae:	87 30       	cpi	r24, 0x07	; 7
    22b0:	91 f7       	brne	.-28     	; 0x2296 <PrepareSending+0x18>
    22b2:	81 e0       	ldi	r24, 0x01	; 1
    22b4:	1e c0       	rjmp	.+60     	; 0x22f2 <PrepareSending+0x74>
    22b6:	28 2f       	mov	r18, r24
    22b8:	30 e0       	ldi	r19, 0x00	; 0
    22ba:	d9 01       	movw	r26, r18
    22bc:	aa 0f       	add	r26, r26
    22be:	bb 1f       	adc	r27, r27
    22c0:	a0 5b       	subi	r26, 0xB0	; 176
    22c2:	b5 4c       	sbci	r27, 0xC5	; 197
    22c4:	ed 93       	st	X+, r30
    22c6:	fc 93       	st	X, r31
    22c8:	6f 3f       	cpi	r22, 0xFF	; 255
    22ca:	71 05       	cpc	r23, r1
    22cc:	11 f4       	brne	.+4      	; 0x22d2 <PrepareSending+0x54>
    22ce:	6e ef       	ldi	r22, 0xFE	; 254
    22d0:	70 e0       	ldi	r23, 0x00	; 0
    22d2:	f9 01       	movw	r30, r18
    22d4:	e8 5b       	subi	r30, 0xB8	; 184
    22d6:	f5 4c       	sbci	r31, 0xC5	; 197
    22d8:	60 83       	st	Z, r22
    22da:	40 93 46 3a 	sts	0x3A46, r20	; 0x803a46 <txTypeNow>
    22de:	05 c0       	rjmp	.+10     	; 0x22ea <PrepareSending+0x6c>
    22e0:	10 92 50 3a 	sts	0x3A50, r1	; 0x803a50 <txAddrList>
    22e4:	10 92 51 3a 	sts	0x3A51, r1	; 0x803a51 <txAddrList+0x1>
    22e8:	80 e0       	ldi	r24, 0x00	; 0
    22ea:	a5 df       	rcall	.-182    	; 0x2236 <ClearTxAfter>
    22ec:	10 92 47 3a 	sts	0x3A47, r1	; 0x803a47 <txAddrNow>
    22f0:	80 e0       	ldi	r24, 0x00	; 0
    22f2:	df 91       	pop	r29
    22f4:	cf 91       	pop	r28
    22f6:	08 95       	ret

000022f8 <SetStandardResponse>:
}

//
uint8_t SetStandardResponse(uint8_t custStrEnd){
    22f8:	cf 93       	push	r28
    22fa:	df 93       	push	r29
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    22fc:	28 2f       	mov	r18, r24
    22fe:	30 e0       	ldi	r19, 0x00	; 0
    2300:	f9 01       	movw	r30, r18
    2302:	ee 0f       	add	r30, r30
    2304:	ff 1f       	adc	r31, r31
    2306:	e5 5e       	subi	r30, 0xE5	; 229
    2308:	f6 4c       	sbci	r31, 0xC6	; 198
    230a:	a9 e5       	ldi	r26, 0x59	; 89
    230c:	ba e7       	ldi	r27, 0x7A	; 122
    230e:	a0 83       	st	Z, r26
    2310:	b1 83       	std	Z+1, r27	; 0x01
    reactStr[1][number]=length;
    2312:	f9 01       	movw	r30, r18
    2314:	ee 0f       	add	r30, r30
    2316:	ff 1f       	adc	r31, r31
    2318:	e5 5a       	subi	r30, 0xA5	; 165
    231a:	f6 4c       	sbci	r31, 0xC6	; 198
    231c:	62 e0       	ldi	r22, 0x02	; 2
    231e:	70 e0       	ldi	r23, 0x00	; 0
    2320:	60 83       	st	Z, r22
    2322:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    2324:	22 0f       	add	r18, r18
    2326:	33 1f       	adc	r19, r19
    2328:	f9 01       	movw	r30, r18
    232a:	e5 56       	subi	r30, 0x65	; 101
    232c:	f6 4c       	sbci	r31, 0xC6	; 198
    232e:	41 e0       	ldi	r20, 0x01	; 1
    2330:	50 e0       	ldi	r21, 0x00	; 0
    2332:	40 83       	st	Z, r20
    2334:	51 83       	std	Z+1, r21	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2336:	21 e0       	ldi	r18, 0x01	; 1
    2338:	28 0f       	add	r18, r24
    233a:	30 e0       	ldi	r19, 0x00	; 0
    233c:	f9 01       	movw	r30, r18
    233e:	ee 0f       	add	r30, r30
    2340:	ff 1f       	adc	r31, r31
    2342:	e5 5e       	subi	r30, 0xE5	; 229
    2344:	f6 4c       	sbci	r31, 0xC6	; 198
    2346:	c2 e6       	ldi	r28, 0x62	; 98
    2348:	da e7       	ldi	r29, 0x7A	; 122
    234a:	c0 83       	st	Z, r28
    234c:	d1 83       	std	Z+1, r29	; 0x01
    reactStr[1][number]=length;
    234e:	f9 01       	movw	r30, r18
    2350:	ee 0f       	add	r30, r30
    2352:	ff 1f       	adc	r31, r31
    2354:	e5 5a       	subi	r30, 0xA5	; 165
    2356:	f6 4c       	sbci	r31, 0xC6	; 198
    2358:	cc e0       	ldi	r28, 0x0C	; 12
    235a:	d0 e0       	ldi	r29, 0x00	; 0
    235c:	c0 83       	st	Z, r28
    235e:	d1 83       	std	Z+1, r29	; 0x01
    reactStr[2][number]=type;
    2360:	22 0f       	add	r18, r18
    2362:	33 1f       	adc	r19, r19
    2364:	f9 01       	movw	r30, r18
    2366:	e5 56       	subi	r30, 0x65	; 101
    2368:	f6 4c       	sbci	r31, 0xC6	; 198
    236a:	40 83       	st	Z, r20
    236c:	51 83       	std	Z+1, r21	; 0x01
//
uint8_t SetStandardResponse(uint8_t custStrEnd){

    SetResponse(custStrEnd++, A_LF, 2, TEASER);
    SetResponse(custStrEnd++, A_LOCATION, L_LOCATION, TEASER);
    reactStr[0][custStrEnd++] = CURR_LOC;
    236e:	e2 e0       	ldi	r30, 0x02	; 2
    2370:	e8 0f       	add	r30, r24
    2372:	f0 e0       	ldi	r31, 0x00	; 0
    2374:	ee 0f       	add	r30, r30
    2376:	ff 1f       	adc	r31, r31
    2378:	e5 5e       	subi	r30, 0xE5	; 229
    237a:	f6 4c       	sbci	r31, 0xC6	; 198
    237c:	20 ef       	ldi	r18, 0xF0	; 240
    237e:	3f ef       	ldi	r19, 0xFF	; 255
    2380:	20 83       	st	Z, r18
    2382:	31 83       	std	Z+1, r19	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2384:	23 e0       	ldi	r18, 0x03	; 3
    2386:	28 0f       	add	r18, r24
    2388:	30 e0       	ldi	r19, 0x00	; 0
    238a:	f9 01       	movw	r30, r18
    238c:	ee 0f       	add	r30, r30
    238e:	ff 1f       	adc	r31, r31
    2390:	e5 5e       	subi	r30, 0xE5	; 229
    2392:	f6 4c       	sbci	r31, 0xC6	; 198
    2394:	a0 83       	st	Z, r26
    2396:	b1 83       	std	Z+1, r27	; 0x01
    reactStr[1][number]=length;
    2398:	f9 01       	movw	r30, r18
    239a:	ee 0f       	add	r30, r30
    239c:	ff 1f       	adc	r31, r31
    239e:	e5 5a       	subi	r30, 0xA5	; 165
    23a0:	f6 4c       	sbci	r31, 0xC6	; 198
    23a2:	60 83       	st	Z, r22
    23a4:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    23a6:	22 0f       	add	r18, r18
    23a8:	33 1f       	adc	r19, r19
    23aa:	f9 01       	movw	r30, r18
    23ac:	e5 56       	subi	r30, 0x65	; 101
    23ae:	f6 4c       	sbci	r31, 0xC6	; 198
    23b0:	40 83       	st	Z, r20
    23b2:	51 83       	std	Z+1, r21	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    23b4:	24 e0       	ldi	r18, 0x04	; 4
    23b6:	28 0f       	add	r18, r24
    23b8:	30 e0       	ldi	r19, 0x00	; 0
    23ba:	f9 01       	movw	r30, r18
    23bc:	ee 0f       	add	r30, r30
    23be:	ff 1f       	adc	r31, r31
    23c0:	e5 5e       	subi	r30, 0xE5	; 229
    23c2:	f6 4c       	sbci	r31, 0xC6	; 198
    23c4:	a5 e5       	ldi	r26, 0x55	; 85
    23c6:	ba e7       	ldi	r27, 0x7A	; 122
    23c8:	a0 83       	st	Z, r26
    23ca:	b1 83       	std	Z+1, r27	; 0x01
    reactStr[1][number]=length;
    23cc:	f9 01       	movw	r30, r18
    23ce:	ee 0f       	add	r30, r30
    23d0:	ff 1f       	adc	r31, r31
    23d2:	e5 5a       	subi	r30, 0xA5	; 165
    23d4:	f6 4c       	sbci	r31, 0xC6	; 198
    23d6:	60 83       	st	Z, r22
    23d8:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    23da:	22 0f       	add	r18, r18
    23dc:	33 1f       	adc	r19, r19
    23de:	f9 01       	movw	r30, r18
    23e0:	e5 56       	subi	r30, 0x65	; 101
    23e2:	f6 4c       	sbci	r31, 0xC6	; 198
    23e4:	40 83       	st	Z, r20
    23e6:	51 83       	std	Z+1, r21	; 0x01
    reactStr[0][custStrEnd++] = CURR_LOC;
    SetResponse(custStrEnd++, A_LF, 2, TEASER);
    SetResponse(custStrEnd++, A_PROMPT, L_PROMPT, TEASER);

    return custStrEnd;
}
    23e8:	8b 5f       	subi	r24, 0xFB	; 251
    23ea:	df 91       	pop	r29
    23ec:	cf 91       	pop	r28
    23ee:	08 95       	ret

000023f0 <PopulateObject>:

//Get all the relevant data and string addresses of an object
void PopulateObject(uint16_t offset, object_model_t *object){
    23f0:	af 92       	push	r10
    23f2:	bf 92       	push	r11
    23f4:	df 92       	push	r13
    23f6:	ef 92       	push	r14
    23f8:	ff 92       	push	r15
    23fa:	0f 93       	push	r16
    23fc:	1f 93       	push	r17
    23fe:	cf 93       	push	r28
    2400:	df 93       	push	r29
    2402:	cd b7       	in	r28, 0x3d	; 61
    2404:	de b7       	in	r29, 0x3e	; 62
    2406:	2c 97       	sbiw	r28, 0x0c	; 12
    2408:	cd bf       	out	0x3d, r28	; 61
    240a:	de bf       	out	0x3e, r29	; 62
    240c:	7c 01       	movw	r14, r24
    240e:	8b 01       	movw	r16, r22
    uint16_t parStr;
    offset += L_BOILER;

    //Fill things with fixed distance to offset
    uint8_t data[OFF_STRINGFLDS];
    ExtEERead(offset, OFF_STRINGFLDS, GAME, &data[0]);
    2410:	9e 01       	movw	r18, r28
    2412:	2f 5f       	subi	r18, 0xFF	; 255
    2414:	3f 4f       	sbci	r19, 0xFF	; 255
    2416:	40 e0       	ldi	r20, 0x00	; 0
    2418:	6c e0       	ldi	r22, 0x0C	; 12
    241a:	80 96       	adiw	r24, 0x20	; 32
    241c:	0e 94 41 08 	call	0x1082	; 0x1082 <ExtEERead>
    object->addrNextObj = (data[OFF_NEXTOBJ]<<8|data[OFF_NEXTOBJ+1])+L_BOILER;
    2420:	89 81       	ldd	r24, Y+1	; 0x01
    2422:	9a 81       	ldd	r25, Y+2	; 0x02
    2424:	98 27       	eor	r25, r24
    2426:	89 27       	eor	r24, r25
    2428:	98 27       	eor	r25, r24
    242a:	80 96       	adiw	r24, 0x20	; 32
    242c:	f8 01       	movw	r30, r16
    242e:	80 83       	st	Z, r24
    2430:	91 83       	std	Z+1, r25	; 0x01
    object->addrNextLvl = (data[OFF_NEXTLVL]<<8|data[OFF_NEXTLVL+1])+L_BOILER;
    2432:	8b 81       	ldd	r24, Y+3	; 0x03
    2434:	9c 81       	ldd	r25, Y+4	; 0x04
    2436:	98 27       	eor	r25, r24
    2438:	89 27       	eor	r24, r25
    243a:	98 27       	eor	r25, r24
    243c:	80 96       	adiw	r24, 0x20	; 32
    243e:	82 83       	std	Z+2, r24	; 0x02
    2440:	93 83       	std	Z+3, r25	; 0x03
    2442:	de 01       	movw	r26, r28
    2444:	15 96       	adiw	r26, 0x05	; 5
    2446:	34 96       	adiw	r30, 0x04	; 4
    2448:	c8 01       	movw	r24, r16
    244a:	0c 96       	adiw	r24, 0x0c	; 12
    for (uint8_t x=0; x<BYTE_FIELDS_LEN; ++x){
        object->byteField[x]=data[x+OFF_BYTEFLDS];
    244c:	2d 91       	ld	r18, X+
    244e:	21 93       	st	Z+, r18
    //Fill things with fixed distance to offset
    uint8_t data[OFF_STRINGFLDS];
    ExtEERead(offset, OFF_STRINGFLDS, GAME, &data[0]);
    object->addrNextObj = (data[OFF_NEXTOBJ]<<8|data[OFF_NEXTOBJ+1])+L_BOILER;
    object->addrNextLvl = (data[OFF_NEXTLVL]<<8|data[OFF_NEXTLVL+1])+L_BOILER;
    for (uint8_t x=0; x<BYTE_FIELDS_LEN; ++x){
    2450:	e8 17       	cp	r30, r24
    2452:	f9 07       	cpc	r31, r25
    2454:	d9 f7       	brne	.-10     	; 0x244c <PopulateObject+0x5c>
        object->byteField[x]=data[x+OFF_BYTEFLDS];
    }

    //Find out where all of the strings begin and how long they are
    offset += OFF_STRINGFLDS;
    2456:	fc e2       	ldi	r31, 0x2C	; 44
    2458:	ef 0e       	add	r14, r31
    245a:	f1 1c       	adc	r15, r1
    245c:	58 01       	movw	r10, r16
    for(uint8_t x=0; x<STRING_FIELDS_LEN; ++x){
    245e:	d1 2c       	mov	r13, r1
        
        //Determine length
        ExtEERead(offset, 3, GAME, &data[0]);
    2460:	9e 01       	movw	r18, r28
    2462:	2f 5f       	subi	r18, 0xFF	; 255
    2464:	3f 4f       	sbci	r19, 0xFF	; 255
    2466:	40 e0       	ldi	r20, 0x00	; 0
    2468:	63 e0       	ldi	r22, 0x03	; 3
    246a:	c7 01       	movw	r24, r14
    246c:	0e 94 41 08 	call	0x1082	; 0x1082 <ExtEERead>
    2470:	89 81       	ldd	r24, Y+1	; 0x01
    2472:	9a 81       	ldd	r25, Y+2	; 0x02
    2474:	98 27       	eor	r25, r24
    2476:	89 27       	eor	r24, r25
    2478:	98 27       	eor	r25, r24
        parStr = (data[0]<<8|data[1]);
        offset += 2;
    247a:	97 01       	movw	r18, r14
    247c:	2e 5f       	subi	r18, 0xFE	; 254
    247e:	3f 4f       	sbci	r19, 0xFF	; 255
        if (x >= OPEN_ACL_MSG){
    2480:	43 e0       	ldi	r20, 0x03	; 3
    2482:	4d 15       	cp	r20, r13
    2484:	80 f4       	brcc	.+32     	; 0x24a6 <PopulateObject+0xb6>
            object->lenStr[x]= parStr-1;
    2486:	ac 01       	movw	r20, r24
    2488:	41 50       	subi	r20, 0x01	; 1
    248a:	51 09       	sbc	r21, r1
    248c:	f8 01       	movw	r30, r16
    248e:	42 8f       	std	Z+26, r20	; 0x1a
    2490:	53 8f       	std	Z+27, r21	; 0x1b
            object->addrStr[x]=offset+1;
    2492:	f3 e0       	ldi	r31, 0x03	; 3
    2494:	ef 0e       	add	r14, r31
    2496:	f1 1c       	adc	r15, r1
    2498:	f8 01       	movw	r30, r16
    249a:	e4 86       	std	Z+12, r14	; 0x0c
    249c:	f5 86       	std	Z+13, r15	; 0x0d
            object->effect[x-OPEN_ACL_MSG] = data[2];
    249e:	4b 81       	ldd	r20, Y+3	; 0x03
    24a0:	f5 01       	movw	r30, r10
    24a2:	44 a3       	std	Z+36, r20	; 0x24
    24a4:	05 c0       	rjmp	.+10     	; 0x24b0 <PopulateObject+0xc0>
        } else {
            object->lenStr[x]= parStr;
    24a6:	f8 01       	movw	r30, r16
    24a8:	82 8f       	std	Z+26, r24	; 0x1a
    24aa:	93 8f       	std	Z+27, r25	; 0x1b
            object->addrStr[x]=offset;
    24ac:	24 87       	std	Z+12, r18	; 0x0c
    24ae:	35 87       	std	Z+13, r19	; 0x0d
        }
        
        //Determine string start location for next field
        offset += parStr;
    24b0:	7c 01       	movw	r14, r24
    24b2:	e2 0e       	add	r14, r18
    24b4:	f3 1e       	adc	r15, r19
        object->byteField[x]=data[x+OFF_BYTEFLDS];
    }

    //Find out where all of the strings begin and how long they are
    offset += OFF_STRINGFLDS;
    for(uint8_t x=0; x<STRING_FIELDS_LEN; ++x){
    24b6:	d3 94       	inc	r13
    24b8:	0e 5f       	subi	r16, 0xFE	; 254
    24ba:	1f 4f       	sbci	r17, 0xFF	; 255
    24bc:	ff ef       	ldi	r31, 0xFF	; 255
    24be:	af 1a       	sub	r10, r31
    24c0:	bf 0a       	sbc	r11, r31
    24c2:	47 e0       	ldi	r20, 0x07	; 7
    24c4:	d4 12       	cpse	r13, r20
    24c6:	cc cf       	rjmp	.-104    	; 0x2460 <PopulateObject+0x70>
        }
        
        //Determine string start location for next field
        offset += parStr;
    }    
}
    24c8:	2c 96       	adiw	r28, 0x0c	; 12
    24ca:	cd bf       	out	0x3d, r28	; 61
    24cc:	de bf       	out	0x3e, r29	; 62
    24ce:	df 91       	pop	r29
    24d0:	cf 91       	pop	r28
    24d2:	1f 91       	pop	r17
    24d4:	0f 91       	pop	r16
    24d6:	ff 90       	pop	r15
    24d8:	ef 90       	pop	r14
    24da:	df 90       	pop	r13
    24dc:	bf 90       	pop	r11
    24de:	af 90       	pop	r10
    24e0:	08 95       	ret

000024e2 <CheckLetter>:

//Check if the entered letter corresponds with a name
uint8_t CheckLetter(uint16_t object, uint8_t letter){
    24e2:	cf 92       	push	r12
    24e4:	df 92       	push	r13
    24e6:	ef 92       	push	r14
    24e8:	ff 92       	push	r15
    24ea:	0f 93       	push	r16
    24ec:	1f 93       	push	r17
    24ee:	cf 93       	push	r28
    24f0:	df 93       	push	r29
    24f2:	cd b7       	in	r28, 0x3d	; 61
    24f4:	de b7       	in	r29, 0x3e	; 62
    24f6:	a0 97       	sbiw	r28, 0x20	; 32
    24f8:	cd bf       	out	0x3d, r28	; 61
    24fa:	de bf       	out	0x3e, r29	; 62
    24fc:	c6 2e       	mov	r12, r22
    
    uint8_t found = 0;
    uint8_t data[32];

    object += L_BOILER;
    24fe:	7c 01       	movw	r14, r24
    2500:	20 e2       	ldi	r18, 0x20	; 32
    2502:	e2 0e       	add	r14, r18
    2504:	f1 1c       	adc	r15, r1
    ExtEERead(object+OFF_STRINGFLDS, 2, GAME, &data[0]);
    2506:	9e 01       	movw	r18, r28
    2508:	2f 5f       	subi	r18, 0xFF	; 255
    250a:	3f 4f       	sbci	r19, 0xFF	; 255
    250c:	40 e0       	ldi	r20, 0x00	; 0
    250e:	62 e0       	ldi	r22, 0x02	; 2
    2510:	8c 96       	adiw	r24, 0x2c	; 44
    2512:	0e 94 41 08 	call	0x1082	; 0x1082 <ExtEERead>
    uint8_t x = data[1]; //Assuming a name is not longer than 255 characters.
    2516:	1a 81       	ldd	r17, Y+2	; 0x02
}

//Check if the entered letter corresponds with a name
uint8_t CheckLetter(uint16_t object, uint8_t letter){
    
    uint8_t found = 0;
    2518:	d1 2c       	mov	r13, r1

    object += L_BOILER;
    ExtEERead(object+OFF_STRINGFLDS, 2, GAME, &data[0]);
    uint8_t x = data[1]; //Assuming a name is not longer than 255 characters.

    while (x){
    251a:	11 23       	and	r17, r17
    251c:	59 f1       	breq	.+86     	; 0x2574 <CheckLetter+0x92>
    251e:	01 2f       	mov	r16, r17
    2520:	11 32       	cpi	r17, 0x21	; 33
    2522:	08 f0       	brcs	.+2      	; 0x2526 <CheckLetter+0x44>
    2524:	00 e2       	ldi	r16, 0x20	; 32
        uint8_t max;
        if (x>32) max = 32; else max = x;
        ExtEERead(object+OFF_STRINGFLDS+2, max, GAME, &data[0]);
    2526:	9e 01       	movw	r18, r28
    2528:	2f 5f       	subi	r18, 0xFF	; 255
    252a:	3f 4f       	sbci	r19, 0xFF	; 255
    252c:	40 e0       	ldi	r20, 0x00	; 0
    252e:	60 2f       	mov	r22, r16
    2530:	c7 01       	movw	r24, r14
    2532:	0e 96       	adiw	r24, 0x0e	; 14
    2534:	0e 94 41 08 	call	0x1082	; 0x1082 <ExtEERead>
    2538:	fe 01       	movw	r30, r28
    253a:	31 96       	adiw	r30, 0x01	; 1
        for (uint8_t y=0; y<max; ++y){
    253c:	80 e0       	ldi	r24, 0x00	; 0
            if (found){
    253e:	dd 20       	and	r13, r13
    2540:	61 f0       	breq	.+24     	; 0x255a <CheckLetter+0x78>
                if ((data[y]|0x20) == letter) return 1; else return 0;
    2542:	e1 e0       	ldi	r30, 0x01	; 1
    2544:	f0 e0       	ldi	r31, 0x00	; 0
    2546:	ec 0f       	add	r30, r28
    2548:	fd 1f       	adc	r31, r29
    254a:	e8 0f       	add	r30, r24
    254c:	f1 1d       	adc	r31, r1
    254e:	90 81       	ld	r25, Z
    2550:	90 62       	ori	r25, 0x20	; 32
    2552:	81 e0       	ldi	r24, 0x01	; 1
    2554:	9c 11       	cpse	r25, r12
    2556:	0e c0       	rjmp	.+28     	; 0x2574 <CheckLetter+0x92>
    2558:	0e c0       	rjmp	.+28     	; 0x2576 <CheckLetter+0x94>
            }
            if (data[y] == '[') found = 1;
    255a:	91 91       	ld	r25, Z+
    255c:	dd 24       	eor	r13, r13
    255e:	d3 94       	inc	r13
    2560:	9b 35       	cpi	r25, 0x5B	; 91
    2562:	09 f0       	breq	.+2      	; 0x2566 <CheckLetter+0x84>
    2564:	d1 2c       	mov	r13, r1

    while (x){
        uint8_t max;
        if (x>32) max = 32; else max = x;
        ExtEERead(object+OFF_STRINGFLDS+2, max, GAME, &data[0]);
        for (uint8_t y=0; y<max; ++y){
    2566:	8f 5f       	subi	r24, 0xFF	; 255
    2568:	80 17       	cp	r24, r16
    256a:	48 f3       	brcs	.-46     	; 0x253e <CheckLetter+0x5c>
            if (found){
                if ((data[y]|0x20) == letter) return 1; else return 0;
            }
            if (data[y] == '[') found = 1;
        }
        object += max;
    256c:	e0 0e       	add	r14, r16
    256e:	f1 1c       	adc	r15, r1
        x -= max;
    2570:	10 1b       	sub	r17, r16
    2572:	d3 cf       	rjmp	.-90     	; 0x251a <CheckLetter+0x38>
    }
    return 0;
    2574:	80 e0       	ldi	r24, 0x00	; 0
}
    2576:	a0 96       	adiw	r28, 0x20	; 32
    2578:	cd bf       	out	0x3d, r28	; 61
    257a:	de bf       	out	0x3e, r29	; 62
    257c:	df 91       	pop	r29
    257e:	cf 91       	pop	r28
    2580:	1f 91       	pop	r17
    2582:	0f 91       	pop	r16
    2584:	ff 90       	pop	r15
    2586:	ef 90       	pop	r14
    2588:	df 90       	pop	r13
    258a:	cf 90       	pop	r12
    258c:	08 95       	ret

0000258e <FindChild>:

//Returns the child's address if the child is visible and the search letter matches
uint16_t FindChild(uint16_t parent, uint8_t letter, uint16_t start){
    258e:	af 92       	push	r10
    2590:	bf 92       	push	r11
    2592:	df 92       	push	r13
    2594:	ef 92       	push	r14
    2596:	ff 92       	push	r15
    2598:	0f 93       	push	r16
    259a:	1f 93       	push	r17
    259c:	cf 93       	push	r28
    259e:	df 93       	push	r29
    25a0:	00 d0       	rcall	.+0      	; 0x25a2 <FindChild+0x14>
    25a2:	00 d0       	rcall	.+0      	; 0x25a4 <FindChild+0x16>
    25a4:	cd b7       	in	r28, 0x3d	; 61
    25a6:	de b7       	in	r29, 0x3e	; 62
    25a8:	d6 2e       	mov	r13, r22
    25aa:	5a 01       	movw	r10, r20
    
    uint16_t child = parent;
    uint8_t data[4];

    ExtEERead(child+L_BOILER, 4, GAME, &data[0]);
    25ac:	9e 01       	movw	r18, r28
    25ae:	2f 5f       	subi	r18, 0xFF	; 255
    25b0:	3f 4f       	sbci	r19, 0xFF	; 255
    25b2:	40 e0       	ldi	r20, 0x00	; 0
    25b4:	64 e0       	ldi	r22, 0x04	; 4
    25b6:	80 96       	adiw	r24, 0x20	; 32
    25b8:	0e 94 41 08 	call	0x1082	; 0x1082 <ExtEERead>
    25bc:	e9 80       	ldd	r14, Y+1	; 0x01
    25be:	fa 80       	ldd	r15, Y+2	; 0x02
    25c0:	fe 24       	eor	r15, r14
    25c2:	ef 24       	eor	r14, r15
    25c4:	fe 24       	eor	r15, r14
    25c6:	0b 81       	ldd	r16, Y+3	; 0x03
    25c8:	1c 81       	ldd	r17, Y+4	; 0x04
    25ca:	10 27       	eor	r17, r16
    25cc:	01 27       	eor	r16, r17
    25ce:	10 27       	eor	r17, r16
    parent = (data[0]<<8|data[1]);    //Next object on parent level
    child =  (data[2]<<8|data[3]);    //First object on child level

    //As long as the child is within the parent's range
    while (parent>child){
    25d0:	0e 15       	cp	r16, r14
    25d2:	1f 05       	cpc	r17, r15
    25d4:	48 f5       	brcc	.+82     	; 0x2628 <FindChild+0x9a>

        //If child's address is higher than the start address, perform search for letter
        if (child>start){
    25d6:	a0 16       	cp	r10, r16
    25d8:	b1 06       	cpc	r11, r17
    25da:	60 f0       	brcs	.+24     	; 0x25f4 <FindChild+0x66>
                if ((letter == 0)||(CheckLetter(child, letter))) return child;
            }
        }

        //Not visible or name not right
        ExtEERead(child+L_BOILER, 2, GAME, &data[0]);
    25dc:	9e 01       	movw	r18, r28
    25de:	2f 5f       	subi	r18, 0xFF	; 255
    25e0:	3f 4f       	sbci	r19, 0xFF	; 255
    25e2:	40 e0       	ldi	r20, 0x00	; 0
    25e4:	62 e0       	ldi	r22, 0x02	; 2
    25e6:	c8 01       	movw	r24, r16
    25e8:	80 96       	adiw	r24, 0x20	; 32
    25ea:	0e 94 41 08 	call	0x1082	; 0x1082 <ExtEERead>
    25ee:	09 81       	ldd	r16, Y+1	; 0x01
    25f0:	1a 81       	ldd	r17, Y+2	; 0x02
    25f2:	eb cf       	rjmp	.-42     	; 0x25ca <FindChild+0x3c>
    //As long as the child is within the parent's range
    while (parent>child){

        //If child's address is higher than the start address, perform search for letter
        if (child>start){
            ExtEERead(child+OFF_BYTEFLDS+VISIBLE_ACL+L_BOILER, 1, GAME, &data[0]);
    25f4:	9e 01       	movw	r18, r28
    25f6:	2f 5f       	subi	r18, 0xFF	; 255
    25f8:	3f 4f       	sbci	r19, 0xFF	; 255
    25fa:	40 e0       	ldi	r20, 0x00	; 0
    25fc:	61 e0       	ldi	r22, 0x01	; 1
    25fe:	c8 01       	movw	r24, r16
    2600:	85 96       	adiw	r24, 0x25	; 37
    2602:	0e 94 41 08 	call	0x1082	; 0x1082 <ExtEERead>
            if ((data[0] == 0)||(CheckState(data[0]))) {
    2606:	89 81       	ldd	r24, Y+1	; 0x01
    2608:	81 11       	cpse	r24, r1
    260a:	03 c0       	rjmp	.+6      	; 0x2612 <FindChild+0x84>
                if ((letter == 0)||(CheckLetter(child, letter))) return child;
    260c:	d1 10       	cpse	r13, r1
    260e:	06 c0       	rjmp	.+12     	; 0x261c <FindChild+0x8e>
    2610:	0e c0       	rjmp	.+28     	; 0x262e <FindChild+0xa0>
    while (parent>child){

        //If child's address is higher than the start address, perform search for letter
        if (child>start){
            ExtEERead(child+OFF_BYTEFLDS+VISIBLE_ACL+L_BOILER, 1, GAME, &data[0]);
            if ((data[0] == 0)||(CheckState(data[0]))) {
    2612:	0e 94 0c 0a 	call	0x1418	; 0x1418 <CheckState>
    2616:	81 11       	cpse	r24, r1
    2618:	f9 cf       	rjmp	.-14     	; 0x260c <FindChild+0x7e>
    261a:	e0 cf       	rjmp	.-64     	; 0x25dc <FindChild+0x4e>
                if ((letter == 0)||(CheckLetter(child, letter))) return child;
    261c:	6d 2d       	mov	r22, r13
    261e:	c8 01       	movw	r24, r16
    2620:	60 df       	rcall	.-320    	; 0x24e2 <CheckLetter>
    2622:	88 23       	and	r24, r24
    2624:	d9 f2       	breq	.-74     	; 0x25dc <FindChild+0x4e>
    2626:	03 c0       	rjmp	.+6      	; 0x262e <FindChild+0xa0>

        //Not visible or name not right
        ExtEERead(child+L_BOILER, 2, GAME, &data[0]);
        child = (data[0]<<8|data[1]);    //Next object on child level
        
    } return 0;
    2628:	80 e0       	ldi	r24, 0x00	; 0
    262a:	90 e0       	ldi	r25, 0x00	; 0
    262c:	01 c0       	rjmp	.+2      	; 0x2630 <FindChild+0xa2>
    262e:	c8 01       	movw	r24, r16
}
    2630:	24 96       	adiw	r28, 0x04	; 4
    2632:	cd bf       	out	0x3d, r28	; 61
    2634:	de bf       	out	0x3e, r29	; 62
    2636:	df 91       	pop	r29
    2638:	cf 91       	pop	r28
    263a:	1f 91       	pop	r17
    263c:	0f 91       	pop	r16
    263e:	ff 90       	pop	r15
    2640:	ef 90       	pop	r14
    2642:	df 90       	pop	r13
    2644:	bf 90       	pop	r11
    2646:	af 90       	pop	r10
    2648:	08 95       	ret

0000264a <InpOkChk>:

//Allow only a(A) to z(Z) and 0 to 9 as input
uint8_t InpOkChk(uint8_t test){
    test |= 0x20;
    264a:	80 62       	ori	r24, 0x20	; 32
    if ((test>='a')&&(test<='z')) return 1;
    264c:	9f e9       	ldi	r25, 0x9F	; 159
    264e:	98 0f       	add	r25, r24
    2650:	9a 31       	cpi	r25, 0x1A	; 26
    2652:	38 f0       	brcs	.+14     	; 0x2662 <InpOkChk+0x18>
    2654:	90 ed       	ldi	r25, 0xD0	; 208
    2656:	98 0f       	add	r25, r24
    2658:	81 e0       	ldi	r24, 0x01	; 1
    265a:	9a 30       	cpi	r25, 0x0A	; 10
    265c:	18 f0       	brcs	.+6      	; 0x2664 <InpOkChk+0x1a>
    265e:	80 e0       	ldi	r24, 0x00	; 0
    2660:	08 95       	ret
    2662:	81 e0       	ldi	r24, 0x01	; 1
    if ((test>='0')&&(test<='9')) return 1;
    return 0;
}
    2664:	08 95       	ret

00002666 <CleanInput>:

//Cleans input of garbage and returns length of cleaned input "o->d2  !\0" becomes "od2\0"
uint8_t CleanInput(uint8_t *data){
    2666:	0f 93       	push	r16
    2668:	1f 93       	push	r17
    266a:	cf 93       	push	r28
    266c:	df 93       	push	r29
    266e:	8c 01       	movw	r16, r24
    uint8_t cnt = 0;
    for (uint8_t x=0; data[x]!=0; ++x){
    2670:	d0 e0       	ldi	r29, 0x00	; 0
    return 0;
}

//Cleans input of garbage and returns length of cleaned input "o->d2  !\0" becomes "od2\0"
uint8_t CleanInput(uint8_t *data){
    uint8_t cnt = 0;
    2672:	c0 e0       	ldi	r28, 0x00	; 0
    for (uint8_t x=0; data[x]!=0; ++x){
    2674:	f8 01       	movw	r30, r16
    2676:	ed 0f       	add	r30, r29
    2678:	f1 1d       	adc	r31, r1
    267a:	20 81       	ld	r18, Z
    267c:	8c 2f       	mov	r24, r28
    267e:	90 e0       	ldi	r25, 0x00	; 0
    2680:	22 23       	and	r18, r18
    2682:	51 f0       	breq	.+20     	; 0x2698 <CleanInput+0x32>
        data[cnt] = data[x];
    2684:	d8 01       	movw	r26, r16
    2686:	a8 0f       	add	r26, r24
    2688:	b9 1f       	adc	r27, r25
    268a:	2c 93       	st	X, r18
        if (InpOkChk(data[x])) ++cnt;
    268c:	80 81       	ld	r24, Z
    268e:	dd df       	rcall	.-70     	; 0x264a <InpOkChk>
    2690:	81 11       	cpse	r24, r1
    2692:	cf 5f       	subi	r28, 0xFF	; 255
}

//Cleans input of garbage and returns length of cleaned input "o->d2  !\0" becomes "od2\0"
uint8_t CleanInput(uint8_t *data){
    uint8_t cnt = 0;
    for (uint8_t x=0; data[x]!=0; ++x){
    2694:	df 5f       	subi	r29, 0xFF	; 255
    2696:	ee cf       	rjmp	.-36     	; 0x2674 <CleanInput+0xe>
        data[cnt] = data[x];
        if (InpOkChk(data[x])) ++cnt;
    }
    data[cnt] = 0;
    2698:	f8 01       	movw	r30, r16
    269a:	e8 0f       	add	r30, r24
    269c:	f9 1f       	adc	r31, r25
    269e:	10 82       	st	Z, r1
    return cnt;
}
    26a0:	8c 2f       	mov	r24, r28
    26a2:	df 91       	pop	r29
    26a4:	cf 91       	pop	r28
    26a6:	1f 91       	pop	r17
    26a8:	0f 91       	pop	r16
    26aa:	08 95       	ret

000026ac <CheckSend>:

//Send routine, optimized for low memory usage
uint8_t CheckSend(){
    26ac:	cf 93       	push	r28
    static uint8_t txPart;
    uint8_t EEreadLength=0;

    //Play effects if available and not already playing
    if (effect == 0){
    26ae:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <effect>
    26b2:	90 91 3b 38 	lds	r25, 0x383B	; 0x80383b <effect+0x1>
    26b6:	89 2b       	or	r24, r25
    26b8:	39 f4       	brne	.+14     	; 0x26c8 <CheckSend+0x1c>
        effect = currObj.byteField[EFFECTS];
    26ba:	80 91 1f 3a 	lds	r24, 0x3A1F	; 0x803a1f <currObj+0x4>
    26be:	90 e0       	ldi	r25, 0x00	; 0
    26c0:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <effect>
    26c4:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <effect+0x1>
    }

    //Check if more string(part)s have to be sent to the serial output if previous send operation is completed
    if ((txAddrNow < TXLISTLEN) && serTxDone){
    26c8:	20 91 47 3a 	lds	r18, 0x3A47	; 0x803a47 <txAddrNow>
    26cc:	28 30       	cpi	r18, 0x08	; 8
    26ce:	08 f0       	brcs	.+2      	; 0x26d2 <CheckSend+0x26>
    26d0:	49 c0       	rjmp	.+146    	; 0x2764 <CheckSend+0xb8>
    26d2:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <serTxDone>
    26d6:	88 23       	and	r24, r24
    26d8:	09 f4       	brne	.+2      	; 0x26dc <CheckSend+0x30>
    26da:	44 c0       	rjmp	.+136    	; 0x2764 <CheckSend+0xb8>
        if (txStrLen[txAddrNow] == 0){
    26dc:	82 2f       	mov	r24, r18
    26de:	90 e0       	ldi	r25, 0x00	; 0
    26e0:	fc 01       	movw	r30, r24
    26e2:	e8 5b       	subi	r30, 0xB8	; 184
    26e4:	f5 4c       	sbci	r31, 0xC5	; 197
    26e6:	e0 81       	ld	r30, Z
    26e8:	e1 11       	cpse	r30, r1
    26ea:	06 c0       	rjmp	.+12     	; 0x26f8 <CheckSend+0x4c>
            txPart = 0;
    26ec:	10 92 06 39 	sts	0x3906, r1	; 0x803906 <txPart.3937>
            txAddrNow = TXLISTLEN;
    26f0:	88 e0       	ldi	r24, 0x08	; 8
    26f2:	80 93 47 3a 	sts	0x3A47, r24	; 0x803a47 <txAddrNow>
    26f6:	2e c0       	rjmp	.+92     	; 0x2754 <CheckSend+0xa8>
        } else if (txPart < txStrLen[txAddrNow]){
    26f8:	50 91 06 39 	lds	r21, 0x3906	; 0x803906 <txPart.3937>
    26fc:	5e 17       	cp	r21, r30
    26fe:	60 f5       	brcc	.+88     	; 0x2758 <CheckSend+0xac>
            EEreadLength = txStrLen[txAddrNow]-txPart;
    2700:	ce 2f       	mov	r28, r30
    2702:	c5 1b       	sub	r28, r21
    2704:	c1 32       	cpi	r28, 0x21	; 33
    2706:	08 f0       	brcs	.+2      	; 0x270a <CheckSend+0x5e>
    2708:	c0 e2       	ldi	r28, 0x20	; 32
            if (EEreadLength>=TXLEN) EEreadLength = TXLEN-1;
            ExtEERead(txAddrList[txAddrNow]+txPart, EEreadLength, txTypeNow, &txBuffer[0]);
    270a:	88 0f       	add	r24, r24
    270c:	99 1f       	adc	r25, r25
    270e:	fc 01       	movw	r30, r24
    2710:	e0 5b       	subi	r30, 0xB0	; 176
    2712:	f5 4c       	sbci	r31, 0xC5	; 197
    2714:	80 81       	ld	r24, Z
    2716:	91 81       	ldd	r25, Z+1	; 0x01
    2718:	21 ef       	ldi	r18, 0xF1	; 241
    271a:	3a e3       	ldi	r19, 0x3A	; 58
    271c:	40 91 46 3a 	lds	r20, 0x3A46	; 0x803a46 <txTypeNow>
    2720:	6c 2f       	mov	r22, r28
    2722:	85 0f       	add	r24, r21
    2724:	91 1d       	adc	r25, r1
    2726:	0e 94 41 08 	call	0x1082	; 0x1082 <ExtEERead>
            txPart += EEreadLength;
    272a:	80 91 06 39 	lds	r24, 0x3906	; 0x803906 <txPart.3937>
    272e:	8c 0f       	add	r24, r28
    2730:	80 93 06 39 	sts	0x3906, r24	; 0x803906 <txPart.3937>
            txBuffer[EEreadLength] = 0; //Add string terminator after piece to send to plug memory leak
    2734:	ec 2f       	mov	r30, r28
    2736:	f0 e0       	ldi	r31, 0x00	; 0
    2738:	ef 50       	subi	r30, 0x0F	; 15
    273a:	f5 4c       	sbci	r31, 0xC5	; 197
    273c:	10 82       	st	Z, r1
            if ((txBuffer[0] == 0) && (EEreadLength)) txBuffer[0] = 0xDB; //Block character when data wrong.
    273e:	80 91 f1 3a 	lds	r24, 0x3AF1	; 0x803af1 <txBuffer>
    2742:	81 11       	cpse	r24, r1
    2744:	03 c0       	rjmp	.+6      	; 0x274c <CheckSend+0xa0>
    2746:	8b ed       	ldi	r24, 0xDB	; 219
    2748:	80 93 f1 3a 	sts	0x3AF1, r24	; 0x803af1 <txBuffer>
            SerSend(&txBuffer[0]);
    274c:	81 ef       	ldi	r24, 0xF1	; 241
    274e:	9a e3       	ldi	r25, 0x3A	; 58
    2750:	0e 94 73 08 	call	0x10e6	; 0x10e6 <SerSend>
        } else {
            txPart = 0;
            ++txAddrNow;
        }
    } else if (serTxDone) return 0; //All is sent!
    return 1; //Still sending, do not change the data in the tx variables
    2754:	81 e0       	ldi	r24, 0x01	; 1
    2756:	0b c0       	rjmp	.+22     	; 0x276e <CheckSend+0xc2>
            txPart += EEreadLength;
            txBuffer[EEreadLength] = 0; //Add string terminator after piece to send to plug memory leak
            if ((txBuffer[0] == 0) && (EEreadLength)) txBuffer[0] = 0xDB; //Block character when data wrong.
            SerSend(&txBuffer[0]);
        } else {
            txPart = 0;
    2758:	10 92 06 39 	sts	0x3906, r1	; 0x803906 <txPart.3937>
            ++txAddrNow;
    275c:	2f 5f       	subi	r18, 0xFF	; 255
    275e:	20 93 47 3a 	sts	0x3A47, r18	; 0x803a47 <txAddrNow>
    2762:	f8 cf       	rjmp	.-16     	; 0x2754 <CheckSend+0xa8>
        }
    } else if (serTxDone) return 0; //All is sent!
    2764:	90 91 09 38 	lds	r25, 0x3809	; 0x803809 <serTxDone>
    2768:	81 e0       	ldi	r24, 0x01	; 1
    276a:	91 11       	cpse	r25, r1
    276c:	80 e0       	ldi	r24, 0x00	; 0
    return 1; //Still sending, do not change the data in the tx variables
}
    276e:	cf 91       	pop	r28
    2770:	08 95       	ret

00002772 <CheckResponse>:

//Send another part of the response and play the effect afterwards
uint8_t CheckResponse(){
    2772:	cf 93       	push	r28
    2774:	df 93       	push	r29
    static uint8_t number = 0;
    if (responseList){
    2776:	c0 91 1a 39 	lds	r28, 0x391A	; 0x80391a <responseList>
    277a:	cc 23       	and	r28, r28
    277c:	b1 f1       	breq	.+108    	; 0x27ea <CheckResponse+0x78>
        --responseList;
    277e:	c1 50       	subi	r28, 0x01	; 1
    2780:	c0 93 1a 39 	sts	0x391A, r28	; 0x80391a <responseList>
        if (reactStr[0][number] == CURR_LOC) {
    2784:	d0 91 05 39 	lds	r29, 0x3905	; 0x803905 <number.3941>
    2788:	2d 2f       	mov	r18, r29
    278a:	30 e0       	ldi	r19, 0x00	; 0
    278c:	f9 01       	movw	r30, r18
    278e:	ee 0f       	add	r30, r30
    2790:	ff 1f       	adc	r31, r31
    2792:	e5 5e       	subi	r30, 0xE5	; 229
    2794:	f6 4c       	sbci	r31, 0xC6	; 198
    2796:	80 81       	ld	r24, Z
    2798:	91 81       	ldd	r25, Z+1	; 0x01
    279a:	80 3f       	cpi	r24, 0xF0	; 240
    279c:	4f ef       	ldi	r20, 0xFF	; 255
    279e:	94 07       	cpc	r25, r20
    27a0:	51 f4       	brne	.+20     	; 0x27b6 <CheckResponse+0x44>
            PrepareSending(currObj.addrStr[NAME], currObj.lenStr[NAME], GAME);
    27a2:	60 91 35 3a 	lds	r22, 0x3A35	; 0x803a35 <currObj+0x1a>
    27a6:	70 91 36 3a 	lds	r23, 0x3A36	; 0x803a36 <currObj+0x1b>
    27aa:	40 e0       	ldi	r20, 0x00	; 0
    27ac:	80 91 27 3a 	lds	r24, 0x3A27	; 0x803a27 <currObj+0xc>
    27b0:	90 91 28 3a 	lds	r25, 0x3A28	; 0x803a28 <currObj+0xd>
    27b4:	0d c0       	rjmp	.+26     	; 0x27d0 <CheckResponse+0x5e>
        } else {
            PrepareSending(reactStr[0][number], reactStr[1][number], reactStr[2][number]);
    27b6:	d9 01       	movw	r26, r18
    27b8:	aa 0f       	add	r26, r26
    27ba:	bb 1f       	adc	r27, r27
    27bc:	a5 56       	subi	r26, 0x65	; 101
    27be:	b6 4c       	sbci	r27, 0xC6	; 198
    27c0:	22 0f       	add	r18, r18
    27c2:	33 1f       	adc	r19, r19
    27c4:	f9 01       	movw	r30, r18
    27c6:	e5 5a       	subi	r30, 0xA5	; 165
    27c8:	f6 4c       	sbci	r31, 0xC6	; 198
    27ca:	60 81       	ld	r22, Z
    27cc:	71 81       	ldd	r23, Z+1	; 0x01
    27ce:	4c 91       	ld	r20, X
    27d0:	56 dd       	rcall	.-1364   	; 0x227e <PrepareSending>
        }
        number++;
    27d2:	df 5f       	subi	r29, 0xFF	; 255
    27d4:	d0 93 05 39 	sts	0x3905, r29	; 0x803905 <number.3941>

        if (responseList == 0) {
    27d8:	c1 11       	cpse	r28, r1
    27da:	06 c0       	rjmp	.+12     	; 0x27e8 <CheckResponse+0x76>
            //effect = currObj.byteField[EFFECTS];
            RXCNT = 0;
    27dc:	1d ba       	out	0x1d, r1	; 29
            serRxDone = 0;
    27de:	10 92 44 38 	sts	0x3844, r1	; 0x803844 <serRxDone>
            number = 0;
    27e2:	10 92 05 39 	sts	0x3905, r1	; 0x803905 <number.3941>
    27e6:	01 c0       	rjmp	.+2      	; 0x27ea <CheckResponse+0x78>
            return 0;
        }
        return 1;
    27e8:	c1 e0       	ldi	r28, 0x01	; 1
    }
    return 0;
}
    27ea:	8c 2f       	mov	r24, r28
    27ec:	df 91       	pop	r29
    27ee:	cf 91       	pop	r28
    27f0:	08 95       	ret

000027f2 <CheckInput>:

//User input check (and validation)
uint8_t CheckInput(uint8_t *data){
    27f2:	5f 92       	push	r5
    27f4:	6f 92       	push	r6
    27f6:	7f 92       	push	r7
    27f8:	8f 92       	push	r8
    27fa:	9f 92       	push	r9
    27fc:	af 92       	push	r10
    27fe:	bf 92       	push	r11
    2800:	cf 92       	push	r12
    2802:	df 92       	push	r13
    2804:	ef 92       	push	r14
    2806:	ff 92       	push	r15
    2808:	0f 93       	push	r16
    280a:	1f 93       	push	r17
    280c:	cf 93       	push	r28
    280e:	df 93       	push	r29
    2810:	cd b7       	in	r28, 0x3d	; 61
    2812:	de b7       	in	r29, 0x3e	; 62
    2814:	2a 97       	sbiw	r28, 0x0a	; 10
    2816:	cd bf       	out	0x3d, r28	; 61
    2818:	de bf       	out	0x3e, r29	; 62
    281a:	8c 01       	movw	r16, r24
    
    //Load game data after reboot
    if (currDepth == 0xff) {
    281c:	80 91 2e 38 	lds	r24, 0x382E	; 0x80382e <currDepth>
    2820:	8f 3f       	cpi	r24, 0xFF	; 255
    2822:	49 f4       	brne	.+18     	; 0x2836 <CheckInput+0x44>
        //Start at first location
        PopulateObject(route[0], &currObj);
    2824:	6b e1       	ldi	r22, 0x1B	; 27
    2826:	7a e3       	ldi	r23, 0x3A	; 58
    2828:	80 91 db 39 	lds	r24, 0x39DB	; 0x8039db <route>
    282c:	90 91 dc 39 	lds	r25, 0x39DC	; 0x8039dc <route+0x1>
    2830:	df dd       	rcall	.-1090   	; 0x23f0 <PopulateObject>
        currDepth = 0;
    2832:	10 92 2e 38 	sts	0x382E, r1	; 0x80382e <currDepth>
    }

    if (serRxDone){
    2836:	80 91 44 38 	lds	r24, 0x3844	; 0x803844 <serRxDone>
    283a:	88 23       	and	r24, r24
    283c:	09 f4       	brne	.+2      	; 0x2840 <CheckInput+0x4e>
    283e:	d4 c1       	rjmp	.+936    	; 0x2be8 <CheckInput+0x3f6>

        //Special input requested from user by game
        if (specialInput[0]){
    2840:	80 91 0a 39 	lds	r24, 0x390A	; 0x80390a <specialInput>
    2844:	88 23       	and	r24, r24
    2846:	09 f4       	brne	.+2      	; 0x284a <CheckInput+0x58>
    2848:	4f c0       	rjmp	.+158    	; 0x28e8 <CheckInput+0xf6>
            specialPassed = 0;
    284a:	10 92 09 39 	sts	0x3909, r1	; 0x803909 <specialPassed>
            data[0] = 'a';
    284e:	81 e6       	ldi	r24, 0x61	; 97
    2850:	f8 01       	movw	r30, r16
    2852:	80 83       	st	Z, r24
            
            //Normal code challenge
            if (StartsWith((uint8_t *)&serRx[0], &specialInput[0])) {
    2854:	6a e0       	ldi	r22, 0x0A	; 10
    2856:	79 e3       	ldi	r23, 0x39	; 57
    2858:	85 e7       	ldi	r24, 0x75	; 117
    285a:	9a e3       	ldi	r25, 0x3A	; 58
    285c:	f6 dc       	rcall	.-1556   	; 0x224a <StartsWith>
    285e:	f8 2e       	mov	r15, r24
    2860:	88 23       	and	r24, r24
    2862:	21 f0       	breq	.+8      	; 0x286c <CheckInput+0x7a>
                specialPassed = 1;
    2864:	81 e0       	ldi	r24, 0x01	; 1
    2866:	80 93 09 39 	sts	0x3909, r24	; 0x803909 <specialPassed>
    286a:	04 c0       	rjmp	.+8      	; 0x2874 <CheckInput+0x82>

            //Special challenge 1
            } else if ((specialInput[0] == '1')&&(specialInput[2] == 0)) {
    286c:	80 91 0a 39 	lds	r24, 0x390A	; 0x80390a <specialInput>
    2870:	81 33       	cpi	r24, 0x31	; 49
    2872:	11 f0       	breq	.+4      	; 0x2878 <CheckInput+0x86>
                responseList = SetStandardResponse((3*MAX_CHEATS));
                return 1;
            }
        } 
        //Data received, but not any of the commands above
        return 0;
    2874:	f1 2c       	mov	r15, r1
    2876:	ba c1       	rjmp	.+884    	; 0x2bec <CheckInput+0x3fa>
            //Normal code challenge
            if (StartsWith((uint8_t *)&serRx[0], &specialInput[0])) {
                specialPassed = 1;

            //Special challenge 1
            } else if ((specialInput[0] == '1')&&(specialInput[2] == 0)) {
    2878:	80 91 0c 39 	lds	r24, 0x390C	; 0x80390c <specialInput+0x2>
    287c:	81 11       	cpse	r24, r1
    287e:	fa cf       	rjmp	.-12     	; 0x2874 <CheckInput+0x82>
                uint8_t inputLen = CleanInput((uint8_t *)&serRx[0]);
    2880:	85 e7       	ldi	r24, 0x75	; 117
    2882:	9a e3       	ldi	r25, 0x3A	; 58
    2884:	f0 de       	rcall	.-544    	; 0x2666 <CleanInput>
                specialPassed = 2;
    2886:	92 e0       	ldi	r25, 0x02	; 2
    2888:	90 93 09 39 	sts	0x3909, r25	; 0x803909 <specialPassed>
                data[1] = 0;
    288c:	f8 01       	movw	r30, r16
    288e:	11 82       	std	Z+1, r1	; 0x01

                if (inputLen >= 2) {
    2890:	82 30       	cpi	r24, 0x02	; 2
    2892:	80 f3       	brcs	.-32     	; 0x2874 <CheckInput+0x82>
                    if ((serRx[0] >= '1') && (serRx[0] <= '4')) {
    2894:	80 91 75 3a 	lds	r24, 0x3A75	; 0x803a75 <serRx>
    2898:	81 33       	cpi	r24, 0x31	; 49
    289a:	60 f3       	brcs	.-40     	; 0x2874 <CheckInput+0x82>
    289c:	80 91 75 3a 	lds	r24, 0x3A75	; 0x803a75 <serRx>
    28a0:	85 33       	cpi	r24, 0x35	; 53
    28a2:	40 f7       	brcc	.-48     	; 0x2874 <CheckInput+0x82>
                        serRx[1] |= 0x20;
    28a4:	80 91 76 3a 	lds	r24, 0x3A76	; 0x803a76 <serRx+0x1>
    28a8:	80 62       	ori	r24, 0x20	; 32
    28aa:	80 93 76 3a 	sts	0x3A76, r24	; 0x803a76 <serRx+0x1>
                        if ((serRx[1] == 'a')||(serRx[1] == 'e')||(serRx[1] == 'f')||(serRx[1] == 'w')) {
    28ae:	80 91 76 3a 	lds	r24, 0x3A76	; 0x803a76 <serRx+0x1>
    28b2:	81 36       	cpi	r24, 0x61	; 97
    28b4:	61 f0       	breq	.+24     	; 0x28ce <CheckInput+0xdc>
    28b6:	80 91 76 3a 	lds	r24, 0x3A76	; 0x803a76 <serRx+0x1>
    28ba:	85 36       	cpi	r24, 0x65	; 101
    28bc:	41 f0       	breq	.+16     	; 0x28ce <CheckInput+0xdc>
    28be:	80 91 76 3a 	lds	r24, 0x3A76	; 0x803a76 <serRx+0x1>
    28c2:	86 36       	cpi	r24, 0x66	; 102
    28c4:	21 f0       	breq	.+8      	; 0x28ce <CheckInput+0xdc>
    28c6:	80 91 76 3a 	lds	r24, 0x3A76	; 0x803a76 <serRx+0x1>
    28ca:	87 37       	cpi	r24, 0x77	; 119
    28cc:	99 f6       	brne	.-90     	; 0x2874 <CheckInput+0x82>
                            data[1] = specialInput[1]+0x11;
    28ce:	80 91 0b 39 	lds	r24, 0x390B	; 0x80390b <specialInput+0x1>
    28d2:	8f 5e       	subi	r24, 0xEF	; 239
    28d4:	f8 01       	movw	r30, r16
    28d6:	81 83       	std	Z+1, r24	; 0x01
                            data[2] = serRx[0];
    28d8:	80 91 75 3a 	lds	r24, 0x3A75	; 0x803a75 <serRx>
    28dc:	82 83       	std	Z+2, r24	; 0x02
                            data[3] = serRx[1];
    28de:	80 91 76 3a 	lds	r24, 0x3A76	; 0x803a76 <serRx+0x1>
    28e2:	83 83       	std	Z+3, r24	; 0x03
                            data[4] = 0;
    28e4:	14 82       	std	Z+4, r1	; 0x04
    28e6:	82 c1       	rjmp	.+772    	; 0x2bec <CheckInput+0x3fa>
        } else {
      
            //SetResponse(0, A_LF, 4, TEASER);

            //Change status bit
            if ((serRx[0] == '#')&&(RXCNT == 6)){
    28e8:	80 91 75 3a 	lds	r24, 0x3A75	; 0x803a75 <serRx>
    28ec:	83 32       	cpi	r24, 0x23	; 35
    28ee:	89 f5       	brne	.+98     	; 0x2952 <CheckInput+0x160>
    28f0:	8d b3       	in	r24, 0x1d	; 29
    28f2:	86 30       	cpi	r24, 0x06	; 6
    28f4:	71 f5       	brne	.+92     	; 0x2952 <CheckInput+0x160>
    28f6:	81 e0       	ldi	r24, 0x01	; 1
    28f8:	90 e0       	ldi	r25, 0x00	; 0
    28fa:	10 e0       	ldi	r17, 0x00	; 0
                uint8_t bitNr = 0;

                for (uint8_t x=1; x<4; ++x) {
                    serRx[x] -= '0';
    28fc:	fc 01       	movw	r30, r24
    28fe:	eb 58       	subi	r30, 0x8B	; 139
    2900:	f5 4c       	sbci	r31, 0xC5	; 197
    2902:	20 81       	ld	r18, Z
    2904:	20 53       	subi	r18, 0x30	; 48
    2906:	20 83       	st	Z, r18
                    bitNr *= 10;
    2908:	11 0f       	add	r17, r17
    290a:	21 2f       	mov	r18, r17
    290c:	22 0f       	add	r18, r18
    290e:	22 0f       	add	r18, r18
    2910:	12 0f       	add	r17, r18
                    if (serRx[1] > 2) break;
    2912:	20 91 76 3a 	lds	r18, 0x3A76	; 0x803a76 <serRx+0x1>
    2916:	23 30       	cpi	r18, 0x03	; 3
    2918:	48 f4       	brcc	.+18     	; 0x292c <CheckInput+0x13a>
                    if (serRx[x] < 10) {
    291a:	20 81       	ld	r18, Z
    291c:	2a 30       	cpi	r18, 0x0A	; 10
    291e:	b8 f4       	brcc	.+46     	; 0x294e <CheckInput+0x15c>
                        bitNr += serRx[x];
    2920:	20 81       	ld	r18, Z
    2922:	12 0f       	add	r17, r18
    2924:	01 96       	adiw	r24, 0x01	; 1

            //Change status bit
            if ((serRx[0] == '#')&&(RXCNT == 6)){
                uint8_t bitNr = 0;

                for (uint8_t x=1; x<4; ++x) {
    2926:	84 30       	cpi	r24, 0x04	; 4
    2928:	91 05       	cpc	r25, r1
    292a:	41 f7       	brne	.-48     	; 0x28fc <CheckInput+0x10a>
                        continue;
                    }
                    bitNr = 0;
                    break;
                }
                if ((bitNr)&&(bitNr!=128)) {
    292c:	81 2f       	mov	r24, r17
    292e:	8f 77       	andi	r24, 0x7F	; 127
    2930:	71 f0       	breq	.+28     	; 0x294e <CheckInput+0x15c>
                    if (Cheat(0xff-bitNr, serRx[4]<<8|serRx[5])) UpdateState(bitNr);
    2932:	80 91 79 3a 	lds	r24, 0x3A79	; 0x803a79 <serRx+0x4>
    2936:	60 91 7a 3a 	lds	r22, 0x3A7A	; 0x803a7a <serRx+0x5>
    293a:	70 e0       	ldi	r23, 0x00	; 0
    293c:	78 2b       	or	r23, r24
    293e:	81 2f       	mov	r24, r17
    2940:	80 95       	com	r24
    2942:	2e dc       	rcall	.-1956   	; 0x21a0 <Cheat>
    2944:	88 23       	and	r24, r24
    2946:	19 f0       	breq	.+6      	; 0x294e <CheckInput+0x15c>
    2948:	81 2f       	mov	r24, r17
    294a:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <UpdateState>
                }
                
                responseList = SetStandardResponse(1);
    294e:	81 e0       	ldi	r24, 0x01	; 1
    2950:	48 c1       	rjmp	.+656    	; 0x2be2 <CheckInput+0x3f0>
    2952:	d8 01       	movw	r26, r16
    2954:	80 e0       	ldi	r24, 0x00	; 0
    2956:	90 e0       	ldi	r25, 0x00	; 0
                return 1;            
            }
            
            //Read up to the \0 character and convert to lower case.
            for (uint8_t x=0; x<RXLEN; ++x){
                if ((serRx[x]<'A')||(serRx[x]>'Z')) data[x]=serRx[x]; else data[x]=serRx[x]|0x20;
    2958:	fc 01       	movw	r30, r24
    295a:	eb 58       	subi	r30, 0x8B	; 139
    295c:	f5 4c       	sbci	r31, 0xC5	; 197
    295e:	20 81       	ld	r18, Z
    2960:	21 34       	cpi	r18, 0x41	; 65
    2962:	18 f0       	brcs	.+6      	; 0x296a <CheckInput+0x178>
    2964:	20 81       	ld	r18, Z
    2966:	2b 35       	cpi	r18, 0x5B	; 91
    2968:	10 f0       	brcs	.+4      	; 0x296e <CheckInput+0x17c>
    296a:	20 81       	ld	r18, Z
    296c:	02 c0       	rjmp	.+4      	; 0x2972 <CheckInput+0x180>
    296e:	20 81       	ld	r18, Z
    2970:	20 62       	ori	r18, 0x20	; 32
    2972:	2c 93       	st	X, r18
                if (serRx[x] == 0) {
    2974:	20 81       	ld	r18, Z
    2976:	21 11       	cpse	r18, r1
    2978:	05 c0       	rjmp	.+10     	; 0x2984 <CheckInput+0x192>
                    data[x] = 0;
    297a:	f8 01       	movw	r30, r16
    297c:	e8 0f       	add	r30, r24
    297e:	f1 1d       	adc	r31, r1
    2980:	10 82       	st	Z, r1
                    break;
    2982:	05 c0       	rjmp	.+10     	; 0x298e <CheckInput+0x19c>
    2984:	01 96       	adiw	r24, 0x01	; 1
    2986:	11 96       	adiw	r26, 0x01	; 1
                
                return 1;            
            }
            
            //Read up to the \0 character and convert to lower case.
            for (uint8_t x=0; x<RXLEN; ++x){
    2988:	81 34       	cpi	r24, 0x41	; 65
    298a:	91 05       	cpc	r25, r1
    298c:	29 f7       	brne	.-54     	; 0x2958 <CheckInput+0x166>
                    break;
                }
            }

            //No text
            if (serRx[0] == 0){
    298e:	80 91 75 3a 	lds	r24, 0x3A75	; 0x803a75 <serRx>
                data[0] = 0;
    2992:	f8 01       	movw	r30, r16
                    break;
                }
            }

            //No text
            if (serRx[0] == 0){
    2994:	81 11       	cpse	r24, r1
    2996:	05 c0       	rjmp	.+10     	; 0x29a2 <CheckInput+0x1b0>
                data[0] = 0;
    2998:	10 82       	st	Z, r1
                RXCNT = 0;
    299a:	1d ba       	out	0x1d, r1	; 29
                serRxDone = 0;
    299c:	10 92 44 38 	sts	0x3844, r1	; 0x803844 <serRxDone>
    29a0:	23 c1       	rjmp	.+582    	; 0x2be8 <CheckInput+0x3f6>
                return 1;
            }

            //Help text
            if ((data[0] == '?')||(data[0] == 'h')){
    29a2:	80 81       	ld	r24, Z
    29a4:	8f 33       	cpi	r24, 0x3F	; 63
    29a6:	11 f0       	breq	.+4      	; 0x29ac <CheckInput+0x1ba>
    29a8:	88 36       	cpi	r24, 0x68	; 104
    29aa:	49 f4       	brne	.+18     	; 0x29be <CheckInput+0x1cc>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    29ac:	83 e9       	ldi	r24, 0x93	; 147
    29ae:	9b e7       	ldi	r25, 0x7B	; 123
    29b0:	80 93 1d 39 	sts	0x391D, r24	; 0x80391d <reactStr+0x2>
    29b4:	90 93 1e 39 	sts	0x391E, r25	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    29b8:	8d e6       	ldi	r24, 0x6D	; 109
    29ba:	94 e0       	ldi	r25, 0x04	; 4
    29bc:	0a c0       	rjmp	.+20     	; 0x29d2 <CheckInput+0x1e0>
                responseList = SetStandardResponse(2);
                return 1;
            }        
        
            //Alphabet text
            if (data[0] == 'a'){
    29be:	81 36       	cpi	r24, 0x61	; 97
    29c0:	a1 f4       	brne	.+40     	; 0x29ea <CheckInput+0x1f8>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    29c2:	8e e6       	ldi	r24, 0x6E	; 110
    29c4:	9a e7       	ldi	r25, 0x7A	; 122
    29c6:	80 93 1d 39 	sts	0x391D, r24	; 0x80391d <reactStr+0x2>
    29ca:	90 93 1e 39 	sts	0x391E, r25	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    29ce:	85 e2       	ldi	r24, 0x25	; 37
    29d0:	91 e0       	ldi	r25, 0x01	; 1
    29d2:	80 93 5d 39 	sts	0x395D, r24	; 0x80395d <reactStr+0x42>
    29d6:	90 93 5e 39 	sts	0x395E, r25	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    29da:	81 e0       	ldi	r24, 0x01	; 1
    29dc:	90 e0       	ldi	r25, 0x00	; 0
    29de:	80 93 9d 39 	sts	0x399D, r24	; 0x80399d <reactStr+0x82>
    29e2:	90 93 9e 39 	sts	0x399E, r25	; 0x80399e <reactStr+0x83>
            }        
        
            //Alphabet text
            if (data[0] == 'a'){
                SetResponse(1, A_ALPHABET, L_ALPHABET, TEASER);
                responseList = SetStandardResponse(2);
    29e6:	82 e0       	ldi	r24, 0x02	; 2
    29e8:	fc c0       	rjmp	.+504    	; 0x2be2 <CheckInput+0x3f0>
                return 1;
            }

            //Whoami text
            if (data[0] == 'w'){
    29ea:	87 37       	cpi	r24, 0x77	; 119
    29ec:	09 f0       	breq	.+2      	; 0x29f0 <CheckInput+0x1fe>
    29ee:	41 c0       	rjmp	.+130    	; 0x2a72 <CheckInput+0x280>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    29f0:	8d e8       	ldi	r24, 0x8D	; 141
    29f2:	96 e7       	ldi	r25, 0x76	; 118
    29f4:	80 93 1d 39 	sts	0x391D, r24	; 0x80391d <reactStr+0x2>
    29f8:	90 93 1e 39 	sts	0x391E, r25	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    29fc:	82 e1       	ldi	r24, 0x12	; 18
    29fe:	90 e0       	ldi	r25, 0x00	; 0
    2a00:	80 93 5d 39 	sts	0x395D, r24	; 0x80395d <reactStr+0x42>
    2a04:	90 93 5e 39 	sts	0x395E, r25	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    2a08:	21 e0       	ldi	r18, 0x01	; 1
    2a0a:	30 e0       	ldi	r19, 0x00	; 0
    2a0c:	20 93 9d 39 	sts	0x399D, r18	; 0x80399d <reactStr+0x82>
    2a10:	30 93 9e 39 	sts	0x399E, r19	; 0x80399e <reactStr+0x83>
            }

            //Whoami text
            if (data[0] == 'w'){
                SetResponse(1, A_HELLO, L_HELLO, TEASER);
                SetResponse(2, names[0][whoami-1], names[1][whoami-1], TEASER);
    2a14:	80 91 3d 38 	lds	r24, 0x383D	; 0x80383d <whoami>
    2a18:	90 e0       	ldi	r25, 0x00	; 0
    2a1a:	fc 01       	movw	r30, r24
    2a1c:	ee 0f       	add	r30, r30
    2a1e:	ff 1f       	adc	r31, r31
    2a20:	ef 53       	subi	r30, 0x3F	; 63
    2a22:	f0 44       	sbci	r31, 0x40	; 64
    2a24:	40 81       	ld	r20, Z
    2a26:	51 81       	ldd	r21, Z+1	; 0x01
    2a28:	88 0f       	add	r24, r24
    2a2a:	99 1f       	adc	r25, r25
    2a2c:	fc 01       	movw	r30, r24
    2a2e:	e7 54       	subi	r30, 0x47	; 71
    2a30:	f0 44       	sbci	r31, 0x40	; 64
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2a32:	80 81       	ld	r24, Z
    2a34:	91 81       	ldd	r25, Z+1	; 0x01
    2a36:	80 93 1f 39 	sts	0x391F, r24	; 0x80391f <reactStr+0x4>
    2a3a:	90 93 20 39 	sts	0x3920, r25	; 0x803920 <reactStr+0x5>
    reactStr[1][number]=length;
    2a3e:	40 93 5f 39 	sts	0x395F, r20	; 0x80395f <reactStr+0x44>
    2a42:	50 93 60 39 	sts	0x3960, r21	; 0x803960 <reactStr+0x45>
    reactStr[2][number]=type;
    2a46:	20 93 9f 39 	sts	0x399F, r18	; 0x80399f <reactStr+0x84>
    2a4a:	30 93 a0 39 	sts	0x39A0, r19	; 0x8039a0 <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2a4e:	8f e5       	ldi	r24, 0x5F	; 95
    2a50:	96 e7       	ldi	r25, 0x76	; 118
    2a52:	80 93 21 39 	sts	0x3921, r24	; 0x803921 <reactStr+0x6>
    2a56:	90 93 22 39 	sts	0x3922, r25	; 0x803922 <reactStr+0x7>
    reactStr[1][number]=length;
    2a5a:	8a e1       	ldi	r24, 0x1A	; 26
    2a5c:	90 e0       	ldi	r25, 0x00	; 0
    2a5e:	80 93 61 39 	sts	0x3961, r24	; 0x803961 <reactStr+0x46>
    2a62:	90 93 62 39 	sts	0x3962, r25	; 0x803962 <reactStr+0x47>
    reactStr[2][number]=type;
    2a66:	20 93 a1 39 	sts	0x39A1, r18	; 0x8039a1 <reactStr+0x86>
    2a6a:	30 93 a2 39 	sts	0x39A2, r19	; 0x8039a2 <reactStr+0x87>
                } else {
                    SetResponse(2, A_ERROR, L_ERROR, TEASER);
                }*/

                SetResponse(3, A_PLEASED, L_PLEASED, TEASER);
                responseList = SetStandardResponse(4);
    2a6e:	84 e0       	ldi	r24, 0x04	; 4
                responseList = SetStandardResponse(2);
                return 1;
            }*/

            //Fake cheat = reset badge!
            if (StartsWith(&data[0], "iddqd")){
    2a70:	b8 c0       	rjmp	.+368    	; 0x2be2 <CheckInput+0x3f0>
    2a72:	67 e9       	ldi	r22, 0x97	; 151
    2a74:	7f eb       	ldi	r23, 0xBF	; 191
    2a76:	c8 01       	movw	r24, r16
    2a78:	e8 db       	rcall	.-2096   	; 0x224a <StartsWith>
    2a7a:	88 23       	and	r24, r24
    2a7c:	19 f1       	breq	.+70     	; 0x2ac4 <CheckInput+0x2d2>
            
                //Reset game data by wiping the UUID bits
                for (uint8_t x=0; x<4; ++x){
                    UpdateState(128+110+x);
    2a7e:	8e ee       	ldi	r24, 0xEE	; 238
    2a80:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <UpdateState>
    2a84:	8f ee       	ldi	r24, 0xEF	; 239
    2a86:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <UpdateState>
    2a8a:	80 ef       	ldi	r24, 0xF0	; 240
    2a8c:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <UpdateState>
    2a90:	81 ef       	ldi	r24, 0xF1	; 241
    2a92:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <UpdateState>
                }
                SaveGameState();
    2a96:	0e 94 64 09 	call	0x12c8	; 0x12c8 <SaveGameState>

                uint8_t cheat[] = "Gotcha! ";
    2a9a:	89 e0       	ldi	r24, 0x09	; 9
    2a9c:	ea ea       	ldi	r30, 0xAA	; 170
    2a9e:	ff eb       	ldi	r31, 0xBF	; 191
    2aa0:	de 01       	movw	r26, r28
    2aa2:	11 96       	adiw	r26, 0x01	; 1
    2aa4:	01 90       	ld	r0, Z+
    2aa6:	0d 92       	st	X+, r0
    2aa8:	8a 95       	dec	r24
    2aaa:	e1 f7       	brne	.-8      	; 0x2aa4 <CheckInput+0x2b2>
                SerSpeed(60);
    2aac:	8c e3       	ldi	r24, 0x3C	; 60
    2aae:	0e 94 84 08 	call	0x1108	; 0x1108 <SerSpeed>
                while(1){
                    if (serTxDone) SerSend(&cheat[0]);
    2ab2:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <serTxDone>
    2ab6:	88 23       	and	r24, r24
    2ab8:	e1 f3       	breq	.-8      	; 0x2ab2 <CheckInput+0x2c0>
    2aba:	ce 01       	movw	r24, r28
    2abc:	01 96       	adiw	r24, 0x01	; 1
    2abe:	0e 94 73 08 	call	0x10e6	; 0x10e6 <SerSend>
                }
            }
            
            //Cheat reset
            if (StartsWith(&data[0], "ikillu")){
    2ac2:	f7 cf       	rjmp	.-18     	; 0x2ab2 <CheckInput+0x2c0>
    2ac4:	6d e9       	ldi	r22, 0x9D	; 157
    2ac6:	7f eb       	ldi	r23, 0xBF	; 191
    2ac8:	c8 01       	movw	r24, r16
    2aca:	bf db       	rcall	.-2178   	; 0x224a <StartsWith>
    2acc:	88 23       	and	r24, r24
    2ace:	81 f1       	breq	.+96     	; 0x2b30 <CheckInput+0x33e>
                
                //Reset cheat data by resetting the EEPROM bytes
                uint8_t empty=0xff;
    2ad0:	8f ef       	ldi	r24, 0xFF	; 255
    2ad2:	8a 87       	std	Y+10, r24	; 0x0a
    2ad4:	18 e1       	ldi	r17, 0x18	; 24
                for (uint8_t x=0; x<MAX_CHEATS; ++x){
                    EEWrite(CHEATS+x, &empty, 1);
    2ad6:	41 e0       	ldi	r20, 0x01	; 1
    2ad8:	be 01       	movw	r22, r28
    2ada:	66 5f       	subi	r22, 0xF6	; 246
    2adc:	7f 4f       	sbci	r23, 0xFF	; 255
    2ade:	81 2f       	mov	r24, r17
    2ae0:	0e 94 ff 07 	call	0xffe	; 0xffe <EEWrite>
    2ae4:	1f 5f       	subi	r17, 0xFF	; 255
            //Cheat reset
            if (StartsWith(&data[0], "ikillu")){
                
                //Reset cheat data by resetting the EEPROM bytes
                uint8_t empty=0xff;
                for (uint8_t x=0; x<MAX_CHEATS; ++x){
    2ae6:	10 32       	cpi	r17, 0x20	; 32
    2ae8:	b1 f7       	brne	.-20     	; 0x2ad6 <CheckInput+0x2e4>
                    EEWrite(CHEATS+x, &empty, 1);
                }
                //Reset game data by wiping the UUID bits
                for (uint8_t x=0; x<4; ++x){
                    UpdateState(128+110+x);
    2aea:	8e ee       	ldi	r24, 0xEE	; 238
    2aec:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <UpdateState>
    2af0:	8f ee       	ldi	r24, 0xEF	; 239
    2af2:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <UpdateState>
    2af6:	80 ef       	ldi	r24, 0xF0	; 240
    2af8:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <UpdateState>
    2afc:	81 ef       	ldi	r24, 0xF1	; 241
    2afe:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <UpdateState>
                }
                
                SaveGameState();
    2b02:	0e 94 64 09 	call	0x12c8	; 0x12c8 <SaveGameState>

                uint8_t cheat[] = "Reset! ";
    2b06:	88 e0       	ldi	r24, 0x08	; 8
    2b08:	e3 eb       	ldi	r30, 0xB3	; 179
    2b0a:	ff eb       	ldi	r31, 0xBF	; 191
    2b0c:	de 01       	movw	r26, r28
    2b0e:	11 96       	adiw	r26, 0x01	; 1
    2b10:	01 90       	ld	r0, Z+
    2b12:	0d 92       	st	X+, r0
    2b14:	8a 95       	dec	r24
    2b16:	e1 f7       	brne	.-8      	; 0x2b10 <CheckInput+0x31e>
                SerSpeed(60);
    2b18:	8c e3       	ldi	r24, 0x3C	; 60
    2b1a:	0e 94 84 08 	call	0x1108	; 0x1108 <SerSpeed>
                while(1){
                    if (serTxDone) SerSend(&cheat[0]);
    2b1e:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <serTxDone>
    2b22:	88 23       	and	r24, r24
    2b24:	e1 f3       	breq	.-8      	; 0x2b1e <CheckInput+0x32c>
    2b26:	ce 01       	movw	r24, r28
    2b28:	01 96       	adiw	r24, 0x01	; 1
    2b2a:	0e 94 73 08 	call	0x10e6	; 0x10e6 <SerSend>
                }
            }

            //Show used cheat codes
            if (StartsWith(&data[0], "cheat")){
    2b2e:	f7 cf       	rjmp	.-18     	; 0x2b1e <CheckInput+0x32c>
    2b30:	64 ea       	ldi	r22, 0xA4	; 164
    2b32:	7f eb       	ldi	r23, 0xBF	; 191
    2b34:	c8 01       	movw	r24, r16
    2b36:	89 db       	rcall	.-2286   	; 0x224a <StartsWith>
    2b38:	88 23       	and	r24, r24
    2b3a:	09 f4       	brne	.+2      	; 0x2b3e <CheckInput+0x34c>
    2b3c:	9b ce       	rjmp	.-714    	; 0x2874 <CheckInput+0x82>
    2b3e:	8b e1       	ldi	r24, 0x1B	; 27
    2b40:	c8 2e       	mov	r12, r24
    2b42:	89 e3       	ldi	r24, 0x39	; 57
    2b44:	d8 2e       	mov	r13, r24
    2b46:	9b e5       	ldi	r25, 0x5B	; 91
    2b48:	e9 2e       	mov	r14, r25
    2b4a:	99 e3       	ldi	r25, 0x39	; 57
    2b4c:	f9 2e       	mov	r15, r25
    2b4e:	0b e9       	ldi	r16, 0x9B	; 155
    2b50:	19 e3       	ldi	r17, 0x39	; 57
    2b52:	28 e1       	ldi	r18, 0x18	; 24
    2b54:	52 2e       	mov	r5, r18
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    reactStr[1][number]=length;
    2b56:	aa 24       	eor	r10, r10
    2b58:	a3 94       	inc	r10
    2b5a:	b1 2c       	mov	r11, r1
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2b5c:	47 e5       	ldi	r20, 0x57	; 87
    2b5e:	84 2e       	mov	r8, r20
    2b60:	4a e7       	ldi	r20, 0x7A	; 122
    2b62:	94 2e       	mov	r9, r20
    reactStr[1][number]=length;
    2b64:	52 e0       	ldi	r21, 0x02	; 2
    2b66:	65 2e       	mov	r6, r21
    2b68:	71 2c       	mov	r7, r1
            if (StartsWith(&data[0], "cheat")){
                uint8_t bit;
                for (uint8_t x=0; x<MAX_CHEATS; ++x){
                    
                    //Set up sending out number
                    EERead(CHEATS+x, &bit, 1);
    2b6a:	41 e0       	ldi	r20, 0x01	; 1
    2b6c:	be 01       	movw	r22, r28
    2b6e:	6f 5f       	subi	r22, 0xFF	; 255
    2b70:	7f 4f       	sbci	r23, 0xFF	; 255
    2b72:	85 2d       	mov	r24, r5
    2b74:	0e 94 ef 07 	call	0xfde	; 0xfde <EERead>
                    bit = 0xff-bit;
    2b78:	89 81       	ldd	r24, Y+1	; 0x01
    2b7a:	80 95       	com	r24
    2b7c:	89 83       	std	Y+1, r24	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2b7e:	28 2f       	mov	r18, r24
    2b80:	22 95       	swap	r18
    2b82:	2f 70       	andi	r18, 0x0F	; 15
    2b84:	30 e0       	ldi	r19, 0x00	; 0
    2b86:	23 57       	subi	r18, 0x73	; 115
    2b88:	3b 48       	sbci	r19, 0x8B	; 139
    2b8a:	f6 01       	movw	r30, r12
    2b8c:	20 83       	st	Z, r18
    2b8e:	31 83       	std	Z+1, r19	; 0x01
    reactStr[1][number]=length;
    2b90:	f7 01       	movw	r30, r14
    2b92:	a0 82       	st	Z, r10
    2b94:	b1 82       	std	Z+1, r11	; 0x01
    reactStr[2][number]=type;
    2b96:	f8 01       	movw	r30, r16
    2b98:	a0 82       	st	Z, r10
    2b9a:	b1 82       	std	Z+1, r11	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2b9c:	8f 70       	andi	r24, 0x0F	; 15
    2b9e:	90 e0       	ldi	r25, 0x00	; 0
    2ba0:	83 57       	subi	r24, 0x73	; 115
    2ba2:	9b 48       	sbci	r25, 0x8B	; 139
    2ba4:	f6 01       	movw	r30, r12
    2ba6:	82 83       	std	Z+2, r24	; 0x02
    2ba8:	93 83       	std	Z+3, r25	; 0x03
    reactStr[1][number]=length;
    2baa:	f7 01       	movw	r30, r14
    2bac:	a2 82       	std	Z+2, r10	; 0x02
    2bae:	b3 82       	std	Z+3, r11	; 0x03
    reactStr[2][number]=type;
    2bb0:	f8 01       	movw	r30, r16
    2bb2:	a2 82       	std	Z+2, r10	; 0x02
    2bb4:	b3 82       	std	Z+3, r11	; 0x03
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2bb6:	f6 01       	movw	r30, r12
    2bb8:	84 82       	std	Z+4, r8	; 0x04
    2bba:	95 82       	std	Z+5, r9	; 0x05
    reactStr[1][number]=length;
    2bbc:	f7 01       	movw	r30, r14
    2bbe:	64 82       	std	Z+4, r6	; 0x04
    2bc0:	75 82       	std	Z+5, r7	; 0x05
    reactStr[2][number]=type;
    2bc2:	f8 01       	movw	r30, r16
    2bc4:	a4 82       	std	Z+4, r10	; 0x04
    2bc6:	b5 82       	std	Z+5, r11	; 0x05
    2bc8:	53 94       	inc	r5
    2bca:	f6 e0       	ldi	r31, 0x06	; 6
    2bcc:	cf 0e       	add	r12, r31
    2bce:	d1 1c       	adc	r13, r1
    2bd0:	86 e0       	ldi	r24, 0x06	; 6
    2bd2:	e8 0e       	add	r14, r24
    2bd4:	f1 1c       	adc	r15, r1
    2bd6:	0a 5f       	subi	r16, 0xFA	; 250
            }

            //Show used cheat codes
            if (StartsWith(&data[0], "cheat")){
                uint8_t bit;
                for (uint8_t x=0; x<MAX_CHEATS; ++x){
    2bd8:	1f 4f       	sbci	r17, 0xFF	; 255
    2bda:	e0 e2       	ldi	r30, 0x20	; 32
    2bdc:	5e 12       	cpse	r5, r30
                    //SetResponse(x*4, A_HEXPREFIX, L_HEXPREFIX, TEASER);
                    SetResponse(x*3, A_DIGITS+(bit>>4), 1, TEASER);               
                    SetResponse(x*3+1, A_DIGITS+(bit%16), 1, TEASER);
                    SetResponse(x*3+2, A_COMMA, L_COMMA, TEASER);
                }
                responseList = SetStandardResponse((3*MAX_CHEATS));
    2bde:	c5 cf       	rjmp	.-118    	; 0x2b6a <CheckInput+0x378>
    2be0:	88 e1       	ldi	r24, 0x18	; 24
    2be2:	8a db       	rcall	.-2284   	; 0x22f8 <SetStandardResponse>
    2be4:	80 93 1a 39 	sts	0x391A, r24	; 0x80391a <responseList>
        //Data received, but not any of the commands above
        return 0;
    }

    //Serial input not available yet
    return 1;
    2be8:	ff 24       	eor	r15, r15
    2bea:	f3 94       	inc	r15
}
    2bec:	8f 2d       	mov	r24, r15
    2bee:	2a 96       	adiw	r28, 0x0a	; 10
    2bf0:	cd bf       	out	0x3d, r28	; 61
    2bf2:	de bf       	out	0x3e, r29	; 62
    2bf4:	df 91       	pop	r29
    2bf6:	cf 91       	pop	r28
    2bf8:	1f 91       	pop	r17
    2bfa:	0f 91       	pop	r16
    2bfc:	ff 90       	pop	r15
    2bfe:	ef 90       	pop	r14
    2c00:	df 90       	pop	r13
    2c02:	cf 90       	pop	r12
    2c04:	bf 90       	pop	r11
    2c06:	af 90       	pop	r10
    2c08:	9f 90       	pop	r9
    2c0a:	8f 90       	pop	r8
    2c0c:	7f 90       	pop	r7
    2c0e:	6f 90       	pop	r6
    2c10:	5f 90       	pop	r5
    2c12:	08 95       	ret

00002c14 <ShowInventory>:

uint8_t ShowInventory(uint8_t elements){
    2c14:	9f 92       	push	r9
    2c16:	af 92       	push	r10
    2c18:	bf 92       	push	r11
    2c1a:	cf 92       	push	r12
    2c1c:	df 92       	push	r13
    2c1e:	ef 92       	push	r14
    2c20:	ff 92       	push	r15
    2c22:	0f 93       	push	r16
    2c24:	1f 93       	push	r17
    2c26:	cf 93       	push	r28
    2c28:	df 93       	push	r29
    2c2a:	cd b7       	in	r28, 0x3d	; 61
    2c2c:	de b7       	in	r29, 0x3e	; 62
    2c2e:	ab 97       	sbiw	r28, 0x2b	; 43
    2c30:	cd bf       	out	0x3d, r28	; 61
    2c32:	de bf       	out	0x3e, r29	; 62
    object_model_t actObj1;

    SetResponse(elements++, A_NOWCARRING, L_NOWCARRING, TEASER);
    2c34:	99 24       	eor	r9, r9
    2c36:	93 94       	inc	r9
    2c38:	98 0e       	add	r9, r24
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2c3a:	90 e0       	ldi	r25, 0x00	; 0
    2c3c:	fc 01       	movw	r30, r24
    2c3e:	ee 0f       	add	r30, r30
    2c40:	ff 1f       	adc	r31, r31
    2c42:	e5 5e       	subi	r30, 0xE5	; 229
    2c44:	f6 4c       	sbci	r31, 0xC6	; 198
    2c46:	2c ec       	ldi	r18, 0xCC	; 204
    2c48:	37 e7       	ldi	r19, 0x77	; 119
    2c4a:	20 83       	st	Z, r18
    2c4c:	31 83       	std	Z+1, r19	; 0x01
    reactStr[1][number]=length;
    2c4e:	fc 01       	movw	r30, r24
    2c50:	ee 0f       	add	r30, r30
    2c52:	ff 1f       	adc	r31, r31
    2c54:	e5 5a       	subi	r30, 0xA5	; 165
    2c56:	f6 4c       	sbci	r31, 0xC6	; 198
    2c58:	26 e1       	ldi	r18, 0x16	; 22
    2c5a:	30 e0       	ldi	r19, 0x00	; 0
    2c5c:	20 83       	st	Z, r18
    2c5e:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    2c60:	88 0f       	add	r24, r24
    2c62:	99 1f       	adc	r25, r25
    2c64:	fc 01       	movw	r30, r24
    2c66:	e5 56       	subi	r30, 0x65	; 101
    2c68:	f6 4c       	sbci	r31, 0xC6	; 198
    2c6a:	81 e0       	ldi	r24, 0x01	; 1
    2c6c:	90 e0       	ldi	r25, 0x00	; 0
    2c6e:	80 83       	st	Z, r24
    2c70:	91 83       	std	Z+1, r25	; 0x01
    2c72:	0e e3       	ldi	r16, 0x3E	; 62
    2c74:	18 e3       	ldi	r17, 0x38	; 56
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2c76:	37 e5       	ldi	r19, 0x57	; 87
    2c78:	e3 2e       	mov	r14, r19
    2c7a:	3a e7       	ldi	r19, 0x7A	; 122
    2c7c:	f3 2e       	mov	r15, r19
    reactStr[1][number]=length;
    2c7e:	42 e0       	ldi	r20, 0x02	; 2
    2c80:	c4 2e       	mov	r12, r20
    2c82:	d1 2c       	mov	r13, r1
    reactStr[2][number]=type;
    2c84:	aa 24       	eor	r10, r10
    2c86:	a3 94       	inc	r10
    2c88:	b1 2c       	mov	r11, r1
    object_model_t actObj1;

    SetResponse(elements++, A_NOWCARRING, L_NOWCARRING, TEASER);

    for (uint8_t x=0; x<2; ++x) {
        if (inventory[x]) {
    2c8a:	f8 01       	movw	r30, r16
    2c8c:	81 91       	ld	r24, Z+
    2c8e:	91 91       	ld	r25, Z+
    2c90:	8f 01       	movw	r16, r30
    2c92:	00 97       	sbiw	r24, 0x00	; 0
    2c94:	c9 f1       	breq	.+114    	; 0x2d08 <ShowInventory+0xf4>
            PopulateObject(inventory[x], &actObj1);
    2c96:	be 01       	movw	r22, r28
    2c98:	6f 5f       	subi	r22, 0xFF	; 255
    2c9a:	7f 4f       	sbci	r23, 0xFF	; 255
    2c9c:	a9 db       	rcall	.-2222   	; 0x23f0 <PopulateObject>
            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    2c9e:	2b 8d       	ldd	r18, Y+27	; 0x1b
    2ca0:	3c 8d       	ldd	r19, Y+28	; 0x1c
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2ca2:	89 2d       	mov	r24, r9
    2ca4:	90 e0       	ldi	r25, 0x00	; 0
    2ca6:	fc 01       	movw	r30, r24
    2ca8:	ee 0f       	add	r30, r30
    2caa:	ff 1f       	adc	r31, r31
    2cac:	e5 5e       	subi	r30, 0xE5	; 229
    2cae:	f6 4c       	sbci	r31, 0xC6	; 198
    2cb0:	4d 85       	ldd	r20, Y+13	; 0x0d
    2cb2:	5e 85       	ldd	r21, Y+14	; 0x0e
    2cb4:	40 83       	st	Z, r20
    2cb6:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    2cb8:	fc 01       	movw	r30, r24
    2cba:	ee 0f       	add	r30, r30
    2cbc:	ff 1f       	adc	r31, r31
    2cbe:	e5 5a       	subi	r30, 0xA5	; 165
    2cc0:	f6 4c       	sbci	r31, 0xC6	; 198
    2cc2:	20 83       	st	Z, r18
    2cc4:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    2cc6:	88 0f       	add	r24, r24
    2cc8:	99 1f       	adc	r25, r25
    2cca:	fc 01       	movw	r30, r24
    2ccc:	e5 56       	subi	r30, 0x65	; 101
    2cce:	f6 4c       	sbci	r31, 0xC6	; 198
    2cd0:	10 82       	st	Z, r1
    2cd2:	11 82       	std	Z+1, r1	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2cd4:	81 e0       	ldi	r24, 0x01	; 1
    2cd6:	89 0d       	add	r24, r9
    2cd8:	90 e0       	ldi	r25, 0x00	; 0
    2cda:	93 94       	inc	r9
    2cdc:	93 94       	inc	r9
    2cde:	fc 01       	movw	r30, r24
    2ce0:	ee 0f       	add	r30, r30
    2ce2:	ff 1f       	adc	r31, r31
    2ce4:	e5 5e       	subi	r30, 0xE5	; 229
    2ce6:	f6 4c       	sbci	r31, 0xC6	; 198
    2ce8:	e0 82       	st	Z, r14
    2cea:	f1 82       	std	Z+1, r15	; 0x01
    reactStr[1][number]=length;
    2cec:	fc 01       	movw	r30, r24
    2cee:	ee 0f       	add	r30, r30
    2cf0:	ff 1f       	adc	r31, r31
    2cf2:	e5 5a       	subi	r30, 0xA5	; 165
    2cf4:	f6 4c       	sbci	r31, 0xC6	; 198
    2cf6:	c0 82       	st	Z, r12
    2cf8:	d1 82       	std	Z+1, r13	; 0x01
    reactStr[2][number]=type;
    2cfa:	88 0f       	add	r24, r24
    2cfc:	99 1f       	adc	r25, r25
    2cfe:	fc 01       	movw	r30, r24
    2d00:	e5 56       	subi	r30, 0x65	; 101
    2d02:	f6 4c       	sbci	r31, 0xC6	; 198
    2d04:	a0 82       	st	Z, r10
    2d06:	b1 82       	std	Z+1, r11	; 0x01
uint8_t ShowInventory(uint8_t elements){
    object_model_t actObj1;

    SetResponse(elements++, A_NOWCARRING, L_NOWCARRING, TEASER);

    for (uint8_t x=0; x<2; ++x) {
    2d08:	f8 e3       	ldi	r31, 0x38	; 56
    2d0a:	02 34       	cpi	r16, 0x42	; 66
    2d0c:	1f 07       	cpc	r17, r31
    2d0e:	09 f0       	breq	.+2      	; 0x2d12 <ShowInventory+0xfe>
    2d10:	bc cf       	rjmp	.-136    	; 0x2c8a <ShowInventory+0x76>
        }
    }
    elements -= 1;
            
    return elements;
}
    2d12:	8f ef       	ldi	r24, 0xFF	; 255
    2d14:	89 0d       	add	r24, r9
    2d16:	ab 96       	adiw	r28, 0x2b	; 43
    2d18:	cd bf       	out	0x3d, r28	; 61
    2d1a:	de bf       	out	0x3e, r29	; 62
    2d1c:	df 91       	pop	r29
    2d1e:	cf 91       	pop	r28
    2d20:	1f 91       	pop	r17
    2d22:	0f 91       	pop	r16
    2d24:	ff 90       	pop	r15
    2d26:	ef 90       	pop	r14
    2d28:	df 90       	pop	r13
    2d2a:	cf 90       	pop	r12
    2d2c:	bf 90       	pop	r11
    2d2e:	af 90       	pop	r10
    2d30:	9f 90       	pop	r9
    2d32:	08 95       	ret

00002d34 <ProcessInput>:

//The game logic!
uint8_t ProcessInput(uint8_t *data){
    2d34:	6f 92       	push	r6
    2d36:	7f 92       	push	r7
    2d38:	8f 92       	push	r8
    2d3a:	9f 92       	push	r9
    2d3c:	af 92       	push	r10
    2d3e:	bf 92       	push	r11
    2d40:	cf 92       	push	r12
    2d42:	df 92       	push	r13
    2d44:	ef 92       	push	r14
    2d46:	ff 92       	push	r15
    2d48:	0f 93       	push	r16
    2d4a:	1f 93       	push	r17
    2d4c:	cf 93       	push	r28
    2d4e:	df 93       	push	r29
    2d50:	cd b7       	in	r28, 0x3d	; 61
    2d52:	de b7       	in	r29, 0x3e	; 62
    2d54:	28 97       	sbiw	r28, 0x08	; 8
    2d56:	cd bf       	out	0x3d, r28	; 61
    2d58:	de bf       	out	0x3e, r29	; 62
    2d5a:	3c 01       	movw	r6, r24
    static object_model_t actObj1, actObj2;
    uint8_t elements = 1;

    CleanInput(&data[0]);
    2d5c:	84 dc       	rcall	.-1784   	; 0x2666 <CleanInput>
    uint8_t inputLen = CleanInput(&data[0]);
    2d5e:	c3 01       	movw	r24, r6
    2d60:	82 dc       	rcall	.-1788   	; 0x2666 <CleanInput>
    2d62:	f8 2e       	mov	r15, r24
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2d64:	29 e5       	ldi	r18, 0x59	; 89
    2d66:	3a e7       	ldi	r19, 0x7A	; 122
    2d68:	20 93 1b 39 	sts	0x391B, r18	; 0x80391b <reactStr>
    2d6c:	30 93 1c 39 	sts	0x391C, r19	; 0x80391c <reactStr+0x1>
    reactStr[1][number]=length;
    2d70:	84 e0       	ldi	r24, 0x04	; 4
    2d72:	90 e0       	ldi	r25, 0x00	; 0
    2d74:	80 93 5b 39 	sts	0x395B, r24	; 0x80395b <reactStr+0x40>
    2d78:	90 93 5c 39 	sts	0x395C, r25	; 0x80395c <reactStr+0x41>
    reactStr[2][number]=type;
    2d7c:	01 e0       	ldi	r16, 0x01	; 1
    2d7e:	10 e0       	ldi	r17, 0x00	; 0
    2d80:	00 93 9b 39 	sts	0x399B, r16	; 0x80399b <reactStr+0x80>
    2d84:	10 93 9c 39 	sts	0x399C, r17	; 0x80399c <reactStr+0x81>

    CleanInput(&data[0]);
    uint8_t inputLen = CleanInput(&data[0]);
    SetResponse(0, A_LF, 4, TEASER);

    if (inputLen) {
    2d88:	ff 20       	and	r15, r15
    2d8a:	09 f4       	brne	.+2      	; 0x2d8e <ProcessInput+0x5a>
    2d8c:	54 c7       	rjmp	.+3752   	; 0x3c36 <ProcessInput+0xf02>

        //eXit to previous location
        if (data[0] == 'x'){
    2d8e:	d3 01       	movw	r26, r6
    2d90:	8c 91       	ld	r24, X
    2d92:	88 37       	cpi	r24, 0x78	; 120
    2d94:	09 f0       	breq	.+2      	; 0x2d98 <ProcessInput+0x64>
    2d96:	45 c0       	rjmp	.+138    	; 0x2e22 <ProcessInput+0xee>

            //Standing in the Lobby?
            if ((route[currDepth] == 0)||(currDepth == 0)){
    2d98:	80 91 2e 38 	lds	r24, 0x382E	; 0x80382e <currDepth>
    2d9c:	e8 2f       	mov	r30, r24
    2d9e:	f0 e0       	ldi	r31, 0x00	; 0
    2da0:	ee 0f       	add	r30, r30
    2da2:	ff 1f       	adc	r31, r31
    2da4:	e5 52       	subi	r30, 0x25	; 37
    2da6:	f6 4c       	sbci	r31, 0xC6	; 198
    2da8:	20 81       	ld	r18, Z
    2daa:	31 81       	ldd	r19, Z+1	; 0x01
    2dac:	23 2b       	or	r18, r19
    2dae:	11 f0       	breq	.+4      	; 0x2db4 <ProcessInput+0x80>
    2db0:	81 11       	cpse	r24, r1
    2db2:	03 c0       	rjmp	.+6      	; 0x2dba <ProcessInput+0x86>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2db4:	84 e4       	ldi	r24, 0x44	; 68
    2db6:	96 e7       	ldi	r25, 0x76	; 118
    2db8:	13 c5       	rjmp	.+2598   	; 0x37e0 <ProcessInput+0xaac>
            //Standing in the Lobby?
            if ((route[currDepth] == 0)||(currDepth == 0)){
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            
            //Is there a way to go back?
            } else if (CheckState(currObj.byteField[OPEN_ACL])){
    2dba:	80 91 21 3a 	lds	r24, 0x3A21	; 0x803a21 <currObj+0x6>
    2dbe:	0e 94 0c 0a 	call	0x1418	; 0x1418 <CheckState>
    2dc2:	88 23       	and	r24, r24
    2dc4:	b9 f0       	breq	.+46     	; 0x2df4 <ProcessInput+0xc0>
                --currDepth;
    2dc6:	e0 91 2e 38 	lds	r30, 0x382E	; 0x80382e <currDepth>
    2dca:	e1 50       	subi	r30, 0x01	; 1
    2dcc:	e0 93 2e 38 	sts	0x382E, r30	; 0x80382e <currDepth>
                PopulateObject(route[currDepth], &currObj);
    2dd0:	f0 e0       	ldi	r31, 0x00	; 0
    2dd2:	ee 0f       	add	r30, r30
    2dd4:	ff 1f       	adc	r31, r31
    2dd6:	e5 52       	subi	r30, 0x25	; 37
    2dd8:	f6 4c       	sbci	r31, 0xC6	; 198
    2dda:	6b e1       	ldi	r22, 0x1B	; 27
    2ddc:	7a e3       	ldi	r23, 0x3A	; 58
    2dde:	80 81       	ld	r24, Z
    2de0:	91 81       	ldd	r25, Z+1	; 0x01
    2de2:	06 db       	rcall	.-2548   	; 0x23f0 <PopulateObject>
                effect = currObj.byteField[EFFECTS];
    2de4:	80 91 1f 3a 	lds	r24, 0x3A1F	; 0x803a1f <currObj+0x4>
    2de8:	90 e0       	ldi	r25, 0x00	; 0
    2dea:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <effect>
    2dee:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <effect+0x1>
    2df2:	2a c2       	rjmp	.+1108   	; 0x3248 <ProcessInput+0x514>
            
            //No way out, print denied message of location
            } else {
                SetResponse(elements++, currObj.addrStr[OPEN_ACL_MSG], currObj.lenStr[OPEN_ACL_MSG], GAME);
    2df4:	80 91 3d 3a 	lds	r24, 0x3A3D	; 0x803a3d <currObj+0x22>
    2df8:	90 91 3e 3a 	lds	r25, 0x3A3E	; 0x803a3e <currObj+0x23>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2dfc:	20 91 2f 3a 	lds	r18, 0x3A2F	; 0x803a2f <currObj+0x14>
    2e00:	30 91 30 3a 	lds	r19, 0x3A30	; 0x803a30 <currObj+0x15>
    2e04:	20 93 1d 39 	sts	0x391D, r18	; 0x80391d <reactStr+0x2>
    2e08:	30 93 1e 39 	sts	0x391E, r19	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    2e0c:	80 93 5d 39 	sts	0x395D, r24	; 0x80395d <reactStr+0x42>
    2e10:	90 93 5e 39 	sts	0x395E, r25	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    2e14:	10 92 9d 39 	sts	0x399D, r1	; 0x80399d <reactStr+0x82>
    2e18:	10 92 9e 39 	sts	0x399E, r1	; 0x80399e <reactStr+0x83>
                effect = currObj.byteField[EFFECTS];
            
            //No way out, print denied message of location
            } else {
                SetResponse(elements++, currObj.addrStr[OPEN_ACL_MSG], currObj.lenStr[OPEN_ACL_MSG], GAME);
                effect = currObj.effect[0];               
    2e1c:	80 91 43 3a 	lds	r24, 0x3A43	; 0x803a43 <currObj+0x28>
    2e20:	a9 c5       	rjmp	.+2898   	; 0x3974 <ProcessInput+0xc40>
            }   
        
        //Enter locations or Open objects    
        } else if ((data[0] == 'e')||(data[0] == 'o')) {
    2e22:	85 36       	cpi	r24, 0x65	; 101
    2e24:	19 f0       	breq	.+6      	; 0x2e2c <ProcessInput+0xf8>
    2e26:	8f 36       	cpi	r24, 0x6F	; 111
    2e28:	09 f0       	breq	.+2      	; 0x2e2c <ProcessInput+0xf8>
    2e2a:	de c0       	rjmp	.+444    	; 0x2fe8 <ProcessInput+0x2b4>
                
            //Not possible, too many/little characters
            if (inputLen != 2){
    2e2c:	b2 e0       	ldi	r27, 0x02	; 2
    2e2e:	fb 12       	cpse	r15, r27
    2e30:	c1 cf       	rjmp	.-126    	; 0x2db4 <ProcessInput+0x80>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                uint8_t canDo = 0;
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
    2e32:	00 91 2e 38 	lds	r16, 0x382E	; 0x80382e <currDepth>
    2e36:	10 e0       	ldi	r17, 0x00	; 0
    2e38:	f8 01       	movw	r30, r16
    2e3a:	ee 0f       	add	r30, r30
    2e3c:	ff 1f       	adc	r31, r31
    2e3e:	e5 52       	subi	r30, 0x25	; 37
    2e40:	f6 4c       	sbci	r31, 0xC6	; 198
    2e42:	40 e0       	ldi	r20, 0x00	; 0
    2e44:	50 e0       	ldi	r21, 0x00	; 0
    2e46:	d3 01       	movw	r26, r6
    2e48:	11 96       	adiw	r26, 0x01	; 1
    2e4a:	6c 91       	ld	r22, X
    2e4c:	80 81       	ld	r24, Z
    2e4e:	91 81       	ldd	r25, Z+1	; 0x01
    2e50:	9e db       	rcall	.-2244   	; 0x258e <FindChild>
    2e52:	00 0f       	add	r16, r16
    2e54:	11 1f       	adc	r17, r17
    2e56:	f8 01       	movw	r30, r16
    2e58:	e3 52       	subi	r30, 0x23	; 35
    2e5a:	f6 4c       	sbci	r31, 0xC6	; 198
    2e5c:	80 83       	st	Z, r24
    2e5e:	91 83       	std	Z+1, r25	; 0x01
                    
                //Child found?
                if (route[currDepth+1]) {
    2e60:	90 91 2e 38 	lds	r25, 0x382E	; 0x80382e <currDepth>
    2e64:	29 2f       	mov	r18, r25
    2e66:	30 e0       	ldi	r19, 0x00	; 0
    2e68:	f9 01       	movw	r30, r18
    2e6a:	ee 0f       	add	r30, r30
    2e6c:	ff 1f       	adc	r31, r31
    2e6e:	e3 52       	subi	r30, 0x23	; 35
    2e70:	f6 4c       	sbci	r31, 0xC6	; 198
    2e72:	40 81       	ld	r20, Z
    2e74:	51 81       	ldd	r21, Z+1	; 0x01
    2e76:	41 15       	cp	r20, r1
    2e78:	51 05       	cpc	r21, r1
    2e7a:	21 f0       	breq	.+8      	; 0x2e84 <ProcessInput+0x150>
                    PopulateObject(route[currDepth+1], &actObj1);
    2e7c:	6a ed       	ldi	r22, 0xDA	; 218
    2e7e:	78 e3       	ldi	r23, 0x38	; 56
    2e80:	ca 01       	movw	r24, r20
    2e82:	1c c0       	rjmp	.+56     	; 0x2ebc <ProcessInput+0x188>
                    canDo = 1;
                //No child, maybe a step back, letter ok?
                } else if (currDepth) {
    2e84:	99 23       	and	r25, r25
    2e86:	09 f4       	brne	.+2      	; 0x2e8a <ProcessInput+0x156>
    2e88:	dc c6       	rjmp	.+3512   	; 0x3c42 <ProcessInput+0xf0e>
                    if (CheckLetter(route[currDepth-1], data[1])) {
    2e8a:	22 0f       	add	r18, r18
    2e8c:	33 1f       	adc	r19, r19
    2e8e:	f9 01       	movw	r30, r18
    2e90:	e7 52       	subi	r30, 0x27	; 39
    2e92:	f6 4c       	sbci	r31, 0xC6	; 198
    2e94:	d3 01       	movw	r26, r6
    2e96:	11 96       	adiw	r26, 0x01	; 1
    2e98:	6c 91       	ld	r22, X
    2e9a:	80 81       	ld	r24, Z
    2e9c:	91 81       	ldd	r25, Z+1	; 0x01
    2e9e:	21 db       	rcall	.-2494   	; 0x24e2 <CheckLetter>
    2ea0:	88 23       	and	r24, r24
    2ea2:	09 f4       	brne	.+2      	; 0x2ea6 <ProcessInput+0x172>
    2ea4:	ce c6       	rjmp	.+3484   	; 0x3c42 <ProcessInput+0xf0e>
                        PopulateObject(route[currDepth-1], &actObj1);
    2ea6:	e0 91 2e 38 	lds	r30, 0x382E	; 0x80382e <currDepth>
    2eaa:	f0 e0       	ldi	r31, 0x00	; 0
    2eac:	ee 0f       	add	r30, r30
    2eae:	ff 1f       	adc	r31, r31
    2eb0:	e7 52       	subi	r30, 0x27	; 39
    2eb2:	f6 4c       	sbci	r31, 0xC6	; 198
    2eb4:	6a ed       	ldi	r22, 0xDA	; 218
    2eb6:	78 e3       	ldi	r23, 0x38	; 56
    2eb8:	80 81       	ld	r24, Z
    2eba:	91 81       	ldd	r25, Z+1	; 0x01
    2ebc:	99 da       	rcall	.-2766   	; 0x23f0 <PopulateObject>
                    }
                }

                //The candidate is found! Let's check if the action is legit
                if (canDo) {
                    if ((data[0] == 'e') && ((actObj1.byteField[ACTION_MASK]&ENTER)==0)) {
    2ebe:	d3 01       	movw	r26, r6
    2ec0:	8c 91       	ld	r24, X
    2ec2:	85 36       	cpi	r24, 0x65	; 101
    2ec4:	c1 f4       	brne	.+48     	; 0x2ef6 <ProcessInput+0x1c2>
    2ec6:	80 91 e2 38 	lds	r24, 0x38E2	; 0x8038e2 <actObj1.3989+0x8>
    2eca:	80 fd       	sbrc	r24, 0
    2ecc:	1d c0       	rjmp	.+58     	; 0x2f08 <ProcessInput+0x1d4>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2ece:	8d e9       	ldi	r24, 0x9D	; 157
    2ed0:	99 e7       	ldi	r25, 0x79	; 121
    2ed2:	80 93 1d 39 	sts	0x391D, r24	; 0x80391d <reactStr+0x2>
    2ed6:	90 93 1e 39 	sts	0x391E, r25	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    2eda:	8e e1       	ldi	r24, 0x1E	; 30
    2edc:	90 e0       	ldi	r25, 0x00	; 0
    2ede:	80 93 5d 39 	sts	0x395D, r24	; 0x80395d <reactStr+0x42>
    2ee2:	90 93 5e 39 	sts	0x395E, r25	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    2ee6:	81 e0       	ldi	r24, 0x01	; 1
    2ee8:	90 e0       	ldi	r25, 0x00	; 0
    2eea:	80 93 9d 39 	sts	0x399D, r24	; 0x80399d <reactStr+0x82>
    2eee:	90 93 9e 39 	sts	0x399E, r25	; 0x80399e <reactStr+0x83>
                }

                //The candidate is found! Let's check if the action is legit
                if (canDo) {
                    if ((data[0] == 'e') && ((actObj1.byteField[ACTION_MASK]&ENTER)==0)) {
                        SetResponse(elements++, A_CANTENTER, L_CANTENTER, TEASER);
    2ef2:	12 e0       	ldi	r17, 0x02	; 2
    2ef4:	97 c6       	rjmp	.+3374   	; 0x3c24 <ProcessInput+0xef0>
                    } else if ((data[0] == 'o') && ((actObj1.byteField[ACTION_MASK]&OPEN)==0)) {
    2ef6:	8f 36       	cpi	r24, 0x6F	; 111
    2ef8:	39 f4       	brne	.+14     	; 0x2f08 <ProcessInput+0x1d4>
    2efa:	80 91 e2 38 	lds	r24, 0x38E2	; 0x8038e2 <actObj1.3989+0x8>
    2efe:	81 fd       	sbrc	r24, 1
    2f00:	03 c0       	rjmp	.+6      	; 0x2f08 <ProcessInput+0x1d4>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2f02:	82 e8       	ldi	r24, 0x82	; 130
    2f04:	99 e7       	ldi	r25, 0x79	; 121
    2f06:	6c c4       	rjmp	.+2264   	; 0x37e0 <ProcessInput+0xaac>
                        SetResponse(elements++, A_CANTENTER, L_CANTENTER, TEASER);
                    } else if ((data[0] == 'o') && ((actObj1.byteField[ACTION_MASK]&OPEN)==0)) {
                        SetResponse(elements++, A_CANTOPEN, L_CANTOPEN, TEASER);
                    
                    //Action legit, permission granted?
                    } else if (CheckState(actObj1.byteField[OPEN_ACL])) {
    2f08:	80 91 e0 38 	lds	r24, 0x38E0	; 0x8038e0 <actObj1.3989+0x6>
    2f0c:	0e 94 0c 0a 	call	0x1418	; 0x1418 <CheckState>
    2f10:	e0 91 2e 38 	lds	r30, 0x382E	; 0x80382e <currDepth>
    2f14:	88 23       	and	r24, r24
    2f16:	09 f4       	brne	.+2      	; 0x2f1a <ProcessInput+0x1e6>
    2f18:	49 c0       	rjmp	.+146    	; 0x2fac <ProcessInput+0x278>
                            
                        //Yes! Check if we must move forward or backwards.
                        if (route[currDepth+1]) ++currDepth; else --currDepth;
    2f1a:	ae 2f       	mov	r26, r30
    2f1c:	b0 e0       	ldi	r27, 0x00	; 0
    2f1e:	aa 0f       	add	r26, r26
    2f20:	bb 1f       	adc	r27, r27
    2f22:	a3 52       	subi	r26, 0x23	; 35
    2f24:	b6 4c       	sbci	r27, 0xC6	; 198
    2f26:	8d 91       	ld	r24, X+
    2f28:	9c 91       	ld	r25, X
    2f2a:	89 2b       	or	r24, r25
    2f2c:	11 f0       	breq	.+4      	; 0x2f32 <ProcessInput+0x1fe>
    2f2e:	ef 5f       	subi	r30, 0xFF	; 255
    2f30:	01 c0       	rjmp	.+2      	; 0x2f34 <ProcessInput+0x200>
    2f32:	e1 50       	subi	r30, 0x01	; 1
    2f34:	e0 93 2e 38 	sts	0x382E, r30	; 0x80382e <currDepth>
                        PopulateObject(route[currDepth], &currObj);
    2f38:	e0 91 2e 38 	lds	r30, 0x382E	; 0x80382e <currDepth>
    2f3c:	f0 e0       	ldi	r31, 0x00	; 0
    2f3e:	ee 0f       	add	r30, r30
    2f40:	ff 1f       	adc	r31, r31
    2f42:	e5 52       	subi	r30, 0x25	; 37
    2f44:	f6 4c       	sbci	r31, 0xC6	; 198
    2f46:	6b e1       	ldi	r22, 0x1B	; 27
    2f48:	7a e3       	ldi	r23, 0x3A	; 58
    2f4a:	80 81       	ld	r24, Z
    2f4c:	91 81       	ldd	r25, Z+1	; 0x01
    2f4e:	50 da       	rcall	.-2912   	; 0x23f0 <PopulateObject>
                        SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
    2f50:	80 91 37 3a 	lds	r24, 0x3A37	; 0x803a37 <currObj+0x1c>
    2f54:	90 91 38 3a 	lds	r25, 0x3A38	; 0x803a38 <currObj+0x1d>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2f58:	20 91 29 3a 	lds	r18, 0x3A29	; 0x803a29 <currObj+0xe>
    2f5c:	30 91 2a 3a 	lds	r19, 0x3A2A	; 0x803a2a <currObj+0xf>
    2f60:	20 93 1d 39 	sts	0x391D, r18	; 0x80391d <reactStr+0x2>
    2f64:	30 93 1e 39 	sts	0x391E, r19	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    2f68:	80 93 5d 39 	sts	0x395D, r24	; 0x80395d <reactStr+0x42>
    2f6c:	90 93 5e 39 	sts	0x395E, r25	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    2f70:	10 92 9d 39 	sts	0x399D, r1	; 0x80399d <reactStr+0x82>
    2f74:	10 92 9e 39 	sts	0x399E, r1	; 0x80399e <reactStr+0x83>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2f78:	89 e5       	ldi	r24, 0x59	; 89
    2f7a:	9a e7       	ldi	r25, 0x7A	; 122
    2f7c:	80 93 1f 39 	sts	0x391F, r24	; 0x80391f <reactStr+0x4>
    2f80:	90 93 20 39 	sts	0x3920, r25	; 0x803920 <reactStr+0x5>
    reactStr[1][number]=length;
    2f84:	82 e0       	ldi	r24, 0x02	; 2
    2f86:	90 e0       	ldi	r25, 0x00	; 0
    2f88:	80 93 5f 39 	sts	0x395F, r24	; 0x80395f <reactStr+0x44>
    2f8c:	90 93 60 39 	sts	0x3960, r25	; 0x803960 <reactStr+0x45>
    reactStr[2][number]=type;
    2f90:	81 e0       	ldi	r24, 0x01	; 1
    2f92:	90 e0       	ldi	r25, 0x00	; 0
    2f94:	80 93 9f 39 	sts	0x399F, r24	; 0x80399f <reactStr+0x84>
    2f98:	90 93 a0 39 	sts	0x39A0, r25	; 0x8039a0 <reactStr+0x85>
                        //Yes! Check if we must move forward or backwards.
                        if (route[currDepth+1]) ++currDepth; else --currDepth;
                        PopulateObject(route[currDepth], &currObj);
                        SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
                        SetResponse(elements++, A_LF, 2, TEASER);
                        effect = currObj.byteField[EFFECTS];
    2f9c:	80 91 1f 3a 	lds	r24, 0x3A1F	; 0x803a1f <currObj+0x4>
    2fa0:	90 e0       	ldi	r25, 0x00	; 0
    2fa2:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <effect>
    2fa6:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <effect+0x1>
    2faa:	07 c4       	rjmp	.+2062   	; 0x37ba <ProcessInput+0xa86>
                                                  
                    //Not granted!
                    } else {
                        route[currDepth+1] = 0;
    2fac:	f0 e0       	ldi	r31, 0x00	; 0
    2fae:	ee 0f       	add	r30, r30
    2fb0:	ff 1f       	adc	r31, r31
    2fb2:	e3 52       	subi	r30, 0x23	; 35
    2fb4:	f6 4c       	sbci	r31, 0xC6	; 198
    2fb6:	10 82       	st	Z, r1
    2fb8:	11 82       	std	Z+1, r1	; 0x01
                        SetResponse(elements++, actObj1.addrStr[OPEN_ACL_MSG], actObj1.lenStr[OPEN_ACL_MSG], GAME);
    2fba:	80 91 fc 38 	lds	r24, 0x38FC	; 0x8038fc <actObj1.3989+0x22>
    2fbe:	90 91 fd 38 	lds	r25, 0x38FD	; 0x8038fd <actObj1.3989+0x23>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2fc2:	20 91 ee 38 	lds	r18, 0x38EE	; 0x8038ee <actObj1.3989+0x14>
    2fc6:	30 91 ef 38 	lds	r19, 0x38EF	; 0x8038ef <actObj1.3989+0x15>
    2fca:	20 93 1d 39 	sts	0x391D, r18	; 0x80391d <reactStr+0x2>
    2fce:	30 93 1e 39 	sts	0x391E, r19	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    2fd2:	80 93 5d 39 	sts	0x395D, r24	; 0x80395d <reactStr+0x42>
    2fd6:	90 93 5e 39 	sts	0x395E, r25	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    2fda:	10 92 9d 39 	sts	0x399D, r1	; 0x80399d <reactStr+0x82>
    2fde:	10 92 9e 39 	sts	0x399E, r1	; 0x80399e <reactStr+0x83>
                                                  
                    //Not granted!
                    } else {
                        route[currDepth+1] = 0;
                        SetResponse(elements++, actObj1.addrStr[OPEN_ACL_MSG], actObj1.lenStr[OPEN_ACL_MSG], GAME);
                        effect = actObj1.effect[0];              
    2fe2:	80 91 02 39 	lds	r24, 0x3902	; 0x803902 <actObj1.3989+0x28>
    2fe6:	c6 c4       	rjmp	.+2444   	; 0x3974 <ProcessInput+0xc40>
                    SetResponse(elements++, A_DONTSEE, L_DONTSEE, TEASER);                
                }
            }

        //Look around or at objects
        } else if (data[0] == 'l') {
    2fe8:	8c 36       	cpi	r24, 0x6C	; 108
    2fea:	09 f0       	breq	.+2      	; 0x2fee <ProcessInput+0x2ba>
    2fec:	59 c1       	rjmp	.+690    	; 0x32a0 <ProcessInput+0x56c>
    2fee:	e0 91 2e 38 	lds	r30, 0x382E	; 0x80382e <currDepth>
            if (inputLen == 1) {
    2ff2:	b1 e0       	ldi	r27, 0x01	; 1
    2ff4:	fb 12       	cpse	r15, r27
    2ff6:	f1 c0       	rjmp	.+482    	; 0x31da <ProcessInput+0x4a6>

                //Show info about this area first
                SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
    2ff8:	80 91 37 3a 	lds	r24, 0x3A37	; 0x803a37 <currObj+0x1c>
    2ffc:	90 91 38 3a 	lds	r25, 0x3A38	; 0x803a38 <currObj+0x1d>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3000:	40 91 29 3a 	lds	r20, 0x3A29	; 0x803a29 <currObj+0xe>
    3004:	50 91 2a 3a 	lds	r21, 0x3A2A	; 0x803a2a <currObj+0xf>
    3008:	40 93 1d 39 	sts	0x391D, r20	; 0x80391d <reactStr+0x2>
    300c:	50 93 1e 39 	sts	0x391E, r21	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    3010:	80 93 5d 39 	sts	0x395D, r24	; 0x80395d <reactStr+0x42>
    3014:	90 93 5e 39 	sts	0x395E, r25	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    3018:	10 92 9d 39 	sts	0x399D, r1	; 0x80399d <reactStr+0x82>
    301c:	10 92 9e 39 	sts	0x399E, r1	; 0x80399e <reactStr+0x83>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3020:	20 93 1f 39 	sts	0x391F, r18	; 0x80391f <reactStr+0x4>
    3024:	30 93 20 39 	sts	0x3920, r19	; 0x803920 <reactStr+0x5>
    reactStr[1][number]=length;
    3028:	82 e0       	ldi	r24, 0x02	; 2
    302a:	90 e0       	ldi	r25, 0x00	; 0
    302c:	80 93 5f 39 	sts	0x395F, r24	; 0x80395f <reactStr+0x44>
    3030:	90 93 60 39 	sts	0x3960, r25	; 0x803960 <reactStr+0x45>
    reactStr[2][number]=type;
    3034:	00 93 9f 39 	sts	0x399F, r16	; 0x80399f <reactStr+0x84>
    3038:	10 93 a0 39 	sts	0x39A0, r17	; 0x8039a0 <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    303c:	8b ee       	ldi	r24, 0xEB	; 235
    303e:	99 e7       	ldi	r25, 0x79	; 121
    3040:	80 93 21 39 	sts	0x3921, r24	; 0x803921 <reactStr+0x6>
    3044:	90 93 22 39 	sts	0x3922, r25	; 0x803922 <reactStr+0x7>
    reactStr[1][number]=length;
    3048:	85 e1       	ldi	r24, 0x15	; 21
    304a:	90 e0       	ldi	r25, 0x00	; 0
    304c:	80 93 61 39 	sts	0x3961, r24	; 0x803961 <reactStr+0x46>
    3050:	90 93 62 39 	sts	0x3962, r25	; 0x803962 <reactStr+0x47>
    reactStr[2][number]=type;
    3054:	00 93 a1 39 	sts	0x39A1, r16	; 0x8039a1 <reactStr+0x86>
    3058:	10 93 a2 39 	sts	0x39A2, r17	; 0x8039a2 <reactStr+0x87>
                SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
                SetResponse(elements++, A_LF, 2, TEASER);
                SetResponse(elements++, A_LOOK, L_LOOK, TEASER);

                //Check the visible children first
                route[currDepth+1] = 0;
    305c:	f0 e0       	ldi	r31, 0x00	; 0
    305e:	ee 0f       	add	r30, r30
    3060:	ff 1f       	adc	r31, r31
    3062:	e3 52       	subi	r30, 0x23	; 35
    3064:	f6 4c       	sbci	r31, 0xC6	; 198
    3066:	10 82       	st	Z, r1
    3068:	11 82       	std	Z+1, r1	; 0x01
            if (inputLen == 1) {

                //Show info about this area first
                SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
                SetResponse(elements++, A_LF, 2, TEASER);
                SetResponse(elements++, A_LOOK, L_LOOK, TEASER);
    306a:	b4 e0       	ldi	r27, 0x04	; 4
    306c:	9b 2e       	mov	r9, r27
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    306e:	17 e5       	ldi	r17, 0x57	; 87
    3070:	e1 2e       	mov	r14, r17
    3072:	1a e7       	ldi	r17, 0x7A	; 122
    3074:	f1 2e       	mov	r15, r17
    reactStr[1][number]=length;
    3076:	02 e0       	ldi	r16, 0x02	; 2
    3078:	c0 2e       	mov	r12, r16
    307a:	d1 2c       	mov	r13, r1
    reactStr[2][number]=type;
    307c:	aa 24       	eor	r10, r10
    307e:	a3 94       	inc	r10
    3080:	b1 2c       	mov	r11, r1
                SetResponse(elements++, A_LOOK, L_LOOK, TEASER);

                //Check the visible children first
                route[currDepth+1] = 0;
                do{
                    route[currDepth+1] = FindChild(route[currDepth], 0, route[currDepth+1]);
    3082:	80 91 2e 38 	lds	r24, 0x382E	; 0x80382e <currDepth>
    3086:	90 e0       	ldi	r25, 0x00	; 0
    3088:	8c 01       	movw	r16, r24
    308a:	00 0f       	add	r16, r16
    308c:	11 1f       	adc	r17, r17
    308e:	03 52       	subi	r16, 0x23	; 35
    3090:	16 4c       	sbci	r17, 0xC6	; 198
    3092:	f8 01       	movw	r30, r16
    3094:	40 81       	ld	r20, Z
    3096:	51 81       	ldd	r21, Z+1	; 0x01
    3098:	88 0f       	add	r24, r24
    309a:	99 1f       	adc	r25, r25
    309c:	fc 01       	movw	r30, r24
    309e:	e5 52       	subi	r30, 0x25	; 37
    30a0:	f6 4c       	sbci	r31, 0xC6	; 198
    30a2:	60 e0       	ldi	r22, 0x00	; 0
    30a4:	80 81       	ld	r24, Z
    30a6:	91 81       	ldd	r25, Z+1	; 0x01
    30a8:	72 da       	rcall	.-2844   	; 0x258e <FindChild>
    30aa:	d8 01       	movw	r26, r16
    30ac:	8d 93       	st	X+, r24
    30ae:	9c 93       	st	X, r25
                    if (route[currDepth+1]) {
    30b0:	e0 91 2e 38 	lds	r30, 0x382E	; 0x80382e <currDepth>
    30b4:	f0 e0       	ldi	r31, 0x00	; 0
    30b6:	ee 0f       	add	r30, r30
    30b8:	ff 1f       	adc	r31, r31
    30ba:	e3 52       	subi	r30, 0x23	; 35
    30bc:	f6 4c       	sbci	r31, 0xC6	; 198
    30be:	80 81       	ld	r24, Z
    30c0:	91 81       	ldd	r25, Z+1	; 0x01
    30c2:	00 97       	sbiw	r24, 0x00	; 0
    30c4:	09 f4       	brne	.+2      	; 0x30c8 <ProcessInput+0x394>
    30c6:	4a c0       	rjmp	.+148    	; 0x315c <ProcessInput+0x428>
                        if ((route[currDepth+1] != inventory[0])&&(route[currDepth+1] != inventory[1])) {
    30c8:	20 91 3e 38 	lds	r18, 0x383E	; 0x80383e <inventory>
    30cc:	30 91 3f 38 	lds	r19, 0x383F	; 0x80383f <inventory+0x1>
    30d0:	82 17       	cp	r24, r18
    30d2:	93 07       	cpc	r25, r19
    30d4:	09 f4       	brne	.+2      	; 0x30d8 <ProcessInput+0x3a4>
    30d6:	42 c0       	rjmp	.+132    	; 0x315c <ProcessInput+0x428>
    30d8:	20 91 40 38 	lds	r18, 0x3840	; 0x803840 <inventory+0x2>
    30dc:	30 91 41 38 	lds	r19, 0x3841	; 0x803841 <inventory+0x3>
    30e0:	82 17       	cp	r24, r18
    30e2:	93 07       	cpc	r25, r19
                            PopulateObject(route[currDepth+1], &actObj1);
    30e4:	d9 f1       	breq	.+118    	; 0x315c <ProcessInput+0x428>
    30e6:	6a ed       	ldi	r22, 0xDA	; 218
    30e8:	78 e3       	ldi	r23, 0x38	; 56
    30ea:	82 d9       	rcall	.-3324   	; 0x23f0 <PopulateObject>
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
    30ec:	80 91 f4 38 	lds	r24, 0x38F4	; 0x8038f4 <actObj1.3989+0x1a>
    30f0:	90 91 f5 38 	lds	r25, 0x38F5	; 0x8038f5 <actObj1.3989+0x1b>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    30f4:	e9 2d       	mov	r30, r9
    30f6:	f0 e0       	ldi	r31, 0x00	; 0
    30f8:	df 01       	movw	r26, r30
    30fa:	aa 0f       	add	r26, r26
    30fc:	bb 1f       	adc	r27, r27
    30fe:	a5 5e       	subi	r26, 0xE5	; 229
    3100:	b6 4c       	sbci	r27, 0xC6	; 198
    3102:	20 91 e6 38 	lds	r18, 0x38E6	; 0x8038e6 <actObj1.3989+0xc>
    3106:	30 91 e7 38 	lds	r19, 0x38E7	; 0x8038e7 <actObj1.3989+0xd>
    310a:	2d 93       	st	X+, r18
    310c:	3c 93       	st	X, r19
    reactStr[1][number]=length;
    310e:	df 01       	movw	r26, r30
    3110:	aa 0f       	add	r26, r26
    3112:	bb 1f       	adc	r27, r27
    3114:	a5 5a       	subi	r26, 0xA5	; 165
    3116:	b6 4c       	sbci	r27, 0xC6	; 198
    3118:	8d 93       	st	X+, r24
    311a:	9c 93       	st	X, r25
    reactStr[2][number]=type;
    311c:	ee 0f       	add	r30, r30
    311e:	ff 1f       	adc	r31, r31
    3120:	e5 56       	subi	r30, 0x65	; 101
    3122:	f6 4c       	sbci	r31, 0xC6	; 198
    3124:	10 82       	st	Z, r1
    3126:	11 82       	std	Z+1, r1	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3128:	81 e0       	ldi	r24, 0x01	; 1
    312a:	89 0d       	add	r24, r9
    312c:	90 e0       	ldi	r25, 0x00	; 0
    312e:	93 94       	inc	r9
    3130:	93 94       	inc	r9
    3132:	fc 01       	movw	r30, r24
    3134:	ee 0f       	add	r30, r30
    3136:	ff 1f       	adc	r31, r31
    3138:	e5 5e       	subi	r30, 0xE5	; 229
    313a:	f6 4c       	sbci	r31, 0xC6	; 198
    313c:	e0 82       	st	Z, r14
    313e:	f1 82       	std	Z+1, r15	; 0x01
    reactStr[1][number]=length;
    3140:	fc 01       	movw	r30, r24
    3142:	ee 0f       	add	r30, r30
    3144:	ff 1f       	adc	r31, r31
    3146:	e5 5a       	subi	r30, 0xA5	; 165
    3148:	f6 4c       	sbci	r31, 0xC6	; 198
    314a:	c0 82       	st	Z, r12
    314c:	d1 82       	std	Z+1, r13	; 0x01
    reactStr[2][number]=type;
    314e:	88 0f       	add	r24, r24
    3150:	99 1f       	adc	r25, r25
    3152:	fc 01       	movw	r30, r24
    3154:	e5 56       	subi	r30, 0x65	; 101
    3156:	f6 4c       	sbci	r31, 0xC6	; 198
    3158:	a0 82       	st	Z, r10
    315a:	b1 82       	std	Z+1, r11	; 0x01
                            PopulateObject(route[currDepth+1], &actObj1);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
                            SetResponse(elements++, A_COMMA, L_COMMA, TEASER);
                        }
                    }
                }while (route[currDepth+1]);
    315c:	20 91 2e 38 	lds	r18, 0x382E	; 0x80382e <currDepth>
    3160:	82 2f       	mov	r24, r18
    3162:	90 e0       	ldi	r25, 0x00	; 0
    3164:	fc 01       	movw	r30, r24
    3166:	ee 0f       	add	r30, r30
    3168:	ff 1f       	adc	r31, r31
    316a:	e3 52       	subi	r30, 0x23	; 35
    316c:	f6 4c       	sbci	r31, 0xC6	; 198
    316e:	40 81       	ld	r20, Z
    3170:	51 81       	ldd	r21, Z+1	; 0x01
    3172:	45 2b       	or	r20, r21
    3174:	09 f0       	breq	.+2      	; 0x3178 <ProcessInput+0x444>
    3176:	85 cf       	rjmp	.-246    	; 0x3082 <ProcessInput+0x34e>

                //Look back if not on level 0
                if (currDepth) {
    3178:	22 23       	and	r18, r18
    317a:	61 f1       	breq	.+88     	; 0x31d4 <ProcessInput+0x4a0>
                    PopulateObject(route[currDepth-1], &actObj1);
    317c:	88 0f       	add	r24, r24
    317e:	99 1f       	adc	r25, r25
    3180:	fc 01       	movw	r30, r24
    3182:	e7 52       	subi	r30, 0x27	; 39
    3184:	f6 4c       	sbci	r31, 0xC6	; 198
    3186:	6a ed       	ldi	r22, 0xDA	; 218
    3188:	78 e3       	ldi	r23, 0x38	; 56
    318a:	80 81       	ld	r24, Z
    318c:	91 81       	ldd	r25, Z+1	; 0x01
    318e:	30 d9       	rcall	.-3488   	; 0x23f0 <PopulateObject>
                    SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
    3190:	20 91 f4 38 	lds	r18, 0x38F4	; 0x8038f4 <actObj1.3989+0x1a>
    3194:	30 91 f5 38 	lds	r19, 0x38F5	; 0x8038f5 <actObj1.3989+0x1b>
    3198:	11 e0       	ldi	r17, 0x01	; 1
    319a:	19 0d       	add	r17, r9
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    319c:	89 2d       	mov	r24, r9
    319e:	90 e0       	ldi	r25, 0x00	; 0
    31a0:	fc 01       	movw	r30, r24
    31a2:	ee 0f       	add	r30, r30
    31a4:	ff 1f       	adc	r31, r31
    31a6:	e5 5e       	subi	r30, 0xE5	; 229
    31a8:	f6 4c       	sbci	r31, 0xC6	; 198
    31aa:	40 91 e6 38 	lds	r20, 0x38E6	; 0x8038e6 <actObj1.3989+0xc>
    31ae:	50 91 e7 38 	lds	r21, 0x38E7	; 0x8038e7 <actObj1.3989+0xd>
    31b2:	40 83       	st	Z, r20
    31b4:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    31b6:	fc 01       	movw	r30, r24
    31b8:	ee 0f       	add	r30, r30
    31ba:	ff 1f       	adc	r31, r31
    31bc:	e5 5a       	subi	r30, 0xA5	; 165
    31be:	f6 4c       	sbci	r31, 0xC6	; 198
    31c0:	20 83       	st	Z, r18
    31c2:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    31c4:	88 0f       	add	r24, r24
    31c6:	99 1f       	adc	r25, r25
    31c8:	fc 01       	movw	r30, r24
    31ca:	e5 56       	subi	r30, 0x65	; 101
    31cc:	f6 4c       	sbci	r31, 0xC6	; 198
    31ce:	10 82       	st	Z, r1
    31d0:	11 82       	std	Z+1, r1	; 0x01
    31d2:	28 c5       	rjmp	.+2640   	; 0x3c24 <ProcessInput+0xef0>

                //Look back if not on level 0
                if (currDepth) {
                    PopulateObject(route[currDepth-1], &actObj1);
                    SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
                } else elements-=1;
    31d4:	1f ef       	ldi	r17, 0xFF	; 255
    31d6:	19 0d       	add	r17, r9
    31d8:	25 c5       	rjmp	.+2634   	; 0x3c24 <ProcessInput+0xef0>

            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
    31da:	ee 2e       	mov	r14, r30
    31dc:	f1 2c       	mov	r15, r1
    31de:	f7 01       	movw	r30, r14
    31e0:	ee 0f       	add	r30, r30
    31e2:	ff 1f       	adc	r31, r31
    31e4:	e5 52       	subi	r30, 0x25	; 37
    31e6:	f6 4c       	sbci	r31, 0xC6	; 198
    31e8:	40 e0       	ldi	r20, 0x00	; 0
    31ea:	50 e0       	ldi	r21, 0x00	; 0
    31ec:	d3 01       	movw	r26, r6
    31ee:	11 96       	adiw	r26, 0x01	; 1
    31f0:	6c 91       	ld	r22, X
    31f2:	80 81       	ld	r24, Z
    31f4:	91 81       	ldd	r25, Z+1	; 0x01
    31f6:	cb d9       	rcall	.-3178   	; 0x258e <FindChild>
    31f8:	f7 01       	movw	r30, r14
    31fa:	ee 0f       	add	r30, r30
    31fc:	ff 1f       	adc	r31, r31
    31fe:	e3 52       	subi	r30, 0x23	; 35
    3200:	f6 4c       	sbci	r31, 0xC6	; 198
    3202:	80 83       	st	Z, r24
    3204:	91 83       	std	Z+1, r25	; 0x01
                if (route[currDepth+1]) {
    3206:	90 91 2e 38 	lds	r25, 0x382E	; 0x80382e <currDepth>
    320a:	29 2f       	mov	r18, r25
    320c:	30 e0       	ldi	r19, 0x00	; 0
    320e:	f9 01       	movw	r30, r18
    3210:	ee 0f       	add	r30, r30
    3212:	ff 1f       	adc	r31, r31
    3214:	e3 52       	subi	r30, 0x23	; 35
    3216:	f6 4c       	sbci	r31, 0xC6	; 198
    3218:	40 81       	ld	r20, Z
    321a:	51 81       	ldd	r21, Z+1	; 0x01
    321c:	41 15       	cp	r20, r1
    321e:	51 05       	cpc	r21, r1
    3220:	21 f0       	breq	.+8      	; 0x322a <ProcessInput+0x4f6>
                    PopulateObject(route[currDepth+1], &actObj1);
    3222:	6a ed       	ldi	r22, 0xDA	; 218
    3224:	78 e3       	ldi	r23, 0x38	; 56
    3226:	ca 01       	movw	r24, r20
    3228:	1c c0       	rjmp	.+56     	; 0x3262 <ProcessInput+0x52e>
                    SetResponse(elements++, actObj1.addrStr[DESC], actObj1.lenStr[DESC],GAME);   
                } else if (currDepth) {
    322a:	99 23       	and	r25, r25
                    if (CheckLetter(route[currDepth-1], data[1])) {
    322c:	81 f1       	breq	.+96     	; 0x328e <ProcessInput+0x55a>
    322e:	22 0f       	add	r18, r18
    3230:	33 1f       	adc	r19, r19
    3232:	f9 01       	movw	r30, r18
    3234:	e7 52       	subi	r30, 0x27	; 39
    3236:	f6 4c       	sbci	r31, 0xC6	; 198
    3238:	d3 01       	movw	r26, r6
    323a:	11 96       	adiw	r26, 0x01	; 1
    323c:	6c 91       	ld	r22, X
    323e:	80 81       	ld	r24, Z
    3240:	91 81       	ldd	r25, Z+1	; 0x01
    3242:	4f d9       	rcall	.-3426   	; 0x24e2 <CheckLetter>
    3244:	81 11       	cpse	r24, r1
    3246:	02 c0       	rjmp	.+4      	; 0x324c <ProcessInput+0x518>
}

//The game logic!
uint8_t ProcessInput(uint8_t *data){
    static object_model_t actObj1, actObj2;
    uint8_t elements = 1;
    3248:	11 e0       	ldi	r17, 0x01	; 1
                if (route[currDepth+1]) {
                    PopulateObject(route[currDepth+1], &actObj1);
                    SetResponse(elements++, actObj1.addrStr[DESC], actObj1.lenStr[DESC],GAME);   
                } else if (currDepth) {
                    if (CheckLetter(route[currDepth-1], data[1])) {
                        PopulateObject(route[currDepth-1], &actObj1);
    324a:	ec c4       	rjmp	.+2520   	; 0x3c24 <ProcessInput+0xef0>
    324c:	e0 91 2e 38 	lds	r30, 0x382E	; 0x80382e <currDepth>
    3250:	f0 e0       	ldi	r31, 0x00	; 0
    3252:	ee 0f       	add	r30, r30
    3254:	ff 1f       	adc	r31, r31
    3256:	e7 52       	subi	r30, 0x27	; 39
    3258:	f6 4c       	sbci	r31, 0xC6	; 198
    325a:	6a ed       	ldi	r22, 0xDA	; 218
    325c:	78 e3       	ldi	r23, 0x38	; 56
    325e:	80 81       	ld	r24, Z
    3260:	91 81       	ldd	r25, Z+1	; 0x01
    3262:	c6 d8       	rcall	.-3700   	; 0x23f0 <PopulateObject>
                        SetResponse(elements++, actObj1.addrStr[DESC], actObj1.lenStr[DESC],GAME);
    3264:	80 91 f6 38 	lds	r24, 0x38F6	; 0x8038f6 <actObj1.3989+0x1c>
    3268:	90 91 f7 38 	lds	r25, 0x38F7	; 0x8038f7 <actObj1.3989+0x1d>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    326c:	20 91 e8 38 	lds	r18, 0x38E8	; 0x8038e8 <actObj1.3989+0xe>
    3270:	30 91 e9 38 	lds	r19, 0x38E9	; 0x8038e9 <actObj1.3989+0xf>
    3274:	20 93 1d 39 	sts	0x391D, r18	; 0x80391d <reactStr+0x2>
    3278:	30 93 1e 39 	sts	0x391E, r19	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    327c:	80 93 5d 39 	sts	0x395D, r24	; 0x80395d <reactStr+0x42>
    3280:	90 93 5e 39 	sts	0x395E, r25	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    3284:	10 92 9d 39 	sts	0x399D, r1	; 0x80399d <reactStr+0x82>
    3288:	10 92 9e 39 	sts	0x399E, r1	; 0x80399e <reactStr+0x83>
    328c:	32 ce       	rjmp	.-924    	; 0x2ef2 <ProcessInput+0x1be>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    328e:	81 ed       	ldi	r24, 0xD1	; 209
    3290:	99 e7       	ldi	r25, 0x79	; 121
    3292:	80 93 1d 39 	sts	0x391D, r24	; 0x80391d <reactStr+0x2>
    3296:	90 93 1e 39 	sts	0x391E, r25	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    329a:	8a e1       	ldi	r24, 0x1A	; 26
    329c:	90 e0       	ldi	r25, 0x00	; 0
    329e:	c9 c2       	rjmp	.+1426   	; 0x3832 <ProcessInput+0xafe>
                    SetResponse(elements++, A_DONTSEE, L_DONTSEE, TEASER);
                }
            }
        
        //Pick up an object
        } else if (data[0] == 'p') {
    32a0:	80 37       	cpi	r24, 0x70	; 112
    32a2:	09 f0       	breq	.+2      	; 0x32a6 <ProcessInput+0x572>
    32a4:	92 c0       	rjmp	.+292    	; 0x33ca <ProcessInput+0x696>
            if (inventory[0]&&inventory[1]) {
    32a6:	80 91 3e 38 	lds	r24, 0x383E	; 0x80383e <inventory>
    32aa:	90 91 3f 38 	lds	r25, 0x383F	; 0x80383f <inventory+0x1>
    32ae:	89 2b       	or	r24, r25
    32b0:	79 f0       	breq	.+30     	; 0x32d0 <ProcessInput+0x59c>
    32b2:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <inventory+0x2>
    32b6:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <inventory+0x3>
    32ba:	89 2b       	or	r24, r25
    32bc:	49 f0       	breq	.+18     	; 0x32d0 <ProcessInput+0x59c>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    32be:	87 e0       	ldi	r24, 0x07	; 7
    32c0:	98 e7       	ldi	r25, 0x78	; 120
    32c2:	80 93 1d 39 	sts	0x391D, r24	; 0x80391d <reactStr+0x2>
    32c6:	90 93 1e 39 	sts	0x391E, r25	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    32ca:	89 e5       	ldi	r24, 0x59	; 89
    32cc:	90 e0       	ldi	r25, 0x00	; 0
    32ce:	b1 c2       	rjmp	.+1378   	; 0x3832 <ProcessInput+0xafe>
        
        //Pick up an object
        } else if (data[0] == 'p') {
            if (inventory[0]&&inventory[1]) {
                SetResponse(elements++, A_CARRYTWO, L_CARRYTWO, TEASER);
            } else if (inputLen != 2) {
    32d0:	b2 e0       	ldi	r27, 0x02	; 2
    32d2:	fb 12       	cpse	r15, r27
    32d4:	6f cd       	rjmp	.-1314   	; 0x2db4 <ProcessInput+0x80>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
    32d6:	00 91 2e 38 	lds	r16, 0x382E	; 0x80382e <currDepth>
    32da:	10 e0       	ldi	r17, 0x00	; 0
    32dc:	f8 01       	movw	r30, r16
    32de:	ee 0f       	add	r30, r30
    32e0:	ff 1f       	adc	r31, r31
    32e2:	e5 52       	subi	r30, 0x25	; 37
    32e4:	f6 4c       	sbci	r31, 0xC6	; 198
    32e6:	40 e0       	ldi	r20, 0x00	; 0
    32e8:	50 e0       	ldi	r21, 0x00	; 0
    32ea:	d3 01       	movw	r26, r6
    32ec:	11 96       	adiw	r26, 0x01	; 1
    32ee:	6c 91       	ld	r22, X
    32f0:	80 81       	ld	r24, Z
    32f2:	91 81       	ldd	r25, Z+1	; 0x01
    32f4:	4c d9       	rcall	.-3432   	; 0x258e <FindChild>
    32f6:	00 0f       	add	r16, r16
    32f8:	11 1f       	adc	r17, r17
    32fa:	f8 01       	movw	r30, r16
    32fc:	e3 52       	subi	r30, 0x23	; 35
    32fe:	f6 4c       	sbci	r31, 0xC6	; 198
    3300:	80 83       	st	Z, r24
    3302:	91 83       	std	Z+1, r25	; 0x01
                if (route[currDepth+1]) {
    3304:	20 91 2e 38 	lds	r18, 0x382E	; 0x80382e <currDepth>
    3308:	30 e0       	ldi	r19, 0x00	; 0
    330a:	2f 5f       	subi	r18, 0xFF	; 255
    330c:	3f 4f       	sbci	r19, 0xFF	; 255
    330e:	22 0f       	add	r18, r18
    3310:	33 1f       	adc	r19, r19
    3312:	f9 01       	movw	r30, r18
    3314:	e5 52       	subi	r30, 0x25	; 37
    3316:	f6 4c       	sbci	r31, 0xC6	; 198
    3318:	80 81       	ld	r24, Z
    331a:	91 81       	ldd	r25, Z+1	; 0x01
    331c:	00 97       	sbiw	r24, 0x00	; 0
    331e:	09 f4       	brne	.+2      	; 0x3322 <ProcessInput+0x5ee>
    3320:	38 c3       	rjmp	.+1648   	; 0x3992 <ProcessInput+0xc5e>
                    if ((route[currDepth+1] == inventory[0])||(route[currDepth+1] == inventory[1])) {
    3322:	40 91 3e 38 	lds	r20, 0x383E	; 0x80383e <inventory>
    3326:	50 91 3f 38 	lds	r21, 0x383F	; 0x80383f <inventory+0x1>
    332a:	84 17       	cp	r24, r20
    332c:	95 07       	cpc	r25, r21
    332e:	39 f0       	breq	.+14     	; 0x333e <ProcessInput+0x60a>
    3330:	40 91 40 38 	lds	r20, 0x3840	; 0x803840 <inventory+0x2>
    3334:	50 91 41 38 	lds	r21, 0x3841	; 0x803841 <inventory+0x3>
    3338:	84 17       	cp	r24, r20
    333a:	95 07       	cpc	r25, r21
    333c:	c1 f4       	brne	.+48     	; 0x336e <ProcessInput+0x63a>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    333e:	82 ee       	ldi	r24, 0xE2	; 226
    3340:	97 e7       	ldi	r25, 0x77	; 119
    3342:	80 93 1d 39 	sts	0x391D, r24	; 0x80391d <reactStr+0x2>
    3346:	90 93 1e 39 	sts	0x391E, r25	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    334a:	85 e2       	ldi	r24, 0x25	; 37
    334c:	90 e0       	ldi	r25, 0x00	; 0
    334e:	80 93 5d 39 	sts	0x395D, r24	; 0x80395d <reactStr+0x42>
    3352:	90 93 5e 39 	sts	0x395E, r25	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    3356:	81 e0       	ldi	r24, 0x01	; 1
    3358:	90 e0       	ldi	r25, 0x00	; 0
    335a:	80 93 9d 39 	sts	0x399D, r24	; 0x80399d <reactStr+0x82>
    335e:	90 93 9e 39 	sts	0x399E, r25	; 0x80399e <reactStr+0x83>
            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
                if (route[currDepth+1]) {
                    if ((route[currDepth+1] == inventory[0])||(route[currDepth+1] == inventory[1])) {
                        SetResponse(elements++, A_ALREADYCARRYING, L_ALREADYCARRYING, TEASER);
                        route[currDepth+1] = 0;
    3362:	f9 01       	movw	r30, r18
    3364:	e5 52       	subi	r30, 0x25	; 37
    3366:	f6 4c       	sbci	r31, 0xC6	; 198
    3368:	10 82       	st	Z, r1
    336a:	11 82       	std	Z+1, r1	; 0x01
                    } else {
                        //Put item in the inventory if possible
                        PopulateObject(route[currDepth+1], &actObj1);  
    336c:	c2 cd       	rjmp	.-1148   	; 0x2ef2 <ProcessInput+0x1be>
    336e:	6a ed       	ldi	r22, 0xDA	; 218
    3370:	78 e3       	ldi	r23, 0x38	; 56
    3372:	3e d8       	rcall	.-3972   	; 0x23f0 <PopulateObject>
                        if (CheckState(actObj1.byteField[ACTION_ACL])) {
    3374:	80 91 e1 38 	lds	r24, 0x38E1	; 0x8038e1 <actObj1.3989+0x7>
    3378:	0e 94 0c 0a 	call	0x1418	; 0x1418 <CheckState>
    337c:	88 23       	and	r24, r24
    337e:	09 f4       	brne	.+2      	; 0x3382 <ProcessInput+0x64e>
    3380:	e3 c2       	rjmp	.+1478   	; 0x3948 <ProcessInput+0xc14>
                            if (actObj1.byteField[ITEM_NR]) {
    3382:	80 91 e5 38 	lds	r24, 0x38E5	; 0x8038e5 <actObj1.3989+0xb>
    3386:	88 23       	and	r24, r24
    3388:	09 f4       	brne	.+2      	; 0x338c <ProcessInput+0x658>
    338a:	14 cd       	rjmp	.-1496   	; 0x2db4 <ProcessInput+0x80>
                                if (inventory[0]) {
    338c:	80 91 3e 38 	lds	r24, 0x383E	; 0x80383e <inventory>
    3390:	90 91 3f 38 	lds	r25, 0x383F	; 0x80383f <inventory+0x1>
    3394:	e0 91 2e 38 	lds	r30, 0x382E	; 0x80382e <currDepth>
                                    inventory[1] = route[currDepth+1];
    3398:	f0 e0       	ldi	r31, 0x00	; 0
    339a:	ee 0f       	add	r30, r30
    339c:	ff 1f       	adc	r31, r31
    339e:	e3 52       	subi	r30, 0x23	; 35
    33a0:	f6 4c       	sbci	r31, 0xC6	; 198
                    } else {
                        //Put item in the inventory if possible
                        PopulateObject(route[currDepth+1], &actObj1);  
                        if (CheckState(actObj1.byteField[ACTION_ACL])) {
                            if (actObj1.byteField[ITEM_NR]) {
                                if (inventory[0]) {
    33a2:	89 2b       	or	r24, r25
    33a4:	39 f0       	breq	.+14     	; 0x33b4 <ProcessInput+0x680>
                                    inventory[1] = route[currDepth+1];
    33a6:	80 81       	ld	r24, Z
    33a8:	91 81       	ldd	r25, Z+1	; 0x01
    33aa:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <inventory+0x2>
    33ae:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <inventory+0x3>
    33b2:	06 c0       	rjmp	.+12     	; 0x33c0 <ProcessInput+0x68c>
                                } else {
                                    inventory[0] = route[currDepth+1];
    33b4:	80 81       	ld	r24, Z
    33b6:	91 81       	ldd	r25, Z+1	; 0x01
    33b8:	80 93 3e 38 	sts	0x383E, r24	; 0x80383e <inventory>
    33bc:	90 93 3f 38 	sts	0x383F, r25	; 0x80383f <inventory+0x1>
                                }
                                UpdateState(actObj1.byteField[ACTION_STATE]);
    33c0:	80 91 e4 38 	lds	r24, 0x38E4	; 0x8038e4 <actObj1.3989+0xa>
    33c4:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <UpdateState>
    33c8:	2b c0       	rjmp	.+86     	; 0x3420 <ProcessInput+0x6ec>
                } else SetResponse(elements++, A_NOSUCHOBJECT, L_NOSUCHOBJECT, TEASER);
            }
        } else

        //Drop item if in inventory
        if (data[0] == 'd') {
    33ca:	84 36       	cpi	r24, 0x64	; 100
    33cc:	d9 f4       	brne	.+54     	; 0x3404 <ProcessInput+0x6d0>
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
    33ce:	80 91 3e 38 	lds	r24, 0x383E	; 0x80383e <inventory>
    33d2:	90 91 3f 38 	lds	r25, 0x383F	; 0x80383f <inventory+0x1>
    33d6:	00 97       	sbiw	r24, 0x00	; 0
    33d8:	09 f0       	breq	.+2      	; 0x33dc <ProcessInput+0x6a8>
    33da:	3c c4       	rjmp	.+2168   	; 0x3c54 <ProcessInput+0xf20>
    33dc:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <inventory+0x2>
    33e0:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <inventory+0x3>
    33e4:	89 2b       	or	r24, r25
    33e6:	49 f4       	brne	.+18     	; 0x33fa <ProcessInput+0x6c6>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    33e8:	86 ea       	ldi	r24, 0xA6	; 166
    33ea:	97 e7       	ldi	r25, 0x77	; 119
    33ec:	80 93 1d 39 	sts	0x391D, r24	; 0x80391d <reactStr+0x2>
    33f0:	90 93 1e 39 	sts	0x391E, r25	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    33f4:	86 e2       	ldi	r24, 0x26	; 38
    33f6:	90 e0       	ldi	r25, 0x00	; 0
    33f8:	72 cd       	rjmp	.-1308   	; 0x2ede <ProcessInput+0x1aa>

        //Drop item if in inventory
        if (data[0] == 'd') {
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
    33fa:	b2 e0       	ldi	r27, 0x02	; 2
    33fc:	fb 16       	cp	r15, r27
    33fe:	09 f4       	brne	.+2      	; 0x3402 <ProcessInput+0x6ce>
    3400:	8b c4       	rjmp	.+2326   	; 0x3d18 <ProcessInput+0xfe4>
    3402:	d8 cc       	rjmp	.-1616   	; 0x2db4 <ProcessInput+0x80>
                }
            }
        } 

        //Inventory list
        else if (data[0] == 'i') {
    3404:	89 36       	cpi	r24, 0x69	; 105
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
    3406:	81 f4       	brne	.+32     	; 0x3428 <ProcessInput+0x6f4>
    3408:	80 91 3e 38 	lds	r24, 0x383E	; 0x80383e <inventory>
    340c:	90 91 3f 38 	lds	r25, 0x383F	; 0x80383f <inventory+0x1>
    3410:	89 2b       	or	r24, r25
    3412:	31 f4       	brne	.+12     	; 0x3420 <ProcessInput+0x6ec>
    3414:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <inventory+0x2>
    3418:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <inventory+0x3>
    341c:	89 2b       	or	r24, r25
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
                } else {
                    elements = ShowInventory(elements);
    341e:	21 f3       	breq	.-56     	; 0x33e8 <ProcessInput+0x6b4>
    3420:	81 e0       	ldi	r24, 0x01	; 1
    3422:	f8 db       	rcall	.-2064   	; 0x2c14 <ShowInventory>
    3424:	18 2f       	mov	r17, r24
    3426:	fe c3       	rjmp	.+2044   	; 0x3c24 <ProcessInput+0xef0>
                }        
        
        //Talk, use, give, read
        } else if ((data[0] == 't')||(data[0] == 'u')||(data[0] == 'g')||(data[0] == 'r')) {
    3428:	9c e8       	ldi	r25, 0x8C	; 140
    342a:	98 0f       	add	r25, r24
    342c:	92 30       	cpi	r25, 0x02	; 2
    342e:	28 f0       	brcs	.+10     	; 0x343a <ProcessInput+0x706>
    3430:	87 36       	cpi	r24, 0x67	; 103
    3432:	19 f0       	breq	.+6      	; 0x343a <ProcessInput+0x706>
    3434:	82 37       	cpi	r24, 0x72	; 114
    3436:	09 f0       	breq	.+2      	; 0x343a <ProcessInput+0x706>
    3438:	b5 c2       	rjmp	.+1386   	; 0x39a4 <ProcessInput+0xc70>
            if ((inputLen<2)||(inputLen>3)) {
    343a:	8e ef       	ldi	r24, 0xFE	; 254
    343c:	8f 0d       	add	r24, r15
    343e:	82 30       	cpi	r24, 0x02	; 2
    3440:	08 f0       	brcs	.+2      	; 0x3444 <ProcessInput+0x710>
    3442:	b8 cc       	rjmp	.-1680   	; 0x2db4 <ProcessInput+0x80>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);                
            
            //Check for visible person or object first
            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[inputLen-1], 0);
    3444:	e0 91 2e 38 	lds	r30, 0x382E	; 0x80382e <currDepth>
    3448:	0e 2f       	mov	r16, r30
    344a:	10 e0       	ldi	r17, 0x00	; 0
    344c:	d3 01       	movw	r26, r6
    344e:	af 0d       	add	r26, r15
    3450:	b1 1d       	adc	r27, r1
    3452:	11 97       	sbiw	r26, 0x01	; 1
    3454:	f8 01       	movw	r30, r16
    3456:	ee 0f       	add	r30, r30
    3458:	ff 1f       	adc	r31, r31
    345a:	e5 52       	subi	r30, 0x25	; 37
    345c:	f6 4c       	sbci	r31, 0xC6	; 198
    345e:	40 e0       	ldi	r20, 0x00	; 0
    3460:	50 e0       	ldi	r21, 0x00	; 0
    3462:	6c 91       	ld	r22, X
    3464:	80 81       	ld	r24, Z
    3466:	91 81       	ldd	r25, Z+1	; 0x01
    3468:	92 d8       	rcall	.-3804   	; 0x258e <FindChild>
    346a:	f8 01       	movw	r30, r16
    346c:	ee 0f       	add	r30, r30
    346e:	ff 1f       	adc	r31, r31
    3470:	e3 52       	subi	r30, 0x23	; 35
    3472:	f6 4c       	sbci	r31, 0xC6	; 198
    3474:	80 83       	st	Z, r24
    3476:	91 83       	std	Z+1, r25	; 0x01
                if (route[currDepth+1]) {
    3478:	e0 91 2e 38 	lds	r30, 0x382E	; 0x80382e <currDepth>
    347c:	f0 e0       	ldi	r31, 0x00	; 0
    347e:	ee 0f       	add	r30, r30
    3480:	ff 1f       	adc	r31, r31
    3482:	e3 52       	subi	r30, 0x23	; 35
    3484:	f6 4c       	sbci	r31, 0xC6	; 198
    3486:	80 81       	ld	r24, Z
    3488:	91 81       	ldd	r25, Z+1	; 0x01
    348a:	00 97       	sbiw	r24, 0x00	; 0
    348c:	09 f4       	brne	.+2      	; 0x3490 <ProcessInput+0x75c>
    348e:	78 c2       	rjmp	.+1264   	; 0x3980 <ProcessInput+0xc4c>
                    
                    //Give item to person / use item on object 
                    if ((inputLen == 3)&&((data[0] == 'u')||(data[0] == 'g'))) {
    3490:	f3 e0       	ldi	r31, 0x03	; 3
    3492:	ff 12       	cpse	r15, r31
    3494:	60 c1       	rjmp	.+704    	; 0x3756 <ProcessInput+0xa22>
    3496:	d3 01       	movw	r26, r6
    3498:	2c 91       	ld	r18, X
    349a:	25 37       	cpi	r18, 0x75	; 117
    349c:	19 f0       	breq	.+6      	; 0x34a4 <ProcessInput+0x770>
    349e:	27 36       	cpi	r18, 0x67	; 103
    34a0:	09 f0       	breq	.+2      	; 0x34a4 <ProcessInput+0x770>
    34a2:	59 c1       	rjmp	.+690    	; 0x3756 <ProcessInput+0xa22>
    34a4:	00 e0       	ldi	r16, 0x00	; 0
    34a6:	11 e0       	ldi	r17, 0x01	; 1
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    34a8:	41 e6       	ldi	r20, 0x61	; 97
    34aa:	c4 2e       	mov	r12, r20
    34ac:	49 e7       	ldi	r20, 0x79	; 121
    34ae:	d4 2e       	mov	r13, r20
    reactStr[1][number]=length;
    34b0:	51 e2       	ldi	r21, 0x21	; 33
    34b2:	a5 2e       	mov	r10, r21
    34b4:	b1 2c       	mov	r11, r1
    reactStr[2][number]=type;
    34b6:	88 24       	eor	r8, r8
    34b8:	83 94       	inc	r8
                if (route[currDepth+1]) {
                    
                    //Give item to person / use item on object 
                    if ((inputLen == 3)&&((data[0] == 'u')||(data[0] == 'g'))) {
                        for (uint8_t x=0; x<2; x++) {
                            if (inventory[x]) { 
    34ba:	91 2c       	mov	r9, r1
    34bc:	e0 2e       	mov	r14, r16
    34be:	f1 2c       	mov	r15, r1
    34c0:	c7 01       	movw	r24, r14
    34c2:	88 0f       	add	r24, r24
    34c4:	99 1f       	adc	r25, r25
    34c6:	fc 01       	movw	r30, r24
    34c8:	e2 5c       	subi	r30, 0xC2	; 194
    34ca:	f7 4c       	sbci	r31, 0xC7	; 199
    34cc:	7f 01       	movw	r14, r30
    34ce:	80 81       	ld	r24, Z
    34d0:	91 81       	ldd	r25, Z+1	; 0x01
    34d2:	00 97       	sbiw	r24, 0x00	; 0
                                if (CheckLetter(inventory[x], data[1])) {
    34d4:	79 f0       	breq	.+30     	; 0x34f4 <ProcessInput+0x7c0>
    34d6:	d3 01       	movw	r26, r6
    34d8:	11 96       	adiw	r26, 0x01	; 1
    34da:	6c 91       	ld	r22, X
    34dc:	02 d8       	rcall	.-4092   	; 0x24e2 <CheckLetter>
    34de:	88 23       	and	r24, r24
    34e0:	49 f0       	breq	.+18     	; 0x34f4 <ProcessInput+0x7c0>
                                    PopulateObject(inventory[x], &actObj2);
    34e2:	6f ea       	ldi	r22, 0xAF	; 175
    34e4:	78 e3       	ldi	r23, 0x38	; 56
    34e6:	f7 01       	movw	r30, r14
    34e8:	80 81       	ld	r24, Z
    34ea:	91 81       	ldd	r25, Z+1	; 0x01
    34ec:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <PopulateObject>
                                    x = 2;
    34f0:	02 e0       	ldi	r16, 0x02	; 2
    34f2:	1d c0       	rjmp	.+58     	; 0x352e <ProcessInput+0x7fa>
                                }
                            }
                            if (x == 1) { 
    34f4:	01 30       	cpi	r16, 0x01	; 1
    34f6:	d1 f4       	brne	.+52     	; 0x352c <ProcessInput+0x7f8>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    34f8:	e1 2f       	mov	r30, r17
    34fa:	f0 e0       	ldi	r31, 0x00	; 0
    34fc:	df 01       	movw	r26, r30
    34fe:	aa 0f       	add	r26, r26
    3500:	bb 1f       	adc	r27, r27
    3502:	a5 5e       	subi	r26, 0xE5	; 229
    3504:	b6 4c       	sbci	r27, 0xC6	; 198
    3506:	cd 92       	st	X+, r12
    3508:	dc 92       	st	X, r13
    reactStr[1][number]=length;
    350a:	df 01       	movw	r26, r30
    350c:	aa 0f       	add	r26, r26
    350e:	bb 1f       	adc	r27, r27
    3510:	a5 5a       	subi	r26, 0xA5	; 165
    3512:	b6 4c       	sbci	r27, 0xC6	; 198
    3514:	ad 92       	st	X+, r10
    3516:	bc 92       	st	X, r11
    reactStr[2][number]=type;
    3518:	ee 0f       	add	r30, r30
    351a:	ff 1f       	adc	r31, r31
    351c:	e5 56       	subi	r30, 0x65	; 101
    351e:	f6 4c       	sbci	r31, 0xC6	; 198
    3520:	80 82       	st	Z, r8
    3522:	91 82       	std	Z+1, r9	; 0x01
                                    x = 2;
                                }
                            }
                            if (x == 1) { 
                                SetResponse(elements++, A_NOTCARRYING, L_NOTCARRYING, TEASER);
                                data[0] = 0;
    3524:	d3 01       	movw	r26, r6
    3526:	1c 92       	st	X, r1
                                    PopulateObject(inventory[x], &actObj2);
                                    x = 2;
                                }
                            }
                            if (x == 1) { 
                                SetResponse(elements++, A_NOTCARRYING, L_NOTCARRYING, TEASER);
    3528:	1f 5f       	subi	r17, 0xFF	; 255
    352a:	01 c0       	rjmp	.+2      	; 0x352e <ProcessInput+0x7fa>
    352c:	00 e0       	ldi	r16, 0x00	; 0
                route[currDepth+1] = FindChild(route[currDepth], data[inputLen-1], 0);
                if (route[currDepth+1]) {
                    
                    //Give item to person / use item on object 
                    if ((inputLen == 3)&&((data[0] == 'u')||(data[0] == 'g'))) {
                        for (uint8_t x=0; x<2; x++) {
    352e:	0f 5f       	subi	r16, 0xFF	; 255
    3530:	01 30       	cpi	r16, 0x01	; 1
    3532:	21 f2       	breq	.-120    	; 0x34bc <ProcessInput+0x788>
                                data[0] = 0;
                            }
                        }

                        //Both the item and person/object are found, check if action is legit
                        if (data[0]){
    3534:	f3 01       	movw	r30, r6
    3536:	80 81       	ld	r24, Z
    3538:	88 23       	and	r24, r24
    353a:	09 f4       	brne	.+2      	; 0x353e <ProcessInput+0x80a>
    353c:	73 c3       	rjmp	.+1766   	; 0x3c24 <ProcessInput+0xef0>
                            PopulateObject(route[currDepth+1], &actObj1);
    353e:	e0 91 2e 38 	lds	r30, 0x382E	; 0x80382e <currDepth>
    3542:	f0 e0       	ldi	r31, 0x00	; 0
    3544:	ee 0f       	add	r30, r30
    3546:	ff 1f       	adc	r31, r31
    3548:	e3 52       	subi	r30, 0x23	; 35
    354a:	f6 4c       	sbci	r31, 0xC6	; 198
    354c:	6a ed       	ldi	r22, 0xDA	; 218
    354e:	78 e3       	ldi	r23, 0x38	; 56
    3550:	80 81       	ld	r24, Z
    3552:	91 81       	ldd	r25, Z+1	; 0x01
    3554:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <PopulateObject>

                            //Special game
                            if (actObj1.lenStr[ACTION_STR1] == 1) {
    3558:	e0 90 f8 38 	lds	r14, 0x38F8	; 0x8038f8 <actObj1.3989+0x1e>
    355c:	f0 90 f9 38 	lds	r15, 0x38F9	; 0x8038f9 <actObj1.3989+0x1f>
    3560:	f1 e0       	ldi	r31, 0x01	; 1
    3562:	ef 16       	cp	r14, r31
    3564:	f1 04       	cpc	r15, r1
    3566:	09 f0       	breq	.+2      	; 0x356a <ProcessInput+0x836>
    3568:	89 c0       	rjmp	.+274    	; 0x367c <ProcessInput+0x948>
                                ExtEERead(actObj1.addrStr[ACTION_STR1], 1, GAME, &data[2]);
    356a:	93 01       	movw	r18, r6
    356c:	2e 5f       	subi	r18, 0xFE	; 254
    356e:	3f 4f       	sbci	r19, 0xFF	; 255
    3570:	40 e0       	ldi	r20, 0x00	; 0
    3572:	61 e0       	ldi	r22, 0x01	; 1
    3574:	80 91 ea 38 	lds	r24, 0x38EA	; 0x8038ea <actObj1.3989+0x10>
    3578:	90 91 eb 38 	lds	r25, 0x38EB	; 0x8038eb <actObj1.3989+0x11>
    357c:	0e 94 41 08 	call	0x1082	; 0x1082 <ExtEERead>
                                if (data[2] == '1') {
    3580:	d3 01       	movw	r26, r6
    3582:	12 96       	adiw	r26, 0x02	; 2
    3584:	3c 91       	ld	r19, X
    3586:	31 33       	cpi	r19, 0x31	; 49
    3588:	09 f0       	breq	.+2      	; 0x358c <ProcessInput+0x858>
    358a:	4c c3       	rjmp	.+1688   	; 0x3c24 <ProcessInput+0xef0>
                                    uint8_t item = actObj2.byteField[ITEM_NR];
    358c:	20 91 ba 38 	lds	r18, 0x38BA	; 0x8038ba <actObj2.3990+0xb>
                                    if ((item < 31)||(item > 34)) {
    3590:	51 ee       	ldi	r21, 0xE1	; 225
    3592:	52 0f       	add	r21, r18
    3594:	41 e0       	ldi	r20, 0x01	; 1
    3596:	41 0f       	add	r20, r17
    3598:	81 2f       	mov	r24, r17
    359a:	90 e0       	ldi	r25, 0x00	; 0
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    359c:	fc 01       	movw	r30, r24
    359e:	ee 0f       	add	r30, r30
    35a0:	ff 1f       	adc	r31, r31
    35a2:	e5 5e       	subi	r30, 0xE5	; 229
    35a4:	f6 4c       	sbci	r31, 0xC6	; 198
                            //Special game
                            if (actObj1.lenStr[ACTION_STR1] == 1) {
                                ExtEERead(actObj1.addrStr[ACTION_STR1], 1, GAME, &data[2]);
                                if (data[2] == '1') {
                                    uint8_t item = actObj2.byteField[ITEM_NR];
                                    if ((item < 31)||(item > 34)) {
    35a6:	54 30       	cpi	r21, 0x04	; 4
    35a8:	b0 f0       	brcs	.+44     	; 0x35d6 <ProcessInput+0x8a2>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    35aa:	21 e0       	ldi	r18, 0x01	; 1
    35ac:	39 e7       	ldi	r19, 0x79	; 121
    35ae:	20 83       	st	Z, r18
    35b0:	31 83       	std	Z+1, r19	; 0x01
    reactStr[1][number]=length;
    35b2:	fc 01       	movw	r30, r24
    35b4:	ee 0f       	add	r30, r30
    35b6:	ff 1f       	adc	r31, r31
    35b8:	e5 5a       	subi	r30, 0xA5	; 165
    35ba:	f6 4c       	sbci	r31, 0xC6	; 198
    35bc:	2a e1       	ldi	r18, 0x1A	; 26
    35be:	30 e0       	ldi	r19, 0x00	; 0
    35c0:	20 83       	st	Z, r18
    35c2:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    35c4:	88 0f       	add	r24, r24
    35c6:	99 1f       	adc	r25, r25
    35c8:	fc 01       	movw	r30, r24
    35ca:	e5 56       	subi	r30, 0x65	; 101
    35cc:	f6 4c       	sbci	r31, 0xC6	; 198
    35ce:	e0 82       	st	Z, r14
    35d0:	f1 82       	std	Z+1, r15	; 0x01
                            if (actObj1.lenStr[ACTION_STR1] == 1) {
                                ExtEERead(actObj1.addrStr[ACTION_STR1], 1, GAME, &data[2]);
                                if (data[2] == '1') {
                                    uint8_t item = actObj2.byteField[ITEM_NR];
                                    if ((item < 31)||(item > 34)) {
                                        SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
    35d2:	14 2f       	mov	r17, r20
    35d4:	27 c3       	rjmp	.+1614   	; 0x3c24 <ProcessInput+0xef0>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    35d6:	60 e5       	ldi	r22, 0x50	; 80
    35d8:	75 e7       	ldi	r23, 0x75	; 117
    35da:	60 83       	st	Z, r22
    35dc:	71 83       	std	Z+1, r23	; 0x01
    reactStr[1][number]=length;
    35de:	fc 01       	movw	r30, r24
    35e0:	ee 0f       	add	r30, r30
    35e2:	ff 1f       	adc	r31, r31
    35e4:	e5 5a       	subi	r30, 0xA5	; 165
    35e6:	f6 4c       	sbci	r31, 0xC6	; 198
    35e8:	62 eb       	ldi	r22, 0xB2	; 178
    35ea:	70 e0       	ldi	r23, 0x00	; 0
    35ec:	60 83       	st	Z, r22
    35ee:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    35f0:	88 0f       	add	r24, r24
    35f2:	99 1f       	adc	r25, r25
    35f4:	fc 01       	movw	r30, r24
    35f6:	e5 56       	subi	r30, 0x65	; 101
    35f8:	f6 4c       	sbci	r31, 0xC6	; 198
    35fa:	e0 82       	st	Z, r14
    35fc:	f1 82       	std	Z+1, r15	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    35fe:	84 2f       	mov	r24, r20
    3600:	90 e0       	ldi	r25, 0x00	; 0
    3602:	fc 01       	movw	r30, r24
    3604:	ee 0f       	add	r30, r30
    3606:	ff 1f       	adc	r31, r31
    3608:	e5 5e       	subi	r30, 0xE5	; 229
    360a:	f6 4c       	sbci	r31, 0xC6	; 198
    360c:	49 e5       	ldi	r20, 0x59	; 89
    360e:	5a e7       	ldi	r21, 0x7A	; 122
    3610:	40 83       	st	Z, r20
    3612:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    3614:	fc 01       	movw	r30, r24
    3616:	ee 0f       	add	r30, r30
    3618:	ff 1f       	adc	r31, r31
    361a:	e5 5a       	subi	r30, 0xA5	; 165
    361c:	f6 4c       	sbci	r31, 0xC6	; 198
    361e:	42 e0       	ldi	r20, 0x02	; 2
    3620:	50 e0       	ldi	r21, 0x00	; 0
    3622:	40 83       	st	Z, r20
    3624:	51 83       	std	Z+1, r21	; 0x01
    reactStr[2][number]=type;
    3626:	88 0f       	add	r24, r24
    3628:	99 1f       	adc	r25, r25
    362a:	fc 01       	movw	r30, r24
    362c:	e5 56       	subi	r30, 0x65	; 101
    362e:	f6 4c       	sbci	r31, 0xC6	; 198
    3630:	e0 82       	st	Z, r14
    3632:	f1 82       	std	Z+1, r15	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3634:	82 e0       	ldi	r24, 0x02	; 2
    3636:	81 0f       	add	r24, r17
    3638:	90 e0       	ldi	r25, 0x00	; 0
    363a:	1d 5f       	subi	r17, 0xFD	; 253
    363c:	fc 01       	movw	r30, r24
    363e:	ee 0f       	add	r30, r30
    3640:	ff 1f       	adc	r31, r31
    3642:	e5 5e       	subi	r30, 0xE5	; 229
    3644:	f6 4c       	sbci	r31, 0xC6	; 198
    3646:	4d ea       	ldi	r20, 0xAD	; 173
    3648:	58 e7       	ldi	r21, 0x78	; 120
    364a:	40 83       	st	Z, r20
    364c:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    364e:	fc 01       	movw	r30, r24
    3650:	ee 0f       	add	r30, r30
    3652:	ff 1f       	adc	r31, r31
    3654:	e5 5a       	subi	r30, 0xA5	; 165
    3656:	f6 4c       	sbci	r31, 0xC6	; 198
    3658:	42 e1       	ldi	r20, 0x12	; 18
    365a:	50 e0       	ldi	r21, 0x00	; 0
    365c:	40 83       	st	Z, r20
    365e:	51 83       	std	Z+1, r21	; 0x01
    reactStr[2][number]=type;
    3660:	88 0f       	add	r24, r24
    3662:	99 1f       	adc	r25, r25
    3664:	fc 01       	movw	r30, r24
    3666:	e5 56       	subi	r30, 0x65	; 101
    3668:	f6 4c       	sbci	r31, 0xC6	; 198
    366a:	e0 82       	st	Z, r14
    366c:	f1 82       	std	Z+1, r15	; 0x01
                                        SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                                    } else {
                                        SetResponse(elements++, A_PRIEST, L_PRIEST, TEASER);
                                        SetResponse(elements++, A_LF, 2, TEASER);
                                        SetResponse(elements++, A_RESPONSE, L_RESPONSE, TEASER);
                                        specialInput[0] = '1';
    366e:	30 93 0a 39 	sts	0x390A, r19	; 0x80390a <specialInput>
                                        specialInput[1] = item;
    3672:	20 93 0b 39 	sts	0x390B, r18	; 0x80390b <specialInput+0x1>
                                        specialInput[2] = 0;
    3676:	10 92 0c 39 	sts	0x390C, r1	; 0x80390c <specialInput+0x2>
    367a:	d4 c2       	rjmp	.+1448   	; 0x3c24 <ProcessInput+0xef0>
                                    }
                                }

                            //Normal "use ... on ..." or "give ... to ..." action
                            } else if (actObj1.byteField[ACTION_ITEM] == actObj2.byteField[ITEM_NR]) {
    367c:	90 91 e3 38 	lds	r25, 0x38E3	; 0x8038e3 <actObj1.3989+0x9>
    3680:	80 91 ba 38 	lds	r24, 0x38BA	; 0x8038ba <actObj2.3990+0xb>
    3684:	98 13       	cpse	r25, r24
    3686:	2e c0       	rjmp	.+92     	; 0x36e4 <ProcessInput+0x9b0>
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    3688:	20 91 00 39 	lds	r18, 0x3900	; 0x803900 <actObj1.3989+0x26>
    368c:	30 91 01 39 	lds	r19, 0x3901	; 0x803901 <actObj1.3989+0x27>
    3690:	01 e0       	ldi	r16, 0x01	; 1
    3692:	01 0f       	add	r16, r17
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3694:	81 2f       	mov	r24, r17
    3696:	90 e0       	ldi	r25, 0x00	; 0
    3698:	fc 01       	movw	r30, r24
    369a:	ee 0f       	add	r30, r30
    369c:	ff 1f       	adc	r31, r31
    369e:	e5 5e       	subi	r30, 0xE5	; 229
    36a0:	f6 4c       	sbci	r31, 0xC6	; 198
    36a2:	40 91 f2 38 	lds	r20, 0x38F2	; 0x8038f2 <actObj1.3989+0x18>
    36a6:	50 91 f3 38 	lds	r21, 0x38F3	; 0x8038f3 <actObj1.3989+0x19>
    36aa:	40 83       	st	Z, r20
    36ac:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    36ae:	fc 01       	movw	r30, r24
    36b0:	ee 0f       	add	r30, r30
    36b2:	ff 1f       	adc	r31, r31
    36b4:	e5 5a       	subi	r30, 0xA5	; 165
    36b6:	f6 4c       	sbci	r31, 0xC6	; 198
    36b8:	20 83       	st	Z, r18
    36ba:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    36bc:	88 0f       	add	r24, r24
    36be:	99 1f       	adc	r25, r25
    36c0:	fc 01       	movw	r30, r24
    36c2:	e5 56       	subi	r30, 0x65	; 101
    36c4:	f6 4c       	sbci	r31, 0xC6	; 198
    36c6:	10 82       	st	Z, r1
    36c8:	11 82       	std	Z+1, r1	; 0x01
                                }

                            //Normal "use ... on ..." or "give ... to ..." action
                            } else if (actObj1.byteField[ACTION_ITEM] == actObj2.byteField[ITEM_NR]) {
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                                effect = actObj1.effect[2];
    36ca:	80 91 04 39 	lds	r24, 0x3904	; 0x803904 <actObj1.3989+0x2a>
    36ce:	90 e0       	ldi	r25, 0x00	; 0
    36d0:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <effect>
    36d4:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <effect+0x1>
                                UpdateState(actObj1.byteField[ACTION_STATE]);
    36d8:	80 91 e4 38 	lds	r24, 0x38E4	; 0x8038e4 <actObj1.3989+0xa>
    36dc:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <UpdateState>
                                    }
                                }

                            //Normal "use ... on ..." or "give ... to ..." action
                            } else if (actObj1.byteField[ACTION_ITEM] == actObj2.byteField[ITEM_NR]) {
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    36e0:	10 2f       	mov	r17, r16
    36e2:	a0 c2       	rjmp	.+1344   	; 0x3c24 <ProcessInput+0xef0>
                                effect = actObj1.effect[2];
                                UpdateState(actObj1.byteField[ACTION_STATE]);
                                
                            } else {
                                if (data[0] == 'u') {
    36e4:	f3 01       	movw	r30, r6
    36e6:	80 81       	ld	r24, Z
    36e8:	85 37       	cpi	r24, 0x75	; 117
    36ea:	99 f4       	brne	.+38     	; 0x3712 <ProcessInput+0x9de>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    36ec:	81 2f       	mov	r24, r17
    36ee:	90 e0       	ldi	r25, 0x00	; 0
    36f0:	fc 01       	movw	r30, r24
    36f2:	ee 0f       	add	r30, r30
    36f4:	ff 1f       	adc	r31, r31
    36f6:	e5 5e       	subi	r30, 0xE5	; 229
    36f8:	f6 4c       	sbci	r31, 0xC6	; 198
    36fa:	21 e0       	ldi	r18, 0x01	; 1
    36fc:	39 e7       	ldi	r19, 0x79	; 121
    36fe:	20 83       	st	Z, r18
    3700:	31 83       	std	Z+1, r19	; 0x01
    reactStr[1][number]=length;
    3702:	fc 01       	movw	r30, r24
    3704:	ee 0f       	add	r30, r30
    3706:	ff 1f       	adc	r31, r31
    3708:	e5 5a       	subi	r30, 0xA5	; 165
    370a:	f6 4c       	sbci	r31, 0xC6	; 198
    370c:	2a e1       	ldi	r18, 0x1A	; 26
    370e:	30 e0       	ldi	r19, 0x00	; 0
    3710:	15 c0       	rjmp	.+42     	; 0x373c <ProcessInput+0xa08>
                                UpdateState(actObj1.byteField[ACTION_STATE]);
                                
                            } else {
                                if (data[0] == 'u') {
                                    SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                                } else if (data[0] == 'g') {
    3712:	87 36       	cpi	r24, 0x67	; 103
    3714:	09 f0       	breq	.+2      	; 0x3718 <ProcessInput+0x9e4>
    3716:	86 c2       	rjmp	.+1292   	; 0x3c24 <ProcessInput+0xef0>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3718:	81 2f       	mov	r24, r17
    371a:	90 e0       	ldi	r25, 0x00	; 0
    371c:	fc 01       	movw	r30, r24
    371e:	ee 0f       	add	r30, r30
    3720:	ff 1f       	adc	r31, r31
    3722:	e5 5e       	subi	r30, 0xE5	; 229
    3724:	f6 4c       	sbci	r31, 0xC6	; 198
    3726:	2f e9       	ldi	r18, 0x9F	; 159
    3728:	36 e7       	ldi	r19, 0x76	; 118
    372a:	20 83       	st	Z, r18
    372c:	31 83       	std	Z+1, r19	; 0x01
    reactStr[1][number]=length;
    372e:	fc 01       	movw	r30, r24
    3730:	ee 0f       	add	r30, r30
    3732:	ff 1f       	adc	r31, r31
    3734:	e5 5a       	subi	r30, 0xA5	; 165
    3736:	f6 4c       	sbci	r31, 0xC6	; 198
    3738:	28 e2       	ldi	r18, 0x28	; 40
    373a:	30 e0       	ldi	r19, 0x00	; 0
    373c:	20 83       	st	Z, r18
    373e:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    3740:	88 0f       	add	r24, r24
    3742:	99 1f       	adc	r25, r25
    3744:	fc 01       	movw	r30, r24
    3746:	e5 56       	subi	r30, 0x65	; 101
    3748:	f6 4c       	sbci	r31, 0xC6	; 198
    374a:	81 e0       	ldi	r24, 0x01	; 1
    374c:	90 e0       	ldi	r25, 0x00	; 0
    374e:	80 83       	st	Z, r24
    3750:	91 83       	std	Z+1, r25	; 0x01
                                
                            } else {
                                if (data[0] == 'u') {
                                    SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                                } else if (data[0] == 'g') {
                                    SetResponse(elements++, A_CANTGIVE, L_CANTGIVE, TEASER);                                    
    3752:	1f 5f       	subi	r17, 0xFF	; 255
    3754:	67 c2       	rjmp	.+1230   	; 0x3c24 <ProcessInput+0xef0>
                            }
                        }
                    
                    //Talk to person, read or use object (without item)                          
                    } else {
                        PopulateObject(route[currDepth+1], &actObj1);
    3756:	6a ed       	ldi	r22, 0xDA	; 218
    3758:	78 e3       	ldi	r23, 0x38	; 56
    375a:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <PopulateObject>
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
    375e:	d3 01       	movw	r26, r6
    3760:	8c 91       	ld	r24, X
    3762:	84 37       	cpi	r24, 0x74	; 116
    3764:	61 f5       	brne	.+88     	; 0x37be <ProcessInput+0xa8a>
    3766:	80 91 e2 38 	lds	r24, 0x38E2	; 0x8038e2 <actObj1.3989+0x8>
    376a:	83 fd       	sbrc	r24, 3
    376c:	43 c0       	rjmp	.+134    	; 0x37f4 <ProcessInput+0xac0>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    376e:	8b e1       	ldi	r24, 0x1B	; 27
    3770:	99 e7       	ldi	r25, 0x79	; 121
    3772:	80 93 1d 39 	sts	0x391D, r24	; 0x80391d <reactStr+0x2>
    3776:	90 93 1e 39 	sts	0x391E, r25	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    377a:	8e e1       	ldi	r24, 0x1E	; 30
    377c:	90 e0       	ldi	r25, 0x00	; 0
    377e:	80 93 5d 39 	sts	0x395D, r24	; 0x80395d <reactStr+0x42>
    3782:	90 93 5e 39 	sts	0x395E, r25	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    3786:	81 e0       	ldi	r24, 0x01	; 1
    3788:	90 e0       	ldi	r25, 0x00	; 0
    378a:	80 93 9d 39 	sts	0x399D, r24	; 0x80399d <reactStr+0x82>
    378e:	90 93 9e 39 	sts	0x399E, r25	; 0x80399e <reactStr+0x83>
                    //Talk to person, read or use object (without item)                          
                    } else {
                        PopulateObject(route[currDepth+1], &actObj1);
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
                            SetResponse(elements++, A_WHYTALK, L_WHYTALK, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    3792:	80 91 f4 38 	lds	r24, 0x38F4	; 0x8038f4 <actObj1.3989+0x1a>
    3796:	90 91 f5 38 	lds	r25, 0x38F5	; 0x8038f5 <actObj1.3989+0x1b>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    379a:	20 91 e6 38 	lds	r18, 0x38E6	; 0x8038e6 <actObj1.3989+0xc>
    379e:	30 91 e7 38 	lds	r19, 0x38E7	; 0x8038e7 <actObj1.3989+0xd>
    37a2:	20 93 1f 39 	sts	0x391F, r18	; 0x80391f <reactStr+0x4>
    37a6:	30 93 20 39 	sts	0x3920, r19	; 0x803920 <reactStr+0x5>
    reactStr[1][number]=length;
    37aa:	80 93 5f 39 	sts	0x395F, r24	; 0x80395f <reactStr+0x44>
    37ae:	90 93 60 39 	sts	0x3960, r25	; 0x803960 <reactStr+0x45>
    reactStr[2][number]=type;
    37b2:	10 92 9f 39 	sts	0x399F, r1	; 0x80399f <reactStr+0x84>
    37b6:	10 92 a0 39 	sts	0x39A0, r1	; 0x8039a0 <reactStr+0x85>
                    //Talk to person, read or use object (without item)                          
                    } else {
                        PopulateObject(route[currDepth+1], &actObj1);
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
                            SetResponse(elements++, A_WHYTALK, L_WHYTALK, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    37ba:	13 e0       	ldi	r17, 0x03	; 3
    37bc:	33 c2       	rjmp	.+1126   	; 0x3c24 <ProcessInput+0xef0>
                        } else if ((data[0] == 'u')&&((actObj1.byteField[ACTION_MASK]&USE) == 0)) {
    37be:	85 37       	cpi	r24, 0x75	; 117
    37c0:	39 f4       	brne	.+14     	; 0x37d0 <ProcessInput+0xa9c>
    37c2:	80 91 e2 38 	lds	r24, 0x38E2	; 0x8038e2 <actObj1.3989+0x8>
    37c6:	84 fd       	sbrc	r24, 4
    37c8:	15 c0       	rjmp	.+42     	; 0x37f4 <ProcessInput+0xac0>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    37ca:	81 e0       	ldi	r24, 0x01	; 1
    37cc:	99 e7       	ldi	r25, 0x79	; 121
    37ce:	3b c2       	rjmp	.+1142   	; 0x3c46 <ProcessInput+0xf12>
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
                            SetResponse(elements++, A_WHYTALK, L_WHYTALK, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                        } else if ((data[0] == 'u')&&((actObj1.byteField[ACTION_MASK]&USE) == 0)) {
                            SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                        } else if ((data[0] == 'r')&&((actObj1.byteField[ACTION_MASK]&READ) == 0)) {
    37d0:	82 37       	cpi	r24, 0x72	; 114
    37d2:	69 f4       	brne	.+26     	; 0x37ee <ProcessInput+0xaba>
    37d4:	80 91 e2 38 	lds	r24, 0x38E2	; 0x8038e2 <actObj1.3989+0x8>
    37d8:	85 fd       	sbrc	r24, 5
    37da:	0c c0       	rjmp	.+24     	; 0x37f4 <ProcessInput+0xac0>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    37dc:	86 ee       	ldi	r24, 0xE6	; 230
    37de:	98 e7       	ldi	r25, 0x78	; 120
    37e0:	80 93 1d 39 	sts	0x391D, r24	; 0x80391d <reactStr+0x2>
    37e4:	90 93 1e 39 	sts	0x391E, r25	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    37e8:	8b e1       	ldi	r24, 0x1B	; 27
    37ea:	90 e0       	ldi	r25, 0x00	; 0
    37ec:	78 cb       	rjmp	.-2320   	; 0x2ede <ProcessInput+0x1aa>
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                        } else if ((data[0] == 'u')&&((actObj1.byteField[ACTION_MASK]&USE) == 0)) {
                            SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                        } else if ((data[0] == 'r')&&((actObj1.byteField[ACTION_MASK]&READ) == 0)) {
                            SetResponse(elements++, A_CANTREAD, L_CANTREAD, TEASER);
                        } else if (data[0] == 'g'){ 
    37ee:	87 36       	cpi	r24, 0x67	; 103
    37f0:	09 f4       	brne	.+2      	; 0x37f4 <ProcessInput+0xac0>
    37f2:	e0 ca       	rjmp	.-2624   	; 0x2db4 <ProcessInput+0x80>
                            SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);  
                        } else {

                            //Special game, not enough characters
                            if (actObj1.lenStr[ACTION_STR1] == 1) {
    37f4:	00 91 f8 38 	lds	r16, 0x38F8	; 0x8038f8 <actObj1.3989+0x1e>
    37f8:	10 91 f9 38 	lds	r17, 0x38F9	; 0x8038f9 <actObj1.3989+0x1f>
    37fc:	01 30       	cpi	r16, 0x01	; 1
    37fe:	11 05       	cpc	r17, r1
    3800:	09 f5       	brne	.+66     	; 0x3844 <ProcessInput+0xb10>
                                ExtEERead(actObj1.addrStr[ACTION_STR1], 1, GAME, &data[2]);
    3802:	93 01       	movw	r18, r6
    3804:	2e 5f       	subi	r18, 0xFE	; 254
    3806:	3f 4f       	sbci	r19, 0xFF	; 255
    3808:	40 e0       	ldi	r20, 0x00	; 0
    380a:	61 e0       	ldi	r22, 0x01	; 1
    380c:	80 91 ea 38 	lds	r24, 0x38EA	; 0x8038ea <actObj1.3989+0x10>
    3810:	90 91 eb 38 	lds	r25, 0x38EB	; 0x8038eb <actObj1.3989+0x11>
    3814:	0e 94 41 08 	call	0x1082	; 0x1082 <ExtEERead>
                                if (data[2] == '1') {
    3818:	f3 01       	movw	r30, r6
    381a:	82 81       	ldd	r24, Z+2	; 0x02
    381c:	81 33       	cpi	r24, 0x31	; 49
    381e:	09 f0       	breq	.+2      	; 0x3822 <ProcessInput+0xaee>
    3820:	13 cd       	rjmp	.-1498   	; 0x3248 <ProcessInput+0x514>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3822:	85 e2       	ldi	r24, 0x25	; 37
    3824:	95 e7       	ldi	r25, 0x75	; 117
    3826:	80 93 1d 39 	sts	0x391D, r24	; 0x80391d <reactStr+0x2>
    382a:	90 93 1e 39 	sts	0x391E, r25	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    382e:	8b e2       	ldi	r24, 0x2B	; 43
    3830:	90 e0       	ldi	r25, 0x00	; 0
    3832:	80 93 5d 39 	sts	0x395D, r24	; 0x80395d <reactStr+0x42>
    3836:	90 93 5e 39 	sts	0x395E, r25	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    383a:	00 93 9d 39 	sts	0x399D, r16	; 0x80399d <reactStr+0x82>
    383e:	10 93 9e 39 	sts	0x399E, r17	; 0x80399e <reactStr+0x83>
    3842:	57 cb       	rjmp	.-2386   	; 0x2ef2 <ProcessInput+0x1be>
                                if (data[2] == '1') {
                                    SetResponse(elements++, A_PLEASEOFFER, L_PLEASEOFFER, TEASER);
                                }

                            //General request
                            } else if (actObj1.lenStr[ACTION_STR1]) {
    3844:	01 15       	cp	r16, r1
    3846:	11 05       	cpc	r17, r1
    3848:	09 f4       	brne	.+2      	; 0x384c <ProcessInput+0xb18>
    384a:	58 c0       	rjmp	.+176    	; 0x38fc <ProcessInput+0xbc8>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    384c:	80 91 ea 38 	lds	r24, 0x38EA	; 0x8038ea <actObj1.3989+0x10>
    3850:	90 91 eb 38 	lds	r25, 0x38EB	; 0x8038eb <actObj1.3989+0x11>
    3854:	80 93 1d 39 	sts	0x391D, r24	; 0x80391d <reactStr+0x2>
    3858:	90 93 1e 39 	sts	0x391E, r25	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    385c:	00 93 5d 39 	sts	0x395D, r16	; 0x80395d <reactStr+0x42>
    3860:	10 93 5e 39 	sts	0x395E, r17	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    3864:	10 92 9d 39 	sts	0x399D, r1	; 0x80399d <reactStr+0x82>
    3868:	10 92 9e 39 	sts	0x399E, r1	; 0x80399e <reactStr+0x83>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    386c:	89 e5       	ldi	r24, 0x59	; 89
    386e:	9a e7       	ldi	r25, 0x7A	; 122
    3870:	80 93 1f 39 	sts	0x391F, r24	; 0x80391f <reactStr+0x4>
    3874:	90 93 20 39 	sts	0x3920, r25	; 0x803920 <reactStr+0x5>
    reactStr[1][number]=length;
    3878:	82 e0       	ldi	r24, 0x02	; 2
    387a:	90 e0       	ldi	r25, 0x00	; 0
    387c:	80 93 5f 39 	sts	0x395F, r24	; 0x80395f <reactStr+0x44>
    3880:	90 93 60 39 	sts	0x3960, r25	; 0x803960 <reactStr+0x45>
    reactStr[2][number]=type;
    3884:	81 e0       	ldi	r24, 0x01	; 1
    3886:	90 e0       	ldi	r25, 0x00	; 0
    3888:	80 93 9f 39 	sts	0x399F, r24	; 0x80399f <reactStr+0x84>
    388c:	90 93 a0 39 	sts	0x39A0, r25	; 0x8039a0 <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3890:	2d ea       	ldi	r18, 0xAD	; 173
    3892:	38 e7       	ldi	r19, 0x78	; 120
    3894:	20 93 21 39 	sts	0x3921, r18	; 0x803921 <reactStr+0x6>
    3898:	30 93 22 39 	sts	0x3922, r19	; 0x803922 <reactStr+0x7>
    reactStr[1][number]=length;
    389c:	22 e1       	ldi	r18, 0x12	; 18
    389e:	30 e0       	ldi	r19, 0x00	; 0
    38a0:	20 93 61 39 	sts	0x3961, r18	; 0x803961 <reactStr+0x46>
    38a4:	30 93 62 39 	sts	0x3962, r19	; 0x803962 <reactStr+0x47>
    reactStr[2][number]=type;
    38a8:	80 93 a1 39 	sts	0x39A1, r24	; 0x8039a1 <reactStr+0x86>
    38ac:	90 93 a2 39 	sts	0x39A2, r25	; 0x8039a2 <reactStr+0x87>
                            //General request
                            } else if (actObj1.lenStr[ACTION_STR1]) {
                                SetResponse(elements++, actObj1.addrStr[ACTION_STR1], actObj1.lenStr[ACTION_STR1], GAME);
                                SetResponse(elements++, A_LF, 2, TEASER);
                                SetResponse(elements++, A_RESPONSE, L_RESPONSE, TEASER);
                                if (actObj1.lenStr[ACTION_STR2]>(INP_LENGTH-1)) actObj1.lenStr[ACTION_STR2] = (INP_LENGTH-1);
    38b0:	80 91 fa 38 	lds	r24, 0x38FA	; 0x8038fa <actObj1.3989+0x20>
    38b4:	90 91 fb 38 	lds	r25, 0x38FB	; 0x8038fb <actObj1.3989+0x21>
    38b8:	40 97       	sbiw	r24, 0x10	; 16
    38ba:	30 f0       	brcs	.+12     	; 0x38c8 <ProcessInput+0xb94>
    38bc:	8f e0       	ldi	r24, 0x0F	; 15
    38be:	90 e0       	ldi	r25, 0x00	; 0
    38c0:	80 93 fa 38 	sts	0x38FA, r24	; 0x8038fa <actObj1.3989+0x20>
    38c4:	90 93 fb 38 	sts	0x38FB, r25	; 0x8038fb <actObj1.3989+0x21>
                                ExtEERead(actObj1.addrStr[ACTION_STR2], actObj1.lenStr[ACTION_STR2], GAME, (uint8_t *)&specialInput[0]);
    38c8:	2a e0       	ldi	r18, 0x0A	; 10
    38ca:	39 e3       	ldi	r19, 0x39	; 57
    38cc:	40 e0       	ldi	r20, 0x00	; 0
    38ce:	60 91 fa 38 	lds	r22, 0x38FA	; 0x8038fa <actObj1.3989+0x20>
    38d2:	80 91 ec 38 	lds	r24, 0x38EC	; 0x8038ec <actObj1.3989+0x12>
    38d6:	90 91 ed 38 	lds	r25, 0x38ED	; 0x8038ed <actObj1.3989+0x13>
    38da:	0e 94 41 08 	call	0x1082	; 0x1082 <ExtEERead>
                                UnflipData(actObj1.lenStr[ACTION_STR2], (uint8_t *)&specialInput[0]);
    38de:	6a e0       	ldi	r22, 0x0A	; 10
    38e0:	79 e3       	ldi	r23, 0x39	; 57
    38e2:	80 91 fa 38 	lds	r24, 0x38FA	; 0x8038fa <actObj1.3989+0x20>
    38e6:	0e 94 0e 11 	call	0x221c	; 0x221c <UnflipData>
                                specialInput[actObj1.lenStr[ACTION_STR2]] = 0;
    38ea:	e0 91 fa 38 	lds	r30, 0x38FA	; 0x8038fa <actObj1.3989+0x20>
    38ee:	f0 91 fb 38 	lds	r31, 0x38FB	; 0x8038fb <actObj1.3989+0x21>
    38f2:	e6 5f       	subi	r30, 0xF6	; 246
    38f4:	f6 4c       	sbci	r31, 0xC6	; 198
    38f6:	10 82       	st	Z, r1

                            //General request
                            } else if (actObj1.lenStr[ACTION_STR1]) {
                                SetResponse(elements++, actObj1.addrStr[ACTION_STR1], actObj1.lenStr[ACTION_STR1], GAME);
                                SetResponse(elements++, A_LF, 2, TEASER);
                                SetResponse(elements++, A_RESPONSE, L_RESPONSE, TEASER);
    38f8:	14 e0       	ldi	r17, 0x04	; 4
    38fa:	94 c1       	rjmp	.+808    	; 0x3c24 <ProcessInput+0xef0>
                                ExtEERead(actObj1.addrStr[ACTION_STR2], actObj1.lenStr[ACTION_STR2], GAME, (uint8_t *)&specialInput[0]);
                                UnflipData(actObj1.lenStr[ACTION_STR2], (uint8_t *)&specialInput[0]);
                                specialInput[actObj1.lenStr[ACTION_STR2]] = 0;
                            
                            //Normal action    
                            } else if (CheckState(actObj1.byteField[ACTION_ACL])){
    38fc:	80 91 e1 38 	lds	r24, 0x38E1	; 0x8038e1 <actObj1.3989+0x7>
    3900:	0e 94 0c 0a 	call	0x1418	; 0x1418 <CheckState>
    3904:	88 23       	and	r24, r24
    3906:	01 f1       	breq	.+64     	; 0x3948 <ProcessInput+0xc14>
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    3908:	80 91 00 39 	lds	r24, 0x3900	; 0x803900 <actObj1.3989+0x26>
    390c:	90 91 01 39 	lds	r25, 0x3901	; 0x803901 <actObj1.3989+0x27>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3910:	20 91 f2 38 	lds	r18, 0x38F2	; 0x8038f2 <actObj1.3989+0x18>
    3914:	30 91 f3 38 	lds	r19, 0x38F3	; 0x8038f3 <actObj1.3989+0x19>
    3918:	20 93 1d 39 	sts	0x391D, r18	; 0x80391d <reactStr+0x2>
    391c:	30 93 1e 39 	sts	0x391E, r19	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    3920:	80 93 5d 39 	sts	0x395D, r24	; 0x80395d <reactStr+0x42>
    3924:	90 93 5e 39 	sts	0x395E, r25	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    3928:	10 92 9d 39 	sts	0x399D, r1	; 0x80399d <reactStr+0x82>
    392c:	10 92 9e 39 	sts	0x399E, r1	; 0x80399e <reactStr+0x83>
                                specialInput[actObj1.lenStr[ACTION_STR2]] = 0;
                            
                            //Normal action    
                            } else if (CheckState(actObj1.byteField[ACTION_ACL])){
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                                effect = actObj1.effect[2];
    3930:	80 91 04 39 	lds	r24, 0x3904	; 0x803904 <actObj1.3989+0x2a>
    3934:	90 e0       	ldi	r25, 0x00	; 0
    3936:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <effect>
    393a:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <effect+0x1>
                                UpdateState(actObj1.byteField[ACTION_STATE]);
    393e:	80 91 e4 38 	lds	r24, 0x38E4	; 0x8038e4 <actObj1.3989+0xa>
    3942:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <UpdateState>
    3946:	d5 ca       	rjmp	.-2646   	; 0x2ef2 <ProcessInput+0x1be>
                            } else {
                                SetResponse(elements++, actObj1.addrStr[ACTION_ACL_MSG], actObj1.lenStr[ACTION_ACL_MSG], GAME);
    3948:	80 91 fe 38 	lds	r24, 0x38FE	; 0x8038fe <actObj1.3989+0x24>
    394c:	90 91 ff 38 	lds	r25, 0x38FF	; 0x8038ff <actObj1.3989+0x25>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3950:	20 91 f0 38 	lds	r18, 0x38F0	; 0x8038f0 <actObj1.3989+0x16>
    3954:	30 91 f1 38 	lds	r19, 0x38F1	; 0x8038f1 <actObj1.3989+0x17>
    3958:	20 93 1d 39 	sts	0x391D, r18	; 0x80391d <reactStr+0x2>
    395c:	30 93 1e 39 	sts	0x391E, r19	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    3960:	80 93 5d 39 	sts	0x395D, r24	; 0x80395d <reactStr+0x42>
    3964:	90 93 5e 39 	sts	0x395E, r25	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    3968:	10 92 9d 39 	sts	0x399D, r1	; 0x80399d <reactStr+0x82>
    396c:	10 92 9e 39 	sts	0x399E, r1	; 0x80399e <reactStr+0x83>
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                                effect = actObj1.effect[2];
                                UpdateState(actObj1.byteField[ACTION_STATE]);
                            } else {
                                SetResponse(elements++, actObj1.addrStr[ACTION_ACL_MSG], actObj1.lenStr[ACTION_ACL_MSG], GAME);
                                effect = actObj1.effect[1];
    3970:	80 91 03 39 	lds	r24, 0x3903	; 0x803903 <actObj1.3989+0x29>
    3974:	90 e0       	ldi	r25, 0x00	; 0
    3976:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <effect>
    397a:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <effect+0x1>
    397e:	b9 ca       	rjmp	.-2702   	; 0x2ef2 <ProcessInput+0x1be>
                        }
                    }

                //Person or object not found
                } else {
                    if ((data[0] == 't')||(data[0] == 'g')){
    3980:	d3 01       	movw	r26, r6
    3982:	8c 91       	ld	r24, X
    3984:	84 37       	cpi	r24, 0x74	; 116
    3986:	11 f0       	breq	.+4      	; 0x398c <ProcessInput+0xc58>
    3988:	87 36       	cpi	r24, 0x67	; 103
    398a:	19 f4       	brne	.+6      	; 0x3992 <ProcessInput+0xc5e>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    398c:	89 e3       	ldi	r24, 0x39	; 57
    398e:	99 e7       	ldi	r25, 0x79	; 121
    3990:	02 c0       	rjmp	.+4      	; 0x3996 <ProcessInput+0xc62>
    3992:	8d e4       	ldi	r24, 0x4D	; 77
    3994:	99 e7       	ldi	r25, 0x79	; 121
    3996:	80 93 1d 39 	sts	0x391D, r24	; 0x80391d <reactStr+0x2>
    399a:	90 93 1e 39 	sts	0x391E, r25	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    399e:	84 e1       	ldi	r24, 0x14	; 20
    39a0:	90 e0       	ldi	r25, 0x00	; 0
    39a2:	9d ca       	rjmp	.-2758   	; 0x2ede <ProcessInput+0x1aa>
                    }
                }
            }
        
        //Special answer given
        } else if (data[0] == 'a'){
    39a4:	81 36       	cpi	r24, 0x61	; 97
    39a6:	09 f0       	breq	.+2      	; 0x39aa <ProcessInput+0xc76>
    39a8:	4f cc       	rjmp	.-1890   	; 0x3248 <ProcessInput+0x514>
            
            //Priest offerings
            if (specialPassed >= 2) {
    39aa:	80 91 09 39 	lds	r24, 0x3909	; 0x803909 <specialPassed>
    39ae:	82 30       	cpi	r24, 0x02	; 2
    39b0:	08 f4       	brcc	.+2      	; 0x39b4 <ProcessInput+0xc80>
    39b2:	c7 c0       	rjmp	.+398    	; 0x3b42 <ProcessInput+0xe0e>
                if (data[1] > 0) {
    39b4:	f3 01       	movw	r30, r6
    39b6:	21 81       	ldd	r18, Z+1	; 0x01
    39b8:	22 23       	and	r18, r18
    39ba:	09 f4       	brne	.+2      	; 0x39be <ProcessInput+0xc8a>
    39bc:	af c0       	rjmp	.+350    	; 0x3b1c <ProcessInput+0xde8>

                    //uint8_t  digit[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
                    uint8_t  digit[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    39be:	ce 01       	movw	r24, r28
    39c0:	01 96       	adiw	r24, 0x01	; 1
    39c2:	7c 01       	movw	r14, r24
    39c4:	88 e0       	ldi	r24, 0x08	; 8
    39c6:	d7 01       	movw	r26, r14
    39c8:	1d 92       	st	X+, r1
    39ca:	8a 95       	dec	r24
    39cc:	e9 f7       	brne	.-6      	; 0x39c8 <ProcessInput+0xc94>
                        answer = ((offering  & 2) << 19) + ((offering  & 1) << 8) + \
                        ((element   & 2) << 15) + ((element   & 1) << 4) + \
                        ((kneelings & 2) << 11) + ((kneelings & 1))
                        answer = answer << (3-person)
                    */
                    data[1]-='0'; // item 31 needs to become something that results in 0 when doing %4
    39ce:	20 53       	subi	r18, 0x30	; 48
    39d0:	21 83       	std	Z+1, r18	; 0x01
                    data[2]-='1';
    39d2:	32 81       	ldd	r19, Z+2	; 0x02
    39d4:	31 53       	subi	r19, 0x31	; 49
    39d6:	32 83       	std	Z+2, r19	; 0x02
                    if (data[3] == 'a') data[3] = 1;
    39d8:	83 81       	ldd	r24, Z+3	; 0x03
    39da:	81 36       	cpi	r24, 0x61	; 97
    39dc:	11 f4       	brne	.+4      	; 0x39e2 <ProcessInput+0xcae>
    39de:	81 e0       	ldi	r24, 0x01	; 1
    39e0:	0c c0       	rjmp	.+24     	; 0x39fa <ProcessInput+0xcc6>
                    else if (data[3] == 'e') data[3] = 0;
    39e2:	85 36       	cpi	r24, 0x65	; 101
    39e4:	19 f4       	brne	.+6      	; 0x39ec <ProcessInput+0xcb8>
    39e6:	f3 01       	movw	r30, r6
    39e8:	13 82       	std	Z+3, r1	; 0x03
    39ea:	08 c0       	rjmp	.+16     	; 0x39fc <ProcessInput+0xcc8>
                    else if (data[3] == 'f') data[3] = 3;
    39ec:	86 36       	cpi	r24, 0x66	; 102
    39ee:	19 f4       	brne	.+6      	; 0x39f6 <ProcessInput+0xcc2>
    39f0:	83 e0       	ldi	r24, 0x03	; 3
    39f2:	83 83       	std	Z+3, r24	; 0x03
    39f4:	03 c0       	rjmp	.+6      	; 0x39fc <ProcessInput+0xcc8>
                    else data[3] = 2;
    39f6:	82 e0       	ldi	r24, 0x02	; 2
    39f8:	f3 01       	movw	r30, r6
    39fa:	83 83       	std	Z+3, r24	; 0x03

                    if (data[1] & 2) answer += (1UL << 20);
    39fc:	21 fd       	sbrc	r18, 1
    39fe:	04 c0       	rjmp	.+8      	; 0x3a08 <ProcessInput+0xcd4>
            if (specialPassed >= 2) {
                if (data[1] > 0) {

                    //uint8_t  digit[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
                    uint8_t  digit[8] = {0, 0, 0, 0, 0, 0, 0, 0};
                    uint32_t answer = 0;
    3a00:	80 e0       	ldi	r24, 0x00	; 0
    3a02:	90 e0       	ldi	r25, 0x00	; 0
    3a04:	dc 01       	movw	r26, r24
    3a06:	04 c0       	rjmp	.+8      	; 0x3a10 <ProcessInput+0xcdc>
                    if (data[3] == 'a') data[3] = 1;
                    else if (data[3] == 'e') data[3] = 0;
                    else if (data[3] == 'f') data[3] = 3;
                    else data[3] = 2;

                    if (data[1] & 2) answer += (1UL << 20);
    3a08:	80 e0       	ldi	r24, 0x00	; 0
    3a0a:	90 e0       	ldi	r25, 0x00	; 0
    3a0c:	a0 e1       	ldi	r26, 0x10	; 16
    3a0e:	b0 e0       	ldi	r27, 0x00	; 0
                    if (data[1] & 1) answer += (1 << 8);
    3a10:	20 ff       	sbrs	r18, 0
    3a12:	03 c0       	rjmp	.+6      	; 0x3a1a <ProcessInput+0xce6>
    3a14:	9f 5f       	subi	r25, 0xFF	; 255
    3a16:	af 4f       	sbci	r26, 0xFF	; 255
    3a18:	bf 4f       	sbci	r27, 0xFF	; 255
                    if (data[3] & 2) answer += (1UL << 16);
    3a1a:	f3 01       	movw	r30, r6
    3a1c:	23 81       	ldd	r18, Z+3	; 0x03
    3a1e:	21 fd       	sbrc	r18, 1
    3a20:	11 96       	adiw	r26, 0x01	; 1
                    if (data[3] & 1) answer += (1 << 4);
    3a22:	20 ff       	sbrs	r18, 0
    3a24:	03 c0       	rjmp	.+6      	; 0x3a2c <ProcessInput+0xcf8>
    3a26:	40 96       	adiw	r24, 0x10	; 16
    3a28:	a1 1d       	adc	r26, r1
    3a2a:	b1 1d       	adc	r27, r1
                    if (data[2] & 2) answer += (1 << 12);
    3a2c:	31 ff       	sbrs	r19, 1
    3a2e:	03 c0       	rjmp	.+6      	; 0x3a36 <ProcessInput+0xd02>
    3a30:	90 5f       	subi	r25, 0xF0	; 240
    3a32:	af 4f       	sbci	r26, 0xFF	; 255
    3a34:	bf 4f       	sbci	r27, 0xFF	; 255
                    if (data[2] & 1) answer += 1;
    3a36:	30 ff       	sbrs	r19, 0
    3a38:	03 c0       	rjmp	.+6      	; 0x3a40 <ProcessInput+0xd0c>
    3a3a:	01 96       	adiw	r24, 0x01	; 1
    3a3c:	a1 1d       	adc	r26, r1
    3a3e:	b1 1d       	adc	r27, r1
                    answer <<= (4 - whoami);            
    3a40:	40 91 3d 38 	lds	r20, 0x383D	; 0x80383d <whoami>
    3a44:	24 e0       	ldi	r18, 0x04	; 4
    3a46:	30 e0       	ldi	r19, 0x00	; 0
    3a48:	24 1b       	sub	r18, r20
    3a4a:	31 09       	sbc	r19, r1
    3a4c:	04 c0       	rjmp	.+8      	; 0x3a56 <ProcessInput+0xd22>
    3a4e:	88 0f       	add	r24, r24
    3a50:	99 1f       	adc	r25, r25
    3a52:	aa 1f       	adc	r26, r26
    3a54:	bb 1f       	adc	r27, r27
    3a56:	2a 95       	dec	r18
    3a58:	d2 f7       	brpl	.-12     	; 0x3a4e <ProcessInput+0xd1a>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3a5a:	28 ec       	ldi	r18, 0xC8	; 200
    3a5c:	34 e7       	ldi	r19, 0x74	; 116
    3a5e:	20 93 1d 39 	sts	0x391D, r18	; 0x80391d <reactStr+0x2>
    3a62:	30 93 1e 39 	sts	0x391E, r19	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    3a66:	20 e2       	ldi	r18, 0x20	; 32
    3a68:	30 e0       	ldi	r19, 0x00	; 0
    3a6a:	20 93 5d 39 	sts	0x395D, r18	; 0x80395d <reactStr+0x42>
    3a6e:	30 93 5e 39 	sts	0x395E, r19	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    3a72:	21 e0       	ldi	r18, 0x01	; 1
    3a74:	30 e0       	ldi	r19, 0x00	; 0
    3a76:	20 93 9d 39 	sts	0x399D, r18	; 0x80399d <reactStr+0x82>
    3a7a:	30 93 9e 39 	sts	0x399E, r19	; 0x80399e <reactStr+0x83>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3a7e:	4d e9       	ldi	r20, 0x9D	; 157
    3a80:	54 e7       	ldi	r21, 0x74	; 116
    3a82:	40 93 1f 39 	sts	0x391F, r20	; 0x80391f <reactStr+0x4>
    3a86:	50 93 20 39 	sts	0x3920, r21	; 0x803920 <reactStr+0x5>
    reactStr[1][number]=length;
    3a8a:	42 e0       	ldi	r20, 0x02	; 2
    3a8c:	50 e0       	ldi	r21, 0x00	; 0
    3a8e:	40 93 5f 39 	sts	0x395F, r20	; 0x80395f <reactStr+0x44>
    3a92:	50 93 60 39 	sts	0x3960, r21	; 0x803960 <reactStr+0x45>
    reactStr[2][number]=type;
    3a96:	20 93 9f 39 	sts	0x399F, r18	; 0x80399f <reactStr+0x84>
    3a9a:	30 93 a0 39 	sts	0x39A0, r19	; 0x8039a0 <reactStr+0x85>

                    SetResponse(elements++, A_YOURPART, L_YOURPART, TEASER);
                    SetResponse(elements++, A_HEXPREFIX, L_HEXPREFIX, TEASER);
                    
                    //Set up sending out number
                    for (n=7; n>=0; --n) {
    3a9e:	07 e0       	ldi	r16, 0x07	; 7
                        digit[n] = answer % 16;
    3aa0:	f7 01       	movw	r30, r14
    3aa2:	e0 0f       	add	r30, r16
    3aa4:	f1 1d       	adc	r31, r1
    3aa6:	28 2f       	mov	r18, r24
    3aa8:	2f 70       	andi	r18, 0x0F	; 15
    3aaa:	20 83       	st	Z, r18
                        answer /= 16;
    3aac:	44 e0       	ldi	r20, 0x04	; 4
    3aae:	b6 95       	lsr	r27
    3ab0:	a7 95       	ror	r26
    3ab2:	97 95       	ror	r25
    3ab4:	87 95       	ror	r24
    3ab6:	4a 95       	dec	r20
    3ab8:	d1 f7       	brne	.-12     	; 0x3aae <ProcessInput+0xd7a>
                        if (answer == 0) break;
    3aba:	00 97       	sbiw	r24, 0x00	; 0
    3abc:	a1 05       	cpc	r26, r1
    3abe:	b1 05       	cpc	r27, r1
    3ac0:	49 f4       	brne	.+18     	; 0x3ad4 <ProcessInput+0xda0>
    3ac2:	2b e1       	ldi	r18, 0x1B	; 27
    3ac4:	c2 2e       	mov	r12, r18
    3ac6:	29 e3       	ldi	r18, 0x39	; 57
    3ac8:	d2 2e       	mov	r13, r18
    3aca:	13 e0       	ldi	r17, 0x03	; 3
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    reactStr[1][number]=length;
    3acc:	aa 24       	eor	r10, r10
    3ace:	a3 94       	inc	r10
    3ad0:	b1 2c       	mov	r11, r1
    3ad2:	02 c0       	rjmp	.+4      	; 0x3ad8 <ProcessInput+0xda4>

                    SetResponse(elements++, A_YOURPART, L_YOURPART, TEASER);
                    SetResponse(elements++, A_HEXPREFIX, L_HEXPREFIX, TEASER);
                    
                    //Set up sending out number
                    for (n=7; n>=0; --n) {
    3ad4:	01 50       	subi	r16, 0x01	; 1
                        digit[n] = answer % 16;
                        answer /= 16;
                        if (answer == 0) break;
                    }
    3ad6:	e4 cf       	rjmp	.-56     	; 0x3aa0 <ProcessInput+0xd6c>
    3ad8:	b2 e0       	ldi	r27, 0x02	; 2
    3ada:	cb 0e       	add	r12, r27
    3adc:	d1 1c       	adc	r13, r1

                    for (; n<8; ++n) {
    3ade:	08 30       	cpi	r16, 0x08	; 8
    3ae0:	08 f0       	brcs	.+2      	; 0x3ae4 <ProcessInput+0xdb0>
    3ae2:	9e c0       	rjmp	.+316    	; 0x3c20 <ProcessInput+0xeec>
                        SetResponse(elements++, A_DIGITS+digit[n], 1, TEASER);
    3ae4:	1f 5f       	subi	r17, 0xFF	; 255
    3ae6:	f7 01       	movw	r30, r14
    3ae8:	e0 0f       	add	r30, r16
    3aea:	f1 1d       	adc	r31, r1
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3aec:	80 81       	ld	r24, Z
    3aee:	90 e0       	ldi	r25, 0x00	; 0
    3af0:	83 57       	subi	r24, 0x73	; 115
    3af2:	9b 48       	sbci	r25, 0x8B	; 139
    3af4:	d6 01       	movw	r26, r12
    3af6:	14 96       	adiw	r26, 0x04	; 4
    3af8:	8d 93       	st	X+, r24
    3afa:	9c 93       	st	X, r25
    3afc:	15 97       	sbiw	r26, 0x05	; 5
    reactStr[1][number]=length;
    3afe:	f6 01       	movw	r30, r12
    3b00:	ec 5b       	subi	r30, 0xBC	; 188
    3b02:	ff 4f       	sbci	r31, 0xFF	; 255
    3b04:	a0 82       	st	Z, r10
    3b06:	b1 82       	std	Z+1, r11	; 0x01
    reactStr[2][number]=type;
    3b08:	e0 5c       	subi	r30, 0xC0	; 192
    3b0a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b0c:	a0 82       	st	Z, r10
    3b0e:	b1 82       	std	Z+1, r11	; 0x01
                        if (answer == 0) break;
                    }

                    for (; n<8; ++n) {
                        SetResponse(elements++, A_DIGITS+digit[n], 1, TEASER);
                        UpdateState(actObj1.byteField[ACTION_STATE]);
    3b10:	80 91 e4 38 	lds	r24, 0x38E4	; 0x8038e4 <actObj1.3989+0xa>
    3b14:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <UpdateState>
                        digit[n] = answer % 16;
                        answer /= 16;
                        if (answer == 0) break;
                    }

                    for (; n<8; ++n) {
    3b18:	0f 5f       	subi	r16, 0xFF	; 255
    3b1a:	de cf       	rjmp	.-68     	; 0x3ad8 <ProcessInput+0xda4>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3b1c:	88 ee       	ldi	r24, 0xE8	; 232
    3b1e:	94 e7       	ldi	r25, 0x74	; 116
    3b20:	80 93 1d 39 	sts	0x391D, r24	; 0x80391d <reactStr+0x2>
    3b24:	90 93 1e 39 	sts	0x391E, r25	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    3b28:	8d e3       	ldi	r24, 0x3D	; 61
    3b2a:	90 e0       	ldi	r25, 0x00	; 0
    3b2c:	80 93 5d 39 	sts	0x395D, r24	; 0x80395d <reactStr+0x42>
    3b30:	90 93 5e 39 	sts	0x395E, r25	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    3b34:	81 e0       	ldi	r24, 0x01	; 1
    3b36:	90 e0       	ldi	r25, 0x00	; 0
    3b38:	80 93 9d 39 	sts	0x399D, r24	; 0x80399d <reactStr+0x82>
    3b3c:	90 93 9e 39 	sts	0x399E, r25	; 0x80399e <reactStr+0x83>
    3b40:	6e c0       	rjmp	.+220    	; 0x3c1e <ProcessInput+0xeea>
    3b42:	e0 91 2e 38 	lds	r30, 0x382E	; 0x80382e <currDepth>
                    SetResponse(elements++, A_BADOFFERING, L_BADOFFERING, TEASER);
                }
            
            //Other questions    
            } else if (specialPassed == 1) {
                PopulateObject(route[currDepth+1], &actObj1);
    3b46:	f0 e0       	ldi	r31, 0x00	; 0
    3b48:	ee 0f       	add	r30, r30
    3b4a:	ff 1f       	adc	r31, r31
    3b4c:	e3 52       	subi	r30, 0x23	; 35
    3b4e:	f6 4c       	sbci	r31, 0xC6	; 198
    3b50:	6a ed       	ldi	r22, 0xDA	; 218
    3b52:	78 e3       	ldi	r23, 0x38	; 56
                } else {
                    SetResponse(elements++, A_BADOFFERING, L_BADOFFERING, TEASER);
                }
            
            //Other questions    
            } else if (specialPassed == 1) {
    3b54:	81 30       	cpi	r24, 0x01	; 1
    3b56:	09 f0       	breq	.+2      	; 0x3b5a <ProcessInput+0xe26>
    3b58:	46 c0       	rjmp	.+140    	; 0x3be6 <ProcessInput+0xeb2>
                PopulateObject(route[currDepth+1], &actObj1);
    3b5a:	80 81       	ld	r24, Z
    3b5c:	91 81       	ldd	r25, Z+1	; 0x01
    3b5e:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <PopulateObject>
                if (CheckState(actObj1.byteField[ACTION_ACL])){
    3b62:	80 91 e1 38 	lds	r24, 0x38E1	; 0x8038e1 <actObj1.3989+0x7>
    3b66:	0e 94 0c 0a 	call	0x1418	; 0x1418 <CheckState>
    3b6a:	88 23       	and	r24, r24
    3b6c:	01 f1       	breq	.+64     	; 0x3bae <ProcessInput+0xe7a>
                    SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    3b6e:	80 91 00 39 	lds	r24, 0x3900	; 0x803900 <actObj1.3989+0x26>
    3b72:	90 91 01 39 	lds	r25, 0x3901	; 0x803901 <actObj1.3989+0x27>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3b76:	20 91 f2 38 	lds	r18, 0x38F2	; 0x8038f2 <actObj1.3989+0x18>
    3b7a:	30 91 f3 38 	lds	r19, 0x38F3	; 0x8038f3 <actObj1.3989+0x19>
    3b7e:	20 93 1d 39 	sts	0x391D, r18	; 0x80391d <reactStr+0x2>
    3b82:	30 93 1e 39 	sts	0x391E, r19	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    3b86:	80 93 5d 39 	sts	0x395D, r24	; 0x80395d <reactStr+0x42>
    3b8a:	90 93 5e 39 	sts	0x395E, r25	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    3b8e:	10 92 9d 39 	sts	0x399D, r1	; 0x80399d <reactStr+0x82>
    3b92:	10 92 9e 39 	sts	0x399E, r1	; 0x80399e <reactStr+0x83>
            //Other questions    
            } else if (specialPassed == 1) {
                PopulateObject(route[currDepth+1], &actObj1);
                if (CheckState(actObj1.byteField[ACTION_ACL])){
                    SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                    effect = actObj1.effect[2];
    3b96:	80 91 04 39 	lds	r24, 0x3904	; 0x803904 <actObj1.3989+0x2a>
    3b9a:	90 e0       	ldi	r25, 0x00	; 0
    3b9c:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <effect>
    3ba0:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <effect+0x1>
                    UpdateState(actObj1.byteField[ACTION_STATE]);
    3ba4:	80 91 e4 38 	lds	r24, 0x38E4	; 0x8038e4 <actObj1.3989+0xa>
    3ba8:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <UpdateState>
    3bac:	38 c0       	rjmp	.+112    	; 0x3c1e <ProcessInput+0xeea>
                } else {
                    SetResponse(elements++, actObj1.addrStr[ACTION_ACL_MSG], actObj1.lenStr[ACTION_ACL_MSG], GAME);
    3bae:	80 91 fe 38 	lds	r24, 0x38FE	; 0x8038fe <actObj1.3989+0x24>
    3bb2:	90 91 ff 38 	lds	r25, 0x38FF	; 0x8038ff <actObj1.3989+0x25>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3bb6:	20 91 f0 38 	lds	r18, 0x38F0	; 0x8038f0 <actObj1.3989+0x16>
    3bba:	30 91 f1 38 	lds	r19, 0x38F1	; 0x8038f1 <actObj1.3989+0x17>
    3bbe:	20 93 1d 39 	sts	0x391D, r18	; 0x80391d <reactStr+0x2>
    3bc2:	30 93 1e 39 	sts	0x391E, r19	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    3bc6:	80 93 5d 39 	sts	0x395D, r24	; 0x80395d <reactStr+0x42>
    3bca:	90 93 5e 39 	sts	0x395E, r25	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    3bce:	10 92 9d 39 	sts	0x399D, r1	; 0x80399d <reactStr+0x82>
    3bd2:	10 92 9e 39 	sts	0x399E, r1	; 0x80399e <reactStr+0x83>
                    SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                    effect = actObj1.effect[2];
                    UpdateState(actObj1.byteField[ACTION_STATE]);
                } else {
                    SetResponse(elements++, actObj1.addrStr[ACTION_ACL_MSG], actObj1.lenStr[ACTION_ACL_MSG], GAME);
                    effect = actObj1.effect[1];
    3bd6:	80 91 03 39 	lds	r24, 0x3903	; 0x803903 <actObj1.3989+0x29>
    3bda:	90 e0       	ldi	r25, 0x00	; 0
    3bdc:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <effect>
    3be0:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <effect+0x1>
    3be4:	1c c0       	rjmp	.+56     	; 0x3c1e <ProcessInput+0xeea>
                }

            } else {
                PopulateObject(route[currDepth+1], &actObj1);
    3be6:	80 81       	ld	r24, Z
    3be8:	91 81       	ldd	r25, Z+1	; 0x01
    3bea:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <PopulateObject>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3bee:	80 e6       	ldi	r24, 0x60	; 96
    3bf0:	98 e7       	ldi	r25, 0x78	; 120
    3bf2:	80 93 1d 39 	sts	0x391D, r24	; 0x80391d <reactStr+0x2>
    3bf6:	90 93 1e 39 	sts	0x391E, r25	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    3bfa:	8d e4       	ldi	r24, 0x4D	; 77
    3bfc:	90 e0       	ldi	r25, 0x00	; 0
    3bfe:	80 93 5d 39 	sts	0x395D, r24	; 0x80395d <reactStr+0x42>
    3c02:	90 93 5e 39 	sts	0x395E, r25	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    3c06:	81 e0       	ldi	r24, 0x01	; 1
    3c08:	90 e0       	ldi	r25, 0x00	; 0
    3c0a:	80 93 9d 39 	sts	0x399D, r24	; 0x80399d <reactStr+0x82>
    3c0e:	90 93 9e 39 	sts	0x399E, r25	; 0x80399e <reactStr+0x83>
                }

            } else {
                PopulateObject(route[currDepth+1], &actObj1);
                SetResponse(elements++, A_INCORRECT, L_INCORRECT, TEASER);
                PunishmentTime = getClock();
    3c12:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <getClock>
    3c16:	80 93 07 39 	sts	0x3907, r24	; 0x803907 <PunishmentTime>
    3c1a:	90 93 08 39 	sts	0x3908, r25	; 0x803908 <PunishmentTime+0x1>
                    effect = actObj1.effect[1];
                }

            } else {
                PopulateObject(route[currDepth+1], &actObj1);
                SetResponse(elements++, A_INCORRECT, L_INCORRECT, TEASER);
    3c1e:	12 e0       	ldi	r17, 0x02	; 2
                PunishmentTime = getClock();
            }
            specialInput[0] = 0;
    3c20:	10 92 0a 39 	sts	0x390A, r1	; 0x80390a <specialInput>

        }
                    
        //Input handled
        if (specialInput[0]) responseList = elements; else responseList = SetStandardResponse(elements);
    3c24:	80 91 0a 39 	lds	r24, 0x390A	; 0x80390a <specialInput>
    3c28:	88 23       	and	r24, r24
    3c2a:	19 f0       	breq	.+6      	; 0x3c32 <ProcessInput+0xefe>
    3c2c:	10 93 1a 39 	sts	0x391A, r17	; 0x80391a <responseList>
    3c30:	8b c0       	rjmp	.+278    	; 0x3d48 <ProcessInput+0x1014>
    3c32:	81 2f       	mov	r24, r17
    3c34:	01 c0       	rjmp	.+2      	; 0x3c38 <ProcessInput+0xf04>

    } else {

        responseList = SetStandardResponse(1);
    3c36:	81 e0       	ldi	r24, 0x01	; 1
    3c38:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <SetStandardResponse>
    3c3c:	80 93 1a 39 	sts	0x391A, r24	; 0x80391a <responseList>
    3c40:	83 c0       	rjmp	.+262    	; 0x3d48 <ProcessInput+0x1014>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3c42:	81 ed       	ldi	r24, 0xD1	; 209
    3c44:	99 e7       	ldi	r25, 0x79	; 121
    3c46:	80 93 1d 39 	sts	0x391D, r24	; 0x80391d <reactStr+0x2>
    3c4a:	90 93 1e 39 	sts	0x391E, r25	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    3c4e:	8a e1       	ldi	r24, 0x1A	; 26
    3c50:	90 e0       	ldi	r25, 0x00	; 0
    3c52:	45 c9       	rjmp	.-3446   	; 0x2ede <ProcessInput+0x1aa>

        //Drop item if in inventory
        if (data[0] == 'd') {
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
    3c54:	f2 e0       	ldi	r31, 0x02	; 2
    3c56:	ff 12       	cpse	r15, r31
    3c58:	ad c8       	rjmp	.-3750   	; 0x2db4 <ProcessInput+0x80>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
                        if (CheckLetter(inventory[x], data[1])) {
    3c5a:	f3 01       	movw	r30, r6
    3c5c:	61 81       	ldd	r22, Z+1	; 0x01
    3c5e:	0e 94 71 12 	call	0x24e2	; 0x24e2 <CheckLetter>
    3c62:	88 23       	and	r24, r24
    3c64:	09 f4       	brne	.+2      	; 0x3c68 <ProcessInput+0xf34>
    3c66:	58 c0       	rjmp	.+176    	; 0x3d18 <ProcessInput+0xfe4>
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
    3c68:	00 e0       	ldi	r16, 0x00	; 0
    3c6a:	10 e0       	ldi	r17, 0x00	; 0
                        if (CheckLetter(inventory[x], data[1])) {
                            PopulateObject(inventory[x], &actObj1);
    3c6c:	00 0f       	add	r16, r16
    3c6e:	11 1f       	adc	r17, r17
    3c70:	02 5c       	subi	r16, 0xC2	; 194
    3c72:	17 4c       	sbci	r17, 0xC7	; 199
    3c74:	6a ed       	ldi	r22, 0xDA	; 218
    3c76:	78 e3       	ldi	r23, 0x38	; 56
    3c78:	d8 01       	movw	r26, r16
    3c7a:	8d 91       	ld	r24, X+
    3c7c:	9c 91       	ld	r25, X
    3c7e:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <PopulateObject>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3c82:	86 e9       	ldi	r24, 0x96	; 150
    3c84:	97 e7       	ldi	r25, 0x77	; 119
    3c86:	80 93 1d 39 	sts	0x391D, r24	; 0x80391d <reactStr+0x2>
    3c8a:	90 93 1e 39 	sts	0x391E, r25	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    3c8e:	80 e1       	ldi	r24, 0x10	; 16
    3c90:	90 e0       	ldi	r25, 0x00	; 0
    3c92:	80 93 5d 39 	sts	0x395D, r24	; 0x80395d <reactStr+0x42>
    3c96:	90 93 5e 39 	sts	0x395E, r25	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    3c9a:	81 e0       	ldi	r24, 0x01	; 1
    3c9c:	90 e0       	ldi	r25, 0x00	; 0
    3c9e:	80 93 9d 39 	sts	0x399D, r24	; 0x80399d <reactStr+0x82>
    3ca2:	90 93 9e 39 	sts	0x399E, r25	; 0x80399e <reactStr+0x83>
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
                        if (CheckLetter(inventory[x], data[1])) {
                            PopulateObject(inventory[x], &actObj1);
                            SetResponse(elements++, A_DROPPING, L_DROPPING, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    3ca6:	20 91 f4 38 	lds	r18, 0x38F4	; 0x8038f4 <actObj1.3989+0x1a>
    3caa:	30 91 f5 38 	lds	r19, 0x38F5	; 0x8038f5 <actObj1.3989+0x1b>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3cae:	40 91 e6 38 	lds	r20, 0x38E6	; 0x8038e6 <actObj1.3989+0xc>
    3cb2:	50 91 e7 38 	lds	r21, 0x38E7	; 0x8038e7 <actObj1.3989+0xd>
    3cb6:	40 93 1f 39 	sts	0x391F, r20	; 0x80391f <reactStr+0x4>
    3cba:	50 93 20 39 	sts	0x3920, r21	; 0x803920 <reactStr+0x5>
    reactStr[1][number]=length;
    3cbe:	20 93 5f 39 	sts	0x395F, r18	; 0x80395f <reactStr+0x44>
    3cc2:	30 93 60 39 	sts	0x3960, r19	; 0x803960 <reactStr+0x45>
    reactStr[2][number]=type;
    3cc6:	10 92 9f 39 	sts	0x399F, r1	; 0x80399f <reactStr+0x84>
    3cca:	10 92 a0 39 	sts	0x39A0, r1	; 0x8039a0 <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3cce:	29 e5       	ldi	r18, 0x59	; 89
    3cd0:	3a e7       	ldi	r19, 0x7A	; 122
    3cd2:	20 93 21 39 	sts	0x3921, r18	; 0x803921 <reactStr+0x6>
    3cd6:	30 93 22 39 	sts	0x3922, r19	; 0x803922 <reactStr+0x7>
    reactStr[1][number]=length;
    3cda:	22 e0       	ldi	r18, 0x02	; 2
    3cdc:	30 e0       	ldi	r19, 0x00	; 0
    3cde:	20 93 61 39 	sts	0x3961, r18	; 0x803961 <reactStr+0x46>
    3ce2:	30 93 62 39 	sts	0x3962, r19	; 0x803962 <reactStr+0x47>
    reactStr[2][number]=type;
    3ce6:	80 93 a1 39 	sts	0x39A1, r24	; 0x8039a1 <reactStr+0x86>
    3cea:	90 93 a2 39 	sts	0x39A2, r25	; 0x8039a2 <reactStr+0x87>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3cee:	29 e5       	ldi	r18, 0x59	; 89
    3cf0:	37 e7       	ldi	r19, 0x77	; 119
    3cf2:	20 93 23 39 	sts	0x3923, r18	; 0x803923 <reactStr+0x8>
    3cf6:	30 93 24 39 	sts	0x3924, r19	; 0x803924 <reactStr+0x9>
    reactStr[1][number]=length;
    3cfa:	2d e3       	ldi	r18, 0x3D	; 61
    3cfc:	30 e0       	ldi	r19, 0x00	; 0
    3cfe:	20 93 63 39 	sts	0x3963, r18	; 0x803963 <reactStr+0x48>
    3d02:	30 93 64 39 	sts	0x3964, r19	; 0x803964 <reactStr+0x49>
    reactStr[2][number]=type;
    3d06:	80 93 a3 39 	sts	0x39A3, r24	; 0x8039a3 <reactStr+0x88>
    3d0a:	90 93 a4 39 	sts	0x39A4, r25	; 0x8039a4 <reactStr+0x89>
                            PopulateObject(inventory[x], &actObj1);
                            SetResponse(elements++, A_DROPPING, L_DROPPING, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                            SetResponse(elements++, A_LF, 2, TEASER);
                            SetResponse(elements++, A_RETURNING, L_RETURNING, TEASER);
                            inventory[x] = 0;
    3d0e:	f8 01       	movw	r30, r16
    3d10:	10 82       	st	Z, r1
    3d12:	11 82       	std	Z+1, r1	; 0x01
                        if (CheckLetter(inventory[x], data[1])) {
                            PopulateObject(inventory[x], &actObj1);
                            SetResponse(elements++, A_DROPPING, L_DROPPING, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                            SetResponse(elements++, A_LF, 2, TEASER);
                            SetResponse(elements++, A_RETURNING, L_RETURNING, TEASER);
    3d14:	15 e0       	ldi	r17, 0x05	; 5
                            inventory[x] = 0;
                            break;
    3d16:	86 cf       	rjmp	.-244    	; 0x3c24 <ProcessInput+0xef0>
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
    3d18:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <inventory+0x2>
    3d1c:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <inventory+0x3>
    3d20:	00 97       	sbiw	r24, 0x00	; 0
    3d22:	49 f0       	breq	.+18     	; 0x3d36 <ProcessInput+0x1002>
                        if (CheckLetter(inventory[x], data[1])) {
    3d24:	f3 01       	movw	r30, r6
    3d26:	61 81       	ldd	r22, Z+1	; 0x01
    3d28:	0e 94 71 12 	call	0x24e2	; 0x24e2 <CheckLetter>
    3d2c:	88 23       	and	r24, r24
    3d2e:	19 f0       	breq	.+6      	; 0x3d36 <ProcessInput+0x1002>
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
    3d30:	01 e0       	ldi	r16, 0x01	; 1
    3d32:	10 e0       	ldi	r17, 0x00	; 0
    3d34:	9b cf       	rjmp	.-202    	; 0x3c6c <ProcessInput+0xf38>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3d36:	81 e6       	ldi	r24, 0x61	; 97
    3d38:	99 e7       	ldi	r25, 0x79	; 121
    3d3a:	80 93 1d 39 	sts	0x391D, r24	; 0x80391d <reactStr+0x2>
    3d3e:	90 93 1e 39 	sts	0x391E, r25	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    3d42:	81 e2       	ldi	r24, 0x21	; 33
    3d44:	90 e0       	ldi	r25, 0x00	; 0
    3d46:	cb c8       	rjmp	.-3690   	; 0x2ede <ProcessInput+0x1aa>
    } else {

        responseList = SetStandardResponse(1);
    }

    data[0] = 0;
    3d48:	f3 01       	movw	r30, r6
    3d4a:	10 82       	st	Z, r1
    serRxDone = 0;
    3d4c:	10 92 44 38 	sts	0x3844, r1	; 0x803844 <serRxDone>
    RXCNT = 0;    
    3d50:	1d ba       	out	0x1d, r1	; 29
    return 0;
}
    3d52:	80 e0       	ldi	r24, 0x00	; 0
    3d54:	28 96       	adiw	r28, 0x08	; 8
    3d56:	cd bf       	out	0x3d, r28	; 61
    3d58:	de bf       	out	0x3e, r29	; 62
    3d5a:	df 91       	pop	r29
    3d5c:	cf 91       	pop	r28
    3d5e:	1f 91       	pop	r17
    3d60:	0f 91       	pop	r16
    3d62:	ff 90       	pop	r15
    3d64:	ef 90       	pop	r14
    3d66:	df 90       	pop	r13
    3d68:	cf 90       	pop	r12
    3d6a:	bf 90       	pop	r11
    3d6c:	af 90       	pop	r10
    3d6e:	9f 90       	pop	r9
    3d70:	8f 90       	pop	r8
    3d72:	7f 90       	pop	r7
    3d74:	6f 90       	pop	r6
    3d76:	08 95       	ret

00003d78 <TextAdventure>:


//MAIN GAME STRUCTURE
uint8_t TextAdventure(){
    3d78:	cf 93       	push	r28
    static uint8_t serInput[RXLEN];
    uint16_t PunishmentCount;
    
    /* Count down PunishmentTime on WING LEDs */
    if (PunishmentTime != 0) {
    3d7a:	80 91 07 39 	lds	r24, 0x3907	; 0x803907 <PunishmentTime>
    3d7e:	90 91 08 39 	lds	r25, 0x3908	; 0x803908 <PunishmentTime+0x1>
    3d82:	89 2b       	or	r24, r25
    3d84:	09 f1       	breq	.+66     	; 0x3dc8 <TextAdventure+0x50>
        PunishmentCount = getClock();
    3d86:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <getClock>
        if (PunishmentCount < PunishmentTime)
    3d8a:	20 91 07 39 	lds	r18, 0x3907	; 0x803907 <PunishmentTime>
    3d8e:	30 91 08 39 	lds	r19, 0x3908	; 0x803908 <PunishmentTime+0x1>
    3d92:	82 17       	cp	r24, r18
    3d94:	93 07       	cpc	r25, r19
    3d96:	08 f4       	brcc	.+2      	; 0x3d9a <TextAdventure+0x22>
            PunishmentCount += 256 * 60;
    3d98:	94 5c       	subi	r25, 0xC4	; 196
        PunishmentCount -= PunishmentTime;
    3d9a:	ac 01       	movw	r20, r24
    3d9c:	42 1b       	sub	r20, r18
    3d9e:	53 0b       	sbc	r21, r19
    3da0:	9a 01       	movw	r18, r20
        if (PunishmentCount > 10) {
    3da2:	4b 30       	cpi	r20, 0x0B	; 11
    3da4:	51 05       	cpc	r21, r1
    3da6:	30 f0       	brcs	.+12     	; 0x3db4 <TextAdventure+0x3c>
            PunishmentTime = 0;
    3da8:	10 92 07 39 	sts	0x3907, r1	; 0x803907 <PunishmentTime>
    3dac:	10 92 08 39 	sts	0x3908, r1	; 0x803908 <PunishmentTime+0x1>
            PunishmentCount = 10;
    3db0:	2a e0       	ldi	r18, 0x0A	; 10
    3db2:	30 e0       	ldi	r19, 0x00	; 0
        }
        if (gameNow == TEXT ) {
    3db4:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <gameNow>
    3db8:	81 11       	cpse	r24, r1
    3dba:	06 c0       	rjmp	.+12     	; 0x3dc8 <TextAdventure+0x50>
            WingBar(10-PunishmentCount,5-PunishmentCount);
    3dbc:	65 e0       	ldi	r22, 0x05	; 5
    3dbe:	62 1b       	sub	r22, r18
    3dc0:	8a e0       	ldi	r24, 0x0A	; 10
    3dc2:	82 1b       	sub	r24, r18
    3dc4:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <WingBar>
        }
    }

    //Still sending data to serial?
    if (CheckSend()) return 1;
    3dc8:	0e 94 56 13 	call	0x26ac	; 0x26ac <CheckSend>
    3dcc:	88 23       	and	r24, r24
    3dce:	11 f0       	breq	.+4      	; 0x3dd4 <TextAdventure+0x5c>
    3dd0:	c1 e0       	ldi	r28, 0x01	; 1
    3dd2:	18 c0       	rjmp	.+48     	; 0x3e04 <TextAdventure+0x8c>

    //Not sending? Process next response part to send, if any.
    if (CheckResponse()) return 1;        
    3dd4:	0e 94 b9 13 	call	0x2772	; 0x2772 <CheckResponse>
    3dd8:	c8 2f       	mov	r28, r24
    3dda:	81 11       	cpse	r24, r1
    3ddc:	f9 cf       	rjmp	.-14     	; 0x3dd0 <TextAdventure+0x58>

    if (PunishmentTime == 0) {
    3dde:	80 91 07 39 	lds	r24, 0x3907	; 0x803907 <PunishmentTime>
    3de2:	90 91 08 39 	lds	r25, 0x3908	; 0x803908 <PunishmentTime+0x1>
    3de6:	89 2b       	or	r24, r25
    3de8:	69 f4       	brne	.+26     	; 0x3e04 <TextAdventure+0x8c>
        //No responses to send, check if there is user input.
        if (CheckInput(&serInput[0])) return 2; 
    3dea:	8e e6       	ldi	r24, 0x6E	; 110
    3dec:	98 e3       	ldi	r25, 0x38	; 56
    3dee:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <CheckInput>
    3df2:	c8 2f       	mov	r28, r24
    3df4:	81 11       	cpse	r24, r1
    3df6:	05 c0       	rjmp	.+10     	; 0x3e02 <TextAdventure+0x8a>

        //Input found, process and save (changes only)
        ProcessInput(&serInput[0]);
    3df8:	8e e6       	ldi	r24, 0x6E	; 110
    3dfa:	98 e3       	ldi	r25, 0x38	; 56
    3dfc:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <ProcessInput>
    3e00:	01 c0       	rjmp	.+2      	; 0x3e04 <TextAdventure+0x8c>
    //Not sending? Process next response part to send, if any.
    if (CheckResponse()) return 1;        

    if (PunishmentTime == 0) {
        //No responses to send, check if there is user input.
        if (CheckInput(&serInput[0])) return 2; 
    3e02:	c2 e0       	ldi	r28, 0x02	; 2
        //Input found, process and save (changes only)
        ProcessInput(&serInput[0]);
    }

    return 0;
}
    3e04:	8c 2f       	mov	r24, r28
    3e06:	cf 91       	pop	r28
    3e08:	08 95       	ret

00003e0a <main>:


//This is where it begins, inits first and main program in while(1) loop.
int main(void)
{
    Setup();
    3e0a:	0e 94 b7 04 	call	0x96e	; 0x96e <Setup>
    LoadGameState();
    3e0e:	0e 94 4b 0a 	call	0x1496	; 0x1496 <LoadGameState>
    SelfTest();
    3e12:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <SelfTest>
            if (adcPhot < 10) UpdateState(116);
            if (adcPhot > 100) UpdateState(128+116);

            dimValueSum -= (dimValueSum>>6);
            dimValueSum += 256;
            dimValueSum -= QSINE[31-(adcPhot>>7)];
    3e16:	cf e1       	ldi	r28, 0x1F	; 31
    3e18:	d0 e0       	ldi	r29, 0x00	; 0
    Setup();
    LoadGameState();
    SelfTest();

    while (TRUE) {
        if (GenerateAudio()) {
    3e1a:	0e 94 8f 0c 	call	0x191e	; 0x191e <GenerateAudio>
    3e1e:	88 23       	and	r24, r24
    3e20:	e1 f3       	breq	.-8      	; 0x3e1a <main+0x10>
            lastButtonState = buttonState;
    3e22:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <buttonState>
    3e26:	80 93 07 38 	sts	0x3807, r24	; 0x803807 <lastButtonState>
            buttonState = CheckButtons();
    3e2a:	0e 94 b3 08 	call	0x1166	; 0x1166 <CheckButtons>
    3e2e:	80 93 08 38 	sts	0x3808, r24	; 0x803808 <buttonState>
            buttonMark = 0;
    3e32:	10 92 42 38 	sts	0x3842, r1	; 0x803842 <buttonMark>

            if (VREF_CTRLA == 0x12) SelectAuIn(); else SelectTSens();
    3e36:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    3e3a:	82 31       	cpi	r24, 0x12	; 18
    3e3c:	19 f4       	brne	.+6      	; 0x3e44 <main+0x3a>
    3e3e:	0e 94 a4 08 	call	0x1148	; 0x1148 <SelectAuIn>
    3e42:	02 c0       	rjmp	.+4      	; 0x3e48 <main+0x3e>
    3e44:	0e 94 95 08 	call	0x112a	; 0x112a <SelectTSens>

            GenerateBlinks();
    3e48:	0e 94 32 0b 	call	0x1664	; 0x1664 <GenerateBlinks>

            //Main game, to complete: Finish sub-game MagnetMaze and MakeFriends too.
            TextAdventure();
    3e4c:	95 df       	rcall	.-214    	; 0x3d78 <TextAdventure>

            //Other games & user interaction checks
            MagnetMaze();
    3e4e:	0e 94 ba 03 	call	0x774	; 0x774 <MagnetMaze>
            LanyardCode();
    3e52:	0e 94 c4 02 	call	0x588	; 0x588 <LanyardCode>
            BastetDictates();
    3e56:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <BastetDictates>
            MakeFriends();
    3e5a:	0e 94 7d 00 	call	0xfa	; 0xfa <MakeFriends>

            //Save progress
            SaveGameState();
    3e5e:	0e 94 64 09 	call	0x12c8	; 0x12c8 <SaveGameState>

            //Check light sensor status (added hysteresis to preserve writing cycles to internal EEPROM)
            if (adcPhot < 10) UpdateState(116);
    3e62:	80 91 bd 3a 	lds	r24, 0x3ABD	; 0x803abd <adcPhot>
    3e66:	90 91 be 3a 	lds	r25, 0x3ABE	; 0x803abe <adcPhot+0x1>
    3e6a:	0a 97       	sbiw	r24, 0x0a	; 10
    3e6c:	18 f4       	brcc	.+6      	; 0x3e74 <main+0x6a>
    3e6e:	84 e7       	ldi	r24, 0x74	; 116
    3e70:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <UpdateState>
            if (adcPhot > 100) UpdateState(128+116);
    3e74:	80 91 bd 3a 	lds	r24, 0x3ABD	; 0x803abd <adcPhot>
    3e78:	90 91 be 3a 	lds	r25, 0x3ABE	; 0x803abe <adcPhot+0x1>
    3e7c:	85 36       	cpi	r24, 0x65	; 101
    3e7e:	91 05       	cpc	r25, r1
    3e80:	18 f0       	brcs	.+6      	; 0x3e88 <main+0x7e>
    3e82:	84 ef       	ldi	r24, 0xF4	; 244
    3e84:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <UpdateState>

            dimValueSum -= (dimValueSum>>6);
    3e88:	20 91 0a 38 	lds	r18, 0x380A	; 0x80380a <dimValueSum>
    3e8c:	30 91 0b 38 	lds	r19, 0x380B	; 0x80380b <dimValueSum+0x1>
    3e90:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <dimValueSum>
    3e94:	90 91 0b 38 	lds	r25, 0x380B	; 0x80380b <dimValueSum+0x1>
    3e98:	46 e0       	ldi	r20, 0x06	; 6
    3e9a:	36 95       	lsr	r19
    3e9c:	27 95       	ror	r18
    3e9e:	4a 95       	dec	r20
    3ea0:	e1 f7       	brne	.-8      	; 0x3e9a <main+0x90>
    3ea2:	82 1b       	sub	r24, r18
    3ea4:	93 0b       	sbc	r25, r19
    3ea6:	80 93 0a 38 	sts	0x380A, r24	; 0x80380a <dimValueSum>
    3eaa:	90 93 0b 38 	sts	0x380B, r25	; 0x80380b <dimValueSum+0x1>
            dimValueSum += 256;
    3eae:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <dimValueSum>
    3eb2:	90 91 0b 38 	lds	r25, 0x380B	; 0x80380b <dimValueSum+0x1>
    3eb6:	93 95       	inc	r25
    3eb8:	80 93 0a 38 	sts	0x380A, r24	; 0x80380a <dimValueSum>
    3ebc:	90 93 0b 38 	sts	0x380B, r25	; 0x80380b <dimValueSum+0x1>
            dimValueSum -= QSINE[31-(adcPhot>>7)];
    3ec0:	20 91 bd 3a 	lds	r18, 0x3ABD	; 0x803abd <adcPhot>
    3ec4:	30 91 be 3a 	lds	r19, 0x3ABE	; 0x803abe <adcPhot+0x1>
    3ec8:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <dimValueSum>
    3ecc:	90 91 0b 38 	lds	r25, 0x380B	; 0x80380b <dimValueSum+0x1>
    3ed0:	22 0f       	add	r18, r18
    3ed2:	23 2f       	mov	r18, r19
    3ed4:	22 1f       	adc	r18, r18
    3ed6:	33 0b       	sbc	r19, r19
    3ed8:	31 95       	neg	r19
    3eda:	fe 01       	movw	r30, r28
    3edc:	e2 1b       	sub	r30, r18
    3ede:	f3 0b       	sbc	r31, r19
    3ee0:	ec 59       	subi	r30, 0x9C	; 156
    3ee2:	f0 44       	sbci	r31, 0x40	; 64
    3ee4:	20 81       	ld	r18, Z
    3ee6:	82 1b       	sub	r24, r18
    3ee8:	91 09       	sbc	r25, r1
    3eea:	80 93 0a 38 	sts	0x380A, r24	; 0x80380a <dimValueSum>
    3eee:	90 93 0b 38 	sts	0x380B, r25	; 0x80380b <dimValueSum+0x1>
            dimValue     = dimValueSum>>6;
    3ef2:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <dimValueSum>
    3ef6:	90 91 0b 38 	lds	r25, 0x380B	; 0x80380b <dimValueSum+0x1>
    3efa:	66 e0       	ldi	r22, 0x06	; 6
    3efc:	96 95       	lsr	r25
    3efe:	87 95       	ror	r24
    3f00:	6a 95       	dec	r22
    3f02:	e1 f7       	brne	.-8      	; 0x3efc <main+0xf2>
    3f04:	80 93 0c 38 	sts	0x380C, r24	; 0x80380c <dimValue>

            //Check temperature
            HotSummer();
    3f08:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <HotSummer>
    3f0c:	86 cf       	rjmp	.-244    	; 0x3e1a <main+0x10>

00003f0e <__tablejump2__>:
    3f0e:	ee 0f       	add	r30, r30
    3f10:	ff 1f       	adc	r31, r31
    3f12:	05 90       	lpm	r0, Z+
    3f14:	f4 91       	lpm	r31, Z
    3f16:	e0 2d       	mov	r30, r0
    3f18:	09 94       	ijmp

00003f1a <_exit>:
    3f1a:	f8 94       	cli

00003f1c <__stop_program>:
    3f1c:	ff cf       	rjmp	.-2      	; 0x3f1c <__stop_program>
