
ISR_IO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00803800  00003334  000033e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000325a  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000da  0000b25a  0000325a  0000330e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          000002dc  00803828  00803828  00003410  2**0
                  ALLOC
  4 .comment      00000030  00000000  00000000  00003410  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003440  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000002a8  00000000  00000000  00003480  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000604e  00000000  00000000  00003728  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000025a9  00000000  00000000  00009776  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003001  00000000  00000000  0000bd1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000838  00000000  00000000  0000ed20  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000186a  00000000  00000000  0000f558  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003ff5  00000000  00000000  00010dc2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000328  00000000  00000000  00014db7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	3d c0       	rjmp	.+122    	; 0x7c <__ctors_end>
       2:	00 00       	nop
       4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
       6:	00 00       	nop
       8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
       a:	00 00       	nop
       c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
       e:	00 00       	nop
      10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
      12:	00 00       	nop
      14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
      16:	00 00       	nop
      18:	86 c6       	rjmp	.+3340   	; 0xd26 <__vector_6>
      1a:	00 00       	nop
      1c:	ce c6       	rjmp	.+3484   	; 0xdba <__vector_7>
      1e:	00 00       	nop
      20:	be c4       	rjmp	.+2428   	; 0x99e <__vector_8>
      22:	00 00       	nop
      24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
      26:	00 00       	nop
      28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
      32:	00 00       	nop
      34:	05 c5       	rjmp	.+2570   	; 0xa40 <__vector_13>
      36:	00 00       	nop
      38:	36 c5       	rjmp	.+2668   	; 0xaa6 <__vector_14>
      3a:	00 00       	nop
      3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
      42:	00 00       	nop
      44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
      46:	00 00       	nop
      48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	f4 c5       	rjmp	.+3048   	; 0xc3a <__vector_20>
      52:	00 00       	nop
      54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
      56:	00 00       	nop
      58:	1e c6       	rjmp	.+3132   	; 0xc96 <__vector_22>
      5a:	00 00       	nop
      5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
      62:	00 00       	nop
      64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
      66:	00 00       	nop
      68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	6f c5       	rjmp	.+2782   	; 0xb4c <__vector_27>
      6e:	00 00       	nop
      70:	c8 c5       	rjmp	.+2960   	; 0xc02 <__vector_28>
      72:	00 00       	nop
      74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
      76:	00 00       	nop
      78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
	...

0000007c <__ctors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	cd bf       	out	0x3d, r28	; 61
      84:	df e3       	ldi	r29, 0x3F	; 63
      86:	de bf       	out	0x3e, r29	; 62

00000088 <__do_copy_data>:
      88:	18 e3       	ldi	r17, 0x38	; 56
      8a:	a0 e0       	ldi	r26, 0x00	; 0
      8c:	b8 e3       	ldi	r27, 0x38	; 56
      8e:	e4 e3       	ldi	r30, 0x34	; 52
      90:	f3 e3       	ldi	r31, 0x33	; 51
      92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
      94:	05 90       	lpm	r0, Z+
      96:	0d 92       	st	X+, r0
      98:	a8 32       	cpi	r26, 0x28	; 40
      9a:	b1 07       	cpc	r27, r17
      9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
      9e:	2b e3       	ldi	r18, 0x3B	; 59
      a0:	a8 e2       	ldi	r26, 0x28	; 40
      a2:	b8 e3       	ldi	r27, 0x38	; 56
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	a4 30       	cpi	r26, 0x04	; 4
      aa:	b2 07       	cpc	r27, r18
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 62 18 	call	0x30c4	; 0x30c4 <main>
      b2:	0c 94 2b 19 	jmp	0x3256	; 0x3256 <_exit>

000000b6 <__bad_interrupt>:
      b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <I2C_init>:
// the Atmel device documentation mentions a special command for repeated start TWI_MCMD_REPSTART_gc,
// but this is not used in Atmel's demo code, so we don't use it either

void I2C_rep_start(uint8_t shifted_addr)						    // send repeated start, device_addr + LSB set if READ
{
	TWI0.MADDR = shifted_addr;	
      b8:	81 e0       	ldi	r24, 0x01	; 1
      ba:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
      be:	e6 e2       	ldi	r30, 0x26	; 38
      c0:	f4 e0       	ldi	r31, 0x04	; 4
      c2:	80 83       	st	Z, r24
      c4:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <__TEXT_REGION_LENGTH__+0x700430>
      c8:	a1 e2       	ldi	r26, 0x21	; 33
      ca:	b4 e0       	ldi	r27, 0x04	; 4
      cc:	92 e0       	ldi	r25, 0x02	; 2
      ce:	9c 93       	st	X, r25
      d0:	90 83       	st	Z, r25
      d2:	10 92 31 04 	sts	0x0431, r1	; 0x800431 <__TEXT_REGION_LENGTH__+0x700431>
      d6:	e0 e1       	ldi	r30, 0x10	; 16
      d8:	f8 e0       	ldi	r31, 0x08	; 8
      da:	97 e0       	ldi	r25, 0x07	; 7
      dc:	96 83       	std	Z+6, r25	; 0x06
      de:	98 e0       	ldi	r25, 0x08	; 8
      e0:	94 83       	std	Z+4, r25	; 0x04
      e2:	83 83       	std	Z+3, r24	; 0x03
      e4:	8c 93       	st	X, r24
      e6:	85 81       	ldd	r24, Z+5	; 0x05
      e8:	81 60       	ori	r24, 0x01	; 1
      ea:	85 83       	std	Z+5, r24	; 0x05
      ec:	85 81       	ldd	r24, Z+5	; 0x05
      ee:	84 6c       	ori	r24, 0xC4	; 196
      f0:	85 83       	std	Z+5, r24	; 0x05
      f2:	08 95       	ret

000000f4 <I2C_recover>:
      f4:	80 91 14 08 	lds	r24, 0x0814	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
      f8:	88 60       	ori	r24, 0x08	; 8
      fa:	80 93 14 08 	sts	0x0814, r24	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
      fe:	10 92 13 08 	sts	0x0813, r1	; 0x800813 <__TEXT_REGION_LENGTH__+0x700813>
     102:	82 e0       	ldi	r24, 0x02	; 2
     104:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
     108:	99 e0       	ldi	r25, 0x09	; 9
     10a:	21 e0       	ldi	r18, 0x01	; 1
     10c:	81 e0       	ldi	r24, 0x01	; 1
     10e:	20 93 21 04 	sts	0x0421, r18	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
     112:	30 e1       	ldi	r19, 0x10	; 16
     114:	3a 95       	dec	r19
     116:	f1 f7       	brne	.-4      	; 0x114 <I2C_recover+0x20>
     118:	00 c0       	rjmp	.+0      	; 0x11a <I2C_recover+0x26>
     11a:	20 93 22 04 	sts	0x0422, r18	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
     11e:	30 e1       	ldi	r19, 0x10	; 16
     120:	3a 95       	dec	r19
     122:	f1 f7       	brne	.-4      	; 0x120 <I2C_recover+0x2c>
     124:	00 c0       	rjmp	.+0      	; 0x126 <I2C_recover+0x32>
     126:	91 50       	subi	r25, 0x01	; 1
     128:	89 f7       	brne	.-30     	; 0x10c <I2C_recover+0x18>
     12a:	28 e0       	ldi	r18, 0x08	; 8
     12c:	20 93 14 08 	sts	0x0814, r18	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     130:	80 93 13 08 	sts	0x0813, r24	; 0x800813 <__TEXT_REGION_LENGTH__+0x700813>
     134:	92 e0       	ldi	r25, 0x02	; 2
     136:	90 93 21 04 	sts	0x0421, r25	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
     13a:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     13e:	91 60       	ori	r25, 0x01	; 1
     140:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     144:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     148:	94 6c       	ori	r25, 0xC4	; 196
     14a:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     14e:	20 93 14 08 	sts	0x0814, r18	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     152:	80 93 13 08 	sts	0x0813, r24	; 0x800813 <__TEXT_REGION_LENGTH__+0x700813>
     156:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
     15a:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     15e:	81 60       	ori	r24, 0x01	; 1
     160:	80 93 15 08 	sts	0x0815, r24	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     164:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     168:	84 6c       	ori	r24, 0xC4	; 196
     16a:	80 93 15 08 	sts	0x0815, r24	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     16e:	08 95       	ret

00000170 <I2C_start>:
     170:	28 2f       	mov	r18, r24
     172:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     176:	90 6c       	ori	r25, 0xC0	; 192
     178:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     17c:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     180:	89 2f       	mov	r24, r25
     182:	84 70       	andi	r24, 0x04	; 4
     184:	92 fd       	sbrc	r25, 2
     186:	03 c0       	rjmp	.+6      	; 0x18e <I2C_start+0x1e>
     188:	20 93 17 08 	sts	0x0817, r18	; 0x800817 <__TEXT_REGION_LENGTH__+0x700817>
     18c:	08 95       	ret
     18e:	84 e0       	ldi	r24, 0x04	; 4
     190:	08 95       	ret

00000192 <I2C_wait_ACK>:
     192:	8c e0       	ldi	r24, 0x0C	; 12
     194:	80 93 34 3a 	sts	0x3A34, r24	; 0x803a34 <timeout_I2C>
     198:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     19c:	87 fd       	sbrc	r24, 7
     19e:	0a c0       	rjmp	.+20     	; 0x1b4 <I2C_wait_ACK+0x22>
     1a0:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     1a4:	86 fd       	sbrc	r24, 6
     1a6:	06 c0       	rjmp	.+12     	; 0x1b4 <I2C_wait_ACK+0x22>
     1a8:	80 91 34 3a 	lds	r24, 0x3A34	; 0x803a34 <timeout_I2C>
     1ac:	81 11       	cpse	r24, r1
     1ae:	f4 cf       	rjmp	.-24     	; 0x198 <I2C_wait_ACK+0x6>
     1b0:	8f ef       	ldi	r24, 0xFF	; 255
     1b2:	08 95       	ret
     1b4:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     1b8:	80 6c       	ori	r24, 0xC0	; 192
     1ba:	80 93 15 08 	sts	0x0815, r24	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     1be:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     1c2:	82 fd       	sbrc	r24, 2
     1c4:	09 c0       	rjmp	.+18     	; 0x1d8 <I2C_wait_ACK+0x46>
     1c6:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     1ca:	83 fd       	sbrc	r24, 3
     1cc:	07 c0       	rjmp	.+14     	; 0x1dc <I2C_wait_ACK+0x4a>
     1ce:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     1d2:	82 95       	swap	r24
     1d4:	81 70       	andi	r24, 0x01	; 1
     1d6:	08 95       	ret
     1d8:	84 e0       	ldi	r24, 0x04	; 4
     1da:	08 95       	ret
     1dc:	82 e0       	ldi	r24, 0x02	; 2
     1de:	08 95       	ret

000001e0 <I2C_read>:
}

uint8_t	I2C_read(uint8_t *data, uint8_t ack_flag)					// read data, ack_flag 0: send ACK, 1: send NACK, returns status
{
     1e0:	fc 01       	movw	r30, r24
	timeout_I2C = READ_TIMEOUT;										// reset timeout counter, will be decremented by LED matrix interrupt
     1e2:	8c e0       	ldi	r24, 0x0C	; 12
     1e4:	80 93 34 3a 	sts	0x3A34, r24	; 0x803a34 <timeout_I2C>
	if ((TWI0.MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_OWNER_gc)	// if master controls bus
     1e8:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     1ec:	89 2f       	mov	r24, r25
     1ee:	83 70       	andi	r24, 0x03	; 3
     1f0:	82 30       	cpi	r24, 0x02	; 2
     1f2:	11 f0       	breq	.+4      	; 0x1f8 <I2C_read+0x18>
		else		TWI0.MCTRLB |= TWI_ACKACT_NACK_gc;				// setup NACK (last byte read)
		*data = TWI0.MDATA;
		if (ack_flag == 0) TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;	// send ACK, more bytes to follow					
		return 0;
	}
	else return 8;													// master does not control bus
     1f4:	88 e0       	ldi	r24, 0x08	; 8
     1f6:	08 95       	ret
uint8_t	I2C_read(uint8_t *data, uint8_t ack_flag)					// read data, ack_flag 0: send ACK, 1: send NACK, returns status
{
	timeout_I2C = READ_TIMEOUT;										// reset timeout counter, will be decremented by LED matrix interrupt
	if ((TWI0.MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_OWNER_gc)	// if master controls bus
	{		
		while (!(TWI0.MSTATUS & TWI_RIF_bm))						// wait for RIF set (data byte received)
     1f8:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     1fc:	97 fd       	sbrc	r25, 7
     1fe:	06 c0       	rjmp	.+12     	; 0x20c <I2C_read+0x2c>
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
     200:	90 91 34 3a 	lds	r25, 0x3A34	; 0x803a34 <timeout_I2C>
     204:	91 11       	cpse	r25, r1
     206:	f8 cf       	rjmp	.-16     	; 0x1f8 <I2C_read+0x18>
     208:	8f ef       	ldi	r24, 0xFF	; 255
     20a:	08 95       	ret
		}
		TWI0.MSTATUS |= (TWI_RIF_bm | TWI_WIF_bm);					// clear Read and Write interrupt flags	
     20c:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     210:	90 6c       	ori	r25, 0xC0	; 192
     212:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
     216:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     21a:	92 fd       	sbrc	r25, 2
     21c:	1e c0       	rjmp	.+60     	; 0x25a <I2C_read+0x7a>
		if (TWI0.MSTATUS & TWI_ARBLOST_bm) return 2;				// Arbitration Lost, abort
     21e:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     222:	93 fd       	sbrc	r25, 3
     224:	1d c0       	rjmp	.+58     	; 0x260 <I2C_read+0x80>
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort				
     226:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     22a:	89 2f       	mov	r24, r25
     22c:	80 71       	andi	r24, 0x10	; 16
     22e:	94 fd       	sbrc	r25, 4
     230:	16 c0       	rjmp	.+44     	; 0x25e <I2C_read+0x7e>
		if (ack_flag == 0) TWI0.MCTRLB &= ~(1 << TWI_ACKACT_bp);	// setup ACK
     232:	90 91 14 08 	lds	r25, 0x0814	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     236:	61 11       	cpse	r22, r1
     238:	02 c0       	rjmp	.+4      	; 0x23e <I2C_read+0x5e>
     23a:	9b 7f       	andi	r25, 0xFB	; 251
     23c:	01 c0       	rjmp	.+2      	; 0x240 <I2C_read+0x60>
		else		TWI0.MCTRLB |= TWI_ACKACT_NACK_gc;				// setup NACK (last byte read)
     23e:	94 60       	ori	r25, 0x04	; 4
     240:	90 93 14 08 	sts	0x0814, r25	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
		*data = TWI0.MDATA;
     244:	90 91 18 08 	lds	r25, 0x0818	; 0x800818 <__TEXT_REGION_LENGTH__+0x700818>
     248:	90 83       	st	Z, r25
		if (ack_flag == 0) TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;	// send ACK, more bytes to follow					
     24a:	61 11       	cpse	r22, r1
     24c:	09 c0       	rjmp	.+18     	; 0x260 <I2C_read+0x80>
     24e:	90 91 14 08 	lds	r25, 0x0814	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     252:	92 60       	ori	r25, 0x02	; 2
     254:	90 93 14 08 	sts	0x0814, r25	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     258:	08 95       	ret
		while (!(TWI0.MSTATUS & TWI_RIF_bm))						// wait for RIF set (data byte received)
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
		}
		TWI0.MSTATUS |= (TWI_RIF_bm | TWI_WIF_bm);					// clear Read and Write interrupt flags	
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
     25a:	84 e0       	ldi	r24, 0x04	; 4
     25c:	08 95       	ret
		if (TWI0.MSTATUS & TWI_ARBLOST_bm) return 2;				// Arbitration Lost, abort
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort				
     25e:	81 e0       	ldi	r24, 0x01	; 1
		*data = TWI0.MDATA;
		if (ack_flag == 0) TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;	// send ACK, more bytes to follow					
		return 0;
	}
	else return 8;													// master does not control bus
}
     260:	08 95       	ret

00000262 <I2C_write>:

uint8_t I2C_write(uint8_t *data)									// write data, return status
{
     262:	fc 01       	movw	r30, r24
	timeout_I2C = WRITE_TIMEOUT;									// reset timeout counter, will be decremented by LED matrix interrupt
     264:	8c e0       	ldi	r24, 0x0C	; 12
     266:	80 93 34 3a 	sts	0x3A34, r24	; 0x803a34 <timeout_I2C>
	if ((TWI0.MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_OWNER_gc)	// if master controls bus
     26a:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     26e:	93 70       	andi	r25, 0x03	; 3
     270:	92 30       	cpi	r25, 0x02	; 2
     272:	b1 f4       	brne	.+44     	; 0x2a0 <I2C_write+0x3e>
	{
		TWI0.MDATA = *data;		
     274:	80 81       	ld	r24, Z
     276:	80 93 18 08 	sts	0x0818, r24	; 0x800818 <__TEXT_REGION_LENGTH__+0x700818>
		while (!(TWI0.MSTATUS & TWI_WIF_bm))						// wait until WIF set, status register contains ACK/NACK bit
     27a:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     27e:	86 fd       	sbrc	r24, 6
     280:	06 c0       	rjmp	.+12     	; 0x28e <I2C_write+0x2c>
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
     282:	80 91 34 3a 	lds	r24, 0x3A34	; 0x803a34 <timeout_I2C>
     286:	81 11       	cpse	r24, r1
     288:	f8 cf       	rjmp	.-16     	; 0x27a <I2C_write+0x18>
     28a:	8f ef       	ldi	r24, 0xFF	; 255
     28c:	08 95       	ret
		}
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
     28e:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     292:	82 fd       	sbrc	r24, 2
     294:	07 c0       	rjmp	.+14     	; 0x2a4 <I2C_write+0x42>
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort
     296:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
	if ((TWI0.MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_OWNER_gc)	// if master controls bus
	{
		TWI0.MDATA = *data;		
		while (!(TWI0.MSTATUS & TWI_WIF_bm))						// wait until WIF set, status register contains ACK/NACK bit
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
     29a:	82 95       	swap	r24
     29c:	81 70       	andi	r24, 0x01	; 1
     29e:	08 95       	ret
		}
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort
		return 0;													// no error	
	}
	else return 8;													// master does not control bus
     2a0:	88 e0       	ldi	r24, 0x08	; 8
     2a2:	08 95       	ret
		TWI0.MDATA = *data;		
		while (!(TWI0.MSTATUS & TWI_WIF_bm))						// wait until WIF set, status register contains ACK/NACK bit
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
		}
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
     2a4:	84 e0       	ldi	r24, 0x04	; 4
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort
		return 0;													// no error	
	}
	else return 8;													// master does not control bus
}
     2a6:	08 95       	ret

000002a8 <I2C_stop>:

void I2C_stop()
{
	TWI0.MCTRLB |= TWI_MCMD_STOP_gc;
     2a8:	e0 e1       	ldi	r30, 0x10	; 16
     2aa:	f8 e0       	ldi	r31, 0x08	; 8
     2ac:	84 81       	ldd	r24, Z+4	; 0x04
     2ae:	83 60       	ori	r24, 0x03	; 3
     2b0:	84 83       	std	Z+4, r24	; 0x04
     2b2:	08 95       	ret

000002b4 <I2C_read_bytes>:
// addr_ptr		address of first array element to transfer
// slave reg	starting slave register
// num_bytes	number of bytes to transfer

uint8_t	I2C_read_bytes(uint8_t slave_addr, uint8_t *reg_ptr, uint8_t reg_len, uint8_t *dat_ptr, uint8_t dat_len)
{
     2b4:	cf 92       	push	r12
     2b6:	df 92       	push	r13
     2b8:	ff 92       	push	r15
     2ba:	0f 93       	push	r16
     2bc:	1f 93       	push	r17
     2be:	cf 93       	push	r28
     2c0:	df 93       	push	r29
     2c2:	6b 01       	movw	r12, r22
     2c4:	f4 2e       	mov	r15, r20
     2c6:	e9 01       	movw	r28, r18
	uint8_t status;
	if (dat_len > MAX_LEN) dat_len = MAX_LEN;
	status = I2C_start(slave_addr << 1);							// slave write address, LSB 0
     2c8:	18 2f       	mov	r17, r24
     2ca:	11 0f       	add	r17, r17
     2cc:	81 2f       	mov	r24, r17
     2ce:	50 df       	rcall	.-352    	; 0x170 <I2C_start>
	if (status != 0) goto error;
     2d0:	81 11       	cpse	r24, r1
	status = I2C_wait_ACK();										// wait for slave ACK
     2d2:	2b c0       	rjmp	.+86     	; 0x32a <I2C_read_bytes+0x76>
     2d4:	5e df       	rcall	.-324    	; 0x192 <I2C_wait_ACK>
	if (status == 1) {
     2d6:	81 30       	cpi	r24, 0x01	; 1
		I2C_stop();													// NACK, abort
     2d8:	19 f4       	brne	.+6      	; 0x2e0 <I2C_read_bytes+0x2c>
     2da:	e6 df       	rcall	.-52     	; 0x2a8 <I2C_stop>
		return 1;
     2dc:	81 e0       	ldi	r24, 0x01	; 1
     2de:	27 c0       	rjmp	.+78     	; 0x32e <I2C_read_bytes+0x7a>
	}
	if (status != 0) goto error;
     2e0:	81 11       	cpse	r24, r1
     2e2:	23 c0       	rjmp	.+70     	; 0x32a <I2C_read_bytes+0x76>
    while(reg_len > 0){
     2e4:	ff 20       	and	r15, r15
	    status = I2C_write(reg_ptr);    							// send slave start register
     2e6:	49 f0       	breq	.+18     	; 0x2fa <I2C_read_bytes+0x46>
     2e8:	c6 01       	movw	r24, r12
     2ea:	bb df       	rcall	.-138    	; 0x262 <I2C_write>
	    if (status != 0) goto error;
     2ec:	81 11       	cpse	r24, r1
     2ee:	1d c0       	rjmp	.+58     	; 0x32a <I2C_read_bytes+0x76>
        ++reg_ptr;
     2f0:	8f ef       	ldi	r24, 0xFF	; 255
     2f2:	c8 1a       	sub	r12, r24
     2f4:	d8 0a       	sbc	r13, r24
        --reg_len;
     2f6:	fa 94       	dec	r15
     2f8:	f5 cf       	rjmp	.-22     	; 0x2e4 <I2C_read_bytes+0x30>
     2fa:	01 34       	cpi	r16, 0x41	; 65
     2fc:	08 f0       	brcs	.+2      	; 0x300 <I2C_read_bytes+0x4c>
     2fe:	00 e4       	ldi	r16, 0x40	; 64
    }
	I2C_rep_start((slave_addr << 1) + 1);							// slave read address, LSB 1
     300:	1f 5f       	subi	r17, 0xFF	; 255
// the Atmel device documentation mentions a special command for repeated start TWI_MCMD_REPSTART_gc,
// but this is not used in Atmel's demo code, so we don't use it either

void I2C_rep_start(uint8_t shifted_addr)						    // send repeated start, device_addr + LSB set if READ
{
	TWI0.MADDR = shifted_addr;	
     302:	10 93 17 08 	sts	0x0817, r17	; 0x800817 <__TEXT_REGION_LENGTH__+0x700817>
	    if (status != 0) goto error;
        ++reg_ptr;
        --reg_len;
    }
	I2C_rep_start((slave_addr << 1) + 1);							// slave read address, LSB 1
	while (dat_len > 1) {
     306:	02 30       	cpi	r16, 0x02	; 2
		status = I2C_read(dat_ptr, 0);								// first bytes, send ACK
     308:	40 f0       	brcs	.+16     	; 0x31a <I2C_read_bytes+0x66>
     30a:	60 e0       	ldi	r22, 0x00	; 0
     30c:	ce 01       	movw	r24, r28
     30e:	68 df       	rcall	.-304    	; 0x1e0 <I2C_read>
		if (status != 0) goto error;
     310:	81 11       	cpse	r24, r1
     312:	0b c0       	rjmp	.+22     	; 0x32a <I2C_read_bytes+0x76>
		++dat_ptr;
		--dat_len;
     314:	21 96       	adiw	r28, 0x01	; 1
     316:	01 50       	subi	r16, 0x01	; 1
	}
	status = I2C_read(dat_ptr, 1);									// single or last byte, send NACK
     318:	f6 cf       	rjmp	.-20     	; 0x306 <I2C_read_bytes+0x52>
     31a:	61 e0       	ldi	r22, 0x01	; 1
     31c:	ce 01       	movw	r24, r28
	if (status != 0) goto error;
     31e:	60 df       	rcall	.-320    	; 0x1e0 <I2C_read>
     320:	81 11       	cpse	r24, r1
	I2C_stop();
     322:	03 c0       	rjmp	.+6      	; 0x32a <I2C_read_bytes+0x76>
     324:	c1 df       	rcall	.-126    	; 0x2a8 <I2C_stop>
	return 0;
     326:	80 e0       	ldi	r24, 0x00	; 0
     328:	02 c0       	rjmp	.+4      	; 0x32e <I2C_read_bytes+0x7a>
	
error:
	I2C_recover();													// clock out possibly stuck slave, reset master
     32a:	e4 de       	rcall	.-568    	; 0xf4 <I2C_recover>
     32c:	8f ef       	ldi	r24, 0xFF	; 255
	return 0xff;													// flag error
     32e:	df 91       	pop	r29
}
     330:	cf 91       	pop	r28
     332:	1f 91       	pop	r17
     334:	0f 91       	pop	r16
     336:	ff 90       	pop	r15
     338:	df 90       	pop	r13
     33a:	cf 90       	pop	r12
     33c:	08 95       	ret

0000033e <LanyardCode>:
     33e:	cf 93       	push	r28
uint8_t         lanyardState = TRUE;
uint8_t         lastButtonState = 0xff;
uint8_t         digit = 0xff;

// Main game loop
uint8_t LanyardCode(){
     340:	df 93       	push	r29
    if (CheckState(LANYARD_COMPLETED)) {
     342:	8b e7       	ldi	r24, 0x7B	; 123
     344:	20 d7       	rcall	.+3648   	; 0x1186 <CheckState>
     346:	81 11       	cpse	r24, r1
     348:	e7 c0       	rjmp	.+462    	; 0x518 <__LOCK_REGION_LENGTH__+0x118>
        }
        */
        return 0;
    }

    if ( gameNow != TEXT && gameNow != LANYARD )
     34a:	80 91 2f 38 	lds	r24, 0x382F	; 0x80382f <gameNow>
     34e:	88 23       	and	r24, r24
     350:	19 f0       	breq	.+6      	; 0x358 <LanyardCode+0x1a>
     352:	83 30       	cpi	r24, 0x03	; 3
     354:	09 f0       	breq	.+2      	; 0x358 <LanyardCode+0x1a>
     356:	e0 c0       	rjmp	.+448    	; 0x518 <__LOCK_REGION_LENGTH__+0x118>
        return 0;

    /* activate led for buttonstate */
    iLED[GEM[G]] = (buttonState==0xff ? 0 : 255);
     358:	c0 91 85 b2 	lds	r28, 0xB285	; 0x80b285 <__bss_end+0x7781>
     35c:	ec 2f       	mov	r30, r28
     35e:	f0 e0       	ldi	r31, 0x00	; 0
     360:	80 91 07 38 	lds	r24, 0x3807	; 0x803807 <buttonState>
     364:	91 e0       	ldi	r25, 0x01	; 1
     366:	8f 3f       	cpi	r24, 0xFF	; 255
     368:	09 f4       	brne	.+2      	; 0x36c <LanyardCode+0x2e>
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	91 95       	neg	r25
     36e:	eb 54       	subi	r30, 0x4B	; 75
     370:	f5 4c       	sbci	r31, 0xC5	; 197
     372:	90 83       	st	Z, r25

    if ( (buttonState & 0xf0) == 0)
     374:	98 2f       	mov	r25, r24
     376:	90 7f       	andi	r25, 0xF0	; 240
     378:	09 f4       	brne	.+2      	; 0x37c <LanyardCode+0x3e>
     37a:	ce c0       	rjmp	.+412    	; 0x518 <__LOCK_REGION_LENGTH__+0x118>
        return 0;

    if ((buttonState&0x0f) == (lastButtonState&0x0f))
     37c:	20 91 01 38 	lds	r18, 0x3801	; 0x803801 <lastButtonState>
     380:	98 2f       	mov	r25, r24
     382:	92 27       	eor	r25, r18
     384:	9f 70       	andi	r25, 0x0F	; 15
     386:	09 f4       	brne	.+2      	; 0x38a <LanyardCode+0x4c>
     388:	c7 c0       	rjmp	.+398    	; 0x518 <__LOCK_REGION_LENGTH__+0x118>
        return 0;

    if (lastButtonState == 0xff){
     38a:	2f 3f       	cpi	r18, 0xFF	; 255
     38c:	09 f0       	breq	.+2      	; 0x390 <LanyardCode+0x52>
     38e:	c0 c0       	rjmp	.+384    	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
        switch (buttonState & 0x0f) {
     390:	8f 70       	andi	r24, 0x0F	; 15
     392:	82 30       	cpi	r24, 0x02	; 2
     394:	61 f0       	breq	.+24     	; 0x3ae <LanyardCode+0x70>
     396:	28 f4       	brcc	.+10     	; 0x3a2 <LanyardCode+0x64>
     398:	81 30       	cpi	r24, 0x01	; 1
     39a:	69 f4       	brne	.+26     	; 0x3b6 <LanyardCode+0x78>
            case 0b0001: {
                digit = 0;
     39c:	10 92 00 38 	sts	0x3800, r1	; 0x803800 <__data_start>
                break;
     3a0:	0d c0       	rjmp	.+26     	; 0x3bc <LanyardCode+0x7e>

    if ((buttonState&0x0f) == (lastButtonState&0x0f))
        return 0;

    if (lastButtonState == 0xff){
        switch (buttonState & 0x0f) {
     3a2:	84 30       	cpi	r24, 0x04	; 4
     3a4:	31 f0       	breq	.+12     	; 0x3b2 <LanyardCode+0x74>
     3a6:	88 30       	cpi	r24, 0x08	; 8
     3a8:	31 f4       	brne	.+12     	; 0x3b6 <LanyardCode+0x78>
                digit = 3;
                break;
            }

            case 0b1000: {
                digit = 2;
     3aa:	82 e0       	ldi	r24, 0x02	; 2
     3ac:	05 c0       	rjmp	.+10     	; 0x3b8 <LanyardCode+0x7a>
                digit = 0;
                break;
            }

            case 0b0010: {
                digit = 1;
     3ae:	81 e0       	ldi	r24, 0x01	; 1
     3b0:	03 c0       	rjmp	.+6      	; 0x3b8 <LanyardCode+0x7a>
                break;
            }

            case 0b0100: {
                digit = 3;
     3b2:	83 e0       	ldi	r24, 0x03	; 3
     3b4:	01 c0       	rjmp	.+2      	; 0x3b8 <LanyardCode+0x7a>
                digit = 2;
                break;
            }

            default: {
                digit = 0xff;
     3b6:	8f ef       	ldi	r24, 0xFF	; 255
     3b8:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__data_start>
                break;
            }
        }
        gameNow = LANYARD;
     3bc:	83 e0       	ldi	r24, 0x03	; 3
     3be:	80 93 2f 38 	sts	0x382F, r24	; 0x80382f <gameNow>
        /* play tone for button */

        if (digit == lanyardCode[lanyardPos]) {
     3c2:	80 91 29 38 	lds	r24, 0x3829	; 0x803829 <lanyardPos>
     3c6:	e8 2f       	mov	r30, r24
     3c8:	f0 e0       	ldi	r31, 0x00	; 0
     3ca:	e6 59       	subi	r30, 0x96	; 150
     3cc:	fd 44       	sbci	r31, 0x4D	; 77
     3ce:	20 81       	ld	r18, Z
     3d0:	90 91 00 38 	lds	r25, 0x3800	; 0x803800 <__data_start>
     3d4:	e0 91 82 b2 	lds	r30, 0xB282	; 0x80b282 <__bss_end+0x777e>
     3d8:	29 13       	cpse	r18, r25
     3da:	17 c0       	rjmp	.+46     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
            lanyardState &= TRUE;
     3dc:	90 91 02 38 	lds	r25, 0x3802	; 0x803802 <lanyardState>
     3e0:	91 70       	andi	r25, 0x01	; 1
     3e2:	90 93 02 38 	sts	0x3802, r25	; 0x803802 <lanyardState>
            iLED[CAT]       = 128;
     3e6:	f0 e0       	ldi	r31, 0x00	; 0
     3e8:	eb 54       	subi	r30, 0x4B	; 75
     3ea:	f5 4c       	sbci	r31, 0xC5	; 197
     3ec:	90 e8       	ldi	r25, 0x80	; 128
     3ee:	90 83       	st	Z, r25
            iLED[EYE[R][L]] = 0;
     3f0:	e0 91 91 b2 	lds	r30, 0xB291	; 0x80b291 <__bss_end+0x778d>
     3f4:	f0 e0       	ldi	r31, 0x00	; 0
     3f6:	eb 54       	subi	r30, 0x4B	; 75
     3f8:	f5 4c       	sbci	r31, 0xC5	; 197
     3fa:	10 82       	st	Z, r1
            iLED[EYE[R][R]] = 0;
     3fc:	e0 91 90 b2 	lds	r30, 0xB290	; 0x80b290 <__bss_end+0x778c>
     400:	f0 e0       	ldi	r31, 0x00	; 0
     402:	eb 54       	subi	r30, 0x4B	; 75
     404:	f5 4c       	sbci	r31, 0xC5	; 197
     406:	10 82       	st	Z, r1
     408:	13 c0       	rjmp	.+38     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
        } else {
            lanyardState = FALSE;
     40a:	10 92 02 38 	sts	0x3802, r1	; 0x803802 <lanyardState>
            iLED[CAT]       = 0;
     40e:	f0 e0       	ldi	r31, 0x00	; 0
     410:	eb 54       	subi	r30, 0x4B	; 75
     412:	f5 4c       	sbci	r31, 0xC5	; 197
     414:	10 82       	st	Z, r1
            if (lanyardPos < 4 ) {
     416:	84 30       	cpi	r24, 0x04	; 4
     418:	58 f4       	brcc	.+22     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
                /*gameNow         = BASTET;*/
                gameNow         = TEXT;
     41a:	10 92 2f 38 	sts	0x382F, r1	; 0x80382f <gameNow>
                lanyardPos      = 0;
     41e:	10 92 29 38 	sts	0x3829, r1	; 0x803829 <lanyardPos>
                lanyardCnt      = 0;
     422:	10 92 28 38 	sts	0x3828, r1	; 0x803828 <__data_end>
                lanyardState    = TRUE;
     426:	81 e0       	ldi	r24, 0x01	; 1
     428:	80 93 02 38 	sts	0x3802, r24	; 0x803802 <lanyardState>
                lastButtonState = 0xff;
     42c:	8f ef       	ldi	r24, 0xFF	; 255
     42e:	72 c0       	rjmp	.+228    	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
                return 0;
            }
        }
        lanyardPos++;
     430:	8f 5f       	subi	r24, 0xFF	; 255
     432:	80 93 29 38 	sts	0x3829, r24	; 0x803829 <lanyardPos>
        lanyardCnt++;            
     436:	90 91 28 38 	lds	r25, 0x3828	; 0x803828 <__data_end>
     43a:	9f 5f       	subi	r25, 0xFF	; 255
        if (lanyardCnt >= 4) {
     43c:	94 30       	cpi	r25, 0x04	; 4
     43e:	18 f4       	brcc	.+6      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
                lastButtonState = 0xff;
                return 0;
            }
        }
        lanyardPos++;
        lanyardCnt++;            
     440:	90 93 28 38 	sts	0x3828, r25	; 0x803828 <__data_end>
     444:	65 c0       	rjmp	.+202    	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
        if (lanyardCnt >= 4) {
            lanyardCnt = 0;
     446:	10 92 28 38 	sts	0x3828, r1	; 0x803828 <__data_end>
            if (lanyardState == TRUE) {
     44a:	90 91 02 38 	lds	r25, 0x3802	; 0x803802 <lanyardState>
     44e:	91 30       	cpi	r25, 0x01	; 1
     450:	79 f5       	brne	.+94     	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
                iLED[HCKR[G][(lanyardPos/4)-1]] = 255;
     452:	e8 2f       	mov	r30, r24
     454:	e6 95       	lsr	r30
     456:	e6 95       	lsr	r30
     458:	f0 e0       	ldi	r31, 0x00	; 0
     45a:	ec 56       	subi	r30, 0x6C	; 108
     45c:	fd 44       	sbci	r31, 0x4D	; 77
     45e:	e5 81       	ldd	r30, Z+5	; 0x05
     460:	f0 e0       	ldi	r31, 0x00	; 0
     462:	eb 54       	subi	r30, 0x4B	; 75
     464:	f5 4c       	sbci	r31, 0xC5	; 197
     466:	df ef       	ldi	r29, 0xFF	; 255
     468:	d0 83       	st	Z, r29
                if (lanyardPos == sizeof(lanyardCode)) {
     46a:	88 31       	cpi	r24, 0x18	; 24
     46c:	09 f0       	breq	.+2      	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
     46e:	50 c0       	rjmp	.+160    	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
                    UpdateState(LANYARD_COMPLETED);
     470:	8b e7       	ldi	r24, 0x7B	; 123
     472:	81 d6       	rcall	.+3330   	; 0x1176 <UpdateState>
                    iLED[GEM[G]]    = 0;
     474:	ec 2f       	mov	r30, r28
     476:	f0 e0       	ldi	r31, 0x00	; 0
     478:	eb 54       	subi	r30, 0x4B	; 75
     47a:	f5 4c       	sbci	r31, 0xC5	; 197
     47c:	10 82       	st	Z, r1
                    iLED[EYE[R][L]] = 0;
     47e:	e0 91 91 b2 	lds	r30, 0xB291	; 0x80b291 <__bss_end+0x778d>
     482:	f0 e0       	ldi	r31, 0x00	; 0
     484:	eb 54       	subi	r30, 0x4B	; 75
     486:	f5 4c       	sbci	r31, 0xC5	; 197
     488:	10 82       	st	Z, r1
                    iLED[EYE[R][R]] = 0;
     48a:	e0 91 90 b2 	lds	r30, 0xB290	; 0x80b290 <__bss_end+0x778c>
     48e:	f0 e0       	ldi	r31, 0x00	; 0
     490:	eb 54       	subi	r30, 0x4B	; 75
     492:	f5 4c       	sbci	r31, 0xC5	; 197
     494:	10 82       	st	Z, r1
                    iLED[EYE[G][L]] = 255;
     496:	e0 91 93 b2 	lds	r30, 0xB293	; 0x80b293 <__bss_end+0x778f>
     49a:	f0 e0       	ldi	r31, 0x00	; 0
     49c:	eb 54       	subi	r30, 0x4B	; 75
     49e:	f5 4c       	sbci	r31, 0xC5	; 197
     4a0:	d0 83       	st	Z, r29
                    iLED[EYE[G][R]] = 255;
     4a2:	e0 91 92 b2 	lds	r30, 0xB292	; 0x80b292 <__bss_end+0x778e>
     4a6:	f0 e0       	ldi	r31, 0x00	; 0
     4a8:	eb 54       	subi	r30, 0x4B	; 75
     4aa:	f5 4c       	sbci	r31, 0xC5	; 197
     4ac:	d0 83       	st	Z, r29
     4ae:	30 c0       	rjmp	.+96     	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
                    /*state = STATE_MUSIC;*/
                }
            } else {
                gameNow         = TEXT;
     4b0:	10 92 2f 38 	sts	0x382F, r1	; 0x80382f <gameNow>
                lanyardPos      = 0;
     4b4:	10 92 29 38 	sts	0x3829, r1	; 0x803829 <lanyardPos>
                lanyardState    = TRUE;
     4b8:	81 e0       	ldi	r24, 0x01	; 1
     4ba:	80 93 02 38 	sts	0x3802, r24	; 0x803802 <lanyardState>
                lastButtonState = 0xff;
                iLED[GEM[G]]    = 0;
     4be:	ec 2f       	mov	r30, r28
     4c0:	f0 e0       	ldi	r31, 0x00	; 0
     4c2:	eb 54       	subi	r30, 0x4B	; 75
     4c4:	f5 4c       	sbci	r31, 0xC5	; 197
     4c6:	10 82       	st	Z, r1
                iLED[EYE[G][L]] = 0;
     4c8:	e0 91 93 b2 	lds	r30, 0xB293	; 0x80b293 <__bss_end+0x778f>
     4cc:	f0 e0       	ldi	r31, 0x00	; 0
     4ce:	eb 54       	subi	r30, 0x4B	; 75
     4d0:	f5 4c       	sbci	r31, 0xC5	; 197
     4d2:	10 82       	st	Z, r1
                iLED[EYE[G][R]] = 0;
     4d4:	e0 91 92 b2 	lds	r30, 0xB292	; 0x80b292 <__bss_end+0x778e>
     4d8:	f0 e0       	ldi	r31, 0x00	; 0
     4da:	eb 54       	subi	r30, 0x4B	; 75
     4dc:	f5 4c       	sbci	r31, 0xC5	; 197
     4de:	10 82       	st	Z, r1
                iLED[EYE[R][L]] = 255;
     4e0:	e0 91 91 b2 	lds	r30, 0xB291	; 0x80b291 <__bss_end+0x778d>
     4e4:	f0 e0       	ldi	r31, 0x00	; 0
     4e6:	eb 54       	subi	r30, 0x4B	; 75
     4e8:	f5 4c       	sbci	r31, 0xC5	; 197
     4ea:	8f ef       	ldi	r24, 0xFF	; 255
     4ec:	80 83       	st	Z, r24
                iLED[EYE[R][R]] = 255;
     4ee:	e0 91 90 b2 	lds	r30, 0xB290	; 0x80b290 <__bss_end+0x778c>
     4f2:	f0 e0       	ldi	r31, 0x00	; 0
     4f4:	eb 54       	subi	r30, 0x4B	; 75
     4f6:	f5 4c       	sbci	r31, 0xC5	; 197
     4f8:	80 83       	st	Z, r24
     4fa:	aa e9       	ldi	r26, 0x9A	; 154
     4fc:	b2 eb       	ldi	r27, 0xB2	; 178
                for (int i=0; i<6; i++ )
                    iLED[HCKR[G][i]] = 0;
     4fe:	ed 91       	ld	r30, X+
     500:	f0 e0       	ldi	r31, 0x00	; 0
     502:	eb 54       	subi	r30, 0x4B	; 75
     504:	f5 4c       	sbci	r31, 0xC5	; 197
     506:	10 82       	st	Z, r1
                iLED[GEM[G]]    = 0;
                iLED[EYE[G][L]] = 0;
                iLED[EYE[G][R]] = 0;
                iLED[EYE[R][L]] = 255;
                iLED[EYE[R][R]] = 255;
                for (int i=0; i<6; i++ )
     508:	82 eb       	ldi	r24, 0xB2	; 178
     50a:	a0 3a       	cpi	r26, 0xA0	; 160
     50c:	b8 07       	cpc	r27, r24
     50e:	b9 f7       	brne	.-18     	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
                    iLED[HCKR[G][i]] = 0;
            }
        }
    }

    lastButtonState = buttonState;
     510:	80 91 07 38 	lds	r24, 0x3807	; 0x803807 <buttonState>
     514:	80 93 01 38 	sts	0x3801, r24	; 0x803801 <lastButtonState>
    return 0;
}
     518:	80 e0       	ldi	r24, 0x00	; 0
     51a:	df 91       	pop	r29
     51c:	cf 91       	pop	r28
     51e:	08 95       	ret

00000520 <MagnetMaze>:
uint8_t         mazeCnt = 0;
uint8_t         mazeState = TRUE;
uint8_t         inverted  = FALSE;

// Main game loop
uint8_t MagnetMaze(){
     520:	cf 93       	push	r28
     522:	df 93       	push	r29
    if (CheckState(MAZE_INACTIVE))
     524:	87 ef       	ldi	r24, 0xF7	; 247
     526:	2f d6       	rcall	.+3166   	; 0x1186 <CheckState>
     528:	81 11       	cpse	r24, r1
     52a:	35 c1       	rjmp	.+618    	; 0x796 <MagnetMaze+0x276>
        return 0;

    if (CheckState(MAZE_COMPLETED))
     52c:	8d e7       	ldi	r24, 0x7D	; 125
     52e:	2b d6       	rcall	.+3158   	; 0x1186 <CheckState>
     530:	81 11       	cpse	r24, r1
     532:	31 c1       	rjmp	.+610    	; 0x796 <MagnetMaze+0x276>
        return 0;

    if ( (gameNow != TEXT) && (gameNow != MAZE) )
     534:	80 91 2f 38 	lds	r24, 0x382F	; 0x80382f <gameNow>
     538:	82 30       	cpi	r24, 0x02	; 2
     53a:	08 f0       	brcs	.+2      	; 0x53e <MagnetMaze+0x1e>
     53c:	2c c1       	rjmp	.+600    	; 0x796 <MagnetMaze+0x276>
        return 0;

    if (calHall == 0)
     53e:	80 91 de 3a 	lds	r24, 0x3ADE	; 0x803ade <calHall>
     542:	90 91 df 3a 	lds	r25, 0x3ADF	; 0x803adf <calHall+0x1>
     546:	89 2b       	or	r24, r25
     548:	41 f4       	brne	.+16     	; 0x55a <MagnetMaze+0x3a>
        calHall = adcHall;
     54a:	80 91 8f 3a 	lds	r24, 0x3A8F	; 0x803a8f <adcHall>
     54e:	90 91 90 3a 	lds	r25, 0x3A90	; 0x803a90 <adcHall+0x1>
     552:	80 93 de 3a 	sts	0x3ADE, r24	; 0x803ade <calHall>
     556:	90 93 df 3a 	sts	0x3ADF, r25	; 0x803adf <calHall+0x1>

    int16_t valHall = adcHall - calHall;
     55a:	80 91 8f 3a 	lds	r24, 0x3A8F	; 0x803a8f <adcHall>
     55e:	90 91 90 3a 	lds	r25, 0x3A90	; 0x803a90 <adcHall+0x1>
     562:	20 91 de 3a 	lds	r18, 0x3ADE	; 0x803ade <calHall>
     566:	30 91 df 3a 	lds	r19, 0x3ADF	; 0x803adf <calHall+0x1>
     56a:	82 1b       	sub	r24, r18
     56c:	93 0b       	sbc	r25, r19
    switch (curHallState) {
     56e:	30 91 3c 38 	lds	r19, 0x383C	; 0x80383c <curHallState>
     572:	31 30       	cpi	r19, 0x01	; 1
     574:	89 f0       	breq	.+34     	; 0x598 <MagnetMaze+0x78>
     576:	18 f0       	brcs	.+6      	; 0x57e <MagnetMaze+0x5e>
     578:	32 30       	cpi	r19, 0x02	; 2
     57a:	c1 f0       	breq	.+48     	; 0x5ac <MagnetMaze+0x8c>
     57c:	1f c0       	rjmp	.+62     	; 0x5bc <MagnetMaze+0x9c>
        case 0: {
            if ( valHall + HALL_HIGH < 0 ) {
     57e:	84 3d       	cpi	r24, 0xD4	; 212
     580:	2e ef       	ldi	r18, 0xFE	; 254
     582:	92 07       	cpc	r25, r18
     584:	14 f4       	brge	.+4      	; 0x58a <MagnetMaze+0x6a>
                newHallState = 1;
     586:	81 e0       	ldi	r24, 0x01	; 1
     588:	04 c0       	rjmp	.+8      	; 0x592 <MagnetMaze+0x72>
            } else if ( valHall - HALL_HIGH > 0 ) {
     58a:	8d 32       	cpi	r24, 0x2D	; 45
     58c:	91 40       	sbci	r25, 0x01	; 1
     58e:	5c f0       	brlt	.+22     	; 0x5a6 <MagnetMaze+0x86>
                newHallState = 2;
     590:	82 e0       	ldi	r24, 0x02	; 2
     592:	80 93 3b 38 	sts	0x383B, r24	; 0x80383b <newHallState>
     596:	12 c0       	rjmp	.+36     	; 0x5bc <MagnetMaze+0x9c>
            }
            break;
        }
        
        case 1: {
            if ( valHall - HALL_HIGH > 0 ) {
     598:	8d 32       	cpi	r24, 0x2D	; 45
     59a:	21 e0       	ldi	r18, 0x01	; 1
     59c:	92 07       	cpc	r25, r18
     59e:	c4 f7       	brge	.-16     	; 0x590 <MagnetMaze+0x70>
                newHallState = 2;
            } else if ( valHall + HALL_LOW > 0 ) {
     5a0:	89 38       	cpi	r24, 0x89	; 137
     5a2:	9f 4f       	sbci	r25, 0xFF	; 255
     5a4:	84 f3       	brlt	.-32     	; 0x586 <MagnetMaze+0x66>
            if ( valHall + HALL_HIGH < 0 ) {
                newHallState = 1;
            } else if ( valHall - HALL_HIGH > 0 ) {
                newHallState = 2;
            } else {
                newHallState = 0;
     5a6:	10 92 3b 38 	sts	0x383B, r1	; 0x80383b <newHallState>
     5aa:	08 c0       	rjmp	.+16     	; 0x5bc <MagnetMaze+0x9c>
            }
            break;
        }
        
        case 2: {
            if ( valHall + HALL_HIGH < 0 ) {
     5ac:	84 3d       	cpi	r24, 0xD4	; 212
     5ae:	2e ef       	ldi	r18, 0xFE	; 254
     5b0:	92 07       	cpc	r25, r18
     5b2:	4c f3       	brlt	.-46     	; 0x586 <MagnetMaze+0x66>
                newHallState = 1;
            } else if ( valHall - HALL_LOW < 0 ) {
     5b4:	88 37       	cpi	r24, 0x78	; 120
     5b6:	91 05       	cpc	r25, r1
     5b8:	b4 f3       	brlt	.-20     	; 0x5a6 <MagnetMaze+0x86>
     5ba:	ea cf       	rjmp	.-44     	; 0x590 <MagnetMaze+0x70>
            break;
        }
    }

    /* activate led for hallstate */
    iLED[GEM[G]] = (newHallState ? 255 : 0);
     5bc:	c0 91 85 b2 	lds	r28, 0xB285	; 0x80b285 <__bss_end+0x7781>
     5c0:	ec 2f       	mov	r30, r28
     5c2:	f0 e0       	ldi	r31, 0x00	; 0
     5c4:	80 91 3b 38 	lds	r24, 0x383B	; 0x80383b <newHallState>
     5c8:	91 e0       	ldi	r25, 0x01	; 1
     5ca:	81 11       	cpse	r24, r1
     5cc:	01 c0       	rjmp	.+2      	; 0x5d0 <MagnetMaze+0xb0>
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	91 95       	neg	r25
     5d2:	eb 54       	subi	r30, 0x4B	; 75
     5d4:	f5 4c       	sbci	r31, 0xC5	; 197
     5d6:	90 83       	st	Z, r25


    /* Make the maze work regardless of badge orientation */
    if (newHallState != 0 && mazePos == 0 )
     5d8:	88 23       	and	r24, r24
     5da:	09 f4       	brne	.+2      	; 0x5de <MagnetMaze+0xbe>
     5dc:	a8 c0       	rjmp	.+336    	; 0x72e <MagnetMaze+0x20e>
     5de:	20 91 3a 38 	lds	r18, 0x383A	; 0x80383a <mazePos>
     5e2:	21 11       	cpse	r18, r1
     5e4:	06 c0       	rjmp	.+12     	; 0x5f2 <MagnetMaze+0xd2>
        inverted = (newHallState != mazeCode[0]) ? TRUE : FALSE;
     5e6:	91 e0       	ldi	r25, 0x01	; 1
     5e8:	81 30       	cpi	r24, 0x01	; 1
     5ea:	09 f4       	brne	.+2      	; 0x5ee <MagnetMaze+0xce>
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	90 93 38 38 	sts	0x3838, r25	; 0x803838 <inverted>

    if (newHallState != curHallState) {
     5f2:	38 17       	cp	r19, r24
     5f4:	09 f4       	brne	.+2      	; 0x5f8 <MagnetMaze+0xd8>
     5f6:	cf c0       	rjmp	.+414    	; 0x796 <MagnetMaze+0x276>
        curHallState = newHallState;
     5f8:	80 93 3c 38 	sts	0x383C, r24	; 0x80383c <curHallState>
        
        if (curHallState != 0) {
            gameNow = MAZE;
     5fc:	91 e0       	ldi	r25, 0x01	; 1
     5fe:	90 93 2f 38 	sts	0x382F, r25	; 0x80382f <gameNow>
            if ( (inverted ? curHallState^3 : curHallState) == mazeCode[mazePos]) {
     602:	90 91 38 38 	lds	r25, 0x3838	; 0x803838 <inverted>
     606:	99 23       	and	r25, r25
     608:	11 f0       	breq	.+4      	; 0x60e <MagnetMaze+0xee>
     60a:	93 e0       	ldi	r25, 0x03	; 3
     60c:	89 27       	eor	r24, r25
     60e:	90 e0       	ldi	r25, 0x00	; 0
     610:	e2 2f       	mov	r30, r18
     612:	f0 e0       	ldi	r31, 0x00	; 0
     614:	e0 56       	subi	r30, 0x60	; 96
     616:	fd 44       	sbci	r31, 0x4D	; 77
     618:	40 81       	ld	r20, Z
     61a:	50 e0       	ldi	r21, 0x00	; 0
     61c:	84 17       	cp	r24, r20
     61e:	95 07       	cpc	r25, r21
     620:	91 f4       	brne	.+36     	; 0x646 <MagnetMaze+0x126>
                mazeState &= TRUE;
     622:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <mazeState>
     626:	81 70       	andi	r24, 0x01	; 1
     628:	80 93 09 38 	sts	0x3809, r24	; 0x803809 <mazeState>
                iLED[EYE[R][L]] = 0;
     62c:	e0 91 91 b2 	lds	r30, 0xB291	; 0x80b291 <__bss_end+0x778d>
     630:	f0 e0       	ldi	r31, 0x00	; 0
     632:	eb 54       	subi	r30, 0x4B	; 75
     634:	f5 4c       	sbci	r31, 0xC5	; 197
     636:	10 82       	st	Z, r1
                iLED[EYE[R][R]] = 0;
     638:	e0 91 90 b2 	lds	r30, 0xB290	; 0x80b290 <__bss_end+0x778c>
     63c:	f0 e0       	ldi	r31, 0x00	; 0
     63e:	eb 54       	subi	r30, 0x4B	; 75
     640:	f5 4c       	sbci	r31, 0xC5	; 197
     642:	10 82       	st	Z, r1
     644:	02 c0       	rjmp	.+4      	; 0x64a <MagnetMaze+0x12a>
            } else {
                mazeState = FALSE;
     646:	10 92 09 38 	sts	0x3809, r1	; 0x803809 <mazeState>
                /* play tone BAD */
            }
            mazePos++;
     64a:	2f 5f       	subi	r18, 0xFF	; 255
     64c:	20 93 3a 38 	sts	0x383A, r18	; 0x80383a <mazePos>
            mazeCnt++;            
     650:	80 91 39 38 	lds	r24, 0x3839	; 0x803839 <mazeCnt>
     654:	8f 5f       	subi	r24, 0xFF	; 255
            if (mazeCnt >= 3) {
     656:	83 30       	cpi	r24, 0x03	; 3
     658:	18 f4       	brcc	.+6      	; 0x660 <MagnetMaze+0x140>
            } else {
                mazeState = FALSE;
                /* play tone BAD */
            }
            mazePos++;
            mazeCnt++;            
     65a:	80 93 39 38 	sts	0x3839, r24	; 0x803839 <mazeCnt>
     65e:	9b c0       	rjmp	.+310    	; 0x796 <MagnetMaze+0x276>
            if (mazeCnt >= 3) {
                mazeCnt = 0;
     660:	10 92 39 38 	sts	0x3839, r1	; 0x803839 <mazeCnt>
                if (mazeState == TRUE) {
     664:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <mazeState>
     668:	81 30       	cpi	r24, 0x01	; 1
     66a:	89 f5       	brne	.+98     	; 0x6ce <MagnetMaze+0x1ae>
                    /* play tone GOOD */
                    iLED[HCKR[G][(mazePos/3)-1]] = 255;
     66c:	eb ea       	ldi	r30, 0xAB	; 171
     66e:	2e 9f       	mul	r18, r30
     670:	e1 2d       	mov	r30, r1
     672:	11 24       	eor	r1, r1
     674:	e6 95       	lsr	r30
     676:	f0 e0       	ldi	r31, 0x00	; 0
     678:	ec 56       	subi	r30, 0x6C	; 108
     67a:	fd 44       	sbci	r31, 0x4D	; 77
     67c:	e5 81       	ldd	r30, Z+5	; 0x05
     67e:	f0 e0       	ldi	r31, 0x00	; 0
     680:	eb 54       	subi	r30, 0x4B	; 75
     682:	f5 4c       	sbci	r31, 0xC5	; 197
     684:	df ef       	ldi	r29, 0xFF	; 255
     686:	d0 83       	st	Z, r29
                    if (mazePos == sizeof(mazeCode)) {
     688:	22 31       	cpi	r18, 0x12	; 18
     68a:	09 f0       	breq	.+2      	; 0x68e <MagnetMaze+0x16e>
                        UpdateState(MAZE_COMPLETED);
     68c:	84 c0       	rjmp	.+264    	; 0x796 <MagnetMaze+0x276>
     68e:	8d e7       	ldi	r24, 0x7D	; 125
     690:	72 d5       	rcall	.+2788   	; 0x1176 <UpdateState>
                        iLED[GEM[G]]    = 0;
     692:	ec 2f       	mov	r30, r28
     694:	f0 e0       	ldi	r31, 0x00	; 0
     696:	eb 54       	subi	r30, 0x4B	; 75
     698:	f5 4c       	sbci	r31, 0xC5	; 197
     69a:	10 82       	st	Z, r1
                        iLED[EYE[R][L]] = 0;
     69c:	e0 91 91 b2 	lds	r30, 0xB291	; 0x80b291 <__bss_end+0x778d>
     6a0:	f0 e0       	ldi	r31, 0x00	; 0
     6a2:	eb 54       	subi	r30, 0x4B	; 75
     6a4:	f5 4c       	sbci	r31, 0xC5	; 197
     6a6:	10 82       	st	Z, r1
                        iLED[EYE[R][R]] = 0;
     6a8:	e0 91 90 b2 	lds	r30, 0xB290	; 0x80b290 <__bss_end+0x778c>
     6ac:	f0 e0       	ldi	r31, 0x00	; 0
     6ae:	eb 54       	subi	r30, 0x4B	; 75
     6b0:	f5 4c       	sbci	r31, 0xC5	; 197
     6b2:	10 82       	st	Z, r1
                        iLED[EYE[G][L]] = 255;
     6b4:	e0 91 93 b2 	lds	r30, 0xB293	; 0x80b293 <__bss_end+0x778f>
     6b8:	f0 e0       	ldi	r31, 0x00	; 0
     6ba:	eb 54       	subi	r30, 0x4B	; 75
     6bc:	f5 4c       	sbci	r31, 0xC5	; 197
     6be:	d0 83       	st	Z, r29
                        iLED[EYE[G][R]] = 255;
     6c0:	e0 91 92 b2 	lds	r30, 0xB292	; 0x80b292 <__bss_end+0x778e>
     6c4:	f0 e0       	ldi	r31, 0x00	; 0
     6c6:	eb 54       	subi	r30, 0x4B	; 75
     6c8:	f5 4c       	sbci	r31, 0xC5	; 197
     6ca:	d0 83       	st	Z, r29
     6cc:	64 c0       	rjmp	.+200    	; 0x796 <MagnetMaze+0x276>
                        /*state = STATE_MUSIC;*/
                    }
                } else {
                    gameNow   = TEXT;
     6ce:	10 92 2f 38 	sts	0x382F, r1	; 0x80382f <gameNow>
                    mazePos   = 0;
     6d2:	10 92 3a 38 	sts	0x383A, r1	; 0x80383a <mazePos>
                    mazeState = TRUE;
     6d6:	81 e0       	ldi	r24, 0x01	; 1
     6d8:	80 93 09 38 	sts	0x3809, r24	; 0x803809 <mazeState>
                    iLED[GEM[G]]    = 0;
     6dc:	d0 e0       	ldi	r29, 0x00	; 0
     6de:	cb 54       	subi	r28, 0x4B	; 75
     6e0:	d5 4c       	sbci	r29, 0xC5	; 197
     6e2:	18 82       	st	Y, r1
                    iLED[EYE[G][L]] = 0;
     6e4:	e0 91 93 b2 	lds	r30, 0xB293	; 0x80b293 <__bss_end+0x778f>
     6e8:	f0 e0       	ldi	r31, 0x00	; 0
     6ea:	eb 54       	subi	r30, 0x4B	; 75
     6ec:	f5 4c       	sbci	r31, 0xC5	; 197
     6ee:	10 82       	st	Z, r1
                    iLED[EYE[G][R]] = 0;
     6f0:	e0 91 92 b2 	lds	r30, 0xB292	; 0x80b292 <__bss_end+0x778e>
     6f4:	f0 e0       	ldi	r31, 0x00	; 0
     6f6:	eb 54       	subi	r30, 0x4B	; 75
     6f8:	f5 4c       	sbci	r31, 0xC5	; 197
     6fa:	10 82       	st	Z, r1
                    iLED[EYE[R][L]] = 255;
     6fc:	e0 91 91 b2 	lds	r30, 0xB291	; 0x80b291 <__bss_end+0x778d>
     700:	f0 e0       	ldi	r31, 0x00	; 0
     702:	eb 54       	subi	r30, 0x4B	; 75
     704:	f5 4c       	sbci	r31, 0xC5	; 197
     706:	8f ef       	ldi	r24, 0xFF	; 255
     708:	80 83       	st	Z, r24
                    iLED[EYE[R][R]] = 255;
     70a:	e0 91 90 b2 	lds	r30, 0xB290	; 0x80b290 <__bss_end+0x778c>
     70e:	f0 e0       	ldi	r31, 0x00	; 0
     710:	eb 54       	subi	r30, 0x4B	; 75
     712:	f5 4c       	sbci	r31, 0xC5	; 197
     714:	80 83       	st	Z, r24
     716:	aa e9       	ldi	r26, 0x9A	; 154
     718:	b2 eb       	ldi	r27, 0xB2	; 178
                    for (int i=0; i<6; i++ )
                        iLED[HCKR[G][i]] = 0;
     71a:	ed 91       	ld	r30, X+
     71c:	f0 e0       	ldi	r31, 0x00	; 0
     71e:	eb 54       	subi	r30, 0x4B	; 75
     720:	f5 4c       	sbci	r31, 0xC5	; 197
     722:	10 82       	st	Z, r1
                    iLED[GEM[G]]    = 0;
                    iLED[EYE[G][L]] = 0;
                    iLED[EYE[G][R]] = 0;
                    iLED[EYE[R][L]] = 255;
                    iLED[EYE[R][R]] = 255;
                    for (int i=0; i<6; i++ )
     724:	82 eb       	ldi	r24, 0xB2	; 178
     726:	a0 3a       	cpi	r26, 0xA0	; 160
     728:	b8 07       	cpc	r27, r24
     72a:	b9 f7       	brne	.-18     	; 0x71a <MagnetMaze+0x1fa>
     72c:	34 c0       	rjmp	.+104    	; 0x796 <MagnetMaze+0x276>

    /* Make the maze work regardless of badge orientation */
    if (newHallState != 0 && mazePos == 0 )
        inverted = (newHallState != mazeCode[0]) ? TRUE : FALSE;

    if (newHallState != curHallState) {
     72e:	33 23       	and	r19, r19
     730:	91 f1       	breq	.+100    	; 0x796 <MagnetMaze+0x276>
        curHallState = newHallState;
     732:	10 92 3c 38 	sts	0x383C, r1	; 0x80383c <curHallState>
                    for (int i=0; i<6; i++ )
                        iLED[HCKR[G][i]] = 0;
                }
            }
        } else {
            if (mazePos == sizeof(mazeCode)) {
     736:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <mazePos>
     73a:	82 31       	cpi	r24, 0x12	; 18
     73c:	61 f5       	brne	.+88     	; 0x796 <MagnetMaze+0x276>
                gameNow   = TEXT;
     73e:	10 92 2f 38 	sts	0x382F, r1	; 0x80382f <gameNow>
                mazePos   = 0;
     742:	10 92 3a 38 	sts	0x383A, r1	; 0x80383a <mazePos>
                mazeState = TRUE;
     746:	81 e0       	ldi	r24, 0x01	; 1
     748:	80 93 09 38 	sts	0x3809, r24	; 0x803809 <mazeState>
                iLED[GEM[G]]    = 0;
     74c:	10 82       	st	Z, r1
                iLED[EYE[G][L]] = 0;
     74e:	e0 91 93 b2 	lds	r30, 0xB293	; 0x80b293 <__bss_end+0x778f>
     752:	f0 e0       	ldi	r31, 0x00	; 0
     754:	eb 54       	subi	r30, 0x4B	; 75
     756:	f5 4c       	sbci	r31, 0xC5	; 197
     758:	10 82       	st	Z, r1
                iLED[EYE[G][R]] = 0;
     75a:	e0 91 92 b2 	lds	r30, 0xB292	; 0x80b292 <__bss_end+0x778e>
     75e:	f0 e0       	ldi	r31, 0x00	; 0
     760:	eb 54       	subi	r30, 0x4B	; 75
     762:	f5 4c       	sbci	r31, 0xC5	; 197
     764:	10 82       	st	Z, r1
                iLED[EYE[R][L]] = 0;
     766:	e0 91 91 b2 	lds	r30, 0xB291	; 0x80b291 <__bss_end+0x778d>
     76a:	f0 e0       	ldi	r31, 0x00	; 0
     76c:	eb 54       	subi	r30, 0x4B	; 75
     76e:	f5 4c       	sbci	r31, 0xC5	; 197
     770:	10 82       	st	Z, r1
                iLED[EYE[R][R]] = 0;
     772:	e0 91 90 b2 	lds	r30, 0xB290	; 0x80b290 <__bss_end+0x778c>
     776:	f0 e0       	ldi	r31, 0x00	; 0
     778:	eb 54       	subi	r30, 0x4B	; 75
     77a:	f5 4c       	sbci	r31, 0xC5	; 197
     77c:	10 82       	st	Z, r1
     77e:	aa e9       	ldi	r26, 0x9A	; 154
     780:	b2 eb       	ldi	r27, 0xB2	; 178
     782:	80 ea       	ldi	r24, 0xA0	; 160
     784:	92 eb       	ldi	r25, 0xB2	; 178
                for (int i=0; i<6; i++ )
                    iLED[HCKR[G][i]] = 0;
     786:	ed 91       	ld	r30, X+
     788:	f0 e0       	ldi	r31, 0x00	; 0
     78a:	eb 54       	subi	r30, 0x4B	; 75
     78c:	f5 4c       	sbci	r31, 0xC5	; 197
     78e:	10 82       	st	Z, r1
                iLED[GEM[G]]    = 0;
                iLED[EYE[G][L]] = 0;
                iLED[EYE[G][R]] = 0;
                iLED[EYE[R][L]] = 0;
                iLED[EYE[R][R]] = 0;
                for (int i=0; i<6; i++ )
     790:	8a 17       	cp	r24, r26
     792:	9b 07       	cpc	r25, r27
     794:	c1 f7       	brne	.-16     	; 0x786 <MagnetMaze+0x266>
                    iLED[HCKR[G][i]] = 0;
            }
        }
    }
    return 0;
}
     796:	80 e0       	ldi	r24, 0x00	; 0
     798:	df 91       	pop	r29
     79a:	cf 91       	pop	r28
     79c:	08 95       	ret

0000079e <Setup>:
// Select "audio" input (0-2.5V)
void SelectAuIn(){
     VREF_CTRLA   = 0x22;    //0x22 for audio in/out (2.5V), 0x12 for temperature in, audio out (1.1V/2.5V)
     ADC0_CTRLA   &= ~(ADC_RESSEL_bm);
     ADC0_MUXPOS  = 0x07;    //Audio in: AIN7 at (0x07), Temperature: Internal sensor at (0x1E)
     adc0Chg = 1;
     79e:	cf 93       	push	r28
     7a0:	df 93       	push	r29
     7a2:	f8 94       	cli
     7a4:	88 ed       	ldi	r24, 0xD8	; 216
     7a6:	84 bf       	out	0x34, r24	; 52
     7a8:	c1 e0       	ldi	r28, 0x01	; 1
     7aa:	c0 93 61 00 	sts	0x0061, r28	; 0x800061 <__TEXT_REGION_LENGTH__+0x700061>
     7ae:	8a e4       	ldi	r24, 0x4A	; 74
     7b0:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <__TEXT_REGION_LENGTH__+0x700400>
     7b4:	8c e7       	ldi	r24, 0x7C	; 124
     7b6:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <__TEXT_REGION_LENGTH__+0x700420>
     7ba:	9f e3       	ldi	r25, 0x3F	; 63
     7bc:	90 93 40 04 	sts	0x0440, r25	; 0x800440 <__TEXT_REGION_LENGTH__+0x700440>
     7c0:	80 91 53 04 	lds	r24, 0x0453	; 0x800453 <__TEXT_REGION_LENGTH__+0x700453>
     7c4:	80 68       	ori	r24, 0x80	; 128
     7c6:	80 93 53 04 	sts	0x0453, r24	; 0x800453 <__TEXT_REGION_LENGTH__+0x700453>
     7ca:	80 91 54 04 	lds	r24, 0x0454	; 0x800454 <__TEXT_REGION_LENGTH__+0x700454>
     7ce:	80 68       	ori	r24, 0x80	; 128
     7d0:	80 93 54 04 	sts	0x0454, r24	; 0x800454 <__TEXT_REGION_LENGTH__+0x700454>
     7d4:	80 91 55 04 	lds	r24, 0x0455	; 0x800455 <__TEXT_REGION_LENGTH__+0x700455>
     7d8:	80 68       	ori	r24, 0x80	; 128
     7da:	80 93 55 04 	sts	0x0455, r24	; 0x800455 <__TEXT_REGION_LENGTH__+0x700455>
     7de:	80 91 33 04 	lds	r24, 0x0433	; 0x800433 <__TEXT_REGION_LENGTH__+0x700433>
     7e2:	80 68       	ori	r24, 0x80	; 128
     7e4:	80 93 33 04 	sts	0x0433, r24	; 0x800433 <__TEXT_REGION_LENGTH__+0x700433>
     7e8:	80 91 34 04 	lds	r24, 0x0434	; 0x800434 <__TEXT_REGION_LENGTH__+0x700434>
     7ec:	80 68       	ori	r24, 0x80	; 128
     7ee:	80 93 34 04 	sts	0x0434, r24	; 0x800434 <__TEXT_REGION_LENGTH__+0x700434>
     7f2:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <__TEXT_REGION_LENGTH__+0x700435>
     7f6:	80 68       	ori	r24, 0x80	; 128
     7f8:	80 93 35 04 	sts	0x0435, r24	; 0x800435 <__TEXT_REGION_LENGTH__+0x700435>
     7fc:	c0 93 01 02 	sts	0x0201, r28	; 0x800201 <__TEXT_REGION_LENGTH__+0x700201>
     800:	d2 e0       	ldi	r29, 0x02	; 2
     802:	d0 93 05 04 	sts	0x0405, r29	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
     806:	2b e5       	ldi	r18, 0x5B	; 91
     808:	31 e0       	ldi	r19, 0x01	; 1
     80a:	20 93 08 08 	sts	0x0808, r18	; 0x800808 <__TEXT_REGION_LENGTH__+0x700808>
     80e:	30 93 09 08 	sts	0x0809, r19	; 0x800809 <__TEXT_REGION_LENGTH__+0x700809>
     812:	80 ea       	ldi	r24, 0xA0	; 160
     814:	80 93 05 08 	sts	0x0805, r24	; 0x800805 <__TEXT_REGION_LENGTH__+0x700805>
     818:	80 ec       	ldi	r24, 0xC0	; 192
     81a:	80 93 06 08 	sts	0x0806, r24	; 0x800806 <__TEXT_REGION_LENGTH__+0x700806>
     81e:	83 e0       	ldi	r24, 0x03	; 3
     820:	80 93 07 08 	sts	0x0807, r24	; 0x800807 <__TEXT_REGION_LENGTH__+0x700807>
     824:	1c ba       	out	0x1c, r1	; 28
     826:	1d ba       	out	0x1d, r1	; 29
     828:	1e ba       	out	0x1e, r1	; 30
     82a:	1f ba       	out	0x1f, r1	; 31
     82c:	c0 93 03 0a 	sts	0x0A03, r28	; 0x800a03 <__TEXT_REGION_LENGTH__+0x700a03>
     830:	88 e0       	ldi	r24, 0x08	; 8
     832:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
     836:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <__TEXT_REGION_LENGTH__+0x700202>
     83a:	87 e7       	ldi	r24, 0x77	; 119
     83c:	80 93 01 0a 	sts	0x0A01, r24	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
     840:	c0 93 0a 0a 	sts	0x0A0A, r28	; 0x800a0a <__TEXT_REGION_LENGTH__+0x700a0a>
     844:	8b e0       	ldi	r24, 0x0B	; 11
     846:	80 93 05 0a 	sts	0x0A05, r24	; 0x800a05 <__TEXT_REGION_LENGTH__+0x700a05>
     84a:	80 91 00 0a 	lds	r24, 0x0A00	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
     84e:	81 60       	ori	r24, 0x01	; 1
     850:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
     854:	85 e0       	ldi	r24, 0x05	; 5
     856:	80 93 40 0a 	sts	0x0A40, r24	; 0x800a40 <__TEXT_REGION_LENGTH__+0x700a40>
     85a:	10 92 41 0a 	sts	0x0A41, r1	; 0x800a41 <__TEXT_REGION_LENGTH__+0x700a41>
     85e:	8f ef       	ldi	r24, 0xFF	; 255
     860:	91 e0       	ldi	r25, 0x01	; 1
     862:	80 93 4c 0a 	sts	0x0A4C, r24	; 0x800a4c <__TEXT_REGION_LENGTH__+0x700a4c>
     866:	90 93 4d 0a 	sts	0x0A4D, r25	; 0x800a4d <__TEXT_REGION_LENGTH__+0x700a4d>
     86a:	10 92 45 0a 	sts	0x0A45, r1	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
     86e:	c0 93 50 0a 	sts	0x0A50, r28	; 0x800a50 <__TEXT_REGION_LENGTH__+0x700a50>
     872:	10 92 51 0a 	sts	0x0A51, r1	; 0x800a51 <__TEXT_REGION_LENGTH__+0x700a51>
     876:	8b e8       	ldi	r24, 0x8B	; 139
     878:	93 e0       	ldi	r25, 0x03	; 3
     87a:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
     87e:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
     882:	c0 93 55 0a 	sts	0x0A55, r28	; 0x800a55 <__TEXT_REGION_LENGTH__+0x700a55>
     886:	18 dc       	rcall	.-2000   	; 0xb8 <I2C_init>
     888:	82 e1       	ldi	r24, 0x12	; 18
     88a:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     88e:	80 e2       	ldi	r24, 0x20	; 32
     890:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     894:	c0 93 a1 00 	sts	0x00A1, r28	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
     898:	86 e0       	ldi	r24, 0x06	; 6
     89a:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
     89e:	84 e4       	ldi	r24, 0x44	; 68
     8a0:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__TEXT_REGION_LENGTH__+0x700602>
     8a4:	8e e1       	ldi	r24, 0x1E	; 30
     8a6:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
     8aa:	c0 93 0a 06 	sts	0x060A, r28	; 0x80060a <__TEXT_REGION_LENGTH__+0x70060a>
     8ae:	80 91 00 06 	lds	r24, 0x0600	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
     8b2:	81 60       	ori	r24, 0x01	; 1
     8b4:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
     8b8:	c0 93 08 06 	sts	0x0608, r28	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
     8bc:	10 92 40 06 	sts	0x0640, r1	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
     8c0:	d0 93 41 06 	sts	0x0641, r29	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
     8c4:	82 e5       	ldi	r24, 0x52	; 82
     8c6:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <__TEXT_REGION_LENGTH__+0x700642>
     8ca:	84 e0       	ldi	r24, 0x04	; 4
     8cc:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
     8d0:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     8d4:	c0 93 4a 06 	sts	0x064A, r28	; 0x80064a <__TEXT_REGION_LENGTH__+0x70064a>
     8d8:	80 91 40 06 	lds	r24, 0x0640	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
     8dc:	81 60       	ori	r24, 0x01	; 1
     8de:	80 93 40 06 	sts	0x0640, r24	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
     8e2:	c0 93 48 06 	sts	0x0648, r28	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
     8e6:	80 e4       	ldi	r24, 0x40	; 64
     8e8:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
     8ec:	80 e8       	ldi	r24, 0x80	; 128
     8ee:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
     8f2:	80 91 a0 06 	lds	r24, 0x06A0	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
     8f6:	81 60       	ori	r24, 0x01	; 1
     8f8:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
     8fc:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     900:	80 fd       	sbrc	r24, 0
     902:	fc cf       	rjmp	.-8      	; 0x8fc <Setup+0x15e>
     904:	80 e3       	ldi	r24, 0x30	; 48
     906:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__TEXT_REGION_LENGTH__+0x700140>
     90a:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <__TEXT_REGION_LENGTH__+0x700147>
     90e:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     912:	82 fd       	sbrc	r24, 2
     914:	fc cf       	rjmp	.-8      	; 0x90e <Setup+0x170>
     916:	80 e0       	ldi	r24, 0x00	; 0
     918:	98 e7       	ldi	r25, 0x78	; 120
     91a:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     91e:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
     922:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     926:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     92a:	60 91 4a 01 	lds	r22, 0x014A	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     92e:	70 91 4b 01 	lds	r23, 0x014B	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
     932:	82 96       	adiw	r24, 0x22	; 34
     934:	0e 94 f5 18 	call	0x31ea	; 0x31ea <__udivmodhi4>
     938:	80 93 e1 3a 	sts	0x3AE1, r24	; 0x803ae1 <tmp16bit>
     93c:	90 93 e2 3a 	sts	0x3AE2, r25	; 0x803ae2 <tmp16bit+0x1>
     940:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     944:	83 fd       	sbrc	r24, 3
     946:	fc cf       	rjmp	.-8      	; 0x940 <Setup+0x1a2>
     948:	80 91 e1 3a 	lds	r24, 0x3AE1	; 0x803ae1 <tmp16bit>
     94c:	90 91 e2 3a 	lds	r25, 0x3AE2	; 0x803ae2 <tmp16bit+0x1>
     950:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     954:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     958:	83 e0       	ldi	r24, 0x03	; 3
     95a:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     95e:	81 e0       	ldi	r24, 0x01	; 1
     960:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <__TEXT_REGION_LENGTH__+0x700152>
     964:	88 e0       	ldi	r24, 0x08	; 8
     966:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__TEXT_REGION_LENGTH__+0x700150>
     96a:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     96e:	80 fd       	sbrc	r24, 0
     970:	fc cf       	rjmp	.-8      	; 0x96a <Setup+0x1cc>
     972:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <__TEXT_REGION_LENGTH__+0x700140>
     976:	81 60       	ori	r24, 0x01	; 1
     978:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__TEXT_REGION_LENGTH__+0x700140>
     97c:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <__TEXT_REGION_LENGTH__+0x700150>
     980:	81 60       	ori	r24, 0x01	; 1
     982:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__TEXT_REGION_LENGTH__+0x700150>
     986:	10 92 49 3a 	sts	0x3A49, r1	; 0x803a49 <serRx>
     98a:	89 e4       	ldi	r24, 0x49	; 73
     98c:	9a e3       	ldi	r25, 0x3A	; 58
     98e:	80 93 8d 3a 	sts	0x3A8D, r24	; 0x803a8d <serTxAddr>
     992:	90 93 8e 3a 	sts	0x3A8E, r25	; 0x803a8e <serTxAddr+0x1>
     996:	78 94       	sei
     998:	df 91       	pop	r29
     99a:	cf 91       	pop	r28
     99c:	08 95       	ret

0000099e <__vector_8>:
     99e:	1f 92       	push	r1
     9a0:	0f 92       	push	r0
     9a2:	0f b6       	in	r0, 0x3f	; 63
     9a4:	0f 92       	push	r0
     9a6:	11 24       	eor	r1, r1
     9a8:	8f 93       	push	r24
     9aa:	9f 93       	push	r25
     9ac:	af 93       	push	r26
     9ae:	bf 93       	push	r27
     9b0:	ef 93       	push	r30
     9b2:	ff 93       	push	r31
     9b4:	87 e0       	ldi	r24, 0x07	; 7
     9b6:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x700446>
     9ba:	84 e4       	ldi	r24, 0x44	; 68
     9bc:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
     9c0:	ec b3       	in	r30, 0x1c	; 28
     9c2:	88 e0       	ldi	r24, 0x08	; 8
     9c4:	e8 9f       	mul	r30, r24
     9c6:	f0 01       	movw	r30, r0
     9c8:	11 24       	eor	r1, r1
     9ca:	eb 54       	subi	r30, 0x4B	; 75
     9cc:	f5 4c       	sbci	r31, 0xC5	; 197
     9ce:	a8 e2       	ldi	r26, 0x28	; 40
     9d0:	ba e0       	ldi	r27, 0x0A	; 10
     9d2:	96 e0       	ldi	r25, 0x06	; 6
     9d4:	81 91       	ld	r24, Z+
     9d6:	8d 93       	st	X+, r24
     9d8:	9a 95       	dec	r25
     9da:	e1 f7       	brne	.-8      	; 0x9d4 <__vector_8+0x36>
     9dc:	8b e0       	ldi	r24, 0x0B	; 11
     9de:	80 93 05 0a 	sts	0x0A05, r24	; 0x800a05 <__TEXT_REGION_LENGTH__+0x700a05>
     9e2:	8c b3       	in	r24, 0x1c	; 28
     9e4:	83 30       	cpi	r24, 0x03	; 3
     9e6:	58 f4       	brcc	.+22     	; 0x9fe <__vector_8+0x60>
     9e8:	8c b3       	in	r24, 0x1c	; 28
     9ea:	91 e0       	ldi	r25, 0x01	; 1
     9ec:	01 c0       	rjmp	.+2      	; 0x9f0 <__vector_8+0x52>
     9ee:	99 0f       	add	r25, r25
     9f0:	8a 95       	dec	r24
     9f2:	ea f7       	brpl	.-6      	; 0x9ee <__vector_8+0x50>
     9f4:	99 b9       	out	0x09, r25	; 9
     9f6:	8c b3       	in	r24, 0x1c	; 28
     9f8:	83 95       	inc	r24
     9fa:	8c bb       	out	0x1c, r24	; 28
     9fc:	0a c0       	rjmp	.+20     	; 0xa12 <__vector_8+0x74>
     9fe:	8c b3       	in	r24, 0x1c	; 28
     a00:	83 30       	cpi	r24, 0x03	; 3
     a02:	21 f4       	brne	.+8      	; 0xa0c <__vector_8+0x6e>
     a04:	2a 9a       	sbi	0x05, 2	; 5
     a06:	83 95       	inc	r24
     a08:	8c bb       	out	0x1c, r24	; 28
     a0a:	03 c0       	rjmp	.+6      	; 0xa12 <__vector_8+0x74>
     a0c:	2e 9a       	sbi	0x05, 6	; 5
     a0e:	88 27       	eor	r24, r24
     a10:	8c bb       	out	0x1c, r24	; 28
     a12:	80 91 34 3a 	lds	r24, 0x3A34	; 0x803a34 <timeout_I2C>
     a16:	88 23       	and	r24, r24
     a18:	29 f0       	breq	.+10     	; 0xa24 <__vector_8+0x86>
     a1a:	80 91 34 3a 	lds	r24, 0x3A34	; 0x803a34 <timeout_I2C>
     a1e:	81 50       	subi	r24, 0x01	; 1
     a20:	80 93 34 3a 	sts	0x3A34, r24	; 0x803a34 <timeout_I2C>
     a24:	8f ef       	ldi	r24, 0xFF	; 255
     a26:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <__TEXT_REGION_LENGTH__+0x700a0b>
     a2a:	ff 91       	pop	r31
     a2c:	ef 91       	pop	r30
     a2e:	bf 91       	pop	r27
     a30:	af 91       	pop	r26
     a32:	9f 91       	pop	r25
     a34:	8f 91       	pop	r24
     a36:	0f 90       	pop	r0
     a38:	0f be       	out	0x3f, r0	; 63
     a3a:	0f 90       	pop	r0
     a3c:	1f 90       	pop	r1
     a3e:	18 95       	reti

00000a40 <__vector_13>:
     a40:	1f 92       	push	r1
     a42:	0f 92       	push	r0
     a44:	0f b6       	in	r0, 0x3f	; 63
     a46:	0f 92       	push	r0
     a48:	11 24       	eor	r1, r1
     a4a:	8f 93       	push	r24
     a4c:	9f 93       	push	r25
     a4e:	ef 93       	push	r30
     a50:	ff 93       	push	r31
     a52:	e0 91 8d 3a 	lds	r30, 0x3A8D	; 0x803a8d <serTxAddr>
     a56:	f0 91 8e 3a 	lds	r31, 0x3A8E	; 0x803a8e <serTxAddr+0x1>
     a5a:	80 81       	ld	r24, Z
     a5c:	88 23       	and	r24, r24
     a5e:	91 f0       	breq	.+36     	; 0xa84 <__vector_13+0x44>
     a60:	80 81       	ld	r24, Z
     a62:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
     a66:	80 91 8d 3a 	lds	r24, 0x3A8D	; 0x803a8d <serTxAddr>
     a6a:	90 91 8e 3a 	lds	r25, 0x3A8E	; 0x803a8e <serTxAddr+0x1>
     a6e:	01 96       	adiw	r24, 0x01	; 1
     a70:	80 93 8d 3a 	sts	0x3A8D, r24	; 0x803a8d <serTxAddr>
     a74:	90 93 8e 3a 	sts	0x3A8E, r25	; 0x803a8e <serTxAddr+0x1>
     a78:	80 91 05 08 	lds	r24, 0x0805	; 0x800805 <__TEXT_REGION_LENGTH__+0x700805>
     a7c:	80 62       	ori	r24, 0x20	; 32
     a7e:	80 93 05 08 	sts	0x0805, r24	; 0x800805 <__TEXT_REGION_LENGTH__+0x700805>
     a82:	05 c0       	rjmp	.+10     	; 0xa8e <__vector_13+0x4e>
     a84:	81 e0       	ldi	r24, 0x01	; 1
     a86:	80 93 08 38 	sts	0x3808, r24	; 0x803808 <serTxDone>
     a8a:	10 92 45 0a 	sts	0x0A45, r1	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
     a8e:	81 e0       	ldi	r24, 0x01	; 1
     a90:	80 93 46 0a 	sts	0x0A46, r24	; 0x800a46 <__TEXT_REGION_LENGTH__+0x700a46>
     a94:	ff 91       	pop	r31
     a96:	ef 91       	pop	r30
     a98:	9f 91       	pop	r25
     a9a:	8f 91       	pop	r24
     a9c:	0f 90       	pop	r0
     a9e:	0f be       	out	0x3f, r0	; 63
     aa0:	0f 90       	pop	r0
     aa2:	1f 90       	pop	r1
     aa4:	18 95       	reti

00000aa6 <__vector_14>:
     aa6:	1f 92       	push	r1
     aa8:	0f 92       	push	r0
     aaa:	0f b6       	in	r0, 0x3f	; 63
     aac:	0f 92       	push	r0
     aae:	11 24       	eor	r1, r1
     ab0:	2f 93       	push	r18
     ab2:	3f 93       	push	r19
     ab4:	4f 93       	push	r20
     ab6:	8f 93       	push	r24
     ab8:	9f 93       	push	r25
     aba:	ef 93       	push	r30
     abc:	ff 93       	push	r31
     abe:	e0 91 05 38 	lds	r30, 0x3805	; 0x803805 <auSmpAddr>
     ac2:	f0 91 06 38 	lds	r31, 0x3806	; 0x803806 <auSmpAddr+0x1>
     ac6:	80 81       	ld	r24, Z
     ac8:	81 11       	cpse	r24, r1
     aca:	08 c0       	rjmp	.+16     	; 0xadc <__vector_14+0x36>
     acc:	80 91 03 38 	lds	r24, 0x3803	; 0x803803 <auRepAddr>
     ad0:	90 91 04 38 	lds	r25, 0x3804	; 0x803804 <auRepAddr+0x1>
     ad4:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <auSmpAddr>
     ad8:	90 93 06 38 	sts	0x3806, r25	; 0x803806 <auSmpAddr+0x1>
     adc:	e0 91 05 38 	lds	r30, 0x3805	; 0x803805 <auSmpAddr>
     ae0:	f0 91 06 38 	lds	r31, 0x3806	; 0x803806 <auSmpAddr+0x1>
     ae4:	80 81       	ld	r24, Z
     ae6:	88 23       	and	r24, r24
     ae8:	e1 f0       	breq	.+56     	; 0xb22 <__vector_14+0x7c>
     aea:	20 81       	ld	r18, Z
     aec:	40 91 8a 3a 	lds	r20, 0x3A8A	; 0x803a8a <auVolume>
     af0:	30 e0       	ldi	r19, 0x00	; 0
     af2:	2f 57       	subi	r18, 0x7F	; 127
     af4:	31 09       	sbc	r19, r1
     af6:	42 9f       	mul	r20, r18
     af8:	c0 01       	movw	r24, r0
     afa:	43 9f       	mul	r20, r19
     afc:	90 0d       	add	r25, r0
     afe:	11 24       	eor	r1, r1
     b00:	89 2f       	mov	r24, r25
     b02:	99 0f       	add	r25, r25
     b04:	99 0b       	sbc	r25, r25
     b06:	80 58       	subi	r24, 0x80	; 128
     b08:	9f 4f       	sbci	r25, 0xFF	; 255
     b0a:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
     b0e:	80 91 05 38 	lds	r24, 0x3805	; 0x803805 <auSmpAddr>
     b12:	90 91 06 38 	lds	r25, 0x3806	; 0x803806 <auSmpAddr+0x1>
     b16:	01 96       	adiw	r24, 0x01	; 1
     b18:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <auSmpAddr>
     b1c:	90 93 06 38 	sts	0x3806, r25	; 0x803806 <auSmpAddr+0x1>
     b20:	06 c0       	rjmp	.+12     	; 0xb2e <__vector_14+0x88>
     b22:	80 e8       	ldi	r24, 0x80	; 128
     b24:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
     b28:	81 e0       	ldi	r24, 0x01	; 1
     b2a:	80 93 dd 3a 	sts	0x3ADD, r24	; 0x803add <auPlayDone>
     b2e:	81 e0       	ldi	r24, 0x01	; 1
     b30:	80 93 56 0a 	sts	0x0A56, r24	; 0x800a56 <__TEXT_REGION_LENGTH__+0x700a56>
     b34:	ff 91       	pop	r31
     b36:	ef 91       	pop	r30
     b38:	9f 91       	pop	r25
     b3a:	8f 91       	pop	r24
     b3c:	4f 91       	pop	r20
     b3e:	3f 91       	pop	r19
     b40:	2f 91       	pop	r18
     b42:	0f 90       	pop	r0
     b44:	0f be       	out	0x3f, r0	; 63
     b46:	0f 90       	pop	r0
     b48:	1f 90       	pop	r1
     b4a:	18 95       	reti

00000b4c <__vector_27>:
     b4c:	1f 92       	push	r1
     b4e:	0f 92       	push	r0
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	0f 92       	push	r0
     b54:	11 24       	eor	r1, r1
     b56:	8f 93       	push	r24
     b58:	ef 93       	push	r30
     b5a:	ff 93       	push	r31
     b5c:	80 91 37 38 	lds	r24, 0x3837	; 0x803837 <serRxDone>
     b60:	81 11       	cpse	r24, r1
     b62:	44 c0       	rjmp	.+136    	; 0xbec <__vector_27+0xa0>
     b64:	ed b3       	in	r30, 0x1d	; 29
     b66:	f0 e0       	ldi	r31, 0x00	; 0
     b68:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
     b6c:	e7 5b       	subi	r30, 0xB7	; 183
     b6e:	f5 4c       	sbci	r31, 0xC5	; 197
     b70:	80 83       	st	Z, r24
     b72:	ed b3       	in	r30, 0x1d	; 29
     b74:	f0 e0       	ldi	r31, 0x00	; 0
     b76:	e7 5b       	subi	r30, 0xB7	; 183
     b78:	f5 4c       	sbci	r31, 0xC5	; 197
     b7a:	80 81       	ld	r24, Z
     b7c:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
     b80:	ed b3       	in	r30, 0x1d	; 29
     b82:	f0 e0       	ldi	r31, 0x00	; 0
     b84:	e7 5b       	subi	r30, 0xB7	; 183
     b86:	f5 4c       	sbci	r31, 0xC5	; 197
     b88:	80 81       	ld	r24, Z
     b8a:	8a 30       	cpi	r24, 0x0A	; 10
     b8c:	39 f0       	breq	.+14     	; 0xb9c <__vector_27+0x50>
     b8e:	ed b3       	in	r30, 0x1d	; 29
     b90:	f0 e0       	ldi	r31, 0x00	; 0
     b92:	e7 5b       	subi	r30, 0xB7	; 183
     b94:	f5 4c       	sbci	r31, 0xC5	; 197
     b96:	80 81       	ld	r24, Z
     b98:	8d 30       	cpi	r24, 0x0D	; 13
     b9a:	49 f4       	brne	.+18     	; 0xbae <__vector_27+0x62>
     b9c:	ed b3       	in	r30, 0x1d	; 29
     b9e:	f0 e0       	ldi	r31, 0x00	; 0
     ba0:	e7 5b       	subi	r30, 0xB7	; 183
     ba2:	f5 4c       	sbci	r31, 0xC5	; 197
     ba4:	10 82       	st	Z, r1
     ba6:	81 e0       	ldi	r24, 0x01	; 1
     ba8:	80 93 37 38 	sts	0x3837, r24	; 0x803837 <serRxDone>
     bac:	1f c0       	rjmp	.+62     	; 0xbec <__vector_27+0xa0>
     bae:	ed b3       	in	r30, 0x1d	; 29
     bb0:	f0 e0       	ldi	r31, 0x00	; 0
     bb2:	e7 5b       	subi	r30, 0xB7	; 183
     bb4:	f5 4c       	sbci	r31, 0xC5	; 197
     bb6:	80 81       	ld	r24, Z
     bb8:	88 30       	cpi	r24, 0x08	; 8
     bba:	39 f0       	breq	.+14     	; 0xbca <__vector_27+0x7e>
     bbc:	ed b3       	in	r30, 0x1d	; 29
     bbe:	f0 e0       	ldi	r31, 0x00	; 0
     bc0:	e7 5b       	subi	r30, 0xB7	; 183
     bc2:	f5 4c       	sbci	r31, 0xC5	; 197
     bc4:	80 81       	ld	r24, Z
     bc6:	8f 37       	cpi	r24, 0x7F	; 127
     bc8:	59 f4       	brne	.+22     	; 0xbe0 <__vector_27+0x94>
     bca:	8d b3       	in	r24, 0x1d	; 29
     bcc:	88 23       	and	r24, r24
     bce:	41 f0       	breq	.+16     	; 0xbe0 <__vector_27+0x94>
     bd0:	ed b3       	in	r30, 0x1d	; 29
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	e7 5b       	subi	r30, 0xB7	; 183
     bd6:	f5 4c       	sbci	r31, 0xC5	; 197
     bd8:	10 82       	st	Z, r1
     bda:	8d b3       	in	r24, 0x1d	; 29
     bdc:	81 50       	subi	r24, 0x01	; 1
     bde:	05 c0       	rjmp	.+10     	; 0xbea <__vector_27+0x9e>
     be0:	8d b3       	in	r24, 0x1d	; 29
     be2:	80 34       	cpi	r24, 0x40	; 64
     be4:	18 f4       	brcc	.+6      	; 0xbec <__vector_27+0xa0>
     be6:	8d b3       	in	r24, 0x1d	; 29
     be8:	8f 5f       	subi	r24, 0xFF	; 255
     bea:	8d bb       	out	0x1d, r24	; 29
     bec:	80 e8       	ldi	r24, 0x80	; 128
     bee:	80 93 04 08 	sts	0x0804, r24	; 0x800804 <__TEXT_REGION_LENGTH__+0x700804>
     bf2:	ff 91       	pop	r31
     bf4:	ef 91       	pop	r30
     bf6:	8f 91       	pop	r24
     bf8:	0f 90       	pop	r0
     bfa:	0f be       	out	0x3f, r0	; 63
     bfc:	0f 90       	pop	r0
     bfe:	1f 90       	pop	r1
     c00:	18 95       	reti

00000c02 <__vector_28>:
     c02:	1f 92       	push	r1
     c04:	0f 92       	push	r0
     c06:	0f b6       	in	r0, 0x3f	; 63
     c08:	0f 92       	push	r0
     c0a:	11 24       	eor	r1, r1
     c0c:	8f 93       	push	r24
     c0e:	ef 93       	push	r30
     c10:	ff 93       	push	r31
     c12:	10 92 4a 0a 	sts	0x0A4A, r1	; 0x800a4a <__TEXT_REGION_LENGTH__+0x700a4a>
     c16:	10 92 4b 0a 	sts	0x0A4B, r1	; 0x800a4b <__TEXT_REGION_LENGTH__+0x700a4b>
     c1a:	81 e0       	ldi	r24, 0x01	; 1
     c1c:	80 93 45 0a 	sts	0x0A45, r24	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
     c20:	e5 e0       	ldi	r30, 0x05	; 5
     c22:	f8 e0       	ldi	r31, 0x08	; 8
     c24:	80 81       	ld	r24, Z
     c26:	8f 7d       	andi	r24, 0xDF	; 223
     c28:	80 83       	st	Z, r24
     c2a:	ff 91       	pop	r31
     c2c:	ef 91       	pop	r30
     c2e:	8f 91       	pop	r24
     c30:	0f 90       	pop	r0
     c32:	0f be       	out	0x3f, r0	; 63
     c34:	0f 90       	pop	r0
     c36:	1f 90       	pop	r1
     c38:	18 95       	reti

00000c3a <__vector_20>:
     c3a:	1f 92       	push	r1
     c3c:	0f 92       	push	r0
     c3e:	0f b6       	in	r0, 0x3f	; 63
     c40:	0f 92       	push	r0
     c42:	11 24       	eor	r1, r1
     c44:	8f 93       	push	r24
     c46:	ef 93       	push	r30
     c48:	ff 93       	push	r31
     c4a:	80 91 2a 38 	lds	r24, 0x382A	; 0x80382a <adc0Chg>
     c4e:	81 11       	cpse	r24, r1
     c50:	15 c0       	rjmp	.+42     	; 0xc7c <__vector_20+0x42>
     c52:	8e b3       	in	r24, 0x1e	; 30
     c54:	8f 5f       	subi	r24, 0xFF	; 255
     c56:	8f 71       	andi	r24, 0x1F	; 31
     c58:	8e bb       	out	0x1e, r24	; 30
     c5a:	80 91 06 06 	lds	r24, 0x0606	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
     c5e:	8e 31       	cpi	r24, 0x1E	; 30
     c60:	29 f4       	brne	.+10     	; 0xc6c <__vector_20+0x32>
     c62:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x700610>
     c66:	80 93 e0 3a 	sts	0x3AE0, r24	; 0x803ae0 <adcTemp>
     c6a:	0a c0       	rjmp	.+20     	; 0xc80 <__vector_20+0x46>
     c6c:	ee b3       	in	r30, 0x1e	; 30
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x700610>
     c74:	eb 56       	subi	r30, 0x6B	; 107
     c76:	f5 4c       	sbci	r31, 0xC5	; 197
     c78:	80 83       	st	Z, r24
     c7a:	02 c0       	rjmp	.+4      	; 0xc80 <__vector_20+0x46>
     c7c:	10 92 2a 38 	sts	0x382A, r1	; 0x80382a <adc0Chg>
     c80:	81 e0       	ldi	r24, 0x01	; 1
     c82:	80 93 0b 06 	sts	0x060B, r24	; 0x80060b <__TEXT_REGION_LENGTH__+0x70060b>
     c86:	ff 91       	pop	r31
     c88:	ef 91       	pop	r30
     c8a:	8f 91       	pop	r24
     c8c:	0f 90       	pop	r0
     c8e:	0f be       	out	0x3f, r0	; 63
     c90:	0f 90       	pop	r0
     c92:	1f 90       	pop	r1
     c94:	18 95       	reti

00000c96 <__vector_22>:
     c96:	1f 92       	push	r1
     c98:	0f 92       	push	r0
     c9a:	0f b6       	in	r0, 0x3f	; 63
     c9c:	0f 92       	push	r0
     c9e:	11 24       	eor	r1, r1
     ca0:	8f 93       	push	r24
     ca2:	9f 93       	push	r25
     ca4:	80 91 46 06 	lds	r24, 0x0646	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     ca8:	81 11       	cpse	r24, r1
     caa:	0a c0       	rjmp	.+20     	; 0xcc0 <__vector_22+0x2a>
     cac:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <__TEXT_REGION_LENGTH__+0x700650>
     cb0:	90 91 51 06 	lds	r25, 0x0651	; 0x800651 <__TEXT_REGION_LENGTH__+0x700651>
     cb4:	80 93 91 3a 	sts	0x3A91, r24	; 0x803a91 <adcPhot>
     cb8:	90 93 92 3a 	sts	0x3A92, r25	; 0x803a92 <adcPhot+0x1>
     cbc:	81 e0       	ldi	r24, 0x01	; 1
     cbe:	10 c0       	rjmp	.+32     	; 0xce0 <__vector_22+0x4a>
     cc0:	80 91 46 06 	lds	r24, 0x0646	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     cc4:	81 30       	cpi	r24, 0x01	; 1
     cc6:	79 f4       	brne	.+30     	; 0xce6 <__vector_22+0x50>
     cc8:	88 e0       	ldi	r24, 0x08	; 8
     cca:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x700406>
     cce:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <__TEXT_REGION_LENGTH__+0x700650>
     cd2:	90 91 51 06 	lds	r25, 0x0651	; 0x800651 <__TEXT_REGION_LENGTH__+0x700651>
     cd6:	80 93 8f 3a 	sts	0x3A8F, r24	; 0x803a8f <adcHall>
     cda:	90 93 90 3a 	sts	0x3A90, r25	; 0x803a90 <adcHall+0x1>
     cde:	84 e0       	ldi	r24, 0x04	; 4
     ce0:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     ce4:	10 c0       	rjmp	.+32     	; 0xd06 <__vector_22+0x70>
     ce6:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <__TEXT_REGION_LENGTH__+0x700650>
     cea:	90 91 51 06 	lds	r25, 0x0651	; 0x800651 <__TEXT_REGION_LENGTH__+0x700651>
     cee:	80 93 8b 3a 	sts	0x3A8B, r24	; 0x803a8b <adcBtns>
     cf2:	90 93 8c 3a 	sts	0x3A8C, r25	; 0x803a8c <adcBtns+0x1>
     cf6:	8f b3       	in	r24, 0x1f	; 31
     cf8:	8f 30       	cpi	r24, 0x0F	; 15
     cfa:	29 f4       	brne	.+10     	; 0xd06 <__vector_22+0x70>
     cfc:	10 92 46 06 	sts	0x0646, r1	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     d00:	88 e0       	ldi	r24, 0x08	; 8
     d02:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
     d06:	8f b3       	in	r24, 0x1f	; 31
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	01 96       	adiw	r24, 0x01	; 1
     d0c:	8f 70       	andi	r24, 0x0F	; 15
     d0e:	99 27       	eor	r25, r25
     d10:	8f bb       	out	0x1f, r24	; 31
     d12:	81 e0       	ldi	r24, 0x01	; 1
     d14:	80 93 4b 06 	sts	0x064B, r24	; 0x80064b <__TEXT_REGION_LENGTH__+0x70064b>
     d18:	9f 91       	pop	r25
     d1a:	8f 91       	pop	r24
     d1c:	0f 90       	pop	r0
     d1e:	0f be       	out	0x3f, r0	; 63
     d20:	0f 90       	pop	r0
     d22:	1f 90       	pop	r1
     d24:	18 95       	reti

00000d26 <__vector_6>:
     d26:	1f 92       	push	r1
     d28:	0f 92       	push	r0
     d2a:	0f b6       	in	r0, 0x3f	; 63
     d2c:	0f 92       	push	r0
     d2e:	11 24       	eor	r1, r1
     d30:	5f 93       	push	r21
     d32:	6f 93       	push	r22
     d34:	7f 93       	push	r23
     d36:	8f 93       	push	r24
     d38:	9f 93       	push	r25
     d3a:	af 93       	push	r26
     d3c:	bf 93       	push	r27
     d3e:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     d42:	81 ff       	sbrs	r24, 1
     d44:	26 c0       	rjmp	.+76     	; 0xd92 <__vector_6+0x6c>
     d46:	80 91 35 38 	lds	r24, 0x3835	; 0x803835 <buttonMark>
     d4a:	8f 3f       	cpi	r24, 0xFF	; 255
     d4c:	29 f0       	breq	.+10     	; 0xd58 <__vector_6+0x32>
     d4e:	80 91 35 38 	lds	r24, 0x3835	; 0x803835 <buttonMark>
     d52:	8f 5f       	subi	r24, 0xFF	; 255
     d54:	80 93 35 38 	sts	0x3835, r24	; 0x803835 <buttonMark>
     d58:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     d5c:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     d60:	60 91 4a 01 	lds	r22, 0x014A	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     d64:	70 91 4b 01 	lds	r23, 0x014B	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
     d68:	82 96       	adiw	r24, 0x22	; 34
     d6a:	0e 94 f5 18 	call	0x31ea	; 0x31ea <__udivmodhi4>
     d6e:	80 93 e1 3a 	sts	0x3AE1, r24	; 0x803ae1 <tmp16bit>
     d72:	90 93 e2 3a 	sts	0x3AE2, r25	; 0x803ae2 <tmp16bit+0x1>
     d76:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     d7a:	83 fd       	sbrc	r24, 3
     d7c:	fc cf       	rjmp	.-8      	; 0xd76 <__vector_6+0x50>
     d7e:	80 91 e1 3a 	lds	r24, 0x3AE1	; 0x803ae1 <tmp16bit>
     d82:	90 91 e2 3a 	lds	r25, 0x3AE2	; 0x803ae2 <tmp16bit+0x1>
     d86:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     d8a:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     d8e:	82 e0       	ldi	r24, 0x02	; 2
     d90:	06 c0       	rjmp	.+12     	; 0xd9e <__vector_6+0x78>
     d92:	80 91 36 38 	lds	r24, 0x3836	; 0x803836 <minuteMark>
     d96:	8f 5f       	subi	r24, 0xFF	; 255
     d98:	80 93 36 38 	sts	0x3836, r24	; 0x803836 <minuteMark>
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     da2:	bf 91       	pop	r27
     da4:	af 91       	pop	r26
     da6:	9f 91       	pop	r25
     da8:	8f 91       	pop	r24
     daa:	7f 91       	pop	r23
     dac:	6f 91       	pop	r22
     dae:	5f 91       	pop	r21
     db0:	0f 90       	pop	r0
     db2:	0f be       	out	0x3f, r0	; 63
     db4:	0f 90       	pop	r0
     db6:	1f 90       	pop	r1
     db8:	18 95       	reti

00000dba <__vector_7>:
     dba:	1f 92       	push	r1
     dbc:	0f 92       	push	r0
     dbe:	0f b6       	in	r0, 0x3f	; 63
     dc0:	0f 92       	push	r0
     dc2:	11 24       	eor	r1, r1
     dc4:	8f 93       	push	r24
     dc6:	81 e0       	ldi	r24, 0x01	; 1
     dc8:	80 93 48 06 	sts	0x0648, r24	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
     dcc:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <__TEXT_REGION_LENGTH__+0x700153>
     dd0:	8f 91       	pop	r24
     dd2:	0f 90       	pop	r0
     dd4:	0f be       	out	0x3f, r0	; 63
     dd6:	0f 90       	pop	r0
     dd8:	1f 90       	pop	r1
     dda:	18 95       	reti

00000ddc <EERead>:
     ddc:	90 91 02 10 	lds	r25, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x701002>
     de0:	91 fd       	sbrc	r25, 1
     de2:	fc cf       	rjmp	.-8      	; 0xddc <EERead>
     de4:	fb 01       	movw	r30, r22
     de6:	48 0f       	add	r20, r24
     de8:	84 17       	cp	r24, r20
     dea:	39 f0       	breq	.+14     	; 0xdfa <EERead+0x1e>
     dec:	a8 2f       	mov	r26, r24
     dee:	b0 e0       	ldi	r27, 0x00	; 0
     df0:	bc 5e       	subi	r27, 0xEC	; 236
     df2:	9c 91       	ld	r25, X
     df4:	91 93       	st	Z+, r25
     df6:	8f 5f       	subi	r24, 0xFF	; 255
     df8:	f7 cf       	rjmp	.-18     	; 0xde8 <EERead+0xc>
     dfa:	08 95       	ret

00000dfc <EEWrite>:
     dfc:	9d e9       	ldi	r25, 0x9D	; 157
     dfe:	24 e0       	ldi	r18, 0x04	; 4
     e00:	33 e0       	ldi	r19, 0x03	; 3
     e02:	44 23       	and	r20, r20
     e04:	09 f1       	breq	.+66     	; 0xe48 <EEWrite+0x4c>
     e06:	50 91 02 10 	lds	r21, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x701002>
     e0a:	51 fd       	sbrc	r21, 1
     e0c:	fc cf       	rjmp	.-8      	; 0xe06 <EEWrite+0xa>
     e0e:	94 bf       	out	0x34, r25	; 52
     e10:	20 93 00 10 	sts	0x1000, r18	; 0x801000 <__TEXT_REGION_LENGTH__+0x701000>
     e14:	e8 2f       	mov	r30, r24
     e16:	58 2f       	mov	r21, r24
     e18:	5f 71       	andi	r21, 0x1F	; 31
     e1a:	8f 5f       	subi	r24, 0xFF	; 255
     e1c:	6f 5f       	subi	r22, 0xFF	; 255
     e1e:	7f 4f       	sbci	r23, 0xFF	; 255
     e20:	db 01       	movw	r26, r22
     e22:	11 97       	sbiw	r26, 0x01	; 1
     e24:	ac 91       	ld	r26, X
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	fc 5e       	subi	r31, 0xEC	; 236
     e2a:	a0 83       	st	Z, r26
     e2c:	41 50       	subi	r20, 0x01	; 1
     e2e:	19 f0       	breq	.+6      	; 0xe36 <EEWrite+0x3a>
     e30:	e8 2f       	mov	r30, r24
     e32:	5f 31       	cpi	r21, 0x1F	; 31
     e34:	81 f7       	brne	.-32     	; 0xe16 <EEWrite+0x1a>
     e36:	94 bf       	out	0x34, r25	; 52
     e38:	30 93 00 10 	sts	0x1000, r19	; 0x801000 <__TEXT_REGION_LENGTH__+0x701000>
     e3c:	50 91 02 10 	lds	r21, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x701002>
     e40:	52 ff       	sbrs	r21, 2
     e42:	df cf       	rjmp	.-66     	; 0xe02 <EEWrite+0x6>
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	08 95       	ret
     e48:	80 e0       	ldi	r24, 0x00	; 0
     e4a:	08 95       	ret

00000e4c <SerSend>:
     e4c:	20 91 08 38 	lds	r18, 0x3808	; 0x803808 <serTxDone>
     e50:	22 23       	and	r18, r18
     e52:	59 f0       	breq	.+22     	; 0xe6a <SerSend+0x1e>
     e54:	80 93 8d 3a 	sts	0x3A8D, r24	; 0x803a8d <serTxAddr>
     e58:	90 93 8e 3a 	sts	0x3A8E, r25	; 0x803a8e <serTxAddr+0x1>
     e5c:	10 92 08 38 	sts	0x3808, r1	; 0x803808 <serTxDone>
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	80 93 45 0a 	sts	0x0A45, r24	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
     e66:	80 e0       	ldi	r24, 0x00	; 0
     e68:	08 95       	ret
     e6a:	81 e0       	ldi	r24, 0x01	; 1
     e6c:	08 95       	ret

00000e6e <SerSpeed>:
     e6e:	28 2f       	mov	r18, r24
     e70:	81 11       	cpse	r24, r1
     e72:	01 c0       	rjmp	.+2      	; 0xe76 <SerSpeed+0x8>
     e74:	21 e0       	ldi	r18, 0x01	; 1
     e76:	8f ef       	ldi	r24, 0xFF	; 255
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	82 1b       	sub	r24, r18
     e7c:	91 09       	sbc	r25, r1
     e7e:	98 2f       	mov	r25, r24
     e80:	88 27       	eor	r24, r24
     e82:	81 50       	subi	r24, 0x01	; 1
     e84:	9f 4f       	sbci	r25, 0xFF	; 255
     e86:	80 93 4c 0a 	sts	0x0A4C, r24	; 0x800a4c <__TEXT_REGION_LENGTH__+0x700a4c>
     e8a:	90 93 4d 0a 	sts	0x0A4D, r25	; 0x800a4d <__TEXT_REGION_LENGTH__+0x700a4d>
     e8e:	08 95       	ret

00000e90 <CheckButtons>:
};

// Returns button combination (4LSB) and number of consecutive times this combination is detected. First read should always be ignored! 
uint8_t CheckButtons(uint8_t previousValue){
    uint8_t bADC = (uint8_t)(adcBtns>>4);
     e90:	20 91 8b 3a 	lds	r18, 0x3A8B	; 0x803a8b <adcBtns>
     e94:	30 91 8c 3a 	lds	r19, 0x3A8C	; 0x803a8c <adcBtns+0x1>
    uint8_t bNibble = 0x0F;     //MSB to LSB: Bottom left, top left, top right, bottom right, 0F is error
    
    switch(bADC){
     e98:	94 e0       	ldi	r25, 0x04	; 4
     e9a:	36 95       	lsr	r19
     e9c:	27 95       	ror	r18
     e9e:	9a 95       	dec	r25
     ea0:	e1 f7       	brne	.-8      	; 0xe9a <CheckButtons+0xa>
     ea2:	33 27       	eor	r19, r19
     ea4:	2c 35       	cpi	r18, 0x5C	; 92
     ea6:	31 05       	cpc	r19, r1
     ea8:	d0 f4       	brcc	.+52     	; 0xede <CheckButtons+0x4e>
     eaa:	23 35       	cpi	r18, 0x53	; 83
     eac:	31 05       	cpc	r19, r1
     eae:	a8 f5       	brcc	.+106    	; 0xf1a <CheckButtons+0x8a>
     eb0:	22 33       	cpi	r18, 0x32	; 50
     eb2:	31 05       	cpc	r19, r1
     eb4:	50 f4       	brcc	.+20     	; 0xeca <CheckButtons+0x3a>
     eb6:	2d 32       	cpi	r18, 0x2D	; 45
     eb8:	31 05       	cpc	r19, r1
     eba:	58 f5       	brcc	.+86     	; 0xf12 <CheckButtons+0x82>
     ebc:	23 52       	subi	r18, 0x23	; 35
     ebe:	31 09       	sbc	r19, r1
     ec0:	25 30       	cpi	r18, 0x05	; 5
     ec2:	31 05       	cpc	r19, r1
     ec4:	80 f5       	brcc	.+96     	; 0xf26 <CheckButtons+0x96>

        case 35 ... 39:          //37: Both left
        bNibble = 0b1100;
     ec6:	9c e0       	ldi	r25, 0x0C	; 12
     ec8:	2f c0       	rjmp	.+94     	; 0xf28 <CheckButtons+0x98>
// Returns button combination (4LSB) and number of consecutive times this combination is detected. First read should always be ignored! 
uint8_t CheckButtons(uint8_t previousValue){
    uint8_t bADC = (uint8_t)(adcBtns>>4);
    uint8_t bNibble = 0x0F;     //MSB to LSB: Bottom left, top left, top right, bottom right, 0F is error
    
    switch(bADC){
     eca:	27 33       	cpi	r18, 0x37	; 55
     ecc:	31 05       	cpc	r19, r1
     ece:	18 f1       	brcs	.+70     	; 0xf16 <CheckButtons+0x86>
     ed0:	2e 53       	subi	r18, 0x3E	; 62
     ed2:	31 09       	sbc	r19, r1
     ed4:	27 30       	cpi	r18, 0x07	; 7
     ed6:	31 05       	cpc	r19, r1
     ed8:	30 f5       	brcc	.+76     	; 0xf26 <CheckButtons+0x96>
        case 50 ... 54:          //52: Bottom left
        bNibble = 0b1000;
        break;

        case 62 ... 68:          //65: Both top
        bNibble = 0b0110;
     eda:	96 e0       	ldi	r25, 0x06	; 6
        break;
     edc:	25 c0       	rjmp	.+74     	; 0xf28 <CheckButtons+0x98>
// Returns button combination (4LSB) and number of consecutive times this combination is detected. First read should always be ignored! 
uint8_t CheckButtons(uint8_t previousValue){
    uint8_t bADC = (uint8_t)(adcBtns>>4);
    uint8_t bNibble = 0x0F;     //MSB to LSB: Bottom left, top left, top right, bottom right, 0F is error
    
    switch(bADC){
     ede:	2a 38       	cpi	r18, 0x8A	; 138
     ee0:	31 05       	cpc	r19, r1
     ee2:	50 f4       	brcc	.+20     	; 0xef8 <CheckButtons+0x68>
     ee4:	29 37       	cpi	r18, 0x79	; 121
     ee6:	31 05       	cpc	r19, r1
     ee8:	d0 f4       	brcc	.+52     	; 0xf1e <CheckButtons+0x8e>
     eea:	23 56       	subi	r18, 0x63	; 99
     eec:	31 09       	sbc	r19, r1
     eee:	2b 30       	cpi	r18, 0x0B	; 11
     ef0:	31 05       	cpc	r19, r1
     ef2:	c8 f4       	brcc	.+50     	; 0xf26 <CheckButtons+0x96>
        case 83 ... 91:          //87: Top left
        bNibble = 0b0100;
        break;

        case 99 ... 109:         //104: Both right
        bNibble = 0b0011;
     ef4:	93 e0       	ldi	r25, 0x03	; 3
        break;
     ef6:	18 c0       	rjmp	.+48     	; 0xf28 <CheckButtons+0x98>
// Returns button combination (4LSB) and number of consecutive times this combination is detected. First read should always be ignored! 
uint8_t CheckButtons(uint8_t previousValue){
    uint8_t bADC = (uint8_t)(adcBtns>>4);
    uint8_t bNibble = 0x0F;     //MSB to LSB: Bottom left, top left, top right, bottom right, 0F is error
    
    switch(bADC){
     ef8:	22 3a       	cpi	r18, 0xA2	; 162
     efa:	31 05       	cpc	r19, r1
     efc:	a0 f0       	brcs	.+40     	; 0xf26 <CheckButtons+0x96>
     efe:	2b 3b       	cpi	r18, 0xBB	; 187
     f00:	31 05       	cpc	r19, r1
     f02:	78 f0       	brcs	.+30     	; 0xf22 <CheckButtons+0x92>
     f04:	20 5f       	subi	r18, 0xF0	; 240
     f06:	31 09       	sbc	r19, r1
     f08:	20 31       	cpi	r18, 0x10	; 16
     f0a:	31 05       	cpc	r19, r1
     f0c:	60 f4       	brcc	.+24     	; 0xf26 <CheckButtons+0x96>
        case 162 ... 186:        //174: Bottom right
        bNibble = 0b0001;
        break;

        case 240 ... 255:        //255: No button pressed
        bNibble = 0b0000;
     f0e:	90 e0       	ldi	r25, 0x00	; 0
        break;
     f10:	0b c0       	rjmp	.+22     	; 0xf28 <CheckButtons+0x98>
        case 35 ... 39:          //37: Both left
        bNibble = 0b1100;
        break;

        case 45 ... 49:          //47: Both bottom
        bNibble = 0b1001;
     f12:	99 e0       	ldi	r25, 0x09	; 9
        break;
     f14:	09 c0       	rjmp	.+18     	; 0xf28 <CheckButtons+0x98>

        case 50 ... 54:          //52: Bottom left
        bNibble = 0b1000;
     f16:	98 e0       	ldi	r25, 0x08	; 8
        break;
     f18:	07 c0       	rjmp	.+14     	; 0xf28 <CheckButtons+0x98>
        case 62 ... 68:          //65: Both top
        bNibble = 0b0110;
        break;

        case 83 ... 91:          //87: Top left
        bNibble = 0b0100;
     f1a:	94 e0       	ldi	r25, 0x04	; 4
        break;
     f1c:	05 c0       	rjmp	.+10     	; 0xf28 <CheckButtons+0x98>
        case 99 ... 109:         //104: Both right
        bNibble = 0b0011;
        break;

        case 121 ... 137:        //129: Top right
        bNibble = 0b0010;
     f1e:	92 e0       	ldi	r25, 0x02	; 2
        break;
     f20:	03 c0       	rjmp	.+6      	; 0xf28 <CheckButtons+0x98>

        case 162 ... 186:        //174: Bottom right
        bNibble = 0b0001;
     f22:	91 e0       	ldi	r25, 0x01	; 1
        break;
     f24:	01 c0       	rjmp	.+2      	; 0xf28 <CheckButtons+0x98>
};

// Returns button combination (4LSB) and number of consecutive times this combination is detected. First read should always be ignored! 
uint8_t CheckButtons(uint8_t previousValue){
    uint8_t bADC = (uint8_t)(adcBtns>>4);
    uint8_t bNibble = 0x0F;     //MSB to LSB: Bottom left, top left, top right, bottom right, 0F is error
     f26:	9f e0       	ldi	r25, 0x0F	; 15
        case 240 ... 255:        //255: No button pressed
        bNibble = 0b0000;
        break;
    }

    if ((previousValue&0x0F)==bNibble){
     f28:	28 2f       	mov	r18, r24
     f2a:	2f 70       	andi	r18, 0x0F	; 15
     f2c:	92 13       	cpse	r25, r18
     f2e:	06 c0       	rjmp	.+12     	; 0xf3c <CheckButtons+0xac>
        if ((previousValue&0xF0) < 0xF0) previousValue += 0x10; //Same value? Increase time nibble
     f30:	98 2f       	mov	r25, r24
     f32:	90 7f       	andi	r25, 0xF0	; 240
     f34:	90 3f       	cpi	r25, 0xF0	; 240
     f36:	39 f0       	breq	.+14     	; 0xf46 <CheckButtons+0xb6>
     f38:	80 5f       	subi	r24, 0xF0	; 240
     f3a:	08 95       	ret
        return previousValue;       
    } else if (bNibble == 0) return 0xFF; //Buttons released, 0xFF triggers readout, previousValue holds last button value.
     f3c:	99 23       	and	r25, r25
     f3e:	11 f0       	breq	.+4      	; 0xf44 <CheckButtons+0xb4>
     f40:	89 2f       	mov	r24, r25
     f42:	08 95       	ret
     f44:	8f ef       	ldi	r24, 0xFF	; 255
              else return bNibble;  //New value  
}
     f46:	08 95       	ret

00000f48 <lfsr>:

uint8_t lfsr(){
    static uint16_t state = 0xd401;
    state ^= (state << 13);
     f48:	80 91 1c 38 	lds	r24, 0x381C	; 0x80381c <state.3874>
     f4c:	90 91 1d 38 	lds	r25, 0x381D	; 0x80381d <state.3874+0x1>
     f50:	9c 01       	movw	r18, r24
     f52:	32 2f       	mov	r19, r18
     f54:	22 27       	eor	r18, r18
     f56:	32 95       	swap	r19
     f58:	33 0f       	add	r19, r19
     f5a:	30 7e       	andi	r19, 0xE0	; 224
     f5c:	82 27       	eor	r24, r18
     f5e:	93 27       	eor	r25, r19
    state ^= (state >> 9);
     f60:	9c 01       	movw	r18, r24
     f62:	23 2f       	mov	r18, r19
     f64:	33 27       	eor	r19, r19
     f66:	26 95       	lsr	r18
     f68:	82 27       	eor	r24, r18
     f6a:	93 27       	eor	r25, r19
    state ^= (state << 7);
     f6c:	9c 01       	movw	r18, r24
     f6e:	36 95       	lsr	r19
     f70:	32 2f       	mov	r19, r18
     f72:	22 27       	eor	r18, r18
     f74:	37 95       	ror	r19
     f76:	27 95       	ror	r18
     f78:	82 27       	eor	r24, r18
     f7a:	93 27       	eor	r25, r19
     f7c:	80 93 1c 38 	sts	0x381C, r24	; 0x80381c <state.3874>
     f80:	90 93 1d 38 	sts	0x381D, r25	; 0x80381d <state.3874+0x1>
    return (state & 0xff);
}
     f84:	08 95       	ret

00000f86 <floatSpeed>:

void floatSpeed(uint8_t bits, uint16_t min, uint16_t max){
     f86:	df 92       	push	r13
     f88:	ef 92       	push	r14
     f8a:	ff 92       	push	r15
     f8c:	0f 93       	push	r16
     f8e:	1f 93       	push	r17
     f90:	cf 93       	push	r28
     f92:	df 93       	push	r29
     f94:	7b 01       	movw	r14, r22
     f96:	8a 01       	movw	r16, r20
    uint16_t val = TCB1_CCMP;
     f98:	c0 91 5c 0a 	lds	r28, 0x0A5C	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
     f9c:	d0 91 5d 0a 	lds	r29, 0x0A5D	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
    bits = mask[(bits-1)&0x07];
     fa0:	e8 2f       	mov	r30, r24
     fa2:	f0 e0       	ldi	r31, 0x00	; 0
     fa4:	31 97       	sbiw	r30, 0x01	; 1
     fa6:	e7 70       	andi	r30, 0x07	; 7
     fa8:	ff 27       	eor	r31, r31
     faa:	e2 5e       	subi	r30, 0xE2	; 226
     fac:	f7 4c       	sbci	r31, 0xC7	; 199
     fae:	d0 80       	ld	r13, Z
    val += (lfsr()&bits);
     fb0:	cb df       	rcall	.-106    	; 0xf48 <lfsr>
     fb2:	8d 21       	and	r24, r13
     fb4:	c8 0f       	add	r28, r24
     fb6:	d1 1d       	adc	r29, r1
    val -= (lfsr()&bits);
     fb8:	c7 df       	rcall	.-114    	; 0xf48 <lfsr>
     fba:	8d 21       	and	r24, r13
     fbc:	c8 1b       	sub	r28, r24
     fbe:	d1 09       	sbc	r29, r1
     fc0:	0c 17       	cp	r16, r28
     fc2:	1d 07       	cpc	r17, r29
     fc4:	08 f4       	brcc	.+2      	; 0xfc8 <floatSpeed+0x42>
     fc6:	e8 01       	movw	r28, r16
     fc8:	c7 01       	movw	r24, r14
     fca:	ec 16       	cp	r14, r28
     fcc:	fd 06       	cpc	r15, r29
     fce:	08 f4       	brcc	.+2      	; 0xfd2 <floatSpeed+0x4c>
     fd0:	ce 01       	movw	r24, r28
     fd2:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    if (val > max) val = max;    //0x038B is normal rate, for wind we need to be a bit slower
    if (val < min) val = min;  
    TCB1_CCMP = val;
     fd6:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
     fda:	df 91       	pop	r29
}
     fdc:	cf 91       	pop	r28
     fde:	1f 91       	pop	r17
     fe0:	0f 91       	pop	r16
     fe2:	ff 90       	pop	r15
     fe4:	ef 90       	pop	r14
     fe6:	df 90       	pop	r13
     fe8:	08 95       	ret

00000fea <floatAround>:
     fea:	0f 93       	push	r16

uint8_t floatAround(uint8_t sample, uint8_t bits, uint8_t min, uint8_t max){
     fec:	1f 93       	push	r17
     fee:	cf 93       	push	r28
     ff0:	df 93       	push	r29
     ff2:	c8 2f       	mov	r28, r24
     ff4:	04 2f       	mov	r16, r20
     ff6:	12 2f       	mov	r17, r18
    bits = mask[(bits-1)&0x07];
     ff8:	e6 2f       	mov	r30, r22
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	31 97       	sbiw	r30, 0x01	; 1
     ffe:	e7 70       	andi	r30, 0x07	; 7
    1000:	ff 27       	eor	r31, r31
    1002:	e2 5e       	subi	r30, 0xE2	; 226
    1004:	f7 4c       	sbci	r31, 0xC7	; 199
    1006:	d0 81       	ld	r29, Z
    sample += lfsr()&bits;
    1008:	9f df       	rcall	.-194    	; 0xf48 <lfsr>
    100a:	8d 23       	and	r24, r29
    100c:	c8 0f       	add	r28, r24
    sample -= lfsr()&bits;
    100e:	9c df       	rcall	.-200    	; 0xf48 <lfsr>
    1010:	8d 23       	and	r24, r29
    1012:	c8 1b       	sub	r28, r24
    1014:	8c 2f       	mov	r24, r28
    1016:	11 23       	and	r17, r17
    if (max){
    1018:	41 f0       	breq	.+16     	; 0x102a <floatAround+0x40>
    101a:	9c 2f       	mov	r25, r28
    101c:	1c 17       	cp	r17, r28
    101e:	08 f4       	brcc	.+2      	; 0x1022 <floatAround+0x38>
    1020:	91 2f       	mov	r25, r17
    1022:	80 2f       	mov	r24, r16
    1024:	09 17       	cp	r16, r25
    1026:	08 f4       	brcc	.+2      	; 0x102a <floatAround+0x40>
    1028:	89 2f       	mov	r24, r25
    102a:	df 91       	pop	r29
        if (sample > max) sample = max;
        if (sample < min) sample = min;
    }
    return sample;
}
    102c:	cf 91       	pop	r28
    102e:	1f 91       	pop	r17
    1030:	0f 91       	pop	r16
    1032:	08 95       	ret

00001034 <SaveGameState>:
    1034:	cf 92       	push	r12

//Save changed data to EEPROM
uint8_t SaveGameState(){
    1036:	df 92       	push	r13
    1038:	ff 92       	push	r15
    103a:	0f 93       	push	r16
    103c:	1f 93       	push	r17
    103e:	cf 93       	push	r28
    1040:	df 93       	push	r29
    1042:	cd b7       	in	r28, 0x3d	; 61
    1044:	de b7       	in	r29, 0x3e	; 62
    1046:	64 97       	sbiw	r28, 0x14	; 20
    1048:	cd bf       	out	0x3d, r28	; 61
    104a:	de bf       	out	0x3e, r29	; 62
    uint8_t gameCheck[BOOTCHK];

    //Read all data up to the boot/check result address from EEPROM
    EERead(0, &gameCheck[0], BOOTCHK);
    104c:	44 e1       	ldi	r20, 0x14	; 20
    104e:	be 01       	movw	r22, r28
    1050:	6f 5f       	subi	r22, 0xFF	; 255
    1052:	7f 4f       	sbci	r23, 0xFF	; 255
    1054:	80 e0       	ldi	r24, 0x00	; 0
    1056:	c2 de       	rcall	.-636    	; 0xddc <EERead>
    1058:	85 e3       	ldi	r24, 0x35	; 53
    105a:	c8 2e       	mov	r12, r24
    105c:	8a e3       	ldi	r24, 0x3A	; 58
    105e:	d8 2e       	mov	r13, r24
    1060:	8e 01       	movw	r16, r28
    1062:	0f 5f       	subi	r16, 0xFF	; 255
    1064:	1f 4f       	sbci	r17, 0xFF	; 255

    //Check game status bits
    for (uint8_t x=0; x<STATLEN; ++x){
    1066:	f1 2c       	mov	r15, r1
        if (gameState[x] != gameCheck[x]){
    1068:	f8 01       	movw	r30, r16
    106a:	81 91       	ld	r24, Z+
    106c:	8f 01       	movw	r16, r30
    106e:	f6 01       	movw	r30, r12
    1070:	90 81       	ld	r25, Z
    1072:	98 13       	cpse	r25, r24
    1074:	08 c0       	rjmp	.+16     	; 0x1086 <SaveGameState+0x52>

    //Read all data up to the boot/check result address from EEPROM
    EERead(0, &gameCheck[0], BOOTCHK);

    //Check game status bits
    for (uint8_t x=0; x<STATLEN; ++x){
    1076:	f3 94       	inc	r15
    1078:	ff ef       	ldi	r31, 0xFF	; 255
    107a:	cf 1a       	sub	r12, r31
    107c:	df 0a       	sbc	r13, r31
    107e:	80 e1       	ldi	r24, 0x10	; 16
    1080:	f8 12       	cpse	r15, r24
    1082:	f2 cf       	rjmp	.-28     	; 0x1068 <SaveGameState+0x34>
    1084:	08 c0       	rjmp	.+16     	; 0x1096 <SaveGameState+0x62>
        if (gameState[x] != gameCheck[x]){
            if (EEWrite(x, &gameState[x], 1)) return 1;
    1086:	41 e0       	ldi	r20, 0x01	; 1
    1088:	b6 01       	movw	r22, r12
    108a:	8f 2d       	mov	r24, r15
    108c:	b7 de       	rcall	.-658    	; 0xdfc <EEWrite>
    108e:	88 23       	and	r24, r24
    1090:	91 f3       	breq	.-28     	; 0x1076 <SaveGameState+0x42>
    1092:	91 e0       	ldi	r25, 0x01	; 1
    1094:	36 c0       	rjmp	.+108    	; 0x1102 <SaveGameState+0xce>
        }
    }

    //Check the inventory too
    gameState[INVADDR] = (uint8_t)(inventory[0]>>8);
    1096:	20 91 31 38 	lds	r18, 0x3831	; 0x803831 <inventory>
    109a:	30 91 32 38 	lds	r19, 0x3832	; 0x803832 <inventory+0x1>
    109e:	30 93 45 3a 	sts	0x3A45, r19	; 0x803a45 <gameState+0x10>
    gameState[INVADDR+1] = (uint8_t)(inventory[0]&0xff);
    10a2:	20 93 46 3a 	sts	0x3A46, r18	; 0x803a46 <gameState+0x11>
    gameState[INVADDR+2] = (uint8_t)(inventory[1]>>8);
    10a6:	80 91 33 38 	lds	r24, 0x3833	; 0x803833 <inventory+0x2>
    10aa:	90 91 34 38 	lds	r25, 0x3834	; 0x803834 <inventory+0x3>
    10ae:	90 93 47 3a 	sts	0x3A47, r25	; 0x803a47 <gameState+0x12>
    gameState[INVADDR+3] = (uint8_t)(inventory[1]&0xff);
    10b2:	80 93 48 3a 	sts	0x3A48, r24	; 0x803a48 <gameState+0x13>
    if (inventory[0] != (gameCheck[INVADDR]<<8|gameCheck[INVADDR+1])) {
    10b6:	89 89       	ldd	r24, Y+17	; 0x11
    10b8:	9a 89       	ldd	r25, Y+18	; 0x12
    10ba:	98 27       	eor	r25, r24
    10bc:	89 27       	eor	r24, r25
    10be:	98 27       	eor	r25, r24
    10c0:	28 17       	cp	r18, r24
    10c2:	39 07       	cpc	r19, r25
    10c4:	69 f4       	brne	.+26     	; 0x10e0 <SaveGameState+0xac>
        if (EEWrite(INVADDR, &gameState[INVADDR], 2)) return 1;
    }
    if (inventory[1] != (gameCheck[INVADDR+2]<<8|gameCheck[INVADDR+3])) {
    10c6:	8b 89       	ldd	r24, Y+19	; 0x13
    10c8:	9c 89       	ldd	r25, Y+20	; 0x14
    10ca:	98 27       	eor	r25, r24
    10cc:	89 27       	eor	r24, r25
    10ce:	98 27       	eor	r25, r24
    10d0:	20 91 33 38 	lds	r18, 0x3833	; 0x803833 <inventory+0x2>
    10d4:	30 91 34 38 	lds	r19, 0x3834	; 0x803834 <inventory+0x3>
    10d8:	28 17       	cp	r18, r24
    10da:	39 07       	cpc	r19, r25
    10dc:	49 f4       	brne	.+18     	; 0x10f0 <SaveGameState+0xbc>
    10de:	10 c0       	rjmp	.+32     	; 0x1100 <SaveGameState+0xcc>
    gameState[INVADDR] = (uint8_t)(inventory[0]>>8);
    gameState[INVADDR+1] = (uint8_t)(inventory[0]&0xff);
    gameState[INVADDR+2] = (uint8_t)(inventory[1]>>8);
    gameState[INVADDR+3] = (uint8_t)(inventory[1]&0xff);
    if (inventory[0] != (gameCheck[INVADDR]<<8|gameCheck[INVADDR+1])) {
        if (EEWrite(INVADDR, &gameState[INVADDR], 2)) return 1;
    10e0:	42 e0       	ldi	r20, 0x02	; 2
    10e2:	65 e4       	ldi	r22, 0x45	; 69
    10e4:	7a e3       	ldi	r23, 0x3A	; 58
    10e6:	80 e1       	ldi	r24, 0x10	; 16
    10e8:	89 de       	rcall	.-750    	; 0xdfc <EEWrite>
    10ea:	88 23       	and	r24, r24
    10ec:	61 f3       	breq	.-40     	; 0x10c6 <SaveGameState+0x92>
    10ee:	d1 cf       	rjmp	.-94     	; 0x1092 <SaveGameState+0x5e>
    }
    if (inventory[1] != (gameCheck[INVADDR+2]<<8|gameCheck[INVADDR+3])) {
        if (EEWrite(INVADDR+2, &gameState[INVADDR+2], 2)) return 1;
    10f0:	42 e0       	ldi	r20, 0x02	; 2
    10f2:	67 e4       	ldi	r22, 0x47	; 71
    10f4:	7a e3       	ldi	r23, 0x3A	; 58
    10f6:	82 e1       	ldi	r24, 0x12	; 18
    10f8:	81 de       	rcall	.-766    	; 0xdfc <EEWrite>
    EERead(0, &gameCheck[0], BOOTCHK);

    //Check game status bits
    for (uint8_t x=0; x<STATLEN; ++x){
        if (gameState[x] != gameCheck[x]){
            if (EEWrite(x, &gameState[x], 1)) return 1;
    10fa:	91 e0       	ldi	r25, 0x01	; 1
    10fc:	81 11       	cpse	r24, r1
    10fe:	01 c0       	rjmp	.+2      	; 0x1102 <SaveGameState+0xce>
    1100:	90 e0       	ldi	r25, 0x00	; 0
    if (inventory[1] != (gameCheck[INVADDR+2]<<8|gameCheck[INVADDR+3])) {
        if (EEWrite(INVADDR+2, &gameState[INVADDR+2], 2)) return 1;
    }

    return 0;
}
    1102:	89 2f       	mov	r24, r25
    1104:	64 96       	adiw	r28, 0x14	; 20
    1106:	cd bf       	out	0x3d, r28	; 61
    1108:	de bf       	out	0x3e, r29	; 62
    110a:	df 91       	pop	r29
    110c:	cf 91       	pop	r28
    110e:	1f 91       	pop	r17
    1110:	0f 91       	pop	r16
    1112:	ff 90       	pop	r15
    1114:	df 90       	pop	r13
    1116:	cf 90       	pop	r12
    1118:	08 95       	ret

0000111a <ReadStatusBit>:

uint8_t ReadStatusBit(uint8_t number){
    number &= 0x7f;
    if (gameState[number>>3] & (1<<(number&7))) return 1; else return 0;
    111a:	e8 2f       	mov	r30, r24
    111c:	ef 77       	andi	r30, 0x7F	; 127
    111e:	e6 95       	lsr	r30
    1120:	e6 95       	lsr	r30
    1122:	e6 95       	lsr	r30
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	eb 5c       	subi	r30, 0xCB	; 203
    1128:	f5 4c       	sbci	r31, 0xC5	; 197
    112a:	20 81       	ld	r18, Z
    112c:	30 e0       	ldi	r19, 0x00	; 0
    112e:	87 70       	andi	r24, 0x07	; 7
    1130:	a9 01       	movw	r20, r18
    1132:	02 c0       	rjmp	.+4      	; 0x1138 <ReadStatusBit+0x1e>
    1134:	55 95       	asr	r21
    1136:	47 95       	ror	r20
    1138:	8a 95       	dec	r24
    113a:	e2 f7       	brpl	.-8      	; 0x1134 <ReadStatusBit+0x1a>
    113c:	ca 01       	movw	r24, r20
}
    113e:	81 70       	andi	r24, 0x01	; 1
    1140:	08 95       	ret

00001142 <WriteStatusBit>:

void WriteStatusBit(uint8_t number, uint8_t state){
    number &= 0x7f;
    1142:	e8 2f       	mov	r30, r24
    1144:	ef 77       	andi	r30, 0x7F	; 127
    1146:	e6 95       	lsr	r30
    1148:	e6 95       	lsr	r30
    114a:	e6 95       	lsr	r30
    114c:	28 2f       	mov	r18, r24
    114e:	27 70       	andi	r18, 0x07	; 7
    if (state) gameState[number>>3] |= 1<<(number&7);
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	eb 5c       	subi	r30, 0xCB	; 203
    1154:	f5 4c       	sbci	r31, 0xC5	; 197
    1156:	81 e0       	ldi	r24, 0x01	; 1
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	01 c0       	rjmp	.+2      	; 0x115e <WriteStatusBit+0x1c>
    115c:	88 0f       	add	r24, r24
    115e:	2a 95       	dec	r18
    1160:	ea f7       	brpl	.-6      	; 0x115c <WriteStatusBit+0x1a>
    1162:	66 23       	and	r22, r22
    1164:	19 f0       	breq	.+6      	; 0x116c <WriteStatusBit+0x2a>
    1166:	90 81       	ld	r25, Z
    1168:	89 2b       	or	r24, r25
    116a:	03 c0       	rjmp	.+6      	; 0x1172 <WriteStatusBit+0x30>
    else gameState[number>>3] &= ~(1<<(number&7));
    116c:	80 95       	com	r24
    116e:	90 81       	ld	r25, Z
    1170:	89 23       	and	r24, r25
    1172:	80 83       	st	Z, r24
    1174:	08 95       	ret

00001176 <UpdateState>:
}

//Update game state: num -> vBBBBbbb v=value(0 is set!), BBBB=Byte number, bbb=bit number
void UpdateState(uint8_t num){
    1176:	98 2f       	mov	r25, r24
    uint8_t clearBit = num & 0x80;
    num &= 0x7f;
    1178:	8f 77       	andi	r24, 0x7F	; 127
    if (clearBit) {
    117a:	97 ff       	sbrs	r25, 7
    117c:	02 c0       	rjmp	.+4      	; 0x1182 <UpdateState+0xc>
        WriteStatusBit(num, 0);
    117e:	60 e0       	ldi	r22, 0x00	; 0
    1180:	01 c0       	rjmp	.+2      	; 0x1184 <UpdateState+0xe>
    } else {
        WriteStatusBit(num, 1);
    1182:	61 e0       	ldi	r22, 0x01	; 1
    1184:	de cf       	rjmp	.-68     	; 0x1142 <WriteStatusBit>

00001186 <CheckState>:
    }
}

//Checks if state of bit BBBBbbb matches with v (inverted) bit
uint8_t CheckState(uint8_t num){
    1186:	cf 93       	push	r28
    1188:	c8 2f       	mov	r28, r24
    uint8_t bitSet = 0;
    if (ReadStatusBit(num & 0x7f)){
    118a:	8f 77       	andi	r24, 0x7F	; 127
    118c:	c6 df       	rcall	.-116    	; 0x111a <ReadStatusBit>
    118e:	2c 2f       	mov	r18, r28
    1190:	22 1f       	adc	r18, r18
    1192:	22 27       	eor	r18, r18
    1194:	22 1f       	adc	r18, r18
    1196:	91 e0       	ldi	r25, 0x01	; 1
    1198:	81 11       	cpse	r24, r1
    119a:	01 c0       	rjmp	.+2      	; 0x119e <CheckState+0x18>
    119c:	90 e0       	ldi	r25, 0x00	; 0
    }
    if (((num & 0x80)>0)^(bitSet>0)){
        return 1;
    }
    return 0;
}
    119e:	82 2f       	mov	r24, r18
    11a0:	89 27       	eor	r24, r25
    11a2:	cf 91       	pop	r28
    11a4:	08 95       	ret

000011a6 <getID>:
uint8_t getID(){
    //Give out a number 0..3, calculated using serial number fields
    uint8_t id = 0;
    uint8_t *serNum;
    serNum = (uint8_t*)&SIGROW_SERNUM0;
    11a6:	e3 e0       	ldi	r30, 0x03	; 3
    11a8:	f1 e1       	ldi	r31, 0x11	; 17
    }
    return 0;
}
uint8_t getID(){
    //Give out a number 0..3, calculated using serial number fields
    uint8_t id = 0;
    11aa:	80 e0       	ldi	r24, 0x00	; 0
    uint8_t *serNum;
    serNum = (uint8_t*)&SIGROW_SERNUM0;

    for (uint8_t x=0; x<10; ++x){
        id += *serNum;
    11ac:	91 91       	ld	r25, Z+
    11ae:	89 0f       	add	r24, r25
    //Give out a number 0..3, calculated using serial number fields
    uint8_t id = 0;
    uint8_t *serNum;
    serNum = (uint8_t*)&SIGROW_SERNUM0;

    for (uint8_t x=0; x<10; ++x){
    11b0:	ed 30       	cpi	r30, 0x0D	; 13
    11b2:	91 e1       	ldi	r25, 0x11	; 17
    11b4:	f9 07       	cpc	r31, r25
    11b6:	d1 f7       	brne	.-12     	; 0x11ac <getID+0x6>
        id += *serNum;
        ++serNum;
    }
    id %= 4;
    whoami = id+1;
    11b8:	83 70       	andi	r24, 0x03	; 3
    11ba:	8f 5f       	subi	r24, 0xFF	; 255
    11bc:	80 93 30 38 	sts	0x3830, r24	; 0x803830 <whoami>
    return whoami;
}
    11c0:	08 95       	ret

000011c2 <Reset>:

void Reset(){
    11c2:	e5 e3       	ldi	r30, 0x35	; 53
    11c4:	fa e3       	ldi	r31, 0x3A	; 58
    //# 110   set to 1 by FW if badge UUID mod 4 == 0
    //# 111   set to 1 by FW if badge UUID mod 4 == 1
    //# 112   set to 1 by FW if badge UUID mod 4 == 2
    //# 113   set to 1 by FW if badge UUID mod 4 == 3
    for (uint8_t x=0; x<sizeof(gameState); ++x){
        gameState[x] = 0;
    11c6:	11 92       	st	Z+, r1
    //Reset game progress (all zeroes) and load some bits:
    //# 110   set to 1 by FW if badge UUID mod 4 == 0
    //# 111   set to 1 by FW if badge UUID mod 4 == 1
    //# 112   set to 1 by FW if badge UUID mod 4 == 2
    //# 113   set to 1 by FW if badge UUID mod 4 == 3
    for (uint8_t x=0; x<sizeof(gameState); ++x){
    11c8:	8a e3       	ldi	r24, 0x3A	; 58
    11ca:	e9 34       	cpi	r30, 0x49	; 73
    11cc:	f8 07       	cpc	r31, r24
    11ce:	d9 f7       	brne	.-10     	; 0x11c6 <Reset+0x4>
        gameState[x] = 0;
    }

    uint8_t id = getID();
    11d0:	ea df       	rcall	.-44     	; 0x11a6 <getID>

    //Write bit in gameState location 110..113
    if (id == 0) WriteStatusBit(110, 1);
    11d2:	81 11       	cpse	r24, r1
    11d4:	04 c0       	rjmp	.+8      	; 0x11de <Reset+0x1c>
    if (gameState[number>>3] & (1<<(number&7))) return 1; else return 0;
}

void WriteStatusBit(uint8_t number, uint8_t state){
    number &= 0x7f;
    if (state) gameState[number>>3] |= 1<<(number&7);
    11d6:	80 91 42 3a 	lds	r24, 0x3A42	; 0x803a42 <gameState+0xd>
    11da:	80 64       	ori	r24, 0x40	; 64
    11dc:	05 c0       	rjmp	.+10     	; 0x11e8 <Reset+0x26>

    uint8_t id = getID();

    //Write bit in gameState location 110..113
    if (id == 0) WriteStatusBit(110, 1);
    else if (id == 1) WriteStatusBit(111, 1);
    11de:	81 30       	cpi	r24, 0x01	; 1
    11e0:	31 f4       	brne	.+12     	; 0x11ee <Reset+0x2c>
    if (gameState[number>>3] & (1<<(number&7))) return 1; else return 0;
}

void WriteStatusBit(uint8_t number, uint8_t state){
    number &= 0x7f;
    if (state) gameState[number>>3] |= 1<<(number&7);
    11e2:	80 91 42 3a 	lds	r24, 0x3A42	; 0x803a42 <gameState+0xd>
    11e6:	80 68       	ori	r24, 0x80	; 128
    11e8:	80 93 42 3a 	sts	0x3A42, r24	; 0x803a42 <gameState+0xd>
    11ec:	0d c0       	rjmp	.+26     	; 0x1208 <Reset+0x46>
    uint8_t id = getID();

    //Write bit in gameState location 110..113
    if (id == 0) WriteStatusBit(110, 1);
    else if (id == 1) WriteStatusBit(111, 1);
    else if (id == 2) WriteStatusBit(112, 1);
    11ee:	82 30       	cpi	r24, 0x02	; 2
    11f0:	21 f4       	brne	.+8      	; 0x11fa <Reset+0x38>
    if (gameState[number>>3] & (1<<(number&7))) return 1; else return 0;
}

void WriteStatusBit(uint8_t number, uint8_t state){
    number &= 0x7f;
    if (state) gameState[number>>3] |= 1<<(number&7);
    11f2:	80 91 43 3a 	lds	r24, 0x3A43	; 0x803a43 <gameState+0xe>
    11f6:	81 60       	ori	r24, 0x01	; 1
    11f8:	05 c0       	rjmp	.+10     	; 0x1204 <Reset+0x42>

    //Write bit in gameState location 110..113
    if (id == 0) WriteStatusBit(110, 1);
    else if (id == 1) WriteStatusBit(111, 1);
    else if (id == 2) WriteStatusBit(112, 1);
    else if (id == 3) WriteStatusBit(113, 1);
    11fa:	83 30       	cpi	r24, 0x03	; 3
    11fc:	29 f4       	brne	.+10     	; 0x1208 <Reset+0x46>
    if (gameState[number>>3] & (1<<(number&7))) return 1; else return 0;
}

void WriteStatusBit(uint8_t number, uint8_t state){
    number &= 0x7f;
    if (state) gameState[number>>3] |= 1<<(number&7);
    11fe:	80 91 43 3a 	lds	r24, 0x3A43	; 0x803a43 <gameState+0xe>
    1202:	82 60       	ori	r24, 0x02	; 2
    1204:	80 93 43 3a 	sts	0x3A43, r24	; 0x803a43 <gameState+0xe>
    1208:	80 91 35 3a 	lds	r24, 0x3A35	; 0x803a35 <gameState>
    120c:	81 60       	ori	r24, 0x01	; 1
    120e:	80 93 35 3a 	sts	0x3A35, r24	; 0x803a35 <gameState>
    1212:	08 95       	ret

00001214 <GenerateAudio>:
    //Write bit 0, must always be 1!
    WriteStatusBit(0, 1);
}


void GenerateAudio(){
    1214:	0f 93       	push	r16
    1216:	1f 93       	push	r17
    1218:	cf 93       	push	r28
    121a:	df 93       	push	r29

    //auRepAddr = &auBuffer[0];

    //Audio for text adventure
    if ((effect&0xff00)==0) {
    121c:	80 91 2d 38 	lds	r24, 0x382D	; 0x80382d <effect>
    1220:	90 91 2e 38 	lds	r25, 0x382E	; 0x80382e <effect+0x1>
    1224:	88 27       	eor	r24, r24
    1226:	89 2b       	or	r24, r25
    1228:	09 f0       	breq	.+2      	; 0x122c <GenerateAudio+0x18>
    122a:	8d c0       	rjmp	.+282    	; 0x1346 <GenerateAudio+0x132>

        //Silence
        if ((effect&0xE0)==0){
    122c:	80 91 2d 38 	lds	r24, 0x382D	; 0x80382d <effect>
    1230:	90 91 2e 38 	lds	r25, 0x382E	; 0x80382e <effect+0x1>
    1234:	80 7e       	andi	r24, 0xE0	; 224
    1236:	99 27       	eor	r25, r25
    1238:	89 2b       	or	r24, r25
    123a:	31 f4       	brne	.+12     	; 0x1248 <GenerateAudio+0x34>
            auRepAddr = &zero;
    123c:	8b e2       	ldi	r24, 0x2B	; 43
    123e:	98 e3       	ldi	r25, 0x38	; 56
    1240:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    1244:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
        }

        //Bad (buzzer)
        if ((effect&0xE0)==32){
    1248:	80 91 2d 38 	lds	r24, 0x382D	; 0x80382d <effect>
    124c:	90 91 2e 38 	lds	r25, 0x382E	; 0x80382e <effect+0x1>
    1250:	80 7e       	andi	r24, 0xE0	; 224
    1252:	99 27       	eor	r25, r25
    1254:	80 97       	sbiw	r24, 0x20	; 32
    1256:	21 f5       	brne	.+72     	; 0x12a0 <GenerateAudio+0x8c>
            static uint8_t auBuffer[17] = {1, 255, 128, 128, 192, 255, 192, 255, 192, 128, 64, 1, 64, 1, 64, 128, 0}; 
            static uint8_t loudness = 255;
            auRepAddr = &auBuffer[0];
    1258:	8b e0       	ldi	r24, 0x0B	; 11
    125a:	98 e3       	ldi	r25, 0x38	; 56
    125c:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    1260:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
            if (buttonMark) {
    1264:	80 91 35 38 	lds	r24, 0x3835	; 0x803835 <buttonMark>
    1268:	88 23       	and	r24, r24
    126a:	d1 f0       	breq	.+52     	; 0x12a0 <GenerateAudio+0x8c>
                if (loudness) {
    126c:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <loudness.3927>
    1270:	88 23       	and	r24, r24
    1272:	31 f0       	breq	.+12     	; 0x1280 <GenerateAudio+0x6c>
                    auVolume = loudness;
    1274:	80 93 8a 3a 	sts	0x3A8A, r24	; 0x803a8a <auVolume>
                    --loudness;
    1278:	81 50       	subi	r24, 0x01	; 1
    127a:	80 93 0a 38 	sts	0x380A, r24	; 0x80380a <loudness.3927>
    127e:	10 c0       	rjmp	.+32     	; 0x12a0 <GenerateAudio+0x8c>
                } else {
                    auRepAddr = &zero;
    1280:	8b e2       	ldi	r24, 0x2B	; 43
    1282:	98 e3       	ldi	r25, 0x38	; 56
    1284:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    1288:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
                    effect &= 0x10;
    128c:	80 91 2d 38 	lds	r24, 0x382D	; 0x80382d <effect>
    1290:	90 91 2e 38 	lds	r25, 0x382E	; 0x80382e <effect+0x1>
    1294:	80 71       	andi	r24, 0x10	; 16
    1296:	99 27       	eor	r25, r25
    1298:	80 93 2d 38 	sts	0x382D, r24	; 0x80382d <effect>
    129c:	90 93 2e 38 	sts	0x382E, r25	; 0x80382e <effect+0x1>
                }
            }
        }

        //Good (bell)
        if ((effect&0xE0)==64){
    12a0:	80 91 2d 38 	lds	r24, 0x382D	; 0x80382d <effect>
    12a4:	90 91 2e 38 	lds	r25, 0x382E	; 0x80382e <effect+0x1>
            //auBuffer = 
        }

        //Rain storm with whistling wind
        if ((effect&0xE0)==96){
    12a8:	80 91 2d 38 	lds	r24, 0x382D	; 0x80382d <effect>
    12ac:	90 91 2e 38 	lds	r25, 0x382E	; 0x80382e <effect+0x1>
    12b0:	80 7e       	andi	r24, 0xE0	; 224
    12b2:	99 27       	eor	r25, r25
    12b4:	80 36       	cpi	r24, 0x60	; 96
    12b6:	91 05       	cpc	r25, r1
    12b8:	d1 f5       	brne	.+116    	; 0x132e <GenerateAudio+0x11a>
            static uint8_t auBuffer[7];
            auBuffer[6]= 0;        
    12ba:	10 92 43 38 	sts	0x3843, r1	; 0x803843 <auBuffer.3928+0x6>
            auRepAddr = &auBuffer[0];
    12be:	8d e3       	ldi	r24, 0x3D	; 61
    12c0:	98 e3       	ldi	r25, 0x38	; 56
    12c2:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    12c6:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
    12ca:	8c 01       	movw	r16, r24

            //Noise is to be generated fast, outside of buttonMark loop
            for (uint8_t x=1; x<6; ++x){
    12cc:	c1 e0       	ldi	r28, 0x01	; 1
                if (x%3) auBuffer[x] = floatAround(0x80, 5, 0x01, 0x00);
    12ce:	d3 e0       	ldi	r29, 0x03	; 3
    12d0:	8c 2f       	mov	r24, r28
    12d2:	6d 2f       	mov	r22, r29
    12d4:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <__udivmodqi4>
    12d8:	99 23       	and	r25, r25
    12da:	39 f0       	breq	.+14     	; 0x12ea <GenerateAudio+0xd6>
    12dc:	20 e0       	ldi	r18, 0x00	; 0
    12de:	41 e0       	ldi	r20, 0x01	; 1
    12e0:	65 e0       	ldi	r22, 0x05	; 5
    12e2:	80 e8       	ldi	r24, 0x80	; 128
    12e4:	82 de       	rcall	.-764    	; 0xfea <floatAround>
    12e6:	f8 01       	movw	r30, r16
    12e8:	81 83       	std	Z+1, r24	; 0x01
            static uint8_t auBuffer[7];
            auBuffer[6]= 0;        
            auRepAddr = &auBuffer[0];

            //Noise is to be generated fast, outside of buttonMark loop
            for (uint8_t x=1; x<6; ++x){
    12ea:	cf 5f       	subi	r28, 0xFF	; 255
    12ec:	0f 5f       	subi	r16, 0xFF	; 255
    12ee:	1f 4f       	sbci	r17, 0xFF	; 255
    12f0:	c6 30       	cpi	r28, 0x06	; 6
    12f2:	71 f7       	brne	.-36     	; 0x12d0 <GenerateAudio+0xbc>
                if (x%3) auBuffer[x] = floatAround(0x80, 5, 0x01, 0x00);
            }

            if (buttonMark){
    12f4:	80 91 35 38 	lds	r24, 0x3835	; 0x803835 <buttonMark>
    12f8:	88 23       	and	r24, r24
    12fa:	c9 f0       	breq	.+50     	; 0x132e <GenerateAudio+0x11a>
                //"Floating" speed for howl (and noise, but that's hardly audible)
                floatSpeed(5, 0x0280, 0x0400);
    12fc:	40 e0       	ldi	r20, 0x00	; 0
    12fe:	54 e0       	ldi	r21, 0x04	; 4
    1300:	60 e8       	ldi	r22, 0x80	; 128
    1302:	72 e0       	ldi	r23, 0x02	; 2
    1304:	85 e0       	ldi	r24, 0x05	; 5
    1306:	3f de       	rcall	.-898    	; 0xf86 <floatSpeed>
            
                //"Floating" volume and wind howl during 8 bit rainstorm needs some randomness
                auVolume = floatAround(auVolume, 2, 0x10, 0xA0);
    1308:	80 91 8a 3a 	lds	r24, 0x3A8A	; 0x803a8a <auVolume>
    130c:	20 ea       	ldi	r18, 0xA0	; 160
    130e:	40 e1       	ldi	r20, 0x10	; 16
    1310:	62 e0       	ldi	r22, 0x02	; 2
    1312:	6b de       	rcall	.-810    	; 0xfea <floatAround>
    1314:	80 93 8a 3a 	sts	0x3A8A, r24	; 0x803a8a <auVolume>
                auBuffer[0] = floatAround(auBuffer[0], 2, 0x70, 0x90);
    1318:	20 e9       	ldi	r18, 0x90	; 144
    131a:	40 e7       	ldi	r20, 0x70	; 112
    131c:	62 e0       	ldi	r22, 0x02	; 2
    131e:	80 91 3d 38 	lds	r24, 0x383D	; 0x80383d <auBuffer.3928>
    1322:	63 de       	rcall	.-826    	; 0xfea <floatAround>
    1324:	80 93 3d 38 	sts	0x383D, r24	; 0x80383d <auBuffer.3928>
                auBuffer[3] = 0xFF-auBuffer[0];  //Inverse value of wind[0] produces a whistle
    1328:	80 95       	com	r24
    132a:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <auBuffer.3928+0x3>
            }
        }

        //Footsteps
        if ((effect&0xE0)==128){
    132e:	80 91 2d 38 	lds	r24, 0x382D	; 0x80382d <effect>
    1332:	90 91 2e 38 	lds	r25, 0x382E	; 0x80382e <effect+0x1>

        }

        //Knocking
        if ((effect&0xE0)==160){
    1336:	80 91 2d 38 	lds	r24, 0x382D	; 0x80382d <effect>
    133a:	90 91 2e 38 	lds	r25, 0x382E	; 0x80382e <effect+0x1>

        }

        //Scream
        if ((effect&0xE0)==192){
    133e:	80 91 2d 38 	lds	r24, 0x382D	; 0x80382d <effect>
    1342:	90 91 2e 38 	lds	r25, 0x382E	; 0x80382e <effect+0x1>

        //Rain storm with whistling wind
        else {
        }
    }
    1346:	df 91       	pop	r29
    1348:	cf 91       	pop	r28
    134a:	1f 91       	pop	r17
    134c:	0f 91       	pop	r16
    134e:	08 95       	ret

00001350 <BastetDictates>:

// Main game loop
uint8_t BastetDictates(){
  
    return 0;
}
    1350:	80 e0       	ldi	r24, 0x00	; 0
    1352:	08 95       	ret

00001354 <Cheat>:

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    reactStr[1][number]=length;
    reactStr[2][number]=type;
    1354:	1f 93       	push	r17
    1356:	cf 93       	push	r28
    1358:	df 93       	push	r29
    135a:	cd b7       	in	r28, 0x3d	; 61
    135c:	de b7       	in	r29, 0x3e	; 62
    135e:	62 97       	sbiw	r28, 0x12	; 18
    1360:	cd bf       	out	0x3d, r28	; 61
    1362:	de bf       	out	0x3e, r29	; 62
    1364:	8a 8b       	std	Y+18, r24	; 0x12
    1366:	80 e1       	ldi	r24, 0x10	; 16
    1368:	ea e5       	ldi	r30, 0x5A	; 90
    136a:	f2 eb       	ldi	r31, 0xB2	; 178
    136c:	de 01       	movw	r26, r28
    136e:	11 96       	adiw	r26, 0x01	; 1
    1370:	01 90       	ld	r0, Z+
    1372:	0d 92       	st	X+, r0
    1374:	8a 95       	dec	r24
    1376:	e1 f7       	brne	.-8      	; 0x1370 <Cheat+0x1c>
    1378:	fe 01       	movw	r30, r28
    137a:	31 96       	adiw	r30, 0x01	; 1
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	8f ef       	ldi	r24, 0xFF	; 255
    1380:	21 91       	ld	r18, Z+
    1382:	31 91       	ld	r19, Z+
    1384:	26 17       	cp	r18, r22
    1386:	37 07       	cpc	r19, r23
    1388:	09 f4       	brne	.+2      	; 0x138c <Cheat+0x38>
    138a:	89 2f       	mov	r24, r25
    138c:	9f 5f       	subi	r25, 0xFF	; 255
    138e:	98 30       	cpi	r25, 0x08	; 8
    1390:	b9 f7       	brne	.-18     	; 0x1380 <Cheat+0x2c>
    1392:	88 30       	cpi	r24, 0x08	; 8
    1394:	10 f0       	brcs	.+4      	; 0x139a <Cheat+0x46>
    1396:	80 e0       	ldi	r24, 0x00	; 0
    1398:	12 c0       	rjmp	.+36     	; 0x13be <Cheat+0x6a>
    139a:	18 e1       	ldi	r17, 0x18	; 24
    139c:	18 0f       	add	r17, r24
    139e:	41 e0       	ldi	r20, 0x01	; 1
    13a0:	be 01       	movw	r22, r28
    13a2:	6f 5e       	subi	r22, 0xEF	; 239
    13a4:	7f 4f       	sbci	r23, 0xFF	; 255
    13a6:	81 2f       	mov	r24, r17
    13a8:	19 dd       	rcall	.-1486   	; 0xddc <EERead>
    13aa:	89 89       	ldd	r24, Y+17	; 0x11
    13ac:	8f 3f       	cpi	r24, 0xFF	; 255
    13ae:	99 f7       	brne	.-26     	; 0x1396 <Cheat+0x42>
    13b0:	41 e0       	ldi	r20, 0x01	; 1
    13b2:	be 01       	movw	r22, r28
    13b4:	6e 5e       	subi	r22, 0xEE	; 238
    13b6:	7f 4f       	sbci	r23, 0xFF	; 255
    13b8:	81 2f       	mov	r24, r17
    13ba:	20 dd       	rcall	.-1472   	; 0xdfc <EEWrite>
    13bc:	81 e0       	ldi	r24, 0x01	; 1
    13be:	62 96       	adiw	r28, 0x12	; 18
    13c0:	cd bf       	out	0x3d, r28	; 61
    13c2:	de bf       	out	0x3e, r29	; 62
    13c4:	df 91       	pop	r29
    13c6:	cf 91       	pop	r28
    13c8:	1f 91       	pop	r17
    13ca:	08 95       	ret

000013cc <DecryptData>:
    13cc:	f9 01       	movw	r30, r18
    13ce:	9c 01       	movw	r18, r24
    13d0:	2e 1b       	sub	r18, r30
    13d2:	3f 0b       	sbc	r19, r31
    13d4:	88 e0       	ldi	r24, 0x08	; 8
    13d6:	48 9f       	mul	r20, r24
    13d8:	a0 01       	movw	r20, r0
    13da:	11 24       	eor	r1, r1
    13dc:	4c 5d       	subi	r20, 0xDC	; 220
    13de:	5c 44       	sbci	r21, 0x4C	; 76
    13e0:	66 23       	and	r22, r22
    13e2:	69 f0       	breq	.+26     	; 0x13fe <DecryptData+0x32>
    13e4:	df 01       	movw	r26, r30
    13e6:	a2 0f       	add	r26, r18
    13e8:	b3 1f       	adc	r27, r19
    13ea:	a7 70       	andi	r26, 0x07	; 7
    13ec:	bb 27       	eor	r27, r27
    13ee:	a4 0f       	add	r26, r20
    13f0:	b5 1f       	adc	r27, r21
    13f2:	80 81       	ld	r24, Z
    13f4:	9c 91       	ld	r25, X
    13f6:	98 27       	eor	r25, r24
    13f8:	91 93       	st	Z+, r25
    13fa:	61 50       	subi	r22, 0x01	; 1
    13fc:	f1 cf       	rjmp	.-30     	; 0x13e0 <DecryptData+0x14>
    13fe:	08 95       	ret

00001400 <UnflipData>:
    1400:	26 2f       	mov	r18, r22
    1402:	fb 01       	movw	r30, r22
    1404:	35 e5       	ldi	r19, 0x55	; 85
    1406:	9e 2f       	mov	r25, r30
    1408:	92 1b       	sub	r25, r18
    140a:	98 17       	cp	r25, r24
    140c:	28 f4       	brcc	.+10     	; 0x1418 <UnflipData+0x18>
    140e:	90 81       	ld	r25, Z
    1410:	92 95       	swap	r25
    1412:	93 27       	eor	r25, r19
    1414:	91 93       	st	Z+, r25
    1416:	f7 cf       	rjmp	.-18     	; 0x1406 <UnflipData+0x6>
    1418:	08 95       	ret

0000141a <ExtEERead>:
    141a:	af 92       	push	r10
    141c:	bf 92       	push	r11
    141e:	cf 92       	push	r12
    1420:	df 92       	push	r13
    1422:	ef 92       	push	r14
    1424:	ff 92       	push	r15
    1426:	0f 93       	push	r16
    1428:	1f 93       	push	r17
    142a:	cf 93       	push	r28
    142c:	df 93       	push	r29
    142e:	00 d0       	rcall	.+0      	; 0x1430 <ExtEERead+0x16>
    1430:	cd b7       	in	r28, 0x3d	; 61
    1432:	de b7       	in	r29, 0x3e	; 62
    1434:	d6 2e       	mov	r13, r22
    1436:	c4 2e       	mov	r12, r20
    1438:	59 01       	movw	r10, r18
    143a:	7c 01       	movw	r14, r24
    143c:	e8 94       	clt
    143e:	f7 f8       	bld	r15, 7
    1440:	f9 82       	std	Y+1, r15	; 0x01
    1442:	ea 82       	std	Y+2, r14	; 0x02
    1444:	06 2f       	mov	r16, r22
    1446:	42 e0       	ldi	r20, 0x02	; 2
    1448:	be 01       	movw	r22, r28
    144a:	6f 5f       	subi	r22, 0xFF	; 255
    144c:	7f 4f       	sbci	r23, 0xFF	; 255
    144e:	80 e5       	ldi	r24, 0x50	; 80
    1450:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <I2C_read_bytes>
    1454:	18 2f       	mov	r17, r24
    1456:	81 11       	cpse	r24, r1
    1458:	05 c0       	rjmp	.+10     	; 0x1464 <ExtEERead+0x4a>
    145a:	95 01       	movw	r18, r10
    145c:	4c 2d       	mov	r20, r12
    145e:	6d 2d       	mov	r22, r13
    1460:	c7 01       	movw	r24, r14
    1462:	b4 df       	rcall	.-152    	; 0x13cc <DecryptData>
    1464:	81 2f       	mov	r24, r17
    1466:	0f 90       	pop	r0
    1468:	0f 90       	pop	r0
    146a:	df 91       	pop	r29
    146c:	cf 91       	pop	r28
    146e:	1f 91       	pop	r17
    1470:	0f 91       	pop	r16
    1472:	ff 90       	pop	r15
    1474:	ef 90       	pop	r14
    1476:	df 90       	pop	r13
    1478:	cf 90       	pop	r12
    147a:	bf 90       	pop	r11
    147c:	af 90       	pop	r10
    147e:	08 95       	ret

00001480 <ClearTxAfter>:
    1480:	8f 5f       	subi	r24, 0xFF	; 255
    1482:	88 30       	cpi	r24, 0x08	; 8
    1484:	30 f4       	brcc	.+12     	; 0x1492 <ClearTxAfter+0x12>
    1486:	e8 2f       	mov	r30, r24
    1488:	f0 e0       	ldi	r31, 0x00	; 0
    148a:	e4 5e       	subi	r30, 0xE4	; 228
    148c:	f5 4c       	sbci	r31, 0xC5	; 197
    148e:	10 82       	st	Z, r1
    1490:	f7 cf       	rjmp	.-18     	; 0x1480 <ClearTxAfter>
    1492:	08 95       	ret

00001494 <StartsWith>:
    1494:	ac 01       	movw	r20, r24
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	e9 2f       	mov	r30, r25
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	da 01       	movw	r26, r20
    149e:	ae 0f       	add	r26, r30
    14a0:	bf 1f       	adc	r27, r31
    14a2:	3c 91       	ld	r19, X
    14a4:	e6 0f       	add	r30, r22
    14a6:	f7 1f       	adc	r31, r23
    14a8:	31 11       	cpse	r19, r1
    14aa:	05 c0       	rjmp	.+10     	; 0x14b6 <StartsWith+0x22>
    14ac:	81 e0       	ldi	r24, 0x01	; 1
    14ae:	90 81       	ld	r25, Z
    14b0:	99 23       	and	r25, r25
    14b2:	49 f0       	breq	.+18     	; 0x14c6 <StartsWith+0x32>
    14b4:	07 c0       	rjmp	.+14     	; 0x14c4 <StartsWith+0x30>
    14b6:	20 81       	ld	r18, Z
    14b8:	22 23       	and	r18, r18
    14ba:	c1 f3       	breq	.-16     	; 0x14ac <StartsWith+0x18>
    14bc:	32 13       	cpse	r19, r18
    14be:	02 c0       	rjmp	.+4      	; 0x14c4 <StartsWith+0x30>
    14c0:	9f 5f       	subi	r25, 0xFF	; 255
    14c2:	ea cf       	rjmp	.-44     	; 0x1498 <StartsWith+0x4>
    14c4:	80 e0       	ldi	r24, 0x00	; 0
    14c6:	08 95       	ret

000014c8 <PrepareSending>:
    14c8:	61 15       	cp	r22, r1
    14ca:	71 05       	cpc	r23, r1
    14cc:	51 f1       	breq	.+84     	; 0x1522 <PrepareSending+0x5a>
    14ce:	e4 e2       	ldi	r30, 0x24	; 36
    14d0:	fa e3       	ldi	r31, 0x3A	; 58
    14d2:	ac e1       	ldi	r26, 0x1C	; 28
    14d4:	ba e3       	ldi	r27, 0x3A	; 58
    14d6:	20 e0       	ldi	r18, 0x00	; 0
    14d8:	3f ef       	ldi	r19, 0xFF	; 255
    14da:	6f 3f       	cpi	r22, 0xFF	; 255
    14dc:	71 05       	cpc	r23, r1
    14de:	69 f0       	breq	.+26     	; 0x14fa <PrepareSending+0x32>
    14e0:	60 f0       	brcs	.+24     	; 0x14fa <PrepareSending+0x32>
    14e2:	81 93       	st	Z+, r24
    14e4:	91 93       	st	Z+, r25
    14e6:	3d 93       	st	X+, r19
    14e8:	81 50       	subi	r24, 0x01	; 1
    14ea:	9f 4f       	sbci	r25, 0xFF	; 255
    14ec:	6f 5f       	subi	r22, 0xFF	; 255
    14ee:	71 09       	sbc	r23, r1
    14f0:	2f 5f       	subi	r18, 0xFF	; 255
    14f2:	27 30       	cpi	r18, 0x07	; 7
    14f4:	91 f7       	brne	.-28     	; 0x14da <PrepareSending+0x12>
    14f6:	81 e0       	ldi	r24, 0x01	; 1
    14f8:	08 95       	ret
    14fa:	e2 2f       	mov	r30, r18
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	df 01       	movw	r26, r30
    1500:	aa 0f       	add	r26, r26
    1502:	bb 1f       	adc	r27, r27
    1504:	ac 5d       	subi	r26, 0xDC	; 220
    1506:	b5 4c       	sbci	r27, 0xC5	; 197
    1508:	8d 93       	st	X+, r24
    150a:	9c 93       	st	X, r25
    150c:	e4 5e       	subi	r30, 0xE4	; 228
    150e:	f5 4c       	sbci	r31, 0xC5	; 197
    1510:	cb 01       	movw	r24, r22
    1512:	6f ef       	ldi	r22, 0xFF	; 255
    1514:	70 e0       	ldi	r23, 0x00	; 0
    1516:	0e 94 f5 18 	call	0x31ea	; 0x31ea <__udivmodhi4>
    151a:	80 83       	st	Z, r24
    151c:	40 93 1a 3a 	sts	0x3A1A, r20	; 0x803a1a <txTypeNow>
    1520:	05 c0       	rjmp	.+10     	; 0x152c <PrepareSending+0x64>
    1522:	10 92 24 3a 	sts	0x3A24, r1	; 0x803a24 <txAddrList>
    1526:	10 92 25 3a 	sts	0x3A25, r1	; 0x803a25 <txAddrList+0x1>
    152a:	20 e0       	ldi	r18, 0x00	; 0
    152c:	82 2f       	mov	r24, r18
    152e:	a8 df       	rcall	.-176    	; 0x1480 <ClearTxAfter>
    1530:	10 92 1b 3a 	sts	0x3A1B, r1	; 0x803a1b <txAddrNow>
    1534:	80 e0       	ldi	r24, 0x00	; 0
    1536:	08 95       	ret

00001538 <SetStandardResponse>:
}

//
uint8_t SetStandardResponse(uint8_t custStrEnd){
    1538:	cf 93       	push	r28
    153a:	df 93       	push	r29
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    153c:	28 2f       	mov	r18, r24
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	f9 01       	movw	r30, r18
    1542:	ee 0f       	add	r30, r30
    1544:	ff 1f       	adc	r31, r31
    1546:	e1 51       	subi	r30, 0x11	; 17
    1548:	f7 4c       	sbci	r31, 0xC7	; 199
    154a:	ab e5       	ldi	r26, 0x5B	; 91
    154c:	ba e7       	ldi	r27, 0x7A	; 122
    154e:	a0 83       	st	Z, r26
    1550:	b1 83       	std	Z+1, r27	; 0x01
    reactStr[1][number]=length;
    1552:	f9 01       	movw	r30, r18
    1554:	ee 0f       	add	r30, r30
    1556:	ff 1f       	adc	r31, r31
    1558:	e1 5d       	subi	r30, 0xD1	; 209
    155a:	f6 4c       	sbci	r31, 0xC6	; 198
    155c:	62 e0       	ldi	r22, 0x02	; 2
    155e:	70 e0       	ldi	r23, 0x00	; 0
    1560:	60 83       	st	Z, r22
    1562:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    1564:	22 0f       	add	r18, r18
    1566:	33 1f       	adc	r19, r19
    1568:	f9 01       	movw	r30, r18
    156a:	e1 59       	subi	r30, 0x91	; 145
    156c:	f6 4c       	sbci	r31, 0xC6	; 198
    156e:	41 e0       	ldi	r20, 0x01	; 1
    1570:	50 e0       	ldi	r21, 0x00	; 0
    1572:	40 83       	st	Z, r20
    1574:	51 83       	std	Z+1, r21	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1576:	21 e0       	ldi	r18, 0x01	; 1
    1578:	28 0f       	add	r18, r24
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	f9 01       	movw	r30, r18
    157e:	ee 0f       	add	r30, r30
    1580:	ff 1f       	adc	r31, r31
    1582:	e1 51       	subi	r30, 0x11	; 17
    1584:	f7 4c       	sbci	r31, 0xC7	; 199
    1586:	c4 e6       	ldi	r28, 0x64	; 100
    1588:	da e7       	ldi	r29, 0x7A	; 122
    158a:	c0 83       	st	Z, r28
    158c:	d1 83       	std	Z+1, r29	; 0x01
    reactStr[1][number]=length;
    158e:	f9 01       	movw	r30, r18
    1590:	ee 0f       	add	r30, r30
    1592:	ff 1f       	adc	r31, r31
    1594:	e1 5d       	subi	r30, 0xD1	; 209
    1596:	f6 4c       	sbci	r31, 0xC6	; 198
    1598:	ca e0       	ldi	r28, 0x0A	; 10
    159a:	d0 e0       	ldi	r29, 0x00	; 0
    159c:	c0 83       	st	Z, r28
    159e:	d1 83       	std	Z+1, r29	; 0x01
    reactStr[2][number]=type;
    15a0:	22 0f       	add	r18, r18
    15a2:	33 1f       	adc	r19, r19
    15a4:	f9 01       	movw	r30, r18
    15a6:	e1 59       	subi	r30, 0x91	; 145
    15a8:	f6 4c       	sbci	r31, 0xC6	; 198
    15aa:	40 83       	st	Z, r20
    15ac:	51 83       	std	Z+1, r21	; 0x01
uint8_t SetStandardResponse(uint8_t custStrEnd){

    SetResponse(custStrEnd++, A_LF, 2, TEASER);
    SetResponse(custStrEnd++, A_LOCATION, L_LOCATION, TEASER);
    //SetResponse(custStrEnd++, A_SPACE, L_SPACE, TEASER);
    reactStr[0][custStrEnd++] = CURR_LOC;
    15ae:	e2 e0       	ldi	r30, 0x02	; 2
    15b0:	e8 0f       	add	r30, r24
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	ee 0f       	add	r30, r30
    15b6:	ff 1f       	adc	r31, r31
    15b8:	e1 51       	subi	r30, 0x11	; 17
    15ba:	f7 4c       	sbci	r31, 0xC7	; 199
    15bc:	20 ef       	ldi	r18, 0xF0	; 240
    15be:	3f ef       	ldi	r19, 0xFF	; 255
    15c0:	20 83       	st	Z, r18
    15c2:	31 83       	std	Z+1, r19	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    15c4:	23 e0       	ldi	r18, 0x03	; 3
    15c6:	28 0f       	add	r18, r24
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	f9 01       	movw	r30, r18
    15cc:	ee 0f       	add	r30, r30
    15ce:	ff 1f       	adc	r31, r31
    15d0:	e1 51       	subi	r30, 0x11	; 17
    15d2:	f7 4c       	sbci	r31, 0xC7	; 199
    15d4:	a0 83       	st	Z, r26
    15d6:	b1 83       	std	Z+1, r27	; 0x01
    reactStr[1][number]=length;
    15d8:	f9 01       	movw	r30, r18
    15da:	ee 0f       	add	r30, r30
    15dc:	ff 1f       	adc	r31, r31
    15de:	e1 5d       	subi	r30, 0xD1	; 209
    15e0:	f6 4c       	sbci	r31, 0xC6	; 198
    15e2:	60 83       	st	Z, r22
    15e4:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    15e6:	22 0f       	add	r18, r18
    15e8:	33 1f       	adc	r19, r19
    15ea:	f9 01       	movw	r30, r18
    15ec:	e1 59       	subi	r30, 0x91	; 145
    15ee:	f6 4c       	sbci	r31, 0xC6	; 198
    15f0:	40 83       	st	Z, r20
    15f2:	51 83       	std	Z+1, r21	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    15f4:	24 e0       	ldi	r18, 0x04	; 4
    15f6:	28 0f       	add	r18, r24
    15f8:	30 e0       	ldi	r19, 0x00	; 0
    15fa:	f9 01       	movw	r30, r18
    15fc:	ee 0f       	add	r30, r30
    15fe:	ff 1f       	adc	r31, r31
    1600:	e1 51       	subi	r30, 0x11	; 17
    1602:	f7 4c       	sbci	r31, 0xC7	; 199
    1604:	a7 e5       	ldi	r26, 0x57	; 87
    1606:	ba e7       	ldi	r27, 0x7A	; 122
    1608:	a0 83       	st	Z, r26
    160a:	b1 83       	std	Z+1, r27	; 0x01
    reactStr[1][number]=length;
    160c:	f9 01       	movw	r30, r18
    160e:	ee 0f       	add	r30, r30
    1610:	ff 1f       	adc	r31, r31
    1612:	e1 5d       	subi	r30, 0xD1	; 209
    1614:	f6 4c       	sbci	r31, 0xC6	; 198
    1616:	60 83       	st	Z, r22
    1618:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    161a:	22 0f       	add	r18, r18
    161c:	33 1f       	adc	r19, r19
    161e:	f9 01       	movw	r30, r18
    1620:	e1 59       	subi	r30, 0x91	; 145
    1622:	f6 4c       	sbci	r31, 0xC6	; 198
    1624:	40 83       	st	Z, r20
    1626:	51 83       	std	Z+1, r21	; 0x01
    SetResponse(custStrEnd++, A_LF, 2, TEASER);
    SetResponse(custStrEnd++, A_PROMPT, L_PROMPT, TEASER);
    //SetResponse(custStrEnd++, A_SPACE, L_SPACE, TEASER);

    return custStrEnd;
}
    1628:	8b 5f       	subi	r24, 0xFB	; 251
    162a:	df 91       	pop	r29
    162c:	cf 91       	pop	r28
    162e:	08 95       	ret

00001630 <PopulateObject>:

//Get all the relevant data and string addresses of an object
void PopulateObject(uint16_t offset, object_model_t *object){
    1630:	af 92       	push	r10
    1632:	bf 92       	push	r11
    1634:	df 92       	push	r13
    1636:	ef 92       	push	r14
    1638:	ff 92       	push	r15
    163a:	0f 93       	push	r16
    163c:	1f 93       	push	r17
    163e:	cf 93       	push	r28
    1640:	df 93       	push	r29
    1642:	cd b7       	in	r28, 0x3d	; 61
    1644:	de b7       	in	r29, 0x3e	; 62
    1646:	2c 97       	sbiw	r28, 0x0c	; 12
    1648:	cd bf       	out	0x3d, r28	; 61
    164a:	de bf       	out	0x3e, r29	; 62
    164c:	7c 01       	movw	r14, r24
    164e:	8b 01       	movw	r16, r22
    uint16_t parStr;
    offset += L_BOILER;

    //Fill things with fixed distance to offset
    uint8_t data[OFF_STRINGFLDS];
    ExtEERead(offset, OFF_STRINGFLDS, GAME, &data[0]);
    1650:	9e 01       	movw	r18, r28
    1652:	2f 5f       	subi	r18, 0xFF	; 255
    1654:	3f 4f       	sbci	r19, 0xFF	; 255
    1656:	40 e0       	ldi	r20, 0x00	; 0
    1658:	6c e0       	ldi	r22, 0x0C	; 12
    165a:	80 96       	adiw	r24, 0x20	; 32
    165c:	de de       	rcall	.-580    	; 0x141a <ExtEERead>
    object->addrNextObj = (data[OFF_NEXTOBJ]<<8|data[OFF_NEXTOBJ+1])+L_BOILER;
    165e:	89 81       	ldd	r24, Y+1	; 0x01
    1660:	9a 81       	ldd	r25, Y+2	; 0x02
    1662:	98 27       	eor	r25, r24
    1664:	89 27       	eor	r24, r25
    1666:	98 27       	eor	r25, r24
    1668:	80 96       	adiw	r24, 0x20	; 32
    166a:	f8 01       	movw	r30, r16
    166c:	80 83       	st	Z, r24
    166e:	91 83       	std	Z+1, r25	; 0x01
    object->addrNextLvl = (data[OFF_NEXTLVL]<<8|data[OFF_NEXTLVL+1])+L_BOILER;
    1670:	8b 81       	ldd	r24, Y+3	; 0x03
    1672:	9c 81       	ldd	r25, Y+4	; 0x04
    1674:	98 27       	eor	r25, r24
    1676:	89 27       	eor	r24, r25
    1678:	98 27       	eor	r25, r24
    167a:	80 96       	adiw	r24, 0x20	; 32
    167c:	82 83       	std	Z+2, r24	; 0x02
    167e:	93 83       	std	Z+3, r25	; 0x03
    1680:	de 01       	movw	r26, r28
    1682:	15 96       	adiw	r26, 0x05	; 5
    1684:	34 96       	adiw	r30, 0x04	; 4
    1686:	c8 01       	movw	r24, r16
    1688:	0c 96       	adiw	r24, 0x0c	; 12
    for (uint8_t x=0; x<BYTE_FIELDS_LEN; ++x){
        object->byteField[x]=data[x+OFF_BYTEFLDS];
    168a:	2d 91       	ld	r18, X+
    168c:	21 93       	st	Z+, r18
    //Fill things with fixed distance to offset
    uint8_t data[OFF_STRINGFLDS];
    ExtEERead(offset, OFF_STRINGFLDS, GAME, &data[0]);
    object->addrNextObj = (data[OFF_NEXTOBJ]<<8|data[OFF_NEXTOBJ+1])+L_BOILER;
    object->addrNextLvl = (data[OFF_NEXTLVL]<<8|data[OFF_NEXTLVL+1])+L_BOILER;
    for (uint8_t x=0; x<BYTE_FIELDS_LEN; ++x){
    168e:	e8 17       	cp	r30, r24
    1690:	f9 07       	cpc	r31, r25
    1692:	d9 f7       	brne	.-10     	; 0x168a <PopulateObject+0x5a>
        object->byteField[x]=data[x+OFF_BYTEFLDS];
    }

    //Find out where all of the strings begin and how long they are
    offset += OFF_STRINGFLDS;
    1694:	fc e2       	ldi	r31, 0x2C	; 44
    1696:	ef 0e       	add	r14, r31
    1698:	f1 1c       	adc	r15, r1
    169a:	58 01       	movw	r10, r16
    for(uint8_t x=0; x<STRING_FIELDS_LEN; ++x){
    169c:	d1 2c       	mov	r13, r1
        
        //Determine length
        ExtEERead(offset, 3, GAME, &data[0]);
    169e:	9e 01       	movw	r18, r28
    16a0:	2f 5f       	subi	r18, 0xFF	; 255
    16a2:	3f 4f       	sbci	r19, 0xFF	; 255
    16a4:	40 e0       	ldi	r20, 0x00	; 0
    16a6:	63 e0       	ldi	r22, 0x03	; 3
    16a8:	c7 01       	movw	r24, r14
    16aa:	b7 de       	rcall	.-658    	; 0x141a <ExtEERead>
    16ac:	89 81       	ldd	r24, Y+1	; 0x01
    16ae:	9a 81       	ldd	r25, Y+2	; 0x02
    16b0:	98 27       	eor	r25, r24
    16b2:	89 27       	eor	r24, r25
    16b4:	98 27       	eor	r25, r24
        parStr = (data[0]<<8|data[1]);
        offset += 2;
    16b6:	97 01       	movw	r18, r14
    16b8:	2e 5f       	subi	r18, 0xFE	; 254
    16ba:	3f 4f       	sbci	r19, 0xFF	; 255
        if (x >= OPEN_ACL_MSG){
    16bc:	43 e0       	ldi	r20, 0x03	; 3
    16be:	4d 15       	cp	r20, r13
    16c0:	80 f4       	brcc	.+32     	; 0x16e2 <PopulateObject+0xb2>
            object->lenStr[x]= parStr-1;
    16c2:	ac 01       	movw	r20, r24
    16c4:	41 50       	subi	r20, 0x01	; 1
    16c6:	51 09       	sbc	r21, r1
    16c8:	f8 01       	movw	r30, r16
    16ca:	42 8f       	std	Z+26, r20	; 0x1a
    16cc:	53 8f       	std	Z+27, r21	; 0x1b
            object->addrStr[x]=offset+1;
    16ce:	f3 e0       	ldi	r31, 0x03	; 3
    16d0:	ef 0e       	add	r14, r31
    16d2:	f1 1c       	adc	r15, r1
    16d4:	f8 01       	movw	r30, r16
    16d6:	e4 86       	std	Z+12, r14	; 0x0c
    16d8:	f5 86       	std	Z+13, r15	; 0x0d
            object->effect[x-OPEN_ACL_MSG] = data[2];
    16da:	4b 81       	ldd	r20, Y+3	; 0x03
    16dc:	f5 01       	movw	r30, r10
    16de:	44 a3       	std	Z+36, r20	; 0x24
    16e0:	05 c0       	rjmp	.+10     	; 0x16ec <PopulateObject+0xbc>
        } else {
            object->lenStr[x]= parStr;
    16e2:	f8 01       	movw	r30, r16
    16e4:	82 8f       	std	Z+26, r24	; 0x1a
    16e6:	93 8f       	std	Z+27, r25	; 0x1b
            object->addrStr[x]=offset;
    16e8:	24 87       	std	Z+12, r18	; 0x0c
    16ea:	35 87       	std	Z+13, r19	; 0x0d
        }
        
        //Determine string start location for next field
        offset += parStr;
    16ec:	7c 01       	movw	r14, r24
    16ee:	e2 0e       	add	r14, r18
    16f0:	f3 1e       	adc	r15, r19
        object->byteField[x]=data[x+OFF_BYTEFLDS];
    }

    //Find out where all of the strings begin and how long they are
    offset += OFF_STRINGFLDS;
    for(uint8_t x=0; x<STRING_FIELDS_LEN; ++x){
    16f2:	d3 94       	inc	r13
    16f4:	0e 5f       	subi	r16, 0xFE	; 254
    16f6:	1f 4f       	sbci	r17, 0xFF	; 255
    16f8:	ff ef       	ldi	r31, 0xFF	; 255
    16fa:	af 1a       	sub	r10, r31
    16fc:	bf 0a       	sbc	r11, r31
    16fe:	47 e0       	ldi	r20, 0x07	; 7
    1700:	d4 12       	cpse	r13, r20
    1702:	cd cf       	rjmp	.-102    	; 0x169e <PopulateObject+0x6e>
        }
        
        //Determine string start location for next field
        offset += parStr;
    }    
}
    1704:	2c 96       	adiw	r28, 0x0c	; 12
    1706:	cd bf       	out	0x3d, r28	; 61
    1708:	de bf       	out	0x3e, r29	; 62
    170a:	df 91       	pop	r29
    170c:	cf 91       	pop	r28
    170e:	1f 91       	pop	r17
    1710:	0f 91       	pop	r16
    1712:	ff 90       	pop	r15
    1714:	ef 90       	pop	r14
    1716:	df 90       	pop	r13
    1718:	bf 90       	pop	r11
    171a:	af 90       	pop	r10
    171c:	08 95       	ret

0000171e <CheckLetter>:

//Check if the entered letter corresponds with a name
uint8_t CheckLetter(uint16_t object, uint8_t letter){
    171e:	cf 92       	push	r12
    1720:	df 92       	push	r13
    1722:	ef 92       	push	r14
    1724:	ff 92       	push	r15
    1726:	0f 93       	push	r16
    1728:	1f 93       	push	r17
    172a:	cf 93       	push	r28
    172c:	df 93       	push	r29
    172e:	cd b7       	in	r28, 0x3d	; 61
    1730:	de b7       	in	r29, 0x3e	; 62
    1732:	a0 97       	sbiw	r28, 0x20	; 32
    1734:	cd bf       	out	0x3d, r28	; 61
    1736:	de bf       	out	0x3e, r29	; 62
    1738:	c6 2e       	mov	r12, r22
    
    uint8_t found = 0;
    uint8_t data[32];

    object += L_BOILER;
    173a:	7c 01       	movw	r14, r24
    173c:	20 e2       	ldi	r18, 0x20	; 32
    173e:	e2 0e       	add	r14, r18
    1740:	f1 1c       	adc	r15, r1
    ExtEERead(object+OFF_STRINGFLDS, 2, GAME, &data[0]);
    1742:	9e 01       	movw	r18, r28
    1744:	2f 5f       	subi	r18, 0xFF	; 255
    1746:	3f 4f       	sbci	r19, 0xFF	; 255
    1748:	40 e0       	ldi	r20, 0x00	; 0
    174a:	62 e0       	ldi	r22, 0x02	; 2
    174c:	8c 96       	adiw	r24, 0x2c	; 44
    174e:	65 de       	rcall	.-822    	; 0x141a <ExtEERead>
    uint8_t x = data[1]; //Assuming a name is not longer than 255 characters.
    1750:	1a 81       	ldd	r17, Y+2	; 0x02
}

//Check if the entered letter corresponds with a name
uint8_t CheckLetter(uint16_t object, uint8_t letter){
    
    uint8_t found = 0;
    1752:	d1 2c       	mov	r13, r1

    object += L_BOILER;
    ExtEERead(object+OFF_STRINGFLDS, 2, GAME, &data[0]);
    uint8_t x = data[1]; //Assuming a name is not longer than 255 characters.

    while (x){
    1754:	11 23       	and	r17, r17
    1756:	51 f1       	breq	.+84     	; 0x17ac <CheckLetter+0x8e>
    1758:	01 2f       	mov	r16, r17
    175a:	11 32       	cpi	r17, 0x21	; 33
    175c:	08 f0       	brcs	.+2      	; 0x1760 <CheckLetter+0x42>
    175e:	00 e2       	ldi	r16, 0x20	; 32
        uint8_t max;
        if (x>32) max = 32; else max = x;
        ExtEERead(object+OFF_STRINGFLDS+2, max, GAME, &data[0]);
    1760:	9e 01       	movw	r18, r28
    1762:	2f 5f       	subi	r18, 0xFF	; 255
    1764:	3f 4f       	sbci	r19, 0xFF	; 255
    1766:	40 e0       	ldi	r20, 0x00	; 0
    1768:	60 2f       	mov	r22, r16
    176a:	c7 01       	movw	r24, r14
    176c:	0e 96       	adiw	r24, 0x0e	; 14
    176e:	55 de       	rcall	.-854    	; 0x141a <ExtEERead>
    1770:	fe 01       	movw	r30, r28
    1772:	31 96       	adiw	r30, 0x01	; 1
        for (uint8_t y=0; y<max; ++y){
    1774:	80 e0       	ldi	r24, 0x00	; 0
            if (found){
    1776:	dd 20       	and	r13, r13
    1778:	61 f0       	breq	.+24     	; 0x1792 <CheckLetter+0x74>
                if ((data[y]|0x20) == letter) return 1; else return 0;
    177a:	e1 e0       	ldi	r30, 0x01	; 1
    177c:	f0 e0       	ldi	r31, 0x00	; 0
    177e:	ec 0f       	add	r30, r28
    1780:	fd 1f       	adc	r31, r29
    1782:	e8 0f       	add	r30, r24
    1784:	f1 1d       	adc	r31, r1
    1786:	90 81       	ld	r25, Z
    1788:	90 62       	ori	r25, 0x20	; 32
    178a:	81 e0       	ldi	r24, 0x01	; 1
    178c:	9c 11       	cpse	r25, r12
    178e:	0e c0       	rjmp	.+28     	; 0x17ac <CheckLetter+0x8e>
    1790:	0e c0       	rjmp	.+28     	; 0x17ae <CheckLetter+0x90>
            }
            if (data[y] == '[') found = 1;
    1792:	91 91       	ld	r25, Z+
    1794:	dd 24       	eor	r13, r13
    1796:	d3 94       	inc	r13
    1798:	9b 35       	cpi	r25, 0x5B	; 91
    179a:	09 f0       	breq	.+2      	; 0x179e <CheckLetter+0x80>
    179c:	d1 2c       	mov	r13, r1

    while (x){
        uint8_t max;
        if (x>32) max = 32; else max = x;
        ExtEERead(object+OFF_STRINGFLDS+2, max, GAME, &data[0]);
        for (uint8_t y=0; y<max; ++y){
    179e:	8f 5f       	subi	r24, 0xFF	; 255
    17a0:	80 17       	cp	r24, r16
    17a2:	48 f3       	brcs	.-46     	; 0x1776 <CheckLetter+0x58>
            if (found){
                if ((data[y]|0x20) == letter) return 1; else return 0;
            }
            if (data[y] == '[') found = 1;
        }
        object += max;
    17a4:	e0 0e       	add	r14, r16
    17a6:	f1 1c       	adc	r15, r1
        x -= max;
    17a8:	10 1b       	sub	r17, r16
    17aa:	d4 cf       	rjmp	.-88     	; 0x1754 <CheckLetter+0x36>
    }
    return 0;
    17ac:	80 e0       	ldi	r24, 0x00	; 0
}
    17ae:	a0 96       	adiw	r28, 0x20	; 32
    17b0:	cd bf       	out	0x3d, r28	; 61
    17b2:	de bf       	out	0x3e, r29	; 62
    17b4:	df 91       	pop	r29
    17b6:	cf 91       	pop	r28
    17b8:	1f 91       	pop	r17
    17ba:	0f 91       	pop	r16
    17bc:	ff 90       	pop	r15
    17be:	ef 90       	pop	r14
    17c0:	df 90       	pop	r13
    17c2:	cf 90       	pop	r12
    17c4:	08 95       	ret

000017c6 <FindChild>:

//Returns the child's address if the child is visible and the search letter matches
uint16_t FindChild(uint16_t parent, uint8_t letter, uint16_t start){
    17c6:	af 92       	push	r10
    17c8:	bf 92       	push	r11
    17ca:	df 92       	push	r13
    17cc:	ef 92       	push	r14
    17ce:	ff 92       	push	r15
    17d0:	0f 93       	push	r16
    17d2:	1f 93       	push	r17
    17d4:	cf 93       	push	r28
    17d6:	df 93       	push	r29
    17d8:	00 d0       	rcall	.+0      	; 0x17da <FindChild+0x14>
    17da:	00 d0       	rcall	.+0      	; 0x17dc <FindChild+0x16>
    17dc:	cd b7       	in	r28, 0x3d	; 61
    17de:	de b7       	in	r29, 0x3e	; 62
    17e0:	d6 2e       	mov	r13, r22
    17e2:	5a 01       	movw	r10, r20
    
    uint16_t child = parent;
    uint8_t data[4];

    ExtEERead(child+L_BOILER, 4, GAME, &data[0]);
    17e4:	9e 01       	movw	r18, r28
    17e6:	2f 5f       	subi	r18, 0xFF	; 255
    17e8:	3f 4f       	sbci	r19, 0xFF	; 255
    17ea:	40 e0       	ldi	r20, 0x00	; 0
    17ec:	64 e0       	ldi	r22, 0x04	; 4
    17ee:	80 96       	adiw	r24, 0x20	; 32
    17f0:	14 de       	rcall	.-984    	; 0x141a <ExtEERead>
    17f2:	e9 80       	ldd	r14, Y+1	; 0x01
    17f4:	fa 80       	ldd	r15, Y+2	; 0x02
    17f6:	fe 24       	eor	r15, r14
    17f8:	ef 24       	eor	r14, r15
    17fa:	fe 24       	eor	r15, r14
    17fc:	0b 81       	ldd	r16, Y+3	; 0x03
    17fe:	1c 81       	ldd	r17, Y+4	; 0x04
    1800:	10 27       	eor	r17, r16
    1802:	01 27       	eor	r16, r17
    1804:	10 27       	eor	r17, r16
    parent = (data[0]<<8|data[1]);    //Next object on parent level
    child =  (data[2]<<8|data[3]);    //First object on child level

    //As long as the child is within the parent's range
    while (parent>child){
    1806:	0e 15       	cp	r16, r14
    1808:	1f 05       	cpc	r17, r15
    180a:	30 f5       	brcc	.+76     	; 0x1858 <FindChild+0x92>

        //If child's address is higher than the start address, perform search for letter
        if (child>start){
    180c:	a0 16       	cp	r10, r16
    180e:	b1 06       	cpc	r11, r17
    1810:	58 f0       	brcs	.+22     	; 0x1828 <FindChild+0x62>
                if ((letter == 0)||(CheckLetter(child, letter))) return child;
            }
        }

        //Not visible or name not right
        ExtEERead(child+L_BOILER, 2, GAME, &data[0]);
    1812:	9e 01       	movw	r18, r28
    1814:	2f 5f       	subi	r18, 0xFF	; 255
    1816:	3f 4f       	sbci	r19, 0xFF	; 255
    1818:	40 e0       	ldi	r20, 0x00	; 0
    181a:	62 e0       	ldi	r22, 0x02	; 2
    181c:	c8 01       	movw	r24, r16
    181e:	80 96       	adiw	r24, 0x20	; 32
    1820:	fc dd       	rcall	.-1032   	; 0x141a <ExtEERead>
    1822:	09 81       	ldd	r16, Y+1	; 0x01
    1824:	1a 81       	ldd	r17, Y+2	; 0x02
    1826:	ec cf       	rjmp	.-40     	; 0x1800 <FindChild+0x3a>
    //As long as the child is within the parent's range
    while (parent>child){

        //If child's address is higher than the start address, perform search for letter
        if (child>start){
            ExtEERead(child+OFF_BYTEFLDS+VISIBLE_ACL+L_BOILER, 1, GAME, &data[0]);
    1828:	9e 01       	movw	r18, r28
    182a:	2f 5f       	subi	r18, 0xFF	; 255
    182c:	3f 4f       	sbci	r19, 0xFF	; 255
    182e:	40 e0       	ldi	r20, 0x00	; 0
    1830:	61 e0       	ldi	r22, 0x01	; 1
    1832:	c8 01       	movw	r24, r16
    1834:	85 96       	adiw	r24, 0x25	; 37
    1836:	f1 dd       	rcall	.-1054   	; 0x141a <ExtEERead>
            if ((data[0] == 0)||(CheckState(data[0]))) {
    1838:	89 81       	ldd	r24, Y+1	; 0x01
    183a:	81 11       	cpse	r24, r1
    183c:	03 c0       	rjmp	.+6      	; 0x1844 <FindChild+0x7e>
                if ((letter == 0)||(CheckLetter(child, letter))) return child;
    183e:	d1 10       	cpse	r13, r1
    1840:	05 c0       	rjmp	.+10     	; 0x184c <FindChild+0x86>
    while (parent>child){

        //If child's address is higher than the start address, perform search for letter
        if (child>start){
            ExtEERead(child+OFF_BYTEFLDS+VISIBLE_ACL+L_BOILER, 1, GAME, &data[0]);
            if ((data[0] == 0)||(CheckState(data[0]))) {
    1842:	0d c0       	rjmp	.+26     	; 0x185e <FindChild+0x98>
    1844:	a0 dc       	rcall	.-1728   	; 0x1186 <CheckState>
    1846:	81 11       	cpse	r24, r1
    1848:	fa cf       	rjmp	.-12     	; 0x183e <FindChild+0x78>
                if ((letter == 0)||(CheckLetter(child, letter))) return child;
    184a:	e3 cf       	rjmp	.-58     	; 0x1812 <FindChild+0x4c>
    184c:	6d 2d       	mov	r22, r13
    184e:	c8 01       	movw	r24, r16
    1850:	66 df       	rcall	.-308    	; 0x171e <CheckLetter>
    1852:	88 23       	and	r24, r24
    1854:	f1 f2       	breq	.-68     	; 0x1812 <FindChild+0x4c>
    1856:	03 c0       	rjmp	.+6      	; 0x185e <FindChild+0x98>

        //Not visible or name not right
        ExtEERead(child+L_BOILER, 2, GAME, &data[0]);
        child = (data[0]<<8|data[1]);    //Next object on child level
        
    } return 0;
    1858:	80 e0       	ldi	r24, 0x00	; 0
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	01 c0       	rjmp	.+2      	; 0x1860 <FindChild+0x9a>
    185e:	c8 01       	movw	r24, r16
}
    1860:	24 96       	adiw	r28, 0x04	; 4
    1862:	cd bf       	out	0x3d, r28	; 61
    1864:	de bf       	out	0x3e, r29	; 62
    1866:	df 91       	pop	r29
    1868:	cf 91       	pop	r28
    186a:	1f 91       	pop	r17
    186c:	0f 91       	pop	r16
    186e:	ff 90       	pop	r15
    1870:	ef 90       	pop	r14
    1872:	df 90       	pop	r13
    1874:	bf 90       	pop	r11
    1876:	af 90       	pop	r10
    1878:	08 95       	ret

0000187a <InpOkChk>:

//Allow only a(A) to z(Z) and 0 to 9 as input
uint8_t InpOkChk(uint8_t test){
    test |= 0x20;
    187a:	80 62       	ori	r24, 0x20	; 32
    if ((test>='a')&&(test<='z')) return 1;
    187c:	9f e9       	ldi	r25, 0x9F	; 159
    187e:	98 0f       	add	r25, r24
    1880:	9a 31       	cpi	r25, 0x1A	; 26
    1882:	38 f0       	brcs	.+14     	; 0x1892 <InpOkChk+0x18>
    1884:	90 ed       	ldi	r25, 0xD0	; 208
    1886:	98 0f       	add	r25, r24
    1888:	81 e0       	ldi	r24, 0x01	; 1
    188a:	9a 30       	cpi	r25, 0x0A	; 10
    188c:	18 f0       	brcs	.+6      	; 0x1894 <InpOkChk+0x1a>
    188e:	80 e0       	ldi	r24, 0x00	; 0
    1890:	08 95       	ret
    1892:	81 e0       	ldi	r24, 0x01	; 1
    if ((test>='0')&&(test<='9')) return 1;
    return 0;
}
    1894:	08 95       	ret

00001896 <CleanInput>:

//Cleans input of garbage and returns length of cleaned input "o->d2  !\0" becomes "od2\0"
uint8_t CleanInput(uint8_t *data){
    1896:	0f 93       	push	r16
    1898:	1f 93       	push	r17
    189a:	cf 93       	push	r28
    189c:	df 93       	push	r29
    189e:	8c 01       	movw	r16, r24
    uint8_t cnt = 0;
    for (uint8_t x=0; data[x]!=0; ++x){
    18a0:	d0 e0       	ldi	r29, 0x00	; 0
    return 0;
}

//Cleans input of garbage and returns length of cleaned input "o->d2  !\0" becomes "od2\0"
uint8_t CleanInput(uint8_t *data){
    uint8_t cnt = 0;
    18a2:	c0 e0       	ldi	r28, 0x00	; 0
    for (uint8_t x=0; data[x]!=0; ++x){
    18a4:	f8 01       	movw	r30, r16
    18a6:	ed 0f       	add	r30, r29
    18a8:	f1 1d       	adc	r31, r1
    18aa:	20 81       	ld	r18, Z
    18ac:	8c 2f       	mov	r24, r28
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	22 23       	and	r18, r18
    18b2:	51 f0       	breq	.+20     	; 0x18c8 <CleanInput+0x32>
        data[cnt] = data[x];
    18b4:	d8 01       	movw	r26, r16
    18b6:	a8 0f       	add	r26, r24
    18b8:	b9 1f       	adc	r27, r25
    18ba:	2c 93       	st	X, r18
        if (InpOkChk(data[x])) ++cnt;
    18bc:	80 81       	ld	r24, Z
    18be:	dd df       	rcall	.-70     	; 0x187a <InpOkChk>
    18c0:	81 11       	cpse	r24, r1
    18c2:	cf 5f       	subi	r28, 0xFF	; 255
}

//Cleans input of garbage and returns length of cleaned input "o->d2  !\0" becomes "od2\0"
uint8_t CleanInput(uint8_t *data){
    uint8_t cnt = 0;
    for (uint8_t x=0; data[x]!=0; ++x){
    18c4:	df 5f       	subi	r29, 0xFF	; 255
    18c6:	ee cf       	rjmp	.-36     	; 0x18a4 <CleanInput+0xe>
        data[cnt] = data[x];
        if (InpOkChk(data[x])) ++cnt;
    }
    data[cnt] = 0;
    18c8:	f8 01       	movw	r30, r16
    18ca:	e8 0f       	add	r30, r24
    18cc:	f9 1f       	adc	r31, r25
    18ce:	10 82       	st	Z, r1
    return cnt;
}
    18d0:	8c 2f       	mov	r24, r28
    18d2:	df 91       	pop	r29
    18d4:	cf 91       	pop	r28
    18d6:	1f 91       	pop	r17
    18d8:	0f 91       	pop	r16
    18da:	08 95       	ret

000018dc <CheckSend>:

//Send routine, optimized for low memory usage
uint8_t CheckSend(){
    18dc:	cf 93       	push	r28
    static uint8_t txPart;
    uint8_t EEreadLength=0;

    //Check if more string(part)s have to be sent to the serial output if previous send operation is completed
    if ((txAddrNow < TXLISTLEN) && serTxDone){
    18de:	20 91 1b 3a 	lds	r18, 0x3A1B	; 0x803a1b <txAddrNow>
    18e2:	28 30       	cpi	r18, 0x08	; 8
    18e4:	08 f0       	brcs	.+2      	; 0x18e8 <CheckSend+0xc>
    18e6:	47 c0       	rjmp	.+142    	; 0x1976 <CheckSend+0x9a>
    18e8:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <serTxDone>
    18ec:	88 23       	and	r24, r24
    18ee:	09 f4       	brne	.+2      	; 0x18f2 <CheckSend+0x16>
    18f0:	42 c0       	rjmp	.+132    	; 0x1976 <CheckSend+0x9a>
        if (txStrLen[txAddrNow] == 0){
    18f2:	82 2f       	mov	r24, r18
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	fc 01       	movw	r30, r24
    18f8:	e4 5e       	subi	r30, 0xE4	; 228
    18fa:	f5 4c       	sbci	r31, 0xC5	; 197
    18fc:	e0 81       	ld	r30, Z
    18fe:	e1 11       	cpse	r30, r1
    1900:	06 c0       	rjmp	.+12     	; 0x190e <CheckSend+0x32>
            txPart = 0;
    1902:	10 92 dc 38 	sts	0x38DC, r1	; 0x8038dc <txPart.3932>
            txAddrNow = TXLISTLEN;
    1906:	88 e0       	ldi	r24, 0x08	; 8
    1908:	80 93 1b 3a 	sts	0x3A1B, r24	; 0x803a1b <txAddrNow>
    190c:	2c c0       	rjmp	.+88     	; 0x1966 <CheckSend+0x8a>
        } else if (txPart < txStrLen[txAddrNow]){
    190e:	50 91 dc 38 	lds	r21, 0x38DC	; 0x8038dc <txPart.3932>
    1912:	5e 17       	cp	r21, r30
    1914:	50 f5       	brcc	.+84     	; 0x196a <CheckSend+0x8e>
            EEreadLength = txStrLen[txAddrNow]-txPart;
    1916:	ce 2f       	mov	r28, r30
    1918:	c5 1b       	sub	r28, r21
    191a:	c1 32       	cpi	r28, 0x21	; 33
    191c:	08 f0       	brcs	.+2      	; 0x1920 <CheckSend+0x44>
    191e:	c0 e2       	ldi	r28, 0x20	; 32
            if (EEreadLength>=TXLEN) EEreadLength = TXLEN-1;
            ExtEERead(txAddrList[txAddrNow]+txPart, EEreadLength, txTypeNow, &txBuffer[0]);
    1920:	88 0f       	add	r24, r24
    1922:	99 1f       	adc	r25, r25
    1924:	fc 01       	movw	r30, r24
    1926:	ec 5d       	subi	r30, 0xDC	; 220
    1928:	f5 4c       	sbci	r31, 0xC5	; 197
    192a:	80 81       	ld	r24, Z
    192c:	91 81       	ldd	r25, Z+1	; 0x01
    192e:	23 ee       	ldi	r18, 0xE3	; 227
    1930:	3a e3       	ldi	r19, 0x3A	; 58
    1932:	40 91 1a 3a 	lds	r20, 0x3A1A	; 0x803a1a <txTypeNow>
    1936:	6c 2f       	mov	r22, r28
    1938:	85 0f       	add	r24, r21
    193a:	91 1d       	adc	r25, r1
    193c:	6e dd       	rcall	.-1316   	; 0x141a <ExtEERead>
            txPart += EEreadLength;
    193e:	80 91 dc 38 	lds	r24, 0x38DC	; 0x8038dc <txPart.3932>
    1942:	8c 0f       	add	r24, r28
    1944:	80 93 dc 38 	sts	0x38DC, r24	; 0x8038dc <txPart.3932>
            txBuffer[EEreadLength] = 0; //Add string terminator after piece to send to plug memory leak
    1948:	ec 2f       	mov	r30, r28
    194a:	f0 e0       	ldi	r31, 0x00	; 0
    194c:	ed 51       	subi	r30, 0x1D	; 29
    194e:	f5 4c       	sbci	r31, 0xC5	; 197
    1950:	10 82       	st	Z, r1
            if ((txBuffer[0] == 0) && (EEreadLength)) txBuffer[0] = 0xDB; //Block character when data wrong.
    1952:	80 91 e3 3a 	lds	r24, 0x3AE3	; 0x803ae3 <txBuffer>
    1956:	81 11       	cpse	r24, r1
    1958:	03 c0       	rjmp	.+6      	; 0x1960 <CheckSend+0x84>
    195a:	8b ed       	ldi	r24, 0xDB	; 219
    195c:	80 93 e3 3a 	sts	0x3AE3, r24	; 0x803ae3 <txBuffer>
            SerSend(&txBuffer[0]);
    1960:	83 ee       	ldi	r24, 0xE3	; 227
    1962:	9a e3       	ldi	r25, 0x3A	; 58
    1964:	73 da       	rcall	.-2842   	; 0xe4c <SerSend>
        } else {
            txPart = 0;
            ++txAddrNow;
        }
    } else if (serTxDone) return 0; //All is sent!
    return 1; //Still sending, do not change the data in the tx variables
    1966:	81 e0       	ldi	r24, 0x01	; 1
    1968:	0b c0       	rjmp	.+22     	; 0x1980 <CheckSend+0xa4>
            txPart += EEreadLength;
            txBuffer[EEreadLength] = 0; //Add string terminator after piece to send to plug memory leak
            if ((txBuffer[0] == 0) && (EEreadLength)) txBuffer[0] = 0xDB; //Block character when data wrong.
            SerSend(&txBuffer[0]);
        } else {
            txPart = 0;
    196a:	10 92 dc 38 	sts	0x38DC, r1	; 0x8038dc <txPart.3932>
            ++txAddrNow;
    196e:	2f 5f       	subi	r18, 0xFF	; 255
    1970:	20 93 1b 3a 	sts	0x3A1B, r18	; 0x803a1b <txAddrNow>
    1974:	f8 cf       	rjmp	.-16     	; 0x1966 <CheckSend+0x8a>
        }
    } else if (serTxDone) return 0; //All is sent!
    1976:	90 91 08 38 	lds	r25, 0x3808	; 0x803808 <serTxDone>
    197a:	81 e0       	ldi	r24, 0x01	; 1
    197c:	91 11       	cpse	r25, r1
    197e:	80 e0       	ldi	r24, 0x00	; 0
    return 1; //Still sending, do not change the data in the tx variables
}
    1980:	cf 91       	pop	r28
    1982:	08 95       	ret

00001984 <CheckResponse>:

//Send another part of the response and play the effect afterwards
uint8_t CheckResponse(){
    1984:	cf 93       	push	r28
    1986:	df 93       	push	r29
    static uint8_t number = 0;
    if (responseList){
    1988:	c0 91 ee 38 	lds	r28, 0x38EE	; 0x8038ee <responseList>
    198c:	cc 23       	and	r28, r28
    198e:	e9 f1       	breq	.+122    	; 0x1a0a <CheckResponse+0x86>
        --responseList;
    1990:	c1 50       	subi	r28, 0x01	; 1
    1992:	c0 93 ee 38 	sts	0x38EE, r28	; 0x8038ee <responseList>
        if (reactStr[0][number] == CURR_LOC) {
    1996:	d0 91 db 38 	lds	r29, 0x38DB	; 0x8038db <number.3936>
    199a:	2d 2f       	mov	r18, r29
    199c:	30 e0       	ldi	r19, 0x00	; 0
    199e:	f9 01       	movw	r30, r18
    19a0:	ee 0f       	add	r30, r30
    19a2:	ff 1f       	adc	r31, r31
    19a4:	e1 51       	subi	r30, 0x11	; 17
    19a6:	f7 4c       	sbci	r31, 0xC7	; 199
    19a8:	80 81       	ld	r24, Z
    19aa:	91 81       	ldd	r25, Z+1	; 0x01
    19ac:	80 3f       	cpi	r24, 0xF0	; 240
    19ae:	4f ef       	ldi	r20, 0xFF	; 255
    19b0:	94 07       	cpc	r25, r20
    19b2:	51 f4       	brne	.+20     	; 0x19c8 <CheckResponse+0x44>
            PrepareSending(currObj.addrStr[NAME], currObj.lenStr[NAME], GAME);
    19b4:	60 91 09 3a 	lds	r22, 0x3A09	; 0x803a09 <currObj+0x1a>
    19b8:	70 91 0a 3a 	lds	r23, 0x3A0A	; 0x803a0a <currObj+0x1b>
    19bc:	40 e0       	ldi	r20, 0x00	; 0
    19be:	80 91 fb 39 	lds	r24, 0x39FB	; 0x8039fb <currObj+0xc>
    19c2:	90 91 fc 39 	lds	r25, 0x39FC	; 0x8039fc <currObj+0xd>
    19c6:	0d c0       	rjmp	.+26     	; 0x19e2 <CheckResponse+0x5e>
        } else {
            PrepareSending(reactStr[0][number], reactStr[1][number], reactStr[2][number]);
    19c8:	d9 01       	movw	r26, r18
    19ca:	aa 0f       	add	r26, r26
    19cc:	bb 1f       	adc	r27, r27
    19ce:	a1 59       	subi	r26, 0x91	; 145
    19d0:	b6 4c       	sbci	r27, 0xC6	; 198
    19d2:	22 0f       	add	r18, r18
    19d4:	33 1f       	adc	r19, r19
    19d6:	f9 01       	movw	r30, r18
    19d8:	e1 5d       	subi	r30, 0xD1	; 209
    19da:	f6 4c       	sbci	r31, 0xC6	; 198
    19dc:	60 81       	ld	r22, Z
    19de:	71 81       	ldd	r23, Z+1	; 0x01
    19e0:	4c 91       	ld	r20, X
    19e2:	72 dd       	rcall	.-1308   	; 0x14c8 <PrepareSending>
        }
        ++number;
    19e4:	df 5f       	subi	r29, 0xFF	; 255
    19e6:	d0 93 db 38 	sts	0x38DB, r29	; 0x8038db <number.3936>

        if (responseList == 0) {
    19ea:	c1 11       	cpse	r28, r1
    19ec:	0d c0       	rjmp	.+26     	; 0x1a08 <CheckResponse+0x84>
            effect = currObj.byteField[EFFECTS];
    19ee:	80 91 f3 39 	lds	r24, 0x39F3	; 0x8039f3 <currObj+0x4>
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	80 93 2d 38 	sts	0x382D, r24	; 0x80382d <effect>
    19f8:	90 93 2e 38 	sts	0x382E, r25	; 0x80382e <effect+0x1>
            RXCNT = 0;
    19fc:	1d ba       	out	0x1d, r1	; 29
            serRxDone = 0;
    19fe:	10 92 37 38 	sts	0x3837, r1	; 0x803837 <serRxDone>
            number = 0;
    1a02:	10 92 db 38 	sts	0x38DB, r1	; 0x8038db <number.3936>
    1a06:	01 c0       	rjmp	.+2      	; 0x1a0a <CheckResponse+0x86>
            return 0;
        }
        return 1;
    1a08:	c1 e0       	ldi	r28, 0x01	; 1
    }
    return 0;
}
    1a0a:	8c 2f       	mov	r24, r28
    1a0c:	df 91       	pop	r29
    1a0e:	cf 91       	pop	r28
    1a10:	08 95       	ret

00001a12 <CheckInput>:

//User input check (and validation)
uint8_t CheckInput(uint8_t *data){
    1a12:	4f 92       	push	r4
    1a14:	5f 92       	push	r5
    1a16:	6f 92       	push	r6
    1a18:	7f 92       	push	r7
    1a1a:	8f 92       	push	r8
    1a1c:	9f 92       	push	r9
    1a1e:	af 92       	push	r10
    1a20:	bf 92       	push	r11
    1a22:	cf 92       	push	r12
    1a24:	df 92       	push	r13
    1a26:	ef 92       	push	r14
    1a28:	ff 92       	push	r15
    1a2a:	0f 93       	push	r16
    1a2c:	1f 93       	push	r17
    1a2e:	cf 93       	push	r28
    1a30:	df 93       	push	r29
    1a32:	cd b7       	in	r28, 0x3d	; 61
    1a34:	de b7       	in	r29, 0x3e	; 62
    1a36:	a1 97       	sbiw	r28, 0x21	; 33
    1a38:	cd bf       	out	0x3d, r28	; 61
    1a3a:	de bf       	out	0x3e, r29	; 62
    1a3c:	8c 01       	movw	r16, r24
    
    //Load game data after reboot
    if (currDepth == 0xff) {
    1a3e:	80 91 26 38 	lds	r24, 0x3826	; 0x803826 <currDepth>
    1a42:	8f 3f       	cpi	r24, 0xFF	; 255
    1a44:	09 f0       	breq	.+2      	; 0x1a48 <CheckInput+0x36>
    1a46:	57 c0       	rjmp	.+174    	; 0x1af6 <CheckInput+0xe4>
        //Load things from EEPROM
        EERead(0, &gameState[0], BOOTCHK);   //Load game status bits from EEPROM
    1a48:	44 e1       	ldi	r20, 0x14	; 20
    1a4a:	65 e3       	ldi	r22, 0x35	; 53
    1a4c:	7a e3       	ldi	r23, 0x3A	; 58
    1a4e:	80 e0       	ldi	r24, 0x00	; 0
    1a50:	c5 d9       	rcall	.-3190   	; 0xddc <EERead>
    1a52:	2e e6       	ldi	r18, 0x6E	; 110
    1a54:	f2 2e       	mov	r15, r18

        uint8_t idSet = 0;
    1a56:	e1 2c       	mov	r14, r1
        for (uint8_t x=0; x<4; ++x){
            idSet += ReadStatusBit(110+x);
    1a58:	8f 2d       	mov	r24, r15
    1a5a:	5f db       	rcall	.-2370   	; 0x111a <ReadStatusBit>
    1a5c:	e8 0e       	add	r14, r24
    1a5e:	f3 94       	inc	r15
    if (currDepth == 0xff) {
        //Load things from EEPROM
        EERead(0, &gameState[0], BOOTCHK);   //Load game status bits from EEPROM

        uint8_t idSet = 0;
        for (uint8_t x=0; x<4; ++x){
    1a60:	82 e7       	ldi	r24, 0x72	; 114
    1a62:	f8 12       	cpse	r15, r24
    1a64:	f9 cf       	rjmp	.-14     	; 0x1a58 <CheckInput+0x46>
            idSet += ReadStatusBit(110+x);
        }

        //Check if badge is reset(0 = cheated!) or new(3) or error(2)
        if (idSet != 1) {
    1a66:	e1 e0       	ldi	r30, 0x01	; 1
    1a68:	ee 16       	cp	r14, r30
            Reset();
    1a6a:	11 f0       	breq	.+4      	; 0x1a70 <CheckInput+0x5e>
    1a6c:	aa db       	rcall	.-2220   	; 0x11c2 <Reset>
        } else getID();
    1a6e:	01 c0       	rjmp	.+2      	; 0x1a72 <CheckInput+0x60>
    1a70:	9a db       	rcall	.-2252   	; 0x11a6 <getID>

        inventory[0] = (gameState[INVADDR]<<8|gameState[INVADDR+1]);
    1a72:	80 91 45 3a 	lds	r24, 0x3A45	; 0x803a45 <gameState+0x10>
    1a76:	90 91 46 3a 	lds	r25, 0x3A46	; 0x803a46 <gameState+0x11>
    1a7a:	98 27       	eor	r25, r24
    1a7c:	89 27       	eor	r24, r25
    1a7e:	98 27       	eor	r25, r24
    1a80:	80 93 31 38 	sts	0x3831, r24	; 0x803831 <inventory>
    1a84:	90 93 32 38 	sts	0x3832, r25	; 0x803832 <inventory+0x1>
        inventory[1] = (gameState[INVADDR+2]<<8|gameState[INVADDR+3]);
    1a88:	80 91 47 3a 	lds	r24, 0x3A47	; 0x803a47 <gameState+0x12>
    1a8c:	90 91 48 3a 	lds	r25, 0x3A48	; 0x803a48 <gameState+0x13>
    1a90:	98 27       	eor	r25, r24
    1a92:	89 27       	eor	r24, r25
    1a94:	98 27       	eor	r25, r24
    1a96:	80 93 33 38 	sts	0x3833, r24	; 0x803833 <inventory+0x2>
    1a9a:	90 93 34 38 	sts	0x3834, r25	; 0x803834 <inventory+0x3>
        SaveGameState();
    1a9e:	ca da       	rcall	.-2668   	; 0x1034 <SaveGameState>

        //Start at first location
        PopulateObject(route[0], &currObj);
    1aa0:	6f ee       	ldi	r22, 0xEF	; 239
    1aa2:	79 e3       	ldi	r23, 0x39	; 57
    1aa4:	80 91 af 39 	lds	r24, 0x39AF	; 0x8039af <route>
    1aa8:	90 91 b0 39 	lds	r25, 0x39B0	; 0x8039b0 <route+0x1>
    1aac:	c1 dd       	rcall	.-1150   	; 0x1630 <PopulateObject>
        currDepth = 0;
    1aae:	10 92 26 38 	sts	0x3826, r1	; 0x803826 <currDepth>

        //Play an effect if configured
        if ((effect < 0x0100) && (effect ^ currObj.byteField[EFFECTS])){
    1ab2:	80 91 2d 38 	lds	r24, 0x382D	; 0x80382d <effect>
    1ab6:	90 91 2e 38 	lds	r25, 0x382E	; 0x80382e <effect+0x1>
    1aba:	8f 3f       	cpi	r24, 0xFF	; 255
    1abc:	91 05       	cpc	r25, r1
    1abe:	09 f0       	breq	.+2      	; 0x1ac2 <CheckInput+0xb0>
    1ac0:	d0 f4       	brcc	.+52     	; 0x1af6 <CheckInput+0xe4>
    1ac2:	80 91 f3 39 	lds	r24, 0x39F3	; 0x8039f3 <currObj+0x4>
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	20 91 2d 38 	lds	r18, 0x382D	; 0x80382d <effect>
    1acc:	30 91 2e 38 	lds	r19, 0x382E	; 0x80382e <effect+0x1>
    1ad0:	82 17       	cp	r24, r18
    1ad2:	93 07       	cpc	r25, r19
    1ad4:	81 f0       	breq	.+32     	; 0x1af6 <CheckInput+0xe4>
            effect = currObj.byteField[EFFECTS];
    1ad6:	80 93 2d 38 	sts	0x382D, r24	; 0x80382d <effect>
    1ada:	90 93 2e 38 	sts	0x382E, r25	; 0x80382e <effect+0x1>
            auStart = ((effect&0xE0)>0);
    1ade:	80 91 2d 38 	lds	r24, 0x382D	; 0x80382d <effect>
    1ae2:	90 91 2e 38 	lds	r25, 0x382E	; 0x80382e <effect+0x1>
    1ae6:	80 7e       	andi	r24, 0xE0	; 224
    1ae8:	99 27       	eor	r25, r25
    1aea:	21 e0       	ldi	r18, 0x01	; 1
    1aec:	89 2b       	or	r24, r25
    1aee:	09 f4       	brne	.+2      	; 0x1af2 <CheckInput+0xe0>
    1af0:	20 e0       	ldi	r18, 0x00	; 0
    1af2:	20 93 2c 38 	sts	0x382C, r18	; 0x80382c <auStart>
        }
    }

    if (serRxDone){
    1af6:	80 91 37 38 	lds	r24, 0x3837	; 0x803837 <serRxDone>
    1afa:	88 23       	and	r24, r24
    1afc:	09 f4       	brne	.+2      	; 0x1b00 <CheckInput+0xee>
    1afe:	5e c2       	rjmp	.+1212   	; 0x1fbc <CheckInput+0x5aa>

        //Special input requested from user by game
        if (specialInput[0]){
    1b00:	80 91 de 38 	lds	r24, 0x38DE	; 0x8038de <specialInput>
    1b04:	88 23       	and	r24, r24
    1b06:	09 f4       	brne	.+2      	; 0x1b0a <CheckInput+0xf8>
    1b08:	57 c0       	rjmp	.+174    	; 0x1bb8 <CheckInput+0x1a6>
            specialPassed = 0;
    1b0a:	10 92 dd 38 	sts	0x38DD, r1	; 0x8038dd <specialPassed>
            data[0] = 'a';
    1b0e:	81 e6       	ldi	r24, 0x61	; 97
    1b10:	f8 01       	movw	r30, r16
            
            //Normal code challenge
            if (StartsWith((uint8_t *)&serRx[0], &specialInput[0])) {
    1b12:	80 83       	st	Z, r24
    1b14:	6e ed       	ldi	r22, 0xDE	; 222
    1b16:	78 e3       	ldi	r23, 0x38	; 56
    1b18:	89 e4       	ldi	r24, 0x49	; 73
    1b1a:	9a e3       	ldi	r25, 0x3A	; 58
    1b1c:	bb dc       	rcall	.-1674   	; 0x1494 <StartsWith>
    1b1e:	f8 2e       	mov	r15, r24
    1b20:	88 23       	and	r24, r24
    1b22:	21 f0       	breq	.+8      	; 0x1b2c <CheckInput+0x11a>
                specialPassed = 1;
    1b24:	81 e0       	ldi	r24, 0x01	; 1
    1b26:	80 93 dd 38 	sts	0x38DD, r24	; 0x8038dd <specialPassed>
    1b2a:	04 c0       	rjmp	.+8      	; 0x1b34 <CheckInput+0x122>
                //specialInput[0] = 0;
                //data[1] = 0;

            //Special challenge 1
            } else if ((specialInput[0] == '1')&&(specialInput[2] == 0)) {
    1b2c:	80 91 de 38 	lds	r24, 0x38DE	; 0x8038de <specialInput>
    1b30:	81 33       	cpi	r24, 0x31	; 49
    1b32:	11 f0       	breq	.+4      	; 0x1b38 <CheckInput+0x126>
                responseList = 32;
                return 1;
            }
        } 
        //Data received, but not any of the commands above
        return 0;
    1b34:	f1 2c       	mov	r15, r1
                specialPassed = 1;
                //specialInput[0] = 0;
                //data[1] = 0;

            //Special challenge 1
            } else if ((specialInput[0] == '1')&&(specialInput[2] == 0)) {
    1b36:	44 c2       	rjmp	.+1160   	; 0x1fc0 <CheckInput+0x5ae>
    1b38:	80 91 e0 38 	lds	r24, 0x38E0	; 0x8038e0 <specialInput+0x2>
    1b3c:	81 11       	cpse	r24, r1
                uint8_t inputLen = CleanInput((uint8_t *)&serRx[0]);
    1b3e:	fa cf       	rjmp	.-12     	; 0x1b34 <CheckInput+0x122>
    1b40:	89 e4       	ldi	r24, 0x49	; 73
    1b42:	9a e3       	ldi	r25, 0x3A	; 58
    1b44:	a8 de       	rcall	.-688    	; 0x1896 <CleanInput>
                specialPassed = 2;
    1b46:	92 e0       	ldi	r25, 0x02	; 2
    1b48:	90 93 dd 38 	sts	0x38DD, r25	; 0x8038dd <specialPassed>
                data[1] = 0;
    1b4c:	f8 01       	movw	r30, r16
    1b4e:	11 82       	std	Z+1, r1	; 0x01

                if (inputLen >= 2) {
    1b50:	82 30       	cpi	r24, 0x02	; 2
    1b52:	80 f3       	brcs	.-32     	; 0x1b34 <CheckInput+0x122>
                    if ((serRx[0] == '1')||(serRx[0] == '2')||(serRx[0] == '3')||(serRx[0] == '4')) {
    1b54:	80 91 49 3a 	lds	r24, 0x3A49	; 0x803a49 <serRx>
    1b58:	81 33       	cpi	r24, 0x31	; 49
    1b5a:	61 f0       	breq	.+24     	; 0x1b74 <CheckInput+0x162>
    1b5c:	80 91 49 3a 	lds	r24, 0x3A49	; 0x803a49 <serRx>
    1b60:	82 33       	cpi	r24, 0x32	; 50
    1b62:	41 f0       	breq	.+16     	; 0x1b74 <CheckInput+0x162>
    1b64:	80 91 49 3a 	lds	r24, 0x3A49	; 0x803a49 <serRx>
    1b68:	83 33       	cpi	r24, 0x33	; 51
    1b6a:	21 f0       	breq	.+8      	; 0x1b74 <CheckInput+0x162>
    1b6c:	80 91 49 3a 	lds	r24, 0x3A49	; 0x803a49 <serRx>
    1b70:	84 33       	cpi	r24, 0x34	; 52
    1b72:	01 f7       	brne	.-64     	; 0x1b34 <CheckInput+0x122>
                        serRx[1] |= 0x20;
    1b74:	80 91 4a 3a 	lds	r24, 0x3A4A	; 0x803a4a <serRx+0x1>
    1b78:	80 62       	ori	r24, 0x20	; 32
    1b7a:	80 93 4a 3a 	sts	0x3A4A, r24	; 0x803a4a <serRx+0x1>
                        if ((serRx[1] == 'a')||(serRx[1] == 'e')||(serRx[1] == 'f')||(serRx[1] == 'w')) {
    1b7e:	80 91 4a 3a 	lds	r24, 0x3A4A	; 0x803a4a <serRx+0x1>
    1b82:	81 36       	cpi	r24, 0x61	; 97
    1b84:	61 f0       	breq	.+24     	; 0x1b9e <CheckInput+0x18c>
    1b86:	80 91 4a 3a 	lds	r24, 0x3A4A	; 0x803a4a <serRx+0x1>
    1b8a:	85 36       	cpi	r24, 0x65	; 101
    1b8c:	41 f0       	breq	.+16     	; 0x1b9e <CheckInput+0x18c>
    1b8e:	80 91 4a 3a 	lds	r24, 0x3A4A	; 0x803a4a <serRx+0x1>
    1b92:	86 36       	cpi	r24, 0x66	; 102
    1b94:	21 f0       	breq	.+8      	; 0x1b9e <CheckInput+0x18c>
    1b96:	80 91 4a 3a 	lds	r24, 0x3A4A	; 0x803a4a <serRx+0x1>
    1b9a:	87 37       	cpi	r24, 0x77	; 119
    1b9c:	59 f6       	brne	.-106    	; 0x1b34 <CheckInput+0x122>
                            data[1] = specialInput[1]+0x11;
    1b9e:	80 91 df 38 	lds	r24, 0x38DF	; 0x8038df <specialInput+0x1>
    1ba2:	8f 5e       	subi	r24, 0xEF	; 239
    1ba4:	f8 01       	movw	r30, r16
    1ba6:	81 83       	std	Z+1, r24	; 0x01
                            data[2] = serRx[0];
    1ba8:	80 91 49 3a 	lds	r24, 0x3A49	; 0x803a49 <serRx>
    1bac:	82 83       	std	Z+2, r24	; 0x02
                            data[3] = serRx[1];
    1bae:	80 91 4a 3a 	lds	r24, 0x3A4A	; 0x803a4a <serRx+0x1>
    1bb2:	83 83       	std	Z+3, r24	; 0x03
                            data[4] = 0;
    1bb4:	14 82       	std	Z+4, r1	; 0x04
    1bb6:	04 c2       	rjmp	.+1032   	; 0x1fc0 <CheckInput+0x5ae>
        
        //Normal input
        } else {

            //Change status bit
            if ((serRx[0] == '#')&&(RXCNT == 6)){
    1bb8:	80 91 49 3a 	lds	r24, 0x3A49	; 0x803a49 <serRx>
    1bbc:	83 32       	cpi	r24, 0x23	; 35
    1bbe:	81 f5       	brne	.+96     	; 0x1c20 <CheckInput+0x20e>
    1bc0:	8d b3       	in	r24, 0x1d	; 29
    1bc2:	86 30       	cpi	r24, 0x06	; 6
    1bc4:	69 f5       	brne	.+90     	; 0x1c20 <CheckInput+0x20e>
    1bc6:	81 e0       	ldi	r24, 0x01	; 1
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	10 e0       	ldi	r17, 0x00	; 0
                uint8_t bitNr = 0;

                for (uint8_t x=1; x<4; ++x) {
                    serRx[x] -= '0';
    1bcc:	fc 01       	movw	r30, r24
    1bce:	e7 5b       	subi	r30, 0xB7	; 183
    1bd0:	f5 4c       	sbci	r31, 0xC5	; 197
    1bd2:	20 81       	ld	r18, Z
    1bd4:	20 53       	subi	r18, 0x30	; 48
    1bd6:	20 83       	st	Z, r18
                    bitNr *= 10;
    1bd8:	11 0f       	add	r17, r17
    1bda:	21 2f       	mov	r18, r17
    1bdc:	22 0f       	add	r18, r18
    1bde:	22 0f       	add	r18, r18
    1be0:	12 0f       	add	r17, r18
                    if (serRx[1] > 2) break;
    1be2:	20 91 4a 3a 	lds	r18, 0x3A4A	; 0x803a4a <serRx+0x1>
    1be6:	23 30       	cpi	r18, 0x03	; 3
    1be8:	48 f4       	brcc	.+18     	; 0x1bfc <CheckInput+0x1ea>
                    if (serRx[x] < 10) {
    1bea:	20 81       	ld	r18, Z
    1bec:	2a 30       	cpi	r18, 0x0A	; 10
    1bee:	b0 f4       	brcc	.+44     	; 0x1c1c <CheckInput+0x20a>
                        bitNr += serRx[x];
    1bf0:	20 81       	ld	r18, Z
    1bf2:	12 0f       	add	r17, r18
    1bf4:	01 96       	adiw	r24, 0x01	; 1

            //Change status bit
            if ((serRx[0] == '#')&&(RXCNT == 6)){
                uint8_t bitNr = 0;

                for (uint8_t x=1; x<4; ++x) {
    1bf6:	84 30       	cpi	r24, 0x04	; 4
    1bf8:	91 05       	cpc	r25, r1
    1bfa:	41 f7       	brne	.-48     	; 0x1bcc <CheckInput+0x1ba>
                        continue;
                    }
                    bitNr = 0;
                    break;
                }
                if ((bitNr)&&(bitNr!=128)) {
    1bfc:	81 2f       	mov	r24, r17
    1bfe:	8f 77       	andi	r24, 0x7F	; 127
    1c00:	69 f0       	breq	.+26     	; 0x1c1c <CheckInput+0x20a>
                    if (Cheat(255-bitNr, serRx[4]<<8|serRx[5])) UpdateState(bitNr);
    1c02:	80 91 4d 3a 	lds	r24, 0x3A4D	; 0x803a4d <serRx+0x4>
    1c06:	60 91 4e 3a 	lds	r22, 0x3A4E	; 0x803a4e <serRx+0x5>
    1c0a:	70 e0       	ldi	r23, 0x00	; 0
    1c0c:	78 2b       	or	r23, r24
    1c0e:	81 2f       	mov	r24, r17
    1c10:	80 95       	com	r24
    1c12:	a0 db       	rcall	.-2240   	; 0x1354 <Cheat>
    1c14:	88 23       	and	r24, r24
    1c16:	11 f0       	breq	.+4      	; 0x1c1c <CheckInput+0x20a>
    1c18:	81 2f       	mov	r24, r17
    1c1a:	ad da       	rcall	.-2726   	; 0x1176 <UpdateState>
                }
                responseList = SetStandardResponse(0);
    1c1c:	80 e0       	ldi	r24, 0x00	; 0
    1c1e:	50 c0       	rjmp	.+160    	; 0x1cc0 <CheckInput+0x2ae>
    1c20:	d8 01       	movw	r26, r16
    1c22:	80 e0       	ldi	r24, 0x00	; 0
    1c24:	90 e0       	ldi	r25, 0x00	; 0
                return 1;            
            }
            
            //Read up to the \0 character and convert to lower case.
            for (uint8_t x=0; x<RXLEN; ++x){
                if ((serRx[x]<'A')||(serRx[x]>'Z')) data[x]=serRx[x]; else data[x]=serRx[x]|0x20;
    1c26:	fc 01       	movw	r30, r24
    1c28:	e7 5b       	subi	r30, 0xB7	; 183
    1c2a:	f5 4c       	sbci	r31, 0xC5	; 197
    1c2c:	20 81       	ld	r18, Z
    1c2e:	21 34       	cpi	r18, 0x41	; 65
    1c30:	18 f0       	brcs	.+6      	; 0x1c38 <CheckInput+0x226>
    1c32:	20 81       	ld	r18, Z
    1c34:	2b 35       	cpi	r18, 0x5B	; 91
    1c36:	10 f0       	brcs	.+4      	; 0x1c3c <CheckInput+0x22a>
    1c38:	20 81       	ld	r18, Z
    1c3a:	02 c0       	rjmp	.+4      	; 0x1c40 <CheckInput+0x22e>
    1c3c:	20 81       	ld	r18, Z
    1c3e:	20 62       	ori	r18, 0x20	; 32
    1c40:	2c 93       	st	X, r18
                if (serRx[x] == 0) {
    1c42:	20 81       	ld	r18, Z
    1c44:	21 11       	cpse	r18, r1
    1c46:	05 c0       	rjmp	.+10     	; 0x1c52 <CheckInput+0x240>
                    data[x] = 0;
    1c48:	f8 01       	movw	r30, r16
    1c4a:	e8 0f       	add	r30, r24
    1c4c:	f1 1d       	adc	r31, r1
    1c4e:	10 82       	st	Z, r1
                    break;
    1c50:	05 c0       	rjmp	.+10     	; 0x1c5c <CheckInput+0x24a>
    1c52:	01 96       	adiw	r24, 0x01	; 1
    1c54:	11 96       	adiw	r26, 0x01	; 1
                responseList = SetStandardResponse(0);
                return 1;            
            }
            
            //Read up to the \0 character and convert to lower case.
            for (uint8_t x=0; x<RXLEN; ++x){
    1c56:	81 34       	cpi	r24, 0x41	; 65
    1c58:	91 05       	cpc	r25, r1
    1c5a:	29 f7       	brne	.-54     	; 0x1c26 <CheckInput+0x214>
                    break;
                }
            }

            //No text
            if (serRx[0] == 0){
    1c5c:	80 91 49 3a 	lds	r24, 0x3A49	; 0x803a49 <serRx>
                data[0] = 0;
    1c60:	f8 01       	movw	r30, r16
                    break;
                }
            }

            //No text
            if (serRx[0] == 0){
    1c62:	81 11       	cpse	r24, r1
    1c64:	05 c0       	rjmp	.+10     	; 0x1c70 <CheckInput+0x25e>
                data[0] = 0;
    1c66:	10 82       	st	Z, r1
                RXCNT = 0;
    1c68:	1d ba       	out	0x1d, r1	; 29
                serRxDone = 0;
    1c6a:	10 92 37 38 	sts	0x3837, r1	; 0x803837 <serRxDone>
    1c6e:	a6 c1       	rjmp	.+844    	; 0x1fbc <CheckInput+0x5aa>
                return 1;
            }

            //Help text
            if ((data[0] == '?')||(data[0] == 'h')){
    1c70:	80 81       	ld	r24, Z
    1c72:	8f 33       	cpi	r24, 0x3F	; 63
    1c74:	11 f0       	breq	.+4      	; 0x1c7a <CheckInput+0x268>
    1c76:	88 36       	cpi	r24, 0x68	; 104
    1c78:	39 f5       	brne	.+78     	; 0x1cc8 <CheckInput+0x2b6>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1c7a:	8b e5       	ldi	r24, 0x5B	; 91
    1c7c:	9a e7       	ldi	r25, 0x7A	; 122
    1c7e:	80 93 ef 38 	sts	0x38EF, r24	; 0x8038ef <reactStr>
    1c82:	90 93 f0 38 	sts	0x38F0, r25	; 0x8038f0 <reactStr+0x1>
    reactStr[1][number]=length;
    1c86:	84 e0       	ldi	r24, 0x04	; 4
    1c88:	90 e0       	ldi	r25, 0x00	; 0
    1c8a:	80 93 2f 39 	sts	0x392F, r24	; 0x80392f <reactStr+0x40>
    1c8e:	90 93 30 39 	sts	0x3930, r25	; 0x803930 <reactStr+0x41>
    reactStr[2][number]=type;
    1c92:	81 e0       	ldi	r24, 0x01	; 1
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	80 93 6f 39 	sts	0x396F, r24	; 0x80396f <reactStr+0x80>
    1c9a:	90 93 70 39 	sts	0x3970, r25	; 0x803970 <reactStr+0x81>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1c9e:	23 e9       	ldi	r18, 0x93	; 147
    1ca0:	3b e7       	ldi	r19, 0x7B	; 123
    1ca2:	20 93 f1 38 	sts	0x38F1, r18	; 0x8038f1 <reactStr+0x2>
    1ca6:	30 93 f2 38 	sts	0x38F2, r19	; 0x8038f2 <reactStr+0x3>
    reactStr[1][number]=length;
    1caa:	2d e6       	ldi	r18, 0x6D	; 109
    1cac:	34 e0       	ldi	r19, 0x04	; 4
    1cae:	20 93 31 39 	sts	0x3931, r18	; 0x803931 <reactStr+0x42>
    1cb2:	30 93 32 39 	sts	0x3932, r19	; 0x803932 <reactStr+0x43>
    reactStr[2][number]=type;
    1cb6:	80 93 71 39 	sts	0x3971, r24	; 0x803971 <reactStr+0x82>
    1cba:	90 93 72 39 	sts	0x3972, r25	; 0x803972 <reactStr+0x83>

            //Help text
            if ((data[0] == '?')||(data[0] == 'h')){
                SetResponse(0, A_LF, 4, TEASER);
                SetResponse(1, A_HELP, L_HELP, TEASER);
                responseList = SetStandardResponse(2);
    1cbe:	82 e0       	ldi	r24, 0x02	; 2
    1cc0:	3b dc       	rcall	.-1930   	; 0x1538 <SetStandardResponse>
    1cc2:	80 93 ee 38 	sts	0x38EE, r24	; 0x8038ee <responseList>
    1cc6:	7a c1       	rjmp	.+756    	; 0x1fbc <CheckInput+0x5aa>
                return 1;
            }        
        
            //Alphabet text
            if (data[0] == 'a'){
    1cc8:	81 36       	cpi	r24, 0x61	; 97
    1cca:	d9 f4       	brne	.+54     	; 0x1d02 <CheckInput+0x2f0>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1ccc:	8b e5       	ldi	r24, 0x5B	; 91
    1cce:	9a e7       	ldi	r25, 0x7A	; 122
    1cd0:	80 93 ef 38 	sts	0x38EF, r24	; 0x8038ef <reactStr>
    1cd4:	90 93 f0 38 	sts	0x38F0, r25	; 0x8038f0 <reactStr+0x1>
    reactStr[1][number]=length;
    1cd8:	84 e0       	ldi	r24, 0x04	; 4
    1cda:	90 e0       	ldi	r25, 0x00	; 0
    1cdc:	80 93 2f 39 	sts	0x392F, r24	; 0x80392f <reactStr+0x40>
    1ce0:	90 93 30 39 	sts	0x3930, r25	; 0x803930 <reactStr+0x41>
    reactStr[2][number]=type;
    1ce4:	81 e0       	ldi	r24, 0x01	; 1
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	80 93 6f 39 	sts	0x396F, r24	; 0x80396f <reactStr+0x80>
    1cec:	90 93 70 39 	sts	0x3970, r25	; 0x803970 <reactStr+0x81>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1cf0:	2e e6       	ldi	r18, 0x6E	; 110
    1cf2:	3a e7       	ldi	r19, 0x7A	; 122
    1cf4:	20 93 f1 38 	sts	0x38F1, r18	; 0x8038f1 <reactStr+0x2>
    1cf8:	30 93 f2 38 	sts	0x38F2, r19	; 0x8038f2 <reactStr+0x3>
    reactStr[1][number]=length;
    1cfc:	25 e2       	ldi	r18, 0x25	; 37
    1cfe:	31 e0       	ldi	r19, 0x01	; 1
    1d00:	d6 cf       	rjmp	.-84     	; 0x1cae <CheckInput+0x29c>
                responseList = SetStandardResponse(2);
                return 1;
            }

            //Whoami text
            if (data[0] == 'w'){
    1d02:	87 37       	cpi	r24, 0x77	; 119
    1d04:	09 f0       	breq	.+2      	; 0x1d08 <CheckInput+0x2f6>
    1d06:	6e c0       	rjmp	.+220    	; 0x1de4 <CheckInput+0x3d2>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1d08:	8b e5       	ldi	r24, 0x5B	; 91
    1d0a:	9a e7       	ldi	r25, 0x7A	; 122
    1d0c:	80 93 ef 38 	sts	0x38EF, r24	; 0x8038ef <reactStr>
    1d10:	90 93 f0 38 	sts	0x38F0, r25	; 0x8038f0 <reactStr+0x1>
    reactStr[1][number]=length;
    1d14:	84 e0       	ldi	r24, 0x04	; 4
    1d16:	90 e0       	ldi	r25, 0x00	; 0
    1d18:	80 93 2f 39 	sts	0x392F, r24	; 0x80392f <reactStr+0x40>
    1d1c:	90 93 30 39 	sts	0x3930, r25	; 0x803930 <reactStr+0x41>
    reactStr[2][number]=type;
    1d20:	21 e0       	ldi	r18, 0x01	; 1
    1d22:	30 e0       	ldi	r19, 0x00	; 0
    1d24:	20 93 6f 39 	sts	0x396F, r18	; 0x80396f <reactStr+0x80>
    1d28:	30 93 70 39 	sts	0x3970, r19	; 0x803970 <reactStr+0x81>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1d2c:	8b ec       	ldi	r24, 0xCB	; 203
    1d2e:	96 e7       	ldi	r25, 0x76	; 118
    1d30:	80 93 f1 38 	sts	0x38F1, r24	; 0x8038f1 <reactStr+0x2>
    1d34:	90 93 f2 38 	sts	0x38F2, r25	; 0x8038f2 <reactStr+0x3>
    reactStr[1][number]=length;
    1d38:	82 e1       	ldi	r24, 0x12	; 18
    1d3a:	90 e0       	ldi	r25, 0x00	; 0
    1d3c:	80 93 31 39 	sts	0x3931, r24	; 0x803931 <reactStr+0x42>
    1d40:	90 93 32 39 	sts	0x3932, r25	; 0x803932 <reactStr+0x43>
    reactStr[2][number]=type;
    1d44:	20 93 71 39 	sts	0x3971, r18	; 0x803971 <reactStr+0x82>
    1d48:	30 93 72 39 	sts	0x3972, r19	; 0x803972 <reactStr+0x83>

            //Whoami text
            if (data[0] == 'w'){
                SetResponse(0, A_LF, 4, TEASER);
                SetResponse(1, A_HELLO, L_HELLO, TEASER);
                if (whoami == 1) {
    1d4c:	80 91 30 38 	lds	r24, 0x3830	; 0x803830 <whoami>
    1d50:	81 30       	cpi	r24, 0x01	; 1
    1d52:	19 f4       	brne	.+6      	; 0x1d5a <CheckInput+0x348>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1d54:	85 ec       	ldi	r24, 0xC5	; 197
    1d56:	96 e7       	ldi	r25, 0x76	; 118
    1d58:	0f c0       	rjmp	.+30     	; 0x1d78 <CheckInput+0x366>
            if (data[0] == 'w'){
                SetResponse(0, A_LF, 4, TEASER);
                SetResponse(1, A_HELLO, L_HELLO, TEASER);
                if (whoami == 1) {
                    SetResponse(2, A_ANUBIS, L_ANUBIS, TEASER);
                } else if (whoami == 2) {
    1d5a:	82 30       	cpi	r24, 0x02	; 2
    1d5c:	49 f4       	brne	.+18     	; 0x1d70 <CheckInput+0x35e>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1d5e:	82 ec       	ldi	r24, 0xC2	; 194
    1d60:	96 e7       	ldi	r25, 0x76	; 118
    1d62:	80 93 f3 38 	sts	0x38F3, r24	; 0x8038f3 <reactStr+0x4>
    1d66:	90 93 f4 38 	sts	0x38F4, r25	; 0x8038f4 <reactStr+0x5>
    reactStr[1][number]=length;
    1d6a:	83 e0       	ldi	r24, 0x03	; 3
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	1e c0       	rjmp	.+60     	; 0x1dac <CheckInput+0x39a>
                SetResponse(1, A_HELLO, L_HELLO, TEASER);
                if (whoami == 1) {
                    SetResponse(2, A_ANUBIS, L_ANUBIS, TEASER);
                } else if (whoami == 2) {
                    SetResponse(2, A_BES, L_BES, TEASER);
                } else if (whoami == 3) {
    1d70:	83 30       	cpi	r24, 0x03	; 3
    1d72:	49 f4       	brne	.+18     	; 0x1d86 <CheckInput+0x374>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1d74:	8c eb       	ldi	r24, 0xBC	; 188
    1d76:	96 e7       	ldi	r25, 0x76	; 118
    1d78:	80 93 f3 38 	sts	0x38F3, r24	; 0x8038f3 <reactStr+0x4>
    1d7c:	90 93 f4 38 	sts	0x38F4, r25	; 0x8038f4 <reactStr+0x5>
    reactStr[1][number]=length;
    1d80:	86 e0       	ldi	r24, 0x06	; 6
    1d82:	90 e0       	ldi	r25, 0x00	; 0
    1d84:	13 c0       	rjmp	.+38     	; 0x1dac <CheckInput+0x39a>
                    SetResponse(2, A_ANUBIS, L_ANUBIS, TEASER);
                } else if (whoami == 2) {
                    SetResponse(2, A_BES, L_BES, TEASER);
                } else if (whoami == 3) {
                    SetResponse(2, A_KHONSU, L_KHONSU, TEASER);
                } else if (whoami == 4) {
    1d86:	84 30       	cpi	r24, 0x04	; 4
    1d88:	49 f4       	brne	.+18     	; 0x1d9c <CheckInput+0x38a>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1d8a:	87 eb       	ldi	r24, 0xB7	; 183
    1d8c:	96 e7       	ldi	r25, 0x76	; 118
    1d8e:	80 93 f3 38 	sts	0x38F3, r24	; 0x8038f3 <reactStr+0x4>
    1d92:	90 93 f4 38 	sts	0x38F4, r25	; 0x8038f4 <reactStr+0x5>
    reactStr[1][number]=length;
    1d96:	85 e0       	ldi	r24, 0x05	; 5
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	08 c0       	rjmp	.+16     	; 0x1dac <CheckInput+0x39a>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1d9c:	80 e4       	ldi	r24, 0x40	; 64
    1d9e:	96 e7       	ldi	r25, 0x76	; 118
    1da0:	80 93 f3 38 	sts	0x38F3, r24	; 0x8038f3 <reactStr+0x4>
    1da4:	90 93 f4 38 	sts	0x38F4, r25	; 0x8038f4 <reactStr+0x5>
    reactStr[1][number]=length;
    1da8:	82 e4       	ldi	r24, 0x42	; 66
    1daa:	90 e0       	ldi	r25, 0x00	; 0
    1dac:	80 93 33 39 	sts	0x3933, r24	; 0x803933 <reactStr+0x44>
    1db0:	90 93 34 39 	sts	0x3934, r25	; 0x803934 <reactStr+0x45>
    reactStr[2][number]=type;
    1db4:	20 93 73 39 	sts	0x3973, r18	; 0x803973 <reactStr+0x84>
    1db8:	30 93 74 39 	sts	0x3974, r19	; 0x803974 <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1dbc:	8d e9       	ldi	r24, 0x9D	; 157
    1dbe:	96 e7       	ldi	r25, 0x76	; 118
    1dc0:	80 93 f5 38 	sts	0x38F5, r24	; 0x8038f5 <reactStr+0x6>
    1dc4:	90 93 f6 38 	sts	0x38F6, r25	; 0x8038f6 <reactStr+0x7>
    reactStr[1][number]=length;
    1dc8:	8a e1       	ldi	r24, 0x1A	; 26
    1dca:	90 e0       	ldi	r25, 0x00	; 0
    1dcc:	80 93 35 39 	sts	0x3935, r24	; 0x803935 <reactStr+0x46>
    1dd0:	90 93 36 39 	sts	0x3936, r25	; 0x803936 <reactStr+0x47>
    reactStr[2][number]=type;
    1dd4:	81 e0       	ldi	r24, 0x01	; 1
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	80 93 75 39 	sts	0x3975, r24	; 0x803975 <reactStr+0x86>
    1ddc:	90 93 76 39 	sts	0x3976, r25	; 0x803976 <reactStr+0x87>
                    SetResponse(2, A_THOTH, L_THOTH, TEASER);
                } else {
                    SetResponse(2, A_ERROR, L_ERROR, TEASER);
                }
                SetResponse(3, A_PLEASED, L_PLEASED, TEASER);
                responseList = SetStandardResponse(4);
    1de0:	84 e0       	ldi	r24, 0x04	; 4
    1de2:	6e cf       	rjmp	.-292    	; 0x1cc0 <CheckInput+0x2ae>
                return 1;
            }

            //Quit text
            if (data[0] == 'q'){
    1de4:	81 37       	cpi	r24, 0x71	; 113
    1de6:	d9 f4       	brne	.+54     	; 0x1e1e <CheckInput+0x40c>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1de8:	8b e5       	ldi	r24, 0x5B	; 91
    1dea:	9a e7       	ldi	r25, 0x7A	; 122
    1dec:	80 93 ef 38 	sts	0x38EF, r24	; 0x8038ef <reactStr>
    1df0:	90 93 f0 38 	sts	0x38F0, r25	; 0x8038f0 <reactStr+0x1>
    reactStr[1][number]=length;
    1df4:	84 e0       	ldi	r24, 0x04	; 4
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	80 93 2f 39 	sts	0x392F, r24	; 0x80392f <reactStr+0x40>
    1dfc:	90 93 30 39 	sts	0x3930, r25	; 0x803930 <reactStr+0x41>
    reactStr[2][number]=type;
    1e00:	81 e0       	ldi	r24, 0x01	; 1
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	80 93 6f 39 	sts	0x396F, r24	; 0x80396f <reactStr+0x80>
    1e08:	90 93 70 39 	sts	0x3970, r25	; 0x803970 <reactStr+0x81>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1e0c:	23 e0       	ldi	r18, 0x03	; 3
    1e0e:	3a e7       	ldi	r19, 0x7A	; 122
    1e10:	20 93 f1 38 	sts	0x38F1, r18	; 0x8038f1 <reactStr+0x2>
    1e14:	30 93 f2 38 	sts	0x38F2, r19	; 0x8038f2 <reactStr+0x3>
    reactStr[1][number]=length;
    1e18:	24 e5       	ldi	r18, 0x54	; 84
                responseList = SetStandardResponse(2);
                return 1;
            }

            //Fake cheat = reset badge!
            if (StartsWith(&data[0], "iddqd")){
    1e1a:	30 e0       	ldi	r19, 0x00	; 0
    1e1c:	48 cf       	rjmp	.-368    	; 0x1cae <CheckInput+0x29c>
    1e1e:	62 eb       	ldi	r22, 0xB2	; 178
    1e20:	72 eb       	ldi	r23, 0xB2	; 178
    1e22:	c8 01       	movw	r24, r16
    1e24:	37 db       	rcall	.-2450   	; 0x1494 <StartsWith>
    1e26:	88 23       	and	r24, r24
            
                //Reset game data by wiping the UUID bits
                for (uint8_t x=0; x<4; ++x){
                    WriteStatusBit(110+x, 0);
    1e28:	e1 f0       	breq	.+56     	; 0x1e62 <CheckInput+0x450>
    1e2a:	1e e6       	ldi	r17, 0x6E	; 110
    1e2c:	60 e0       	ldi	r22, 0x00	; 0
    1e2e:	81 2f       	mov	r24, r17
    1e30:	88 d9       	rcall	.-3312   	; 0x1142 <WriteStatusBit>

            //Fake cheat = reset badge!
            if (StartsWith(&data[0], "iddqd")){
            
                //Reset game data by wiping the UUID bits
                for (uint8_t x=0; x<4; ++x){
    1e32:	1f 5f       	subi	r17, 0xFF	; 255
                    WriteStatusBit(110+x, 0);
                }
                SaveGameState();
    1e34:	12 37       	cpi	r17, 0x72	; 114
    1e36:	d1 f7       	brne	.-12     	; 0x1e2c <CheckInput+0x41a>

                uint8_t cheat[] = "Cheater! Contact badge team... ";
    1e38:	fd d8       	rcall	.-3590   	; 0x1034 <SaveGameState>
    1e3a:	80 e2       	ldi	r24, 0x20	; 32
    1e3c:	e5 ef       	ldi	r30, 0xF5	; 245
    1e3e:	f2 eb       	ldi	r31, 0xB2	; 178
    1e40:	de 01       	movw	r26, r28
    1e42:	11 96       	adiw	r26, 0x01	; 1
    1e44:	01 90       	ld	r0, Z+
    1e46:	0d 92       	st	X+, r0
    1e48:	8a 95       	dec	r24
                SerSpeed(60);
    1e4a:	e1 f7       	brne	.-8      	; 0x1e44 <CheckInput+0x432>
    1e4c:	8c e3       	ldi	r24, 0x3C	; 60
                while(1){
                    if (serTxDone) SerSend(&cheat[0]);
    1e4e:	0f d8       	rcall	.-4066   	; 0xe6e <SerSpeed>
    1e50:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <serTxDone>
    1e54:	88 23       	and	r24, r24
    1e56:	e1 f3       	breq	.-8      	; 0x1e50 <CheckInput+0x43e>
    1e58:	ce 01       	movw	r24, r28
    1e5a:	01 96       	adiw	r24, 0x01	; 1
    1e5c:	0e 94 26 07 	call	0xe4c	; 0xe4c <SerSend>
                }
            }
            
            //Cheat reset (Quote from: Donald E. Westlake)
            if (StartsWith(&data[0], "the trouble with real life is, there's no reset button")){
    1e60:	f7 cf       	rjmp	.-18     	; 0x1e50 <CheckInput+0x43e>
    1e62:	68 eb       	ldi	r22, 0xB8	; 184
    1e64:	72 eb       	ldi	r23, 0xB2	; 178
    1e66:	c8 01       	movw	r24, r16
    1e68:	15 db       	rcall	.-2518   	; 0x1494 <StartsWith>
    1e6a:	68 2e       	mov	r6, r24
    1e6c:	88 23       	and	r24, r24
    1e6e:	51 f1       	breq	.+84     	; 0x1ec4 <CheckInput+0x4b2>
                
                //Reset cheat data by resetting the EEPROM bytes
                uint8_t empty=0xff;
    1e70:	8f ef       	ldi	r24, 0xFF	; 255
    1e72:	89 a3       	std	Y+33, r24	; 0x21
                for (uint8_t x=0; x<MAX_CHEATS; ++x){
                    EEWrite(CHEATS+x, &empty, 1);
    1e74:	18 e1       	ldi	r17, 0x18	; 24
    1e76:	41 e0       	ldi	r20, 0x01	; 1
    1e78:	be 01       	movw	r22, r28
    1e7a:	6f 5d       	subi	r22, 0xDF	; 223
    1e7c:	7f 4f       	sbci	r23, 0xFF	; 255
    1e7e:	81 2f       	mov	r24, r17
    1e80:	0e 94 fe 06 	call	0xdfc	; 0xdfc <EEWrite>
            //Cheat reset (Quote from: Donald E. Westlake)
            if (StartsWith(&data[0], "the trouble with real life is, there's no reset button")){
                
                //Reset cheat data by resetting the EEPROM bytes
                uint8_t empty=0xff;
                for (uint8_t x=0; x<MAX_CHEATS; ++x){
    1e84:	1f 5f       	subi	r17, 0xFF	; 255
    1e86:	10 32       	cpi	r17, 0x20	; 32
                    EEWrite(CHEATS+x, &empty, 1);
                }
                //Reset game data by wiping the UUID bits
                for (uint8_t x=0; x<4; ++x){
                    WriteStatusBit(110+x, 0);
    1e88:	b1 f7       	brne	.-20     	; 0x1e76 <CheckInput+0x464>
    1e8a:	1e e6       	ldi	r17, 0x6E	; 110
    1e8c:	60 e0       	ldi	r22, 0x00	; 0
    1e8e:	81 2f       	mov	r24, r17
    1e90:	58 d9       	rcall	.-3408   	; 0x1142 <WriteStatusBit>
                uint8_t empty=0xff;
                for (uint8_t x=0; x<MAX_CHEATS; ++x){
                    EEWrite(CHEATS+x, &empty, 1);
                }
                //Reset game data by wiping the UUID bits
                for (uint8_t x=0; x<4; ++x){
    1e92:	1f 5f       	subi	r17, 0xFF	; 255
    1e94:	12 37       	cpi	r17, 0x72	; 114
                    WriteStatusBit(110+x, 0);
                }
                
                SaveGameState();
    1e96:	d1 f7       	brne	.-12     	; 0x1e8c <CheckInput+0x47a>
    1e98:	cd d8       	rcall	.-3686   	; 0x1034 <SaveGameState>

                uint8_t cheat[] = "Reset please! ";
    1e9a:	8f e0       	ldi	r24, 0x0F	; 15
    1e9c:	e5 e1       	ldi	r30, 0x15	; 21
    1e9e:	f3 eb       	ldi	r31, 0xB3	; 179
    1ea0:	de 01       	movw	r26, r28
    1ea2:	11 96       	adiw	r26, 0x01	; 1
    1ea4:	01 90       	ld	r0, Z+
    1ea6:	0d 92       	st	X+, r0
    1ea8:	8a 95       	dec	r24
                SerSpeed(60);
    1eaa:	e1 f7       	brne	.-8      	; 0x1ea4 <CheckInput+0x492>
    1eac:	8c e3       	ldi	r24, 0x3C	; 60
    1eae:	0e 94 37 07 	call	0xe6e	; 0xe6e <SerSpeed>
                while(1){
                    if (serTxDone) SerSend(&cheat[0]);
    1eb2:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <serTxDone>
    1eb6:	88 23       	and	r24, r24
    1eb8:	e1 f3       	breq	.-8      	; 0x1eb2 <CheckInput+0x4a0>
    1eba:	ce 01       	movw	r24, r28
    1ebc:	01 96       	adiw	r24, 0x01	; 1
    1ebe:	0e 94 26 07 	call	0xe4c	; 0xe4c <SerSend>
                }
            }
            if (StartsWith(&data[0], "cheat")){
    1ec2:	f7 cf       	rjmp	.-18     	; 0x1eb2 <CheckInput+0x4a0>
    1ec4:	6f ee       	ldi	r22, 0xEF	; 239
    1ec6:	72 eb       	ldi	r23, 0xB2	; 178
    1ec8:	c8 01       	movw	r24, r16
    1eca:	e4 da       	rcall	.-2616   	; 0x1494 <StartsWith>
    1ecc:	88 23       	and	r24, r24
    1ece:	09 f4       	brne	.+2      	; 0x1ed2 <CheckInput+0x4c0>
    1ed0:	31 ce       	rjmp	.-926    	; 0x1b34 <CheckInput+0x122>
    1ed2:	0f ee       	ldi	r16, 0xEF	; 239
    1ed4:	18 e3       	ldi	r17, 0x38	; 56
    1ed6:	78 e1       	ldi	r23, 0x18	; 24
    1ed8:	77 2e       	mov	r7, r23
                    
                    //Set up sending out number
                    EERead(CHEATS+x, &bit, 1);
                    bit = 255-bit;
                    for (n=2; n>=0; --n) {
                        digit[n] = bit % 10;
    1eda:	ea e0       	ldi	r30, 0x0A	; 10
    1edc:	5e 2e       	mov	r5, r30
                        bit /= 10;
    1ede:	f4 e6       	ldi	r31, 0x64	; 100
    1ee0:	4f 2e       	mov	r4, r31
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    reactStr[1][number]=length;
    1ee2:	ee 24       	eor	r14, r14
    1ee4:	e3 94       	inc	r14
    1ee6:	f1 2c       	mov	r15, r1
    1ee8:	cc 24       	eor	r12, r12
    1eea:	c3 94       	inc	r12
    1eec:	d1 2c       	mov	r13, r1
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1eee:	89 e5       	ldi	r24, 0x59	; 89
    1ef0:	88 2e       	mov	r8, r24
    1ef2:	8a e7       	ldi	r24, 0x7A	; 122
    1ef4:	98 2e       	mov	r9, r24
    reactStr[1][number]=length;
    1ef6:	92 e0       	ldi	r25, 0x02	; 2
    1ef8:	a9 2e       	mov	r10, r25
    1efa:	b1 2c       	mov	r11, r1
                uint8_t bit, digit[3];

                for (uint8_t x=0; x<MAX_CHEATS; ++x){
                    
                    //Set up sending out number
                    EERead(CHEATS+x, &bit, 1);
    1efc:	41 e0       	ldi	r20, 0x01	; 1
    1efe:	be 01       	movw	r22, r28
    1f00:	6f 5d       	subi	r22, 0xDF	; 223
    1f02:	7f 4f       	sbci	r23, 0xFF	; 255
    1f04:	87 2d       	mov	r24, r7
    1f06:	0e 94 ee 06 	call	0xddc	; 0xddc <EERead>
                    bit = 255-bit;
    1f0a:	29 a1       	ldd	r18, Y+33	; 0x21
    1f0c:	20 95       	com	r18
                    for (n=2; n>=0; --n) {
                        digit[n] = bit % 10;
    1f0e:	82 2f       	mov	r24, r18
    1f10:	65 2d       	mov	r22, r5
    1f12:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <__udivmodqi4>
    1f16:	9b 83       	std	Y+3, r25	; 0x03
    1f18:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <__udivmodqi4>
    1f1c:	9a 83       	std	Y+2, r25	; 0x02
                        bit /= 10;
    1f1e:	82 2f       	mov	r24, r18
    1f20:	64 2d       	mov	r22, r4
    1f22:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <__udivmodqi4>
                    
                    //Set up sending out number
                    EERead(CHEATS+x, &bit, 1);
                    bit = 255-bit;
                    for (n=2; n>=0; --n) {
                        digit[n] = bit % 10;
    1f26:	89 83       	std	Y+1, r24	; 0x01
    1f28:	19 a2       	std	Y+33, r1	; 0x21
    1f2a:	de 01       	movw	r26, r28
    1f2c:	11 96       	adiw	r26, 0x01	; 1
    1f2e:	40 e0       	ldi	r20, 0x00	; 0
                        bit /= 10;
                    }

                    for (n=0; n<3; ++n) {
                        SetResponse(x*4+n, A_DIGITS+digit[n], 1, TEASER);
    1f30:	2d 91       	ld	r18, X+
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1f32:	86 2d       	mov	r24, r6
    1f34:	84 0f       	add	r24, r20
    1f36:	90 e0       	ldi	r25, 0x00	; 0
    1f38:	fc 01       	movw	r30, r24
    1f3a:	ee 0f       	add	r30, r30
    1f3c:	ff 1f       	adc	r31, r31
    1f3e:	e1 51       	subi	r30, 0x11	; 17
    1f40:	f7 4c       	sbci	r31, 0xC7	; 199
    1f42:	30 e0       	ldi	r19, 0x00	; 0
    1f44:	2d 52       	subi	r18, 0x2D	; 45
    1f46:	3b 48       	sbci	r19, 0x8B	; 139
    1f48:	20 83       	st	Z, r18
    1f4a:	31 83       	std	Z+1, r19	; 0x01
    reactStr[1][number]=length;
    1f4c:	fc 01       	movw	r30, r24
    1f4e:	ee 0f       	add	r30, r30
    1f50:	ff 1f       	adc	r31, r31
    1f52:	e1 5d       	subi	r30, 0xD1	; 209
    1f54:	f6 4c       	sbci	r31, 0xC6	; 198
    1f56:	e0 82       	st	Z, r14
    1f58:	f1 82       	std	Z+1, r15	; 0x01
    reactStr[2][number]=type;
    1f5a:	88 0f       	add	r24, r24
    1f5c:	99 1f       	adc	r25, r25
    1f5e:	fc 01       	movw	r30, r24
    1f60:	e1 59       	subi	r30, 0x91	; 145
    1f62:	f6 4c       	sbci	r31, 0xC6	; 198
    1f64:	e0 82       	st	Z, r14
    1f66:	f1 82       	std	Z+1, r15	; 0x01
    1f68:	4f 5f       	subi	r20, 0xFF	; 255
                    for (n=2; n>=0; --n) {
                        digit[n] = bit % 10;
                        bit /= 10;
                    }

                    for (n=0; n<3; ++n) {
    1f6a:	43 30       	cpi	r20, 0x03	; 3
    1f6c:	09 f7       	brne	.-62     	; 0x1f30 <CheckInput+0x51e>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1f6e:	f8 01       	movw	r30, r16
    1f70:	86 82       	std	Z+6, r8	; 0x06
    1f72:	97 82       	std	Z+7, r9	; 0x07
    reactStr[1][number]=length;
    1f74:	ea 5b       	subi	r30, 0xBA	; 186
    1f76:	ff 4f       	sbci	r31, 0xFF	; 255
    1f78:	a0 82       	st	Z, r10
    1f7a:	b1 82       	std	Z+1, r11	; 0x01
    reactStr[2][number]=type;
    1f7c:	e0 5c       	subi	r30, 0xC0	; 192
    1f7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f80:	c0 82       	st	Z, r12
    1f82:	d1 82       	std	Z+1, r13	; 0x01
    1f84:	73 94       	inc	r7
    1f86:	08 5f       	subi	r16, 0xF8	; 248
    1f88:	1f 4f       	sbci	r17, 0xFF	; 255
    1f8a:	f4 e0       	ldi	r31, 0x04	; 4
    1f8c:	6f 0e       	add	r6, r31
            }
            if (StartsWith(&data[0], "cheat")){
                int8_t n;
                uint8_t bit, digit[3];

                for (uint8_t x=0; x<MAX_CHEATS; ++x){
    1f8e:	80 e2       	ldi	r24, 0x20	; 32
    1f90:	78 12       	cpse	r7, r24
    1f92:	b4 cf       	rjmp	.-152    	; 0x1efc <CheckInput+0x4ea>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1f94:	8b e5       	ldi	r24, 0x5B	; 91
    1f96:	9a e7       	ldi	r25, 0x7A	; 122
    1f98:	80 93 2d 39 	sts	0x392D, r24	; 0x80392d <reactStr+0x3e>
    1f9c:	90 93 2e 39 	sts	0x392E, r25	; 0x80392e <reactStr+0x3f>
    reactStr[1][number]=length;
    1fa0:	84 e0       	ldi	r24, 0x04	; 4
    1fa2:	90 e0       	ldi	r25, 0x00	; 0
    1fa4:	80 93 6d 39 	sts	0x396D, r24	; 0x80396d <reactStr+0x7e>
    1fa8:	90 93 6e 39 	sts	0x396E, r25	; 0x80396e <reactStr+0x7f>
    reactStr[2][number]=type;
    1fac:	81 e0       	ldi	r24, 0x01	; 1
    1fae:	90 e0       	ldi	r25, 0x00	; 0
    1fb0:	80 93 ad 39 	sts	0x39AD, r24	; 0x8039ad <reactStr+0xbe>
    1fb4:	90 93 ae 39 	sts	0x39AE, r25	; 0x8039ae <reactStr+0xbf>
                        SetResponse(x*4+n, A_DIGITS+digit[n], 1, TEASER);
                    }                
                    SetResponse(x*4+3, A_COMMA, L_COMMA, TEASER);
                }
                SetResponse((4*MAX_CHEATS)-1, A_LF, 4, TEASER);
                responseList = 32;
    1fb8:	70 92 ee 38 	sts	0x38EE, r7	; 0x8038ee <responseList>
        //Data received, but not any of the commands above
        return 0;
    }

    //Serial input not available yet
    return 1;
    1fbc:	ff 24       	eor	r15, r15
    1fbe:	f3 94       	inc	r15
}
    1fc0:	8f 2d       	mov	r24, r15
    1fc2:	a1 96       	adiw	r28, 0x21	; 33
    1fc4:	cd bf       	out	0x3d, r28	; 61
    1fc6:	de bf       	out	0x3e, r29	; 62
    1fc8:	df 91       	pop	r29
    1fca:	cf 91       	pop	r28
    1fcc:	1f 91       	pop	r17
    1fce:	0f 91       	pop	r16
    1fd0:	ff 90       	pop	r15
    1fd2:	ef 90       	pop	r14
    1fd4:	df 90       	pop	r13
    1fd6:	cf 90       	pop	r12
    1fd8:	bf 90       	pop	r11
    1fda:	af 90       	pop	r10
    1fdc:	9f 90       	pop	r9
    1fde:	8f 90       	pop	r8
    1fe0:	7f 90       	pop	r7
    1fe2:	6f 90       	pop	r6
    1fe4:	5f 90       	pop	r5
    1fe6:	4f 90       	pop	r4
    1fe8:	08 95       	ret

00001fea <ProcessInput>:

//The game logic!
uint8_t ProcessInput(uint8_t *data){
    1fea:	4f 92       	push	r4
    1fec:	5f 92       	push	r5
    1fee:	6f 92       	push	r6
    1ff0:	7f 92       	push	r7
    1ff2:	8f 92       	push	r8
    1ff4:	9f 92       	push	r9
    1ff6:	af 92       	push	r10
    1ff8:	bf 92       	push	r11
    1ffa:	cf 92       	push	r12
    1ffc:	df 92       	push	r13
    1ffe:	ef 92       	push	r14
    2000:	ff 92       	push	r15
    2002:	0f 93       	push	r16
    2004:	1f 93       	push	r17
    2006:	cf 93       	push	r28
    2008:	df 93       	push	r29
    200a:	cd b7       	in	r28, 0x3d	; 61
    200c:	de b7       	in	r29, 0x3e	; 62
    200e:	2a 97       	sbiw	r28, 0x0a	; 10
    2010:	cd bf       	out	0x3d, r28	; 61
    2012:	de bf       	out	0x3e, r29	; 62
    2014:	8c 01       	movw	r16, r24
    static object_model_t actObj1, actObj2;
    uint8_t elements = 1;

    CleanInput(&data[0]);
    2016:	3f dc       	rcall	.-1922   	; 0x1896 <CleanInput>
    uint8_t inputLen = CleanInput(&data[0]);
    2018:	c8 01       	movw	r24, r16
    201a:	3d dc       	rcall	.-1926   	; 0x1896 <CleanInput>
    201c:	f8 2e       	mov	r15, r24

    if (inputLen) {
    201e:	88 23       	and	r24, r24
    2020:	09 f4       	brne	.+2      	; 0x2024 <ProcessInput+0x3a>
    2022:	7c c7       	rjmp	.+3832   	; 0x2f1c <ProcessInput+0xf32>

        //eXit to previous location
        if (data[0] == 'x'){
    2024:	d8 01       	movw	r26, r16
    2026:	8c 91       	ld	r24, X
    2028:	88 37       	cpi	r24, 0x78	; 120
    202a:	79 f5       	brne	.+94     	; 0x208a <ProcessInput+0xa0>

            //Standing in the Lobby?
            if ((route[currDepth] == 0)||(currDepth == 0)){
    202c:	80 91 26 38 	lds	r24, 0x3826	; 0x803826 <currDepth>
    2030:	e8 2f       	mov	r30, r24
    2032:	f0 e0       	ldi	r31, 0x00	; 0
    2034:	ee 0f       	add	r30, r30
    2036:	ff 1f       	adc	r31, r31
    2038:	e1 55       	subi	r30, 0x51	; 81
    203a:	f6 4c       	sbci	r31, 0xC6	; 198
    203c:	20 81       	ld	r18, Z
    203e:	31 81       	ldd	r19, Z+1	; 0x01
    2040:	23 2b       	or	r18, r19
    2042:	11 f0       	breq	.+4      	; 0x2048 <ProcessInput+0x5e>
    2044:	81 11       	cpse	r24, r1
    2046:	03 c0       	rjmp	.+6      	; 0x204e <ProcessInput+0x64>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2048:	82 e8       	ldi	r24, 0x82	; 130
    204a:	96 e7       	ldi	r25, 0x76	; 118
    204c:	58 c5       	rjmp	.+2736   	; 0x2afe <ProcessInput+0xb14>
            //Standing in the Lobby?
            if ((route[currDepth] == 0)||(currDepth == 0)){
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            
            //Is there a way to go back?
            } else if (CheckState(currObj.byteField[OPEN_ACL])){
    204e:	80 91 f5 39 	lds	r24, 0x39F5	; 0x8039f5 <currObj+0x6>
    2052:	99 d8       	rcall	.-3790   	; 0x1186 <CheckState>
    2054:	88 23       	and	r24, r24
    2056:	81 f0       	breq	.+32     	; 0x2078 <ProcessInput+0x8e>
                --currDepth;
    2058:	e0 91 26 38 	lds	r30, 0x3826	; 0x803826 <currDepth>
    205c:	e1 50       	subi	r30, 0x01	; 1
    205e:	e0 93 26 38 	sts	0x3826, r30	; 0x803826 <currDepth>
                PopulateObject(route[currDepth], &currObj);
    2062:	f0 e0       	ldi	r31, 0x00	; 0
    2064:	ee 0f       	add	r30, r30
    2066:	ff 1f       	adc	r31, r31
    2068:	e1 55       	subi	r30, 0x51	; 81
    206a:	f6 4c       	sbci	r31, 0xC6	; 198
    206c:	6f ee       	ldi	r22, 0xEF	; 239
    206e:	79 e3       	ldi	r23, 0x39	; 57
    2070:	80 81       	ld	r24, Z
    2072:	91 81       	ldd	r25, Z+1	; 0x01
    2074:	dd da       	rcall	.-2630   	; 0x1630 <PopulateObject>
    2076:	0d c2       	rjmp	.+1050   	; 0x2492 <ProcessInput+0x4a8>
            
            //No way out, print denied message of location
            } else {
                SetResponse(elements++, currObj.addrStr[OPEN_ACL_MSG], currObj.lenStr[OPEN_ACL_MSG], GAME);               
    2078:	80 91 11 3a 	lds	r24, 0x3A11	; 0x803a11 <currObj+0x22>
    207c:	90 91 12 3a 	lds	r25, 0x3A12	; 0x803a12 <currObj+0x23>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2080:	20 91 03 3a 	lds	r18, 0x3A03	; 0x803a03 <currObj+0x14>
    2084:	30 91 04 3a 	lds	r19, 0x3A04	; 0x803a04 <currObj+0x15>
    2088:	f2 c5       	rjmp	.+3044   	; 0x2c6e <ProcessInput+0xc84>
            } else {
                SetResponse(elements++, currObj.addrStr[OPEN_ACL_MSG], currObj.lenStr[OPEN_ACL_MSG], GAME);               
            }   
        
        //Enter locations or Open objects    
        } else if ((data[0] == 'e')||(data[0] == 'o')) {
    208a:	85 36       	cpi	r24, 0x65	; 101
    208c:	19 f0       	breq	.+6      	; 0x2094 <ProcessInput+0xaa>
    208e:	8f 36       	cpi	r24, 0x6F	; 111
    2090:	09 f0       	breq	.+2      	; 0x2094 <ProcessInput+0xaa>
    2092:	c9 c0       	rjmp	.+402    	; 0x2226 <ProcessInput+0x23c>
                
            //Not possible, too many/little characters
            if (inputLen != 2){
    2094:	b2 e0       	ldi	r27, 0x02	; 2
    2096:	fb 12       	cpse	r15, r27
    2098:	d7 cf       	rjmp	.-82     	; 0x2048 <ProcessInput+0x5e>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                uint8_t canDo = 0;
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
    209a:	e0 90 26 38 	lds	r14, 0x3826	; 0x803826 <currDepth>
    209e:	f1 2c       	mov	r15, r1
    20a0:	f7 01       	movw	r30, r14
    20a2:	ee 0f       	add	r30, r30
    20a4:	ff 1f       	adc	r31, r31
    20a6:	e1 55       	subi	r30, 0x51	; 81
    20a8:	f6 4c       	sbci	r31, 0xC6	; 198
    20aa:	40 e0       	ldi	r20, 0x00	; 0
    20ac:	50 e0       	ldi	r21, 0x00	; 0
    20ae:	d8 01       	movw	r26, r16
    20b0:	11 96       	adiw	r26, 0x01	; 1
    20b2:	6c 91       	ld	r22, X
    20b4:	80 81       	ld	r24, Z
    20b6:	91 81       	ldd	r25, Z+1	; 0x01
    20b8:	86 db       	rcall	.-2292   	; 0x17c6 <FindChild>
    20ba:	f7 01       	movw	r30, r14
    20bc:	ee 0f       	add	r30, r30
    20be:	ff 1f       	adc	r31, r31
    20c0:	ef 54       	subi	r30, 0x4F	; 79
    20c2:	f6 4c       	sbci	r31, 0xC6	; 198
    20c4:	80 83       	st	Z, r24
    20c6:	91 83       	std	Z+1, r25	; 0x01
                    
                //Child found?
                if (route[currDepth+1]) {
    20c8:	90 91 26 38 	lds	r25, 0x3826	; 0x803826 <currDepth>
    20cc:	29 2f       	mov	r18, r25
    20ce:	30 e0       	ldi	r19, 0x00	; 0
    20d0:	f9 01       	movw	r30, r18
    20d2:	ee 0f       	add	r30, r30
    20d4:	ff 1f       	adc	r31, r31
    20d6:	ef 54       	subi	r30, 0x4F	; 79
    20d8:	f6 4c       	sbci	r31, 0xC6	; 198
    20da:	40 81       	ld	r20, Z
    20dc:	51 81       	ldd	r21, Z+1	; 0x01
    20de:	41 15       	cp	r20, r1
    20e0:	51 05       	cpc	r21, r1
    20e2:	21 f0       	breq	.+8      	; 0x20ec <ProcessInput+0x102>
                    PopulateObject(route[currDepth+1], &actObj1);
    20e4:	60 eb       	ldi	r22, 0xB0	; 176
    20e6:	78 e3       	ldi	r23, 0x38	; 56
    20e8:	ca 01       	movw	r24, r20
    20ea:	1c c0       	rjmp	.+56     	; 0x2124 <ProcessInput+0x13a>
                    canDo = 1;
                //No child, maybe a step back, letter ok?
                } else if (currDepth) {
    20ec:	99 23       	and	r25, r25
    20ee:	09 f4       	brne	.+2      	; 0x20f2 <ProcessInput+0x108>
    20f0:	31 c7       	rjmp	.+3682   	; 0x2f54 <ProcessInput+0xf6a>
                    if (CheckLetter(route[currDepth-1], data[1])) {
    20f2:	22 0f       	add	r18, r18
    20f4:	33 1f       	adc	r19, r19
    20f6:	f9 01       	movw	r30, r18
    20f8:	e3 55       	subi	r30, 0x53	; 83
    20fa:	f6 4c       	sbci	r31, 0xC6	; 198
    20fc:	d8 01       	movw	r26, r16
    20fe:	11 96       	adiw	r26, 0x01	; 1
    2100:	6c 91       	ld	r22, X
    2102:	80 81       	ld	r24, Z
    2104:	91 81       	ldd	r25, Z+1	; 0x01
    2106:	0b db       	rcall	.-2538   	; 0x171e <CheckLetter>
    2108:	88 23       	and	r24, r24
    210a:	09 f4       	brne	.+2      	; 0x210e <ProcessInput+0x124>
    210c:	23 c7       	rjmp	.+3654   	; 0x2f54 <ProcessInput+0xf6a>
                        PopulateObject(route[currDepth-1], &actObj1);
    210e:	e0 91 26 38 	lds	r30, 0x3826	; 0x803826 <currDepth>
    2112:	f0 e0       	ldi	r31, 0x00	; 0
    2114:	ee 0f       	add	r30, r30
    2116:	ff 1f       	adc	r31, r31
    2118:	e3 55       	subi	r30, 0x53	; 83
    211a:	f6 4c       	sbci	r31, 0xC6	; 198
    211c:	60 eb       	ldi	r22, 0xB0	; 176
    211e:	78 e3       	ldi	r23, 0x38	; 56
    2120:	80 81       	ld	r24, Z
    2122:	91 81       	ldd	r25, Z+1	; 0x01
    2124:	85 da       	rcall	.-2806   	; 0x1630 <PopulateObject>
                    }
                }

                //The candidate is found! Let's check if the action is legit
                if (canDo) {
                    if ((data[0] == 'e') && ((actObj1.byteField[ACTION_MASK]&ENTER)==0)) {
    2126:	d8 01       	movw	r26, r16
    2128:	8c 91       	ld	r24, X
    212a:	85 36       	cpi	r24, 0x65	; 101
    212c:	c9 f4       	brne	.+50     	; 0x2160 <ProcessInput+0x176>
    212e:	80 91 b8 38 	lds	r24, 0x38B8	; 0x8038b8 <actObj1.3989+0x8>
    2132:	80 fd       	sbrc	r24, 0
    2134:	1e c0       	rjmp	.+60     	; 0x2172 <ProcessInput+0x188>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2136:	80 ea       	ldi	r24, 0xA0	; 160
    2138:	99 e7       	ldi	r25, 0x79	; 121
    213a:	80 93 f1 38 	sts	0x38F1, r24	; 0x8038f1 <reactStr+0x2>
    213e:	90 93 f2 38 	sts	0x38F2, r25	; 0x8038f2 <reactStr+0x3>
    reactStr[1][number]=length;
    2142:	8e e1       	ldi	r24, 0x1E	; 30
    2144:	90 e0       	ldi	r25, 0x00	; 0
    2146:	80 93 31 39 	sts	0x3931, r24	; 0x803931 <reactStr+0x42>
    214a:	90 93 32 39 	sts	0x3932, r25	; 0x803932 <reactStr+0x43>
    reactStr[2][number]=type;
    214e:	81 e0       	ldi	r24, 0x01	; 1
    2150:	90 e0       	ldi	r25, 0x00	; 0
    2152:	80 93 71 39 	sts	0x3971, r24	; 0x803971 <reactStr+0x82>
    2156:	90 93 72 39 	sts	0x3972, r25	; 0x803972 <reactStr+0x83>
                }

                //The candidate is found! Let's check if the action is legit
                if (canDo) {
                    if ((data[0] == 'e') && ((actObj1.byteField[ACTION_MASK]&ENTER)==0)) {
                        SetResponse(elements++, A_CANTENTER, L_CANTENTER, TEASER);
    215a:	72 e0       	ldi	r23, 0x02	; 2
    215c:	77 2e       	mov	r7, r23
    215e:	be c6       	rjmp	.+3452   	; 0x2edc <ProcessInput+0xef2>
                    } else if ((data[0] == 'o') && ((actObj1.byteField[ACTION_MASK]&OPEN)==0)) {
    2160:	8f 36       	cpi	r24, 0x6F	; 111
    2162:	39 f4       	brne	.+14     	; 0x2172 <ProcessInput+0x188>
    2164:	80 91 b8 38 	lds	r24, 0x38B8	; 0x8038b8 <actObj1.3989+0x8>
    2168:	81 fd       	sbrc	r24, 1
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    216a:	03 c0       	rjmp	.+6      	; 0x2172 <ProcessInput+0x188>
    216c:	85 e8       	ldi	r24, 0x85	; 133
    216e:	99 e7       	ldi	r25, 0x79	; 121
                        SetResponse(elements++, A_CANTENTER, L_CANTENTER, TEASER);
                    } else if ((data[0] == 'o') && ((actObj1.byteField[ACTION_MASK]&OPEN)==0)) {
                        SetResponse(elements++, A_CANTOPEN, L_CANTOPEN, TEASER);
                    
                    //Action legit, permission granted?
                    } else if (CheckState(actObj1.byteField[OPEN_ACL])) {
    2170:	c6 c4       	rjmp	.+2444   	; 0x2afe <ProcessInput+0xb14>
    2172:	80 91 b6 38 	lds	r24, 0x38B6	; 0x8038b6 <actObj1.3989+0x6>
    2176:	07 d8       	rcall	.-4082   	; 0x1186 <CheckState>
    2178:	e0 91 26 38 	lds	r30, 0x3826	; 0x803826 <currDepth>
    217c:	88 23       	and	r24, r24
    217e:	09 f4       	brne	.+2      	; 0x2182 <ProcessInput+0x198>
    2180:	42 c0       	rjmp	.+132    	; 0x2206 <ProcessInput+0x21c>
                            
                        //Yes! Check if we must move forward or backwards.
                        if (route[currDepth+1]) ++currDepth; else --currDepth;
    2182:	ae 2f       	mov	r26, r30
    2184:	b0 e0       	ldi	r27, 0x00	; 0
    2186:	aa 0f       	add	r26, r26
    2188:	bb 1f       	adc	r27, r27
    218a:	af 54       	subi	r26, 0x4F	; 79
    218c:	b6 4c       	sbci	r27, 0xC6	; 198
    218e:	8d 91       	ld	r24, X+
    2190:	9c 91       	ld	r25, X
    2192:	89 2b       	or	r24, r25
    2194:	11 f0       	breq	.+4      	; 0x219a <ProcessInput+0x1b0>
    2196:	ef 5f       	subi	r30, 0xFF	; 255
    2198:	01 c0       	rjmp	.+2      	; 0x219c <ProcessInput+0x1b2>
    219a:	e1 50       	subi	r30, 0x01	; 1
    219c:	e0 93 26 38 	sts	0x3826, r30	; 0x803826 <currDepth>
                        PopulateObject(route[currDepth], &currObj);
    21a0:	e0 91 26 38 	lds	r30, 0x3826	; 0x803826 <currDepth>
    21a4:	f0 e0       	ldi	r31, 0x00	; 0
    21a6:	ee 0f       	add	r30, r30
    21a8:	ff 1f       	adc	r31, r31
    21aa:	e1 55       	subi	r30, 0x51	; 81
    21ac:	f6 4c       	sbci	r31, 0xC6	; 198
    21ae:	6f ee       	ldi	r22, 0xEF	; 239
    21b0:	79 e3       	ldi	r23, 0x39	; 57
    21b2:	80 81       	ld	r24, Z
    21b4:	91 81       	ldd	r25, Z+1	; 0x01
    21b6:	3c da       	rcall	.-2952   	; 0x1630 <PopulateObject>
                        SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
    21b8:	80 91 0b 3a 	lds	r24, 0x3A0B	; 0x803a0b <currObj+0x1c>
    21bc:	90 91 0c 3a 	lds	r25, 0x3A0C	; 0x803a0c <currObj+0x1d>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    21c0:	20 91 fd 39 	lds	r18, 0x39FD	; 0x8039fd <currObj+0xe>
    21c4:	30 91 fe 39 	lds	r19, 0x39FE	; 0x8039fe <currObj+0xf>
    21c8:	20 93 f1 38 	sts	0x38F1, r18	; 0x8038f1 <reactStr+0x2>
    21cc:	30 93 f2 38 	sts	0x38F2, r19	; 0x8038f2 <reactStr+0x3>
    reactStr[1][number]=length;
    21d0:	80 93 31 39 	sts	0x3931, r24	; 0x803931 <reactStr+0x42>
    21d4:	90 93 32 39 	sts	0x3932, r25	; 0x803932 <reactStr+0x43>
    reactStr[2][number]=type;
    21d8:	10 92 71 39 	sts	0x3971, r1	; 0x803971 <reactStr+0x82>
    21dc:	10 92 72 39 	sts	0x3972, r1	; 0x803972 <reactStr+0x83>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    21e0:	8b e5       	ldi	r24, 0x5B	; 91
    21e2:	9a e7       	ldi	r25, 0x7A	; 122
    21e4:	80 93 f3 38 	sts	0x38F3, r24	; 0x8038f3 <reactStr+0x4>
    21e8:	90 93 f4 38 	sts	0x38F4, r25	; 0x8038f4 <reactStr+0x5>
    reactStr[1][number]=length;
    21ec:	82 e0       	ldi	r24, 0x02	; 2
    21ee:	90 e0       	ldi	r25, 0x00	; 0
    21f0:	80 93 33 39 	sts	0x3933, r24	; 0x803933 <reactStr+0x44>
    21f4:	90 93 34 39 	sts	0x3934, r25	; 0x803934 <reactStr+0x45>
    reactStr[2][number]=type;
    21f8:	81 e0       	ldi	r24, 0x01	; 1
    21fa:	90 e0       	ldi	r25, 0x00	; 0
    21fc:	80 93 73 39 	sts	0x3973, r24	; 0x803973 <reactStr+0x84>
    2200:	90 93 74 39 	sts	0x3974, r25	; 0x803974 <reactStr+0x85>
    2204:	68 c4       	rjmp	.+2256   	; 0x2ad6 <ProcessInput+0xaec>
                        SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
                        SetResponse(elements++, A_LF, 2, TEASER);
                                                  
                    //Not granted!
                    } else {
                        route[currDepth+1] = 0;
    2206:	f0 e0       	ldi	r31, 0x00	; 0
    2208:	ee 0f       	add	r30, r30
    220a:	ff 1f       	adc	r31, r31
    220c:	ef 54       	subi	r30, 0x4F	; 79
    220e:	f6 4c       	sbci	r31, 0xC6	; 198
    2210:	10 82       	st	Z, r1
    2212:	11 82       	std	Z+1, r1	; 0x01
                        SetResponse(elements++, actObj1.addrStr[OPEN_ACL_MSG], actObj1.lenStr[OPEN_ACL_MSG], GAME);                
    2214:	80 91 d2 38 	lds	r24, 0x38D2	; 0x8038d2 <actObj1.3989+0x22>
    2218:	90 91 d3 38 	lds	r25, 0x38D3	; 0x8038d3 <actObj1.3989+0x23>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    221c:	20 91 c4 38 	lds	r18, 0x38C4	; 0x8038c4 <actObj1.3989+0x14>
    2220:	30 91 c5 38 	lds	r19, 0x38C5	; 0x8038c5 <actObj1.3989+0x15>
    2224:	24 c5       	rjmp	.+2632   	; 0x2c6e <ProcessInput+0xc84>
                    SetResponse(elements++, A_DONTSEE, L_DONTSEE, TEASER);                
                }
            }

        //Look around or at objects
        } else if (data[0] == 'l') {
    2226:	8c 36       	cpi	r24, 0x6C	; 108
    2228:	09 f0       	breq	.+2      	; 0x222c <ProcessInput+0x242>
    222a:	4b c1       	rjmp	.+662    	; 0x24c2 <ProcessInput+0x4d8>
    222c:	e0 91 26 38 	lds	r30, 0x3826	; 0x803826 <currDepth>
            if (inputLen == 1) {
    2230:	b1 e0       	ldi	r27, 0x01	; 1
    2232:	fb 12       	cpse	r15, r27
    2234:	f6 c0       	rjmp	.+492    	; 0x2422 <ProcessInput+0x438>

                //Show info about this area first
                SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
    2236:	80 91 0b 3a 	lds	r24, 0x3A0B	; 0x803a0b <currObj+0x1c>
    223a:	90 91 0c 3a 	lds	r25, 0x3A0C	; 0x803a0c <currObj+0x1d>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    223e:	20 91 fd 39 	lds	r18, 0x39FD	; 0x8039fd <currObj+0xe>
    2242:	30 91 fe 39 	lds	r19, 0x39FE	; 0x8039fe <currObj+0xf>
    2246:	20 93 f1 38 	sts	0x38F1, r18	; 0x8038f1 <reactStr+0x2>
    224a:	30 93 f2 38 	sts	0x38F2, r19	; 0x8038f2 <reactStr+0x3>
    reactStr[1][number]=length;
    224e:	80 93 31 39 	sts	0x3931, r24	; 0x803931 <reactStr+0x42>
    2252:	90 93 32 39 	sts	0x3932, r25	; 0x803932 <reactStr+0x43>
    reactStr[2][number]=type;
    2256:	10 92 71 39 	sts	0x3971, r1	; 0x803971 <reactStr+0x82>
    225a:	10 92 72 39 	sts	0x3972, r1	; 0x803972 <reactStr+0x83>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    225e:	8b e5       	ldi	r24, 0x5B	; 91
    2260:	9a e7       	ldi	r25, 0x7A	; 122
    2262:	80 93 f3 38 	sts	0x38F3, r24	; 0x8038f3 <reactStr+0x4>
    2266:	90 93 f4 38 	sts	0x38F4, r25	; 0x8038f4 <reactStr+0x5>
    reactStr[1][number]=length;
    226a:	82 e0       	ldi	r24, 0x02	; 2
    226c:	90 e0       	ldi	r25, 0x00	; 0
    226e:	80 93 33 39 	sts	0x3933, r24	; 0x803933 <reactStr+0x44>
    2272:	90 93 34 39 	sts	0x3934, r25	; 0x803934 <reactStr+0x45>
    reactStr[2][number]=type;
    2276:	81 e0       	ldi	r24, 0x01	; 1
    2278:	90 e0       	ldi	r25, 0x00	; 0
    227a:	80 93 73 39 	sts	0x3973, r24	; 0x803973 <reactStr+0x84>
    227e:	90 93 74 39 	sts	0x3974, r25	; 0x803974 <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2282:	2e ee       	ldi	r18, 0xEE	; 238
    2284:	39 e7       	ldi	r19, 0x79	; 121
    2286:	20 93 f5 38 	sts	0x38F5, r18	; 0x8038f5 <reactStr+0x6>
    228a:	30 93 f6 38 	sts	0x38F6, r19	; 0x8038f6 <reactStr+0x7>
    reactStr[1][number]=length;
    228e:	25 e1       	ldi	r18, 0x15	; 21
    2290:	30 e0       	ldi	r19, 0x00	; 0
    2292:	20 93 35 39 	sts	0x3935, r18	; 0x803935 <reactStr+0x46>
    2296:	30 93 36 39 	sts	0x3936, r19	; 0x803936 <reactStr+0x47>
    reactStr[2][number]=type;
    229a:	80 93 75 39 	sts	0x3975, r24	; 0x803975 <reactStr+0x86>
    229e:	90 93 76 39 	sts	0x3976, r25	; 0x803976 <reactStr+0x87>
                SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
                SetResponse(elements++, A_LF, 2, TEASER);
                SetResponse(elements++, A_LOOK, L_LOOK, TEASER);

                //Check the visible children first
                route[currDepth+1] = 0;
    22a2:	f0 e0       	ldi	r31, 0x00	; 0
    22a4:	ee 0f       	add	r30, r30
    22a6:	ff 1f       	adc	r31, r31
    22a8:	ef 54       	subi	r30, 0x4F	; 79
    22aa:	f6 4c       	sbci	r31, 0xC6	; 198
    22ac:	10 82       	st	Z, r1
    22ae:	11 82       	std	Z+1, r1	; 0x01
            if (inputLen == 1) {

                //Show info about this area first
                SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
                SetResponse(elements++, A_LF, 2, TEASER);
                SetResponse(elements++, A_LOOK, L_LOOK, TEASER);
    22b0:	84 e0       	ldi	r24, 0x04	; 4
    22b2:	68 2e       	mov	r6, r24
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    22b4:	99 e5       	ldi	r25, 0x59	; 89
    22b6:	c9 2e       	mov	r12, r25
    22b8:	9a e7       	ldi	r25, 0x7A	; 122
    22ba:	d9 2e       	mov	r13, r25
    reactStr[1][number]=length;
    22bc:	22 e0       	ldi	r18, 0x02	; 2
    22be:	a2 2e       	mov	r10, r18
    22c0:	b1 2c       	mov	r11, r1
    reactStr[2][number]=type;
    22c2:	88 24       	eor	r8, r8
    22c4:	83 94       	inc	r8
    22c6:	91 2c       	mov	r9, r1
                SetResponse(elements++, A_LOOK, L_LOOK, TEASER);

                //Check the visible children first
                route[currDepth+1] = 0;
                do{
                    route[currDepth+1] = FindChild(route[currDepth], 0, route[currDepth+1]);
    22c8:	80 91 26 38 	lds	r24, 0x3826	; 0x803826 <currDepth>
    22cc:	90 e0       	ldi	r25, 0x00	; 0
    22ce:	9c 01       	movw	r18, r24
    22d0:	22 0f       	add	r18, r18
    22d2:	33 1f       	adc	r19, r19
    22d4:	f9 01       	movw	r30, r18
    22d6:	ef 54       	subi	r30, 0x4F	; 79
    22d8:	f6 4c       	sbci	r31, 0xC6	; 198
    22da:	7f 01       	movw	r14, r30
    22dc:	40 81       	ld	r20, Z
    22de:	51 81       	ldd	r21, Z+1	; 0x01
    22e0:	f9 01       	movw	r30, r18
    22e2:	e1 55       	subi	r30, 0x51	; 81
    22e4:	f6 4c       	sbci	r31, 0xC6	; 198
    22e6:	60 e0       	ldi	r22, 0x00	; 0
    22e8:	80 81       	ld	r24, Z
    22ea:	91 81       	ldd	r25, Z+1	; 0x01
    22ec:	6c da       	rcall	.-2856   	; 0x17c6 <FindChild>
    22ee:	d7 01       	movw	r26, r14
    22f0:	8d 93       	st	X+, r24
    22f2:	9c 93       	st	X, r25
                    if (route[currDepth+1]) {
    22f4:	e0 91 26 38 	lds	r30, 0x3826	; 0x803826 <currDepth>
    22f8:	f0 e0       	ldi	r31, 0x00	; 0
    22fa:	ee 0f       	add	r30, r30
    22fc:	ff 1f       	adc	r31, r31
    22fe:	ef 54       	subi	r30, 0x4F	; 79
    2300:	f6 4c       	sbci	r31, 0xC6	; 198
    2302:	80 81       	ld	r24, Z
    2304:	91 81       	ldd	r25, Z+1	; 0x01
    2306:	00 97       	sbiw	r24, 0x00	; 0
    2308:	09 f4       	brne	.+2      	; 0x230c <ProcessInput+0x322>
    230a:	4a c0       	rjmp	.+148    	; 0x23a0 <ProcessInput+0x3b6>
                        if ((route[currDepth+1] != inventory[0])&&(route[currDepth+1] != inventory[1])) {
    230c:	20 91 31 38 	lds	r18, 0x3831	; 0x803831 <inventory>
    2310:	30 91 32 38 	lds	r19, 0x3832	; 0x803832 <inventory+0x1>
    2314:	82 17       	cp	r24, r18
    2316:	93 07       	cpc	r25, r19
    2318:	09 f4       	brne	.+2      	; 0x231c <ProcessInput+0x332>
    231a:	42 c0       	rjmp	.+132    	; 0x23a0 <ProcessInput+0x3b6>
    231c:	20 91 33 38 	lds	r18, 0x3833	; 0x803833 <inventory+0x2>
    2320:	30 91 34 38 	lds	r19, 0x3834	; 0x803834 <inventory+0x3>
    2324:	82 17       	cp	r24, r18
    2326:	93 07       	cpc	r25, r19
                            PopulateObject(route[currDepth+1], &actObj1);
    2328:	d9 f1       	breq	.+118    	; 0x23a0 <ProcessInput+0x3b6>
    232a:	60 eb       	ldi	r22, 0xB0	; 176
    232c:	78 e3       	ldi	r23, 0x38	; 56
    232e:	80 d9       	rcall	.-3328   	; 0x1630 <PopulateObject>
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
    2330:	80 91 ca 38 	lds	r24, 0x38CA	; 0x8038ca <actObj1.3989+0x1a>
    2334:	90 91 cb 38 	lds	r25, 0x38CB	; 0x8038cb <actObj1.3989+0x1b>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2338:	e6 2d       	mov	r30, r6
    233a:	f0 e0       	ldi	r31, 0x00	; 0
    233c:	df 01       	movw	r26, r30
    233e:	aa 0f       	add	r26, r26
    2340:	bb 1f       	adc	r27, r27
    2342:	a1 51       	subi	r26, 0x11	; 17
    2344:	b7 4c       	sbci	r27, 0xC7	; 199
    2346:	20 91 bc 38 	lds	r18, 0x38BC	; 0x8038bc <actObj1.3989+0xc>
    234a:	30 91 bd 38 	lds	r19, 0x38BD	; 0x8038bd <actObj1.3989+0xd>
    234e:	2d 93       	st	X+, r18
    2350:	3c 93       	st	X, r19
    reactStr[1][number]=length;
    2352:	df 01       	movw	r26, r30
    2354:	aa 0f       	add	r26, r26
    2356:	bb 1f       	adc	r27, r27
    2358:	a1 5d       	subi	r26, 0xD1	; 209
    235a:	b6 4c       	sbci	r27, 0xC6	; 198
    235c:	8d 93       	st	X+, r24
    235e:	9c 93       	st	X, r25
    reactStr[2][number]=type;
    2360:	ee 0f       	add	r30, r30
    2362:	ff 1f       	adc	r31, r31
    2364:	e1 59       	subi	r30, 0x91	; 145
    2366:	f6 4c       	sbci	r31, 0xC6	; 198
    2368:	10 82       	st	Z, r1
    236a:	11 82       	std	Z+1, r1	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    236c:	81 e0       	ldi	r24, 0x01	; 1
    236e:	86 0d       	add	r24, r6
    2370:	90 e0       	ldi	r25, 0x00	; 0
    2372:	63 94       	inc	r6
    2374:	63 94       	inc	r6
    2376:	fc 01       	movw	r30, r24
    2378:	ee 0f       	add	r30, r30
    237a:	ff 1f       	adc	r31, r31
    237c:	e1 51       	subi	r30, 0x11	; 17
    237e:	f7 4c       	sbci	r31, 0xC7	; 199
    2380:	c0 82       	st	Z, r12
    2382:	d1 82       	std	Z+1, r13	; 0x01
    reactStr[1][number]=length;
    2384:	fc 01       	movw	r30, r24
    2386:	ee 0f       	add	r30, r30
    2388:	ff 1f       	adc	r31, r31
    238a:	e1 5d       	subi	r30, 0xD1	; 209
    238c:	f6 4c       	sbci	r31, 0xC6	; 198
    238e:	a0 82       	st	Z, r10
    2390:	b1 82       	std	Z+1, r11	; 0x01
    reactStr[2][number]=type;
    2392:	88 0f       	add	r24, r24
    2394:	99 1f       	adc	r25, r25
    2396:	fc 01       	movw	r30, r24
    2398:	e1 59       	subi	r30, 0x91	; 145
    239a:	f6 4c       	sbci	r31, 0xC6	; 198
    239c:	80 82       	st	Z, r8
    239e:	91 82       	std	Z+1, r9	; 0x01
                            PopulateObject(route[currDepth+1], &actObj1);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
                            SetResponse(elements++, A_COMMA, L_COMMA, TEASER);
                        }
                    }
                }while (route[currDepth+1]);
    23a0:	20 91 26 38 	lds	r18, 0x3826	; 0x803826 <currDepth>
    23a4:	82 2f       	mov	r24, r18
    23a6:	90 e0       	ldi	r25, 0x00	; 0
    23a8:	fc 01       	movw	r30, r24
    23aa:	ee 0f       	add	r30, r30
    23ac:	ff 1f       	adc	r31, r31
    23ae:	ef 54       	subi	r30, 0x4F	; 79
    23b0:	f6 4c       	sbci	r31, 0xC6	; 198
    23b2:	40 81       	ld	r20, Z
    23b4:	51 81       	ldd	r21, Z+1	; 0x01
    23b6:	45 2b       	or	r20, r21
    23b8:	09 f0       	breq	.+2      	; 0x23bc <ProcessInput+0x3d2>
    23ba:	86 cf       	rjmp	.-244    	; 0x22c8 <ProcessInput+0x2de>

                //Look back if not on level 0
                if (currDepth) {
    23bc:	22 23       	and	r18, r18
                    PopulateObject(route[currDepth-1], &actObj1);
    23be:	69 f1       	breq	.+90     	; 0x241a <ProcessInput+0x430>
    23c0:	88 0f       	add	r24, r24
    23c2:	99 1f       	adc	r25, r25
    23c4:	fc 01       	movw	r30, r24
    23c6:	e3 55       	subi	r30, 0x53	; 83
    23c8:	f6 4c       	sbci	r31, 0xC6	; 198
    23ca:	60 eb       	ldi	r22, 0xB0	; 176
    23cc:	78 e3       	ldi	r23, 0x38	; 56
    23ce:	80 81       	ld	r24, Z
    23d0:	91 81       	ldd	r25, Z+1	; 0x01
    23d2:	2e d9       	rcall	.-3492   	; 0x1630 <PopulateObject>
                    SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
    23d4:	20 91 ca 38 	lds	r18, 0x38CA	; 0x8038ca <actObj1.3989+0x1a>
    23d8:	30 91 cb 38 	lds	r19, 0x38CB	; 0x8038cb <actObj1.3989+0x1b>
    23dc:	77 24       	eor	r7, r7
    23de:	73 94       	inc	r7
    23e0:	76 0c       	add	r7, r6
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    23e2:	86 2d       	mov	r24, r6
    23e4:	90 e0       	ldi	r25, 0x00	; 0
    23e6:	fc 01       	movw	r30, r24
    23e8:	ee 0f       	add	r30, r30
    23ea:	ff 1f       	adc	r31, r31
    23ec:	e1 51       	subi	r30, 0x11	; 17
    23ee:	f7 4c       	sbci	r31, 0xC7	; 199
    23f0:	40 91 bc 38 	lds	r20, 0x38BC	; 0x8038bc <actObj1.3989+0xc>
    23f4:	50 91 bd 38 	lds	r21, 0x38BD	; 0x8038bd <actObj1.3989+0xd>
    23f8:	40 83       	st	Z, r20
    23fa:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    23fc:	fc 01       	movw	r30, r24
    23fe:	ee 0f       	add	r30, r30
    2400:	ff 1f       	adc	r31, r31
    2402:	e1 5d       	subi	r30, 0xD1	; 209
    2404:	f6 4c       	sbci	r31, 0xC6	; 198
    2406:	20 83       	st	Z, r18
    2408:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    240a:	88 0f       	add	r24, r24
    240c:	99 1f       	adc	r25, r25
    240e:	fc 01       	movw	r30, r24
    2410:	e1 59       	subi	r30, 0x91	; 145
    2412:	f6 4c       	sbci	r31, 0xC6	; 198
    2414:	10 82       	st	Z, r1
    2416:	11 82       	std	Z+1, r1	; 0x01
    2418:	61 c5       	rjmp	.+2754   	; 0x2edc <ProcessInput+0xef2>

                //Look back if not on level 0
                if (currDepth) {
                    PopulateObject(route[currDepth-1], &actObj1);
                    SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
                } else elements-=1;
    241a:	77 24       	eor	r7, r7
    241c:	7a 94       	dec	r7
    241e:	76 0c       	add	r7, r6
    2420:	5d c5       	rjmp	.+2746   	; 0x2edc <ProcessInput+0xef2>

            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
    2422:	ee 2e       	mov	r14, r30
    2424:	f1 2c       	mov	r15, r1
    2426:	f7 01       	movw	r30, r14
    2428:	ee 0f       	add	r30, r30
    242a:	ff 1f       	adc	r31, r31
    242c:	e1 55       	subi	r30, 0x51	; 81
    242e:	f6 4c       	sbci	r31, 0xC6	; 198
    2430:	40 e0       	ldi	r20, 0x00	; 0
    2432:	50 e0       	ldi	r21, 0x00	; 0
    2434:	d8 01       	movw	r26, r16
    2436:	11 96       	adiw	r26, 0x01	; 1
    2438:	6c 91       	ld	r22, X
    243a:	80 81       	ld	r24, Z
    243c:	91 81       	ldd	r25, Z+1	; 0x01
    243e:	c3 d9       	rcall	.-3194   	; 0x17c6 <FindChild>
    2440:	f7 01       	movw	r30, r14
    2442:	ee 0f       	add	r30, r30
    2444:	ff 1f       	adc	r31, r31
    2446:	ef 54       	subi	r30, 0x4F	; 79
    2448:	f6 4c       	sbci	r31, 0xC6	; 198
    244a:	80 83       	st	Z, r24
    244c:	91 83       	std	Z+1, r25	; 0x01
                if (route[currDepth+1]) {
    244e:	90 91 26 38 	lds	r25, 0x3826	; 0x803826 <currDepth>
    2452:	29 2f       	mov	r18, r25
    2454:	30 e0       	ldi	r19, 0x00	; 0
    2456:	f9 01       	movw	r30, r18
    2458:	ee 0f       	add	r30, r30
    245a:	ff 1f       	adc	r31, r31
    245c:	ef 54       	subi	r30, 0x4F	; 79
    245e:	f6 4c       	sbci	r31, 0xC6	; 198
    2460:	40 81       	ld	r20, Z
    2462:	51 81       	ldd	r21, Z+1	; 0x01
    2464:	41 15       	cp	r20, r1
    2466:	51 05       	cpc	r21, r1
    2468:	21 f0       	breq	.+8      	; 0x2472 <ProcessInput+0x488>
                    PopulateObject(route[currDepth+1], &actObj1);
    246a:	60 eb       	ldi	r22, 0xB0	; 176
    246c:	78 e3       	ldi	r23, 0x38	; 56
    246e:	ca 01       	movw	r24, r20
    2470:	1e c0       	rjmp	.+60     	; 0x24ae <ProcessInput+0x4c4>
//TODO: CHECKSTATE -> A_CANTLOOK item
                    SetResponse(elements++, actObj1.addrStr[DESC], actObj1.lenStr[DESC],GAME);   
                } else if (currDepth) {
    2472:	99 23       	and	r25, r25
    2474:	09 f4       	brne	.+2      	; 0x2478 <ProcessInput+0x48e>
                    if (CheckLetter(route[currDepth-1], data[1])) {
    2476:	6e c5       	rjmp	.+2780   	; 0x2f54 <ProcessInput+0xf6a>
    2478:	22 0f       	add	r18, r18
    247a:	33 1f       	adc	r19, r19
    247c:	f9 01       	movw	r30, r18
    247e:	e3 55       	subi	r30, 0x53	; 83
    2480:	f6 4c       	sbci	r31, 0xC6	; 198
    2482:	d8 01       	movw	r26, r16
    2484:	11 96       	adiw	r26, 0x01	; 1
    2486:	6c 91       	ld	r22, X
    2488:	80 81       	ld	r24, Z
    248a:	91 81       	ldd	r25, Z+1	; 0x01
    248c:	48 d9       	rcall	.-3440   	; 0x171e <CheckLetter>
    248e:	81 11       	cpse	r24, r1
    2490:	03 c0       	rjmp	.+6      	; 0x2498 <ProcessInput+0x4ae>
}

//The game logic!
uint8_t ProcessInput(uint8_t *data){
    static object_model_t actObj1, actObj2;
    uint8_t elements = 1;
    2492:	77 24       	eor	r7, r7
    2494:	73 94       	inc	r7
                    PopulateObject(route[currDepth+1], &actObj1);
//TODO: CHECKSTATE -> A_CANTLOOK item
                    SetResponse(elements++, actObj1.addrStr[DESC], actObj1.lenStr[DESC],GAME);   
                } else if (currDepth) {
                    if (CheckLetter(route[currDepth-1], data[1])) {
                        PopulateObject(route[currDepth-1], &actObj1);
    2496:	22 c5       	rjmp	.+2628   	; 0x2edc <ProcessInput+0xef2>
    2498:	e0 91 26 38 	lds	r30, 0x3826	; 0x803826 <currDepth>
    249c:	f0 e0       	ldi	r31, 0x00	; 0
    249e:	ee 0f       	add	r30, r30
    24a0:	ff 1f       	adc	r31, r31
    24a2:	e3 55       	subi	r30, 0x53	; 83
    24a4:	f6 4c       	sbci	r31, 0xC6	; 198
    24a6:	60 eb       	ldi	r22, 0xB0	; 176
    24a8:	78 e3       	ldi	r23, 0x38	; 56
    24aa:	80 81       	ld	r24, Z
    24ac:	91 81       	ldd	r25, Z+1	; 0x01
    24ae:	c0 d8       	rcall	.-3712   	; 0x1630 <PopulateObject>
                        SetResponse(elements++, actObj1.addrStr[DESC], actObj1.lenStr[DESC],GAME);
    24b0:	80 91 cc 38 	lds	r24, 0x38CC	; 0x8038cc <actObj1.3989+0x1c>
    24b4:	90 91 cd 38 	lds	r25, 0x38CD	; 0x8038cd <actObj1.3989+0x1d>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    24b8:	20 91 be 38 	lds	r18, 0x38BE	; 0x8038be <actObj1.3989+0xe>
    24bc:	30 91 bf 38 	lds	r19, 0x38BF	; 0x8038bf <actObj1.3989+0xf>
    24c0:	d6 c3       	rjmp	.+1964   	; 0x2c6e <ProcessInput+0xc84>
                    SetResponse(elements++, A_DONTSEE, L_DONTSEE, TEASER);
                }
            }
        
        //Pick up an object
        } else if (data[0] == 'p') {
    24c2:	80 37       	cpi	r24, 0x70	; 112
    24c4:	09 f0       	breq	.+2      	; 0x24c8 <ProcessInput+0x4de>
    24c6:	96 c0       	rjmp	.+300    	; 0x25f4 <ProcessInput+0x60a>
            if (inventory[0]&&inventory[1]) {
    24c8:	80 91 31 38 	lds	r24, 0x3831	; 0x803831 <inventory>
    24cc:	90 91 32 38 	lds	r25, 0x3832	; 0x803832 <inventory+0x1>
    24d0:	89 2b       	or	r24, r25
    24d2:	79 f0       	breq	.+30     	; 0x24f2 <ProcessInput+0x508>
    24d4:	80 91 33 38 	lds	r24, 0x3833	; 0x803833 <inventory+0x2>
    24d8:	90 91 34 38 	lds	r25, 0x3834	; 0x803834 <inventory+0x3>
    24dc:	89 2b       	or	r24, r25
    24de:	49 f0       	breq	.+18     	; 0x24f2 <ProcessInput+0x508>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    24e0:	85 e4       	ldi	r24, 0x45	; 69
    24e2:	98 e7       	ldi	r25, 0x78	; 120
    24e4:	80 93 f1 38 	sts	0x38F1, r24	; 0x8038f1 <reactStr+0x2>
    24e8:	90 93 f2 38 	sts	0x38F2, r25	; 0x8038f2 <reactStr+0x3>
    reactStr[1][number]=length;
    24ec:	89 e5       	ldi	r24, 0x59	; 89
    24ee:	90 e0       	ldi	r25, 0x00	; 0
    24f0:	2a ce       	rjmp	.-940    	; 0x2146 <ProcessInput+0x15c>
        
        //Pick up an object
        } else if (data[0] == 'p') {
            if (inventory[0]&&inventory[1]) {
                SetResponse(elements++, A_CARRYTWO, L_CARRYTWO, TEASER);
            } else if (inputLen != 2) {
    24f2:	b2 e0       	ldi	r27, 0x02	; 2
    24f4:	fb 12       	cpse	r15, r27
    24f6:	a8 cd       	rjmp	.-1200   	; 0x2048 <ProcessInput+0x5e>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
    24f8:	e0 90 26 38 	lds	r14, 0x3826	; 0x803826 <currDepth>
    24fc:	f1 2c       	mov	r15, r1
    24fe:	f7 01       	movw	r30, r14
    2500:	ee 0f       	add	r30, r30
    2502:	ff 1f       	adc	r31, r31
    2504:	e1 55       	subi	r30, 0x51	; 81
    2506:	f6 4c       	sbci	r31, 0xC6	; 198
    2508:	40 e0       	ldi	r20, 0x00	; 0
    250a:	50 e0       	ldi	r21, 0x00	; 0
    250c:	d8 01       	movw	r26, r16
    250e:	11 96       	adiw	r26, 0x01	; 1
    2510:	6c 91       	ld	r22, X
    2512:	80 81       	ld	r24, Z
    2514:	91 81       	ldd	r25, Z+1	; 0x01
    2516:	57 d9       	rcall	.-3410   	; 0x17c6 <FindChild>
    2518:	f7 01       	movw	r30, r14
    251a:	ee 0f       	add	r30, r30
    251c:	ff 1f       	adc	r31, r31
    251e:	ef 54       	subi	r30, 0x4F	; 79
    2520:	f6 4c       	sbci	r31, 0xC6	; 198
    2522:	80 83       	st	Z, r24
    2524:	91 83       	std	Z+1, r25	; 0x01
                if (route[currDepth+1]) {
    2526:	20 91 26 38 	lds	r18, 0x3826	; 0x803826 <currDepth>
    252a:	30 e0       	ldi	r19, 0x00	; 0
    252c:	2f 5f       	subi	r18, 0xFF	; 255
    252e:	3f 4f       	sbci	r19, 0xFF	; 255
    2530:	22 0f       	add	r18, r18
    2532:	33 1f       	adc	r19, r19
    2534:	f9 01       	movw	r30, r18
    2536:	e1 55       	subi	r30, 0x51	; 81
    2538:	f6 4c       	sbci	r31, 0xC6	; 198
    253a:	80 81       	ld	r24, Z
    253c:	91 81       	ldd	r25, Z+1	; 0x01
    253e:	00 97       	sbiw	r24, 0x00	; 0
    2540:	09 f4       	brne	.+2      	; 0x2544 <ProcessInput+0x55a>
    2542:	ab c3       	rjmp	.+1878   	; 0x2c9a <ProcessInput+0xcb0>
                    if ((route[currDepth+1] == inventory[0])||(route[currDepth+1] == inventory[1])) {
    2544:	40 91 31 38 	lds	r20, 0x3831	; 0x803831 <inventory>
    2548:	50 91 32 38 	lds	r21, 0x3832	; 0x803832 <inventory+0x1>
    254c:	84 17       	cp	r24, r20
    254e:	95 07       	cpc	r25, r21
    2550:	39 f0       	breq	.+14     	; 0x2560 <ProcessInput+0x576>
    2552:	40 91 33 38 	lds	r20, 0x3833	; 0x803833 <inventory+0x2>
    2556:	50 91 34 38 	lds	r21, 0x3834	; 0x803834 <inventory+0x3>
    255a:	84 17       	cp	r24, r20
    255c:	95 07       	cpc	r25, r21
    255e:	c1 f4       	brne	.+48     	; 0x2590 <ProcessInput+0x5a6>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2560:	80 e2       	ldi	r24, 0x20	; 32
    2562:	98 e7       	ldi	r25, 0x78	; 120
    2564:	80 93 f1 38 	sts	0x38F1, r24	; 0x8038f1 <reactStr+0x2>
    2568:	90 93 f2 38 	sts	0x38F2, r25	; 0x8038f2 <reactStr+0x3>
    reactStr[1][number]=length;
    256c:	85 e2       	ldi	r24, 0x25	; 37
    256e:	90 e0       	ldi	r25, 0x00	; 0
    2570:	80 93 31 39 	sts	0x3931, r24	; 0x803931 <reactStr+0x42>
    2574:	90 93 32 39 	sts	0x3932, r25	; 0x803932 <reactStr+0x43>
    reactStr[2][number]=type;
    2578:	81 e0       	ldi	r24, 0x01	; 1
    257a:	90 e0       	ldi	r25, 0x00	; 0
    257c:	80 93 71 39 	sts	0x3971, r24	; 0x803971 <reactStr+0x82>
    2580:	90 93 72 39 	sts	0x3972, r25	; 0x803972 <reactStr+0x83>
            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
                if (route[currDepth+1]) {
                    if ((route[currDepth+1] == inventory[0])||(route[currDepth+1] == inventory[1])) {
                        SetResponse(elements++, A_ALREADYCARRYING, L_ALREADYCARRYING, TEASER);
                        route[currDepth+1] = 0;
    2584:	f9 01       	movw	r30, r18
    2586:	e1 55       	subi	r30, 0x51	; 81
    2588:	f6 4c       	sbci	r31, 0xC6	; 198
    258a:	10 82       	st	Z, r1
    258c:	11 82       	std	Z+1, r1	; 0x01
                    } else {
                        //Put item in the inventory if possible
                        PopulateObject(route[currDepth+1], &actObj1);  
    258e:	e5 cd       	rjmp	.-1078   	; 0x215a <ProcessInput+0x170>
    2590:	60 eb       	ldi	r22, 0xB0	; 176
    2592:	78 e3       	ldi	r23, 0x38	; 56
    2594:	4d d8       	rcall	.-3942   	; 0x1630 <PopulateObject>
                        if (CheckState(actObj1.byteField[ACTION_ACL])) {
    2596:	80 91 b7 38 	lds	r24, 0x38B7	; 0x8038b7 <actObj1.3989+0x7>
    259a:	0e 94 c3 08 	call	0x1186	; 0x1186 <CheckState>
    259e:	88 23       	and	r24, r24
    25a0:	09 f4       	brne	.+2      	; 0x25a4 <ProcessInput+0x5ba>
    25a2:	5d c3       	rjmp	.+1722   	; 0x2c5e <ProcessInput+0xc74>
                            if (actObj1.byteField[ITEM_NR]) {
    25a4:	80 91 bb 38 	lds	r24, 0x38BB	; 0x8038bb <actObj1.3989+0xb>
    25a8:	88 23       	and	r24, r24
    25aa:	09 f4       	brne	.+2      	; 0x25ae <ProcessInput+0x5c4>
    25ac:	4d cd       	rjmp	.-1382   	; 0x2048 <ProcessInput+0x5e>
                                if (inventory[0]) {
    25ae:	80 91 31 38 	lds	r24, 0x3831	; 0x803831 <inventory>
    25b2:	90 91 32 38 	lds	r25, 0x3832	; 0x803832 <inventory+0x1>
    25b6:	e0 91 26 38 	lds	r30, 0x3826	; 0x803826 <currDepth>
                                    inventory[1] = route[currDepth+1];
    25ba:	f0 e0       	ldi	r31, 0x00	; 0
    25bc:	ee 0f       	add	r30, r30
    25be:	ff 1f       	adc	r31, r31
    25c0:	ef 54       	subi	r30, 0x4F	; 79
    25c2:	f6 4c       	sbci	r31, 0xC6	; 198
                    } else {
                        //Put item in the inventory if possible
                        PopulateObject(route[currDepth+1], &actObj1);  
                        if (CheckState(actObj1.byteField[ACTION_ACL])) {
                            if (actObj1.byteField[ITEM_NR]) {
                                if (inventory[0]) {
    25c4:	89 2b       	or	r24, r25
    25c6:	39 f0       	breq	.+14     	; 0x25d6 <ProcessInput+0x5ec>
                                    inventory[1] = route[currDepth+1];
    25c8:	80 81       	ld	r24, Z
    25ca:	91 81       	ldd	r25, Z+1	; 0x01
    25cc:	80 93 33 38 	sts	0x3833, r24	; 0x803833 <inventory+0x2>
    25d0:	90 93 34 38 	sts	0x3834, r25	; 0x803834 <inventory+0x3>
    25d4:	06 c0       	rjmp	.+12     	; 0x25e2 <ProcessInput+0x5f8>
                                } else {
                                    inventory[0] = route[currDepth+1];
    25d6:	80 81       	ld	r24, Z
    25d8:	91 81       	ldd	r25, Z+1	; 0x01
    25da:	80 93 31 38 	sts	0x3831, r24	; 0x803831 <inventory>
    25de:	90 93 32 38 	sts	0x3832, r25	; 0x803832 <inventory+0x1>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    25e2:	8a e0       	ldi	r24, 0x0A	; 10
    25e4:	98 e7       	ldi	r25, 0x78	; 120
    25e6:	80 93 f1 38 	sts	0x38F1, r24	; 0x8038f1 <reactStr+0x2>
    25ea:	90 93 f2 38 	sts	0x38F2, r25	; 0x8038f2 <reactStr+0x3>
    reactStr[1][number]=length;
    25ee:	86 e1       	ldi	r24, 0x16	; 22
    25f0:	90 e0       	ldi	r25, 0x00	; 0
    25f2:	53 c2       	rjmp	.+1190   	; 0x2a9a <ProcessInput+0xab0>
                } else SetResponse(elements++, A_NOSUCHOBJECT, L_NOSUCHOBJECT, TEASER);
            }
        } else

        //Drop item if in inventory
        if (data[0] == 'd') {
    25f4:	84 36       	cpi	r24, 0x64	; 100
    25f6:	d9 f4       	brne	.+54     	; 0x262e <ProcessInput+0x644>
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
    25f8:	80 91 31 38 	lds	r24, 0x3831	; 0x803831 <inventory>
    25fc:	90 91 32 38 	lds	r25, 0x3832	; 0x803832 <inventory+0x1>
    2600:	00 97       	sbiw	r24, 0x00	; 0
    2602:	09 f0       	breq	.+2      	; 0x2606 <ProcessInput+0x61c>
    2604:	b0 c4       	rjmp	.+2400   	; 0x2f66 <ProcessInput+0xf7c>
    2606:	80 91 33 38 	lds	r24, 0x3833	; 0x803833 <inventory+0x2>
    260a:	90 91 34 38 	lds	r25, 0x3834	; 0x803834 <inventory+0x3>
    260e:	89 2b       	or	r24, r25
    2610:	49 f4       	brne	.+18     	; 0x2624 <ProcessInput+0x63a>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2612:	84 ee       	ldi	r24, 0xE4	; 228
    2614:	97 e7       	ldi	r25, 0x77	; 119
    2616:	80 93 f1 38 	sts	0x38F1, r24	; 0x8038f1 <reactStr+0x2>
    261a:	90 93 f2 38 	sts	0x38F2, r25	; 0x8038f2 <reactStr+0x3>
    reactStr[1][number]=length;
    261e:	86 e2       	ldi	r24, 0x26	; 38
    2620:	90 e0       	ldi	r25, 0x00	; 0
    2622:	91 cd       	rjmp	.-1246   	; 0x2146 <ProcessInput+0x15c>

        //Drop item if in inventory
        if (data[0] == 'd') {
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
    2624:	b2 e0       	ldi	r27, 0x02	; 2
    2626:	fb 16       	cp	r15, r27
    2628:	09 f4       	brne	.+2      	; 0x262c <ProcessInput+0x642>
    262a:	02 c5       	rjmp	.+2564   	; 0x3030 <ProcessInput+0x1046>
    262c:	0d cd       	rjmp	.-1510   	; 0x2048 <ProcessInput+0x5e>
                    if (x) SetResponse(elements++, A_NOTCARRYING, L_NOTCARRYING, TEASER);
                }
            }

        //Inventory list
        } else if (data[0] == 'i') {
    262e:	89 36       	cpi	r24, 0x69	; 105
    2630:	09 f0       	breq	.+2      	; 0x2634 <ProcessInput+0x64a>
    2632:	7b c0       	rjmp	.+246    	; 0x272a <ProcessInput+0x740>
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
    2634:	80 91 31 38 	lds	r24, 0x3831	; 0x803831 <inventory>
    2638:	90 91 32 38 	lds	r25, 0x3832	; 0x803832 <inventory+0x1>
    263c:	89 2b       	or	r24, r25
    263e:	31 f4       	brne	.+12     	; 0x264c <ProcessInput+0x662>
    2640:	80 91 33 38 	lds	r24, 0x3833	; 0x803833 <inventory+0x2>
    2644:	90 91 34 38 	lds	r25, 0x3834	; 0x803834 <inventory+0x3>
    2648:	89 2b       	or	r24, r25
    264a:	19 f3       	breq	.-58     	; 0x2612 <ProcessInput+0x628>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    264c:	8a e0       	ldi	r24, 0x0A	; 10
    264e:	98 e7       	ldi	r25, 0x78	; 120
    2650:	80 93 f1 38 	sts	0x38F1, r24	; 0x8038f1 <reactStr+0x2>
    2654:	90 93 f2 38 	sts	0x38F2, r25	; 0x8038f2 <reactStr+0x3>
    reactStr[1][number]=length;
    2658:	86 e1       	ldi	r24, 0x16	; 22
    265a:	90 e0       	ldi	r25, 0x00	; 0
    265c:	80 93 31 39 	sts	0x3931, r24	; 0x803931 <reactStr+0x42>
    2660:	90 93 32 39 	sts	0x3932, r25	; 0x803932 <reactStr+0x43>
    reactStr[2][number]=type;
    2664:	81 e0       	ldi	r24, 0x01	; 1
    2666:	90 e0       	ldi	r25, 0x00	; 0
    2668:	80 93 71 39 	sts	0x3971, r24	; 0x803971 <reactStr+0x82>
    266c:	90 93 72 39 	sts	0x3972, r25	; 0x803972 <reactStr+0x83>
    2670:	21 e3       	ldi	r18, 0x31	; 49
    2672:	e2 2e       	mov	r14, r18
    2674:	28 e3       	ldi	r18, 0x38	; 56
    2676:	f2 2e       	mov	r15, r18
    2678:	35 e3       	ldi	r19, 0x35	; 53
    267a:	63 2e       	mov	r6, r19
    267c:	38 e3       	ldi	r19, 0x38	; 56
    267e:	73 2e       	mov	r7, r19
        //Inventory list
        } else if (data[0] == 'i') {
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else {
                SetResponse(elements++, A_NOWCARRING, L_NOWCARRING, TEASER);
    2680:	42 e0       	ldi	r20, 0x02	; 2
    2682:	54 2e       	mov	r5, r20
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2684:	59 e5       	ldi	r21, 0x59	; 89
    2686:	c5 2e       	mov	r12, r21
    2688:	5a e7       	ldi	r21, 0x7A	; 122
    268a:	d5 2e       	mov	r13, r21
    reactStr[1][number]=length;
    268c:	62 e0       	ldi	r22, 0x02	; 2
    268e:	a6 2e       	mov	r10, r22
    2690:	b1 2c       	mov	r11, r1
    reactStr[2][number]=type;
    2692:	88 24       	eor	r8, r8
    2694:	83 94       	inc	r8
    2696:	91 2c       	mov	r9, r1
            } else {
                SetResponse(elements++, A_NOWCARRING, L_NOWCARRING, TEASER);
                //SetResponse(elements++, A_SPACE, L_SPACE, TEASER);
                
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
    2698:	d7 01       	movw	r26, r14
    269a:	8d 91       	ld	r24, X+
    269c:	9d 91       	ld	r25, X+
    269e:	7d 01       	movw	r14, r26
    26a0:	00 97       	sbiw	r24, 0x00	; 0
    26a2:	d9 f1       	breq	.+118    	; 0x271a <ProcessInput+0x730>
                        PopulateObject(inventory[x], &actObj1);
    26a4:	60 eb       	ldi	r22, 0xB0	; 176
    26a6:	78 e3       	ldi	r23, 0x38	; 56
    26a8:	0e 94 18 0b 	call	0x1630	; 0x1630 <PopulateObject>
                        SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    26ac:	80 91 ca 38 	lds	r24, 0x38CA	; 0x8038ca <actObj1.3989+0x1a>
    26b0:	90 91 cb 38 	lds	r25, 0x38CB	; 0x8038cb <actObj1.3989+0x1b>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    26b4:	e5 2d       	mov	r30, r5
    26b6:	f0 e0       	ldi	r31, 0x00	; 0
    26b8:	df 01       	movw	r26, r30
    26ba:	aa 0f       	add	r26, r26
    26bc:	bb 1f       	adc	r27, r27
    26be:	a1 51       	subi	r26, 0x11	; 17
    26c0:	b7 4c       	sbci	r27, 0xC7	; 199
    26c2:	20 91 bc 38 	lds	r18, 0x38BC	; 0x8038bc <actObj1.3989+0xc>
    26c6:	30 91 bd 38 	lds	r19, 0x38BD	; 0x8038bd <actObj1.3989+0xd>
    26ca:	2d 93       	st	X+, r18
    26cc:	3c 93       	st	X, r19
    reactStr[1][number]=length;
    26ce:	df 01       	movw	r26, r30
    26d0:	aa 0f       	add	r26, r26
    26d2:	bb 1f       	adc	r27, r27
    26d4:	a1 5d       	subi	r26, 0xD1	; 209
    26d6:	b6 4c       	sbci	r27, 0xC6	; 198
    26d8:	8d 93       	st	X+, r24
    26da:	9c 93       	st	X, r25
    reactStr[2][number]=type;
    26dc:	ee 0f       	add	r30, r30
    26de:	ff 1f       	adc	r31, r31
    26e0:	e1 59       	subi	r30, 0x91	; 145
    26e2:	f6 4c       	sbci	r31, 0xC6	; 198
    26e4:	10 82       	st	Z, r1
    26e6:	11 82       	std	Z+1, r1	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    26e8:	e1 e0       	ldi	r30, 0x01	; 1
    26ea:	e5 0d       	add	r30, r5
    26ec:	f0 e0       	ldi	r31, 0x00	; 0
    26ee:	53 94       	inc	r5
    26f0:	53 94       	inc	r5
    26f2:	df 01       	movw	r26, r30
    26f4:	aa 0f       	add	r26, r26
    26f6:	bb 1f       	adc	r27, r27
    26f8:	a1 51       	subi	r26, 0x11	; 17
    26fa:	b7 4c       	sbci	r27, 0xC7	; 199
    26fc:	cd 92       	st	X+, r12
    26fe:	dc 92       	st	X, r13
    reactStr[1][number]=length;
    2700:	df 01       	movw	r26, r30
    2702:	aa 0f       	add	r26, r26
    2704:	bb 1f       	adc	r27, r27
    2706:	a1 5d       	subi	r26, 0xD1	; 209
    2708:	b6 4c       	sbci	r27, 0xC6	; 198
    270a:	ad 92       	st	X+, r10
    270c:	bc 92       	st	X, r11
    reactStr[2][number]=type;
    270e:	ee 0f       	add	r30, r30
    2710:	ff 1f       	adc	r31, r31
    2712:	e1 59       	subi	r30, 0x91	; 145
    2714:	f6 4c       	sbci	r31, 0xC6	; 198
    2716:	80 82       	st	Z, r8
    2718:	91 82       	std	Z+1, r9	; 0x01
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else {
                SetResponse(elements++, A_NOWCARRING, L_NOWCARRING, TEASER);
                //SetResponse(elements++, A_SPACE, L_SPACE, TEASER);
                
                for (uint8_t x=0; x<2; ++x) {
    271a:	6e 14       	cp	r6, r14
    271c:	7f 04       	cpc	r7, r15
    271e:	09 f0       	breq	.+2      	; 0x2722 <ProcessInput+0x738>
    2720:	bb cf       	rjmp	.-138    	; 0x2698 <ProcessInput+0x6ae>
                        SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                        SetResponse(elements++, A_COMMA, L_COMMA, TEASER);
                        //SetResponse(elements++, A_SPACE, L_SPACE, TEASER);
                    }
                }
                elements -= 1;
    2722:	77 24       	eor	r7, r7
    2724:	7a 94       	dec	r7
    2726:	75 0c       	add	r7, r5
    2728:	d9 c3       	rjmp	.+1970   	; 0x2edc <ProcessInput+0xef2>
            }            
        
        //Talk, use, give, read
        } else if ((data[0] == 't')||(data[0] == 'u')||(data[0] == 'g')||(data[0] == 'r')) {
    272a:	9c e8       	ldi	r25, 0x8C	; 140
    272c:	98 0f       	add	r25, r24
    272e:	92 30       	cpi	r25, 0x02	; 2
    2730:	28 f0       	brcs	.+10     	; 0x273c <ProcessInput+0x752>
    2732:	87 36       	cpi	r24, 0x67	; 103
    2734:	19 f0       	breq	.+6      	; 0x273c <ProcessInput+0x752>
    2736:	82 37       	cpi	r24, 0x72	; 114
    2738:	09 f0       	breq	.+2      	; 0x273c <ProcessInput+0x752>
    273a:	b8 c2       	rjmp	.+1392   	; 0x2cac <ProcessInput+0xcc2>
            if ((inputLen<2)||(inputLen>3)) {
    273c:	8e ef       	ldi	r24, 0xFE	; 254
    273e:	8f 0d       	add	r24, r15
    2740:	82 30       	cpi	r24, 0x02	; 2
    2742:	08 f0       	brcs	.+2      	; 0x2746 <ProcessInput+0x75c>
    2744:	81 cc       	rjmp	.-1790   	; 0x2048 <ProcessInput+0x5e>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);                
            
            //Check for visible person or object first
            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[inputLen-1], 0);
    2746:	e0 91 26 38 	lds	r30, 0x3826	; 0x803826 <currDepth>
    274a:	ce 2e       	mov	r12, r30
    274c:	d1 2c       	mov	r13, r1
    274e:	d8 01       	movw	r26, r16
    2750:	af 0d       	add	r26, r15
    2752:	b1 1d       	adc	r27, r1
    2754:	11 97       	sbiw	r26, 0x01	; 1
    2756:	f6 01       	movw	r30, r12
    2758:	ee 0f       	add	r30, r30
    275a:	ff 1f       	adc	r31, r31
    275c:	e1 55       	subi	r30, 0x51	; 81
    275e:	f6 4c       	sbci	r31, 0xC6	; 198
    2760:	40 e0       	ldi	r20, 0x00	; 0
    2762:	50 e0       	ldi	r21, 0x00	; 0
    2764:	6c 91       	ld	r22, X
    2766:	80 81       	ld	r24, Z
    2768:	91 81       	ldd	r25, Z+1	; 0x01
    276a:	2d d8       	rcall	.-4006   	; 0x17c6 <FindChild>
    276c:	f6 01       	movw	r30, r12
    276e:	ee 0f       	add	r30, r30
    2770:	ff 1f       	adc	r31, r31
    2772:	ef 54       	subi	r30, 0x4F	; 79
    2774:	f6 4c       	sbci	r31, 0xC6	; 198
    2776:	80 83       	st	Z, r24
    2778:	91 83       	std	Z+1, r25	; 0x01
                if (route[currDepth+1]) {
    277a:	e0 91 26 38 	lds	r30, 0x3826	; 0x803826 <currDepth>
    277e:	f0 e0       	ldi	r31, 0x00	; 0
    2780:	ee 0f       	add	r30, r30
    2782:	ff 1f       	adc	r31, r31
    2784:	ef 54       	subi	r30, 0x4F	; 79
    2786:	f6 4c       	sbci	r31, 0xC6	; 198
    2788:	80 81       	ld	r24, Z
    278a:	91 81       	ldd	r25, Z+1	; 0x01
    278c:	00 97       	sbiw	r24, 0x00	; 0
    278e:	09 f4       	brne	.+2      	; 0x2792 <ProcessInput+0x7a8>
    2790:	7b c2       	rjmp	.+1270   	; 0x2c88 <ProcessInput+0xc9e>
                    
                    //Give item to person / use item on object 
                    if ((inputLen == 3)&&((data[0] == 'u')||(data[0] == 'g'))) {
    2792:	b3 e0       	ldi	r27, 0x03	; 3
    2794:	fb 12       	cpse	r15, r27
    2796:	6d c1       	rjmp	.+730    	; 0x2a72 <ProcessInput+0xa88>
    2798:	f8 01       	movw	r30, r16
    279a:	20 81       	ld	r18, Z
    279c:	25 37       	cpi	r18, 0x75	; 117
    279e:	19 f0       	breq	.+6      	; 0x27a6 <ProcessInput+0x7bc>
    27a0:	27 36       	cpi	r18, 0x67	; 103
    27a2:	09 f0       	breq	.+2      	; 0x27a6 <ProcessInput+0x7bc>
    27a4:	66 c1       	rjmp	.+716    	; 0x2a72 <ProcessInput+0xa88>
    27a6:	61 2c       	mov	r6, r1
    27a8:	77 24       	eor	r7, r7
    27aa:	73 94       	inc	r7
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    27ac:	54 e6       	ldi	r21, 0x64	; 100
    27ae:	c5 2e       	mov	r12, r21
    27b0:	59 e7       	ldi	r21, 0x79	; 121
    27b2:	d5 2e       	mov	r13, r21
    reactStr[1][number]=length;
    27b4:	61 e2       	ldi	r22, 0x21	; 33
    27b6:	a6 2e       	mov	r10, r22
    27b8:	b1 2c       	mov	r11, r1
    reactStr[2][number]=type;
    27ba:	88 24       	eor	r8, r8
    27bc:	83 94       	inc	r8
    27be:	91 2c       	mov	r9, r1
                if (route[currDepth+1]) {
                    
                    //Give item to person / use item on object 
                    if ((inputLen == 3)&&((data[0] == 'u')||(data[0] == 'g'))) {
                        for (uint8_t x=0; x<2; x++) {
                            if (inventory[x]) { 
    27c0:	e6 2c       	mov	r14, r6
    27c2:	f1 2c       	mov	r15, r1
    27c4:	c7 01       	movw	r24, r14
    27c6:	88 0f       	add	r24, r24
    27c8:	99 1f       	adc	r25, r25
    27ca:	9c 01       	movw	r18, r24
    27cc:	2f 5c       	subi	r18, 0xCF	; 207
    27ce:	37 4c       	sbci	r19, 0xC7	; 199
    27d0:	79 01       	movw	r14, r18
    27d2:	d9 01       	movw	r26, r18
    27d4:	8d 91       	ld	r24, X+
    27d6:	9c 91       	ld	r25, X
    27d8:	00 97       	sbiw	r24, 0x00	; 0
    27da:	81 f0       	breq	.+32     	; 0x27fc <ProcessInput+0x812>
                                if (CheckLetter(inventory[x], data[1])) {
    27dc:	f8 01       	movw	r30, r16
    27de:	61 81       	ldd	r22, Z+1	; 0x01
    27e0:	0e 94 8f 0b 	call	0x171e	; 0x171e <CheckLetter>
    27e4:	88 23       	and	r24, r24
    27e6:	51 f0       	breq	.+20     	; 0x27fc <ProcessInput+0x812>
                                    PopulateObject(inventory[x], &actObj2);
    27e8:	65 e8       	ldi	r22, 0x85	; 133
    27ea:	78 e3       	ldi	r23, 0x38	; 56
    27ec:	d7 01       	movw	r26, r14
    27ee:	8d 91       	ld	r24, X+
    27f0:	9c 91       	ld	r25, X
    27f2:	0e 94 18 0b 	call	0x1630	; 0x1630 <PopulateObject>
                                    x = 2;
    27f6:	32 e0       	ldi	r19, 0x02	; 2
    27f8:	63 2e       	mov	r6, r19
    27fa:	1e c0       	rjmp	.+60     	; 0x2838 <ProcessInput+0x84e>
                                }
                            }
                            if (x == 1) { 
    27fc:	b1 e0       	ldi	r27, 0x01	; 1
    27fe:	6b 12       	cpse	r6, r27
    2800:	1a c0       	rjmp	.+52     	; 0x2836 <ProcessInput+0x84c>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2802:	e7 2d       	mov	r30, r7
    2804:	f0 e0       	ldi	r31, 0x00	; 0
    2806:	df 01       	movw	r26, r30
    2808:	aa 0f       	add	r26, r26
    280a:	bb 1f       	adc	r27, r27
    280c:	a1 51       	subi	r26, 0x11	; 17
    280e:	b7 4c       	sbci	r27, 0xC7	; 199
    2810:	cd 92       	st	X+, r12
    2812:	dc 92       	st	X, r13
    reactStr[1][number]=length;
    2814:	df 01       	movw	r26, r30
    2816:	aa 0f       	add	r26, r26
    2818:	bb 1f       	adc	r27, r27
    281a:	a1 5d       	subi	r26, 0xD1	; 209
    281c:	b6 4c       	sbci	r27, 0xC6	; 198
    281e:	ad 92       	st	X+, r10
    2820:	bc 92       	st	X, r11
    reactStr[2][number]=type;
    2822:	ee 0f       	add	r30, r30
    2824:	ff 1f       	adc	r31, r31
    2826:	e1 59       	subi	r30, 0x91	; 145
    2828:	f6 4c       	sbci	r31, 0xC6	; 198
    282a:	80 82       	st	Z, r8
    282c:	91 82       	std	Z+1, r9	; 0x01
                                    x = 2;
                                }
                            }
                            if (x == 1) { 
                                SetResponse(elements++, A_NOTCARRYING, L_NOTCARRYING, TEASER);
                                data[0] = 0;
    282e:	f8 01       	movw	r30, r16
    2830:	10 82       	st	Z, r1
                                    PopulateObject(inventory[x], &actObj2);
                                    x = 2;
                                }
                            }
                            if (x == 1) { 
                                SetResponse(elements++, A_NOTCARRYING, L_NOTCARRYING, TEASER);
    2832:	73 94       	inc	r7
    2834:	01 c0       	rjmp	.+2      	; 0x2838 <ProcessInput+0x84e>
    2836:	61 2c       	mov	r6, r1
                route[currDepth+1] = FindChild(route[currDepth], data[inputLen-1], 0);
                if (route[currDepth+1]) {
                    
                    //Give item to person / use item on object 
                    if ((inputLen == 3)&&((data[0] == 'u')||(data[0] == 'g'))) {
                        for (uint8_t x=0; x<2; x++) {
    2838:	63 94       	inc	r6
    283a:	f1 e0       	ldi	r31, 0x01	; 1
    283c:	6f 16       	cp	r6, r31
    283e:	09 f4       	brne	.+2      	; 0x2842 <ProcessInput+0x858>
    2840:	bf cf       	rjmp	.-130    	; 0x27c0 <ProcessInput+0x7d6>
                                data[0] = 0;
                            }
                        }

                        //Both the item and person/object are found, check if action is legit
                        if (data[0]){
    2842:	d8 01       	movw	r26, r16
    2844:	8c 91       	ld	r24, X
    2846:	88 23       	and	r24, r24
    2848:	09 f4       	brne	.+2      	; 0x284c <ProcessInput+0x862>
    284a:	48 c3       	rjmp	.+1680   	; 0x2edc <ProcessInput+0xef2>
                            PopulateObject(route[currDepth+1], &actObj1);
    284c:	e0 91 26 38 	lds	r30, 0x3826	; 0x803826 <currDepth>
    2850:	f0 e0       	ldi	r31, 0x00	; 0
    2852:	ee 0f       	add	r30, r30
    2854:	ff 1f       	adc	r31, r31
    2856:	ef 54       	subi	r30, 0x4F	; 79
    2858:	f6 4c       	sbci	r31, 0xC6	; 198
    285a:	60 eb       	ldi	r22, 0xB0	; 176
    285c:	78 e3       	ldi	r23, 0x38	; 56
    285e:	80 81       	ld	r24, Z
    2860:	91 81       	ldd	r25, Z+1	; 0x01
    2862:	0e 94 18 0b 	call	0x1630	; 0x1630 <PopulateObject>

                            //Special game
                            if (actObj1.lenStr[ACTION_STR1] == 1) {
    2866:	e0 90 ce 38 	lds	r14, 0x38CE	; 0x8038ce <actObj1.3989+0x1e>
    286a:	f0 90 cf 38 	lds	r15, 0x38CF	; 0x8038cf <actObj1.3989+0x1f>
    286e:	b1 e0       	ldi	r27, 0x01	; 1
    2870:	eb 16       	cp	r14, r27
    2872:	f1 04       	cpc	r15, r1
    2874:	09 f0       	breq	.+2      	; 0x2878 <ProcessInput+0x88e>
    2876:	9a c0       	rjmp	.+308    	; 0x29ac <ProcessInput+0x9c2>
                                ExtEERead(actObj1.addrStr[ACTION_STR1], 1, GAME, &data[2]);
    2878:	98 01       	movw	r18, r16
    287a:	2e 5f       	subi	r18, 0xFE	; 254
    287c:	3f 4f       	sbci	r19, 0xFF	; 255
    287e:	40 e0       	ldi	r20, 0x00	; 0
    2880:	61 e0       	ldi	r22, 0x01	; 1
    2882:	80 91 c0 38 	lds	r24, 0x38C0	; 0x8038c0 <actObj1.3989+0x10>
    2886:	90 91 c1 38 	lds	r25, 0x38C1	; 0x8038c1 <actObj1.3989+0x11>
    288a:	0e 94 0d 0a 	call	0x141a	; 0x141a <ExtEERead>
                                if (data[2] == '1') {
    288e:	f8 01       	movw	r30, r16
    2890:	42 81       	ldd	r20, Z+2	; 0x02
    2892:	21 e0       	ldi	r18, 0x01	; 1
    2894:	27 0d       	add	r18, r7
    2896:	87 2d       	mov	r24, r7
    2898:	90 e0       	ldi	r25, 0x00	; 0
    289a:	41 33       	cpi	r20, 0x31	; 49
    289c:	09 f0       	breq	.+2      	; 0x28a0 <ProcessInput+0x8b6>
    289e:	6b c0       	rjmp	.+214    	; 0x2976 <ProcessInput+0x98c>
                                    uint8_t item = actObj2.byteField[ITEM_NR];
    28a0:	30 91 90 38 	lds	r19, 0x3890	; 0x803890 <actObj2.3990+0xb>
                                    if ((item < 31)||(item > 34)) {
    28a4:	51 ee       	ldi	r21, 0xE1	; 225
    28a6:	53 0f       	add	r21, r19
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    28a8:	fc 01       	movw	r30, r24
    28aa:	ee 0f       	add	r30, r30
    28ac:	ff 1f       	adc	r31, r31
    28ae:	e1 51       	subi	r30, 0x11	; 17
    28b0:	f7 4c       	sbci	r31, 0xC7	; 199
                            //Special game
                            if (actObj1.lenStr[ACTION_STR1] == 1) {
                                ExtEERead(actObj1.addrStr[ACTION_STR1], 1, GAME, &data[2]);
                                if (data[2] == '1') {
                                    uint8_t item = actObj2.byteField[ITEM_NR];
                                    if ((item < 31)||(item > 34)) {
    28b2:	54 30       	cpi	r21, 0x04	; 4
    28b4:	60 f0       	brcs	.+24     	; 0x28ce <ProcessInput+0x8e4>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    28b6:	44 e0       	ldi	r20, 0x04	; 4
    28b8:	59 e7       	ldi	r21, 0x79	; 121
    28ba:	40 83       	st	Z, r20
    28bc:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    28be:	fc 01       	movw	r30, r24
    28c0:	ee 0f       	add	r30, r30
    28c2:	ff 1f       	adc	r31, r31
    28c4:	e1 5d       	subi	r30, 0xD1	; 209
    28c6:	f6 4c       	sbci	r31, 0xC6	; 198
    28c8:	4a e1       	ldi	r20, 0x1A	; 26
    28ca:	50 e0       	ldi	r21, 0x00	; 0
    28cc:	64 c0       	rjmp	.+200    	; 0x2996 <ProcessInput+0x9ac>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    28ce:	6e e8       	ldi	r22, 0x8E	; 142
    28d0:	75 e7       	ldi	r23, 0x75	; 117
    28d2:	60 83       	st	Z, r22
    28d4:	71 83       	std	Z+1, r23	; 0x01
    reactStr[1][number]=length;
    28d6:	fc 01       	movw	r30, r24
    28d8:	ee 0f       	add	r30, r30
    28da:	ff 1f       	adc	r31, r31
    28dc:	e1 5d       	subi	r30, 0xD1	; 209
    28de:	f6 4c       	sbci	r31, 0xC6	; 198
    28e0:	62 eb       	ldi	r22, 0xB2	; 178
    28e2:	70 e0       	ldi	r23, 0x00	; 0
    28e4:	60 83       	st	Z, r22
    28e6:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    28e8:	88 0f       	add	r24, r24
    28ea:	99 1f       	adc	r25, r25
    28ec:	fc 01       	movw	r30, r24
    28ee:	e1 59       	subi	r30, 0x91	; 145
    28f0:	f6 4c       	sbci	r31, 0xC6	; 198
    28f2:	e0 82       	st	Z, r14
    28f4:	f1 82       	std	Z+1, r15	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    28f6:	82 2f       	mov	r24, r18
    28f8:	90 e0       	ldi	r25, 0x00	; 0
    28fa:	fc 01       	movw	r30, r24
    28fc:	ee 0f       	add	r30, r30
    28fe:	ff 1f       	adc	r31, r31
    2900:	e1 51       	subi	r30, 0x11	; 17
    2902:	f7 4c       	sbci	r31, 0xC7	; 199
    2904:	6b e5       	ldi	r22, 0x5B	; 91
    2906:	7a e7       	ldi	r23, 0x7A	; 122
    2908:	60 83       	st	Z, r22
    290a:	71 83       	std	Z+1, r23	; 0x01
    reactStr[1][number]=length;
    290c:	fc 01       	movw	r30, r24
    290e:	ee 0f       	add	r30, r30
    2910:	ff 1f       	adc	r31, r31
    2912:	e1 5d       	subi	r30, 0xD1	; 209
    2914:	f6 4c       	sbci	r31, 0xC6	; 198
    2916:	62 e0       	ldi	r22, 0x02	; 2
    2918:	70 e0       	ldi	r23, 0x00	; 0
    291a:	60 83       	st	Z, r22
    291c:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    291e:	88 0f       	add	r24, r24
    2920:	99 1f       	adc	r25, r25
    2922:	fc 01       	movw	r30, r24
    2924:	e1 59       	subi	r30, 0x91	; 145
    2926:	f6 4c       	sbci	r31, 0xC6	; 198
    2928:	e0 82       	st	Z, r14
    292a:	f1 82       	std	Z+1, r15	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    292c:	82 e0       	ldi	r24, 0x02	; 2
    292e:	87 0d       	add	r24, r7
    2930:	90 e0       	ldi	r25, 0x00	; 0
    2932:	f3 e0       	ldi	r31, 0x03	; 3
    2934:	7f 0e       	add	r7, r31
    2936:	fc 01       	movw	r30, r24
    2938:	ee 0f       	add	r30, r30
    293a:	ff 1f       	adc	r31, r31
    293c:	e1 51       	subi	r30, 0x11	; 17
    293e:	f7 4c       	sbci	r31, 0xC7	; 199
    2940:	60 eb       	ldi	r22, 0xB0	; 176
    2942:	78 e7       	ldi	r23, 0x78	; 120
    2944:	60 83       	st	Z, r22
    2946:	71 83       	std	Z+1, r23	; 0x01
    reactStr[1][number]=length;
    2948:	fc 01       	movw	r30, r24
    294a:	ee 0f       	add	r30, r30
    294c:	ff 1f       	adc	r31, r31
    294e:	e1 5d       	subi	r30, 0xD1	; 209
    2950:	f6 4c       	sbci	r31, 0xC6	; 198
    2952:	62 e1       	ldi	r22, 0x12	; 18
    2954:	70 e0       	ldi	r23, 0x00	; 0
    2956:	60 83       	st	Z, r22
    2958:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    295a:	88 0f       	add	r24, r24
    295c:	99 1f       	adc	r25, r25
    295e:	fc 01       	movw	r30, r24
    2960:	e1 59       	subi	r30, 0x91	; 145
    2962:	f6 4c       	sbci	r31, 0xC6	; 198
    2964:	e0 82       	st	Z, r14
    2966:	f1 82       	std	Z+1, r15	; 0x01
                                        SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                                    } else {
                                        SetResponse(elements++, A_PRIEST, L_PRIEST, TEASER);
                                        SetResponse(elements++, A_LF, 2, TEASER);
                                        SetResponse(elements++, A_RESPONSE, L_RESPONSE, TEASER);
                                        specialInput[0] = '1';
    2968:	40 93 de 38 	sts	0x38DE, r20	; 0x8038de <specialInput>
                                        specialInput[1] = item;
    296c:	30 93 df 38 	sts	0x38DF, r19	; 0x8038df <specialInput+0x1>
                                        specialInput[2] = 0;
    2970:	10 92 e0 38 	sts	0x38E0, r1	; 0x8038e0 <specialInput+0x2>
    2974:	b3 c2       	rjmp	.+1382   	; 0x2edc <ProcessInput+0xef2>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2976:	fc 01       	movw	r30, r24
    2978:	ee 0f       	add	r30, r30
    297a:	ff 1f       	adc	r31, r31
    297c:	e1 51       	subi	r30, 0x11	; 17
    297e:	f7 4c       	sbci	r31, 0xC7	; 199
    2980:	40 e4       	ldi	r20, 0x40	; 64
    2982:	56 e7       	ldi	r21, 0x76	; 118
    2984:	40 83       	st	Z, r20
    2986:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    2988:	fc 01       	movw	r30, r24
    298a:	ee 0f       	add	r30, r30
    298c:	ff 1f       	adc	r31, r31
    298e:	e1 5d       	subi	r30, 0xD1	; 209
    2990:	f6 4c       	sbci	r31, 0xC6	; 198
    2992:	42 e4       	ldi	r20, 0x42	; 66
    2994:	50 e0       	ldi	r21, 0x00	; 0
    2996:	40 83       	st	Z, r20
    2998:	51 83       	std	Z+1, r21	; 0x01
    reactStr[2][number]=type;
    299a:	88 0f       	add	r24, r24
    299c:	99 1f       	adc	r25, r25
    299e:	fc 01       	movw	r30, r24
    29a0:	e1 59       	subi	r30, 0x91	; 145
    29a2:	f6 4c       	sbci	r31, 0xC6	; 198
    29a4:	e0 82       	st	Z, r14
    29a6:	f1 82       	std	Z+1, r15	; 0x01
                                        specialInput[2] = 0;
                                    }

                                //There should not be another special
                                } else {
                                    SetResponse(elements++, A_ERROR, L_ERROR, TEASER);
    29a8:	72 2e       	mov	r7, r18
    29aa:	98 c2       	rjmp	.+1328   	; 0x2edc <ProcessInput+0xef2>
                                }

                            //Normal "use ... on ..." or "give ... to ..." action
                            } else if (actObj1.byteField[ACTION_ITEM] == actObj2.byteField[ITEM_NR]) {
    29ac:	90 91 b9 38 	lds	r25, 0x38B9	; 0x8038b9 <actObj1.3989+0x9>
    29b0:	80 91 90 38 	lds	r24, 0x3890	; 0x803890 <actObj2.3990+0xb>
    29b4:	98 13       	cpse	r25, r24
    29b6:	24 c0       	rjmp	.+72     	; 0x2a00 <ProcessInput+0xa16>
                                UpdateState(actObj1.byteField[ACTION_STATE]);
    29b8:	80 91 ba 38 	lds	r24, 0x38BA	; 0x8038ba <actObj1.3989+0xa>
    29bc:	0e 94 bb 08 	call	0x1176	; 0x1176 <UpdateState>
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    29c0:	20 91 d6 38 	lds	r18, 0x38D6	; 0x8038d6 <actObj1.3989+0x26>
    29c4:	30 91 d7 38 	lds	r19, 0x38D7	; 0x8038d7 <actObj1.3989+0x27>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    29c8:	87 2d       	mov	r24, r7
    29ca:	90 e0       	ldi	r25, 0x00	; 0
    29cc:	fc 01       	movw	r30, r24
    29ce:	ee 0f       	add	r30, r30
    29d0:	ff 1f       	adc	r31, r31
    29d2:	e1 51       	subi	r30, 0x11	; 17
    29d4:	f7 4c       	sbci	r31, 0xC7	; 199
    29d6:	40 91 c8 38 	lds	r20, 0x38C8	; 0x8038c8 <actObj1.3989+0x18>
    29da:	50 91 c9 38 	lds	r21, 0x38C9	; 0x8038c9 <actObj1.3989+0x19>
    29de:	40 83       	st	Z, r20
    29e0:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    29e2:	fc 01       	movw	r30, r24
    29e4:	ee 0f       	add	r30, r30
    29e6:	ff 1f       	adc	r31, r31
    29e8:	e1 5d       	subi	r30, 0xD1	; 209
    29ea:	f6 4c       	sbci	r31, 0xC6	; 198
    29ec:	20 83       	st	Z, r18
    29ee:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    29f0:	88 0f       	add	r24, r24
    29f2:	99 1f       	adc	r25, r25
    29f4:	fc 01       	movw	r30, r24
    29f6:	e1 59       	subi	r30, 0x91	; 145
    29f8:	f6 4c       	sbci	r31, 0xC6	; 198
    29fa:	10 82       	st	Z, r1
    29fc:	11 82       	std	Z+1, r1	; 0x01
    29fe:	37 c0       	rjmp	.+110    	; 0x2a6e <ProcessInput+0xa84>
                            //Normal "use ... on ..." or "give ... to ..." action
                            } else if (actObj1.byteField[ACTION_ITEM] == actObj2.byteField[ITEM_NR]) {
                                UpdateState(actObj1.byteField[ACTION_STATE]);
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                            } else {
                                if (data[0] == 'u') {
    2a00:	d8 01       	movw	r26, r16
    2a02:	8c 91       	ld	r24, X
    2a04:	85 37       	cpi	r24, 0x75	; 117
    2a06:	99 f4       	brne	.+38     	; 0x2a2e <ProcessInput+0xa44>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2a08:	87 2d       	mov	r24, r7
    2a0a:	90 e0       	ldi	r25, 0x00	; 0
    2a0c:	fc 01       	movw	r30, r24
    2a0e:	ee 0f       	add	r30, r30
    2a10:	ff 1f       	adc	r31, r31
    2a12:	e1 51       	subi	r30, 0x11	; 17
    2a14:	f7 4c       	sbci	r31, 0xC7	; 199
    2a16:	24 e0       	ldi	r18, 0x04	; 4
    2a18:	39 e7       	ldi	r19, 0x79	; 121
    2a1a:	20 83       	st	Z, r18
    2a1c:	31 83       	std	Z+1, r19	; 0x01
    reactStr[1][number]=length;
    2a1e:	fc 01       	movw	r30, r24
    2a20:	ee 0f       	add	r30, r30
    2a22:	ff 1f       	adc	r31, r31
    2a24:	e1 5d       	subi	r30, 0xD1	; 209
    2a26:	f6 4c       	sbci	r31, 0xC6	; 198
    2a28:	2a e1       	ldi	r18, 0x1A	; 26
    2a2a:	30 e0       	ldi	r19, 0x00	; 0
    2a2c:	15 c0       	rjmp	.+42     	; 0x2a58 <ProcessInput+0xa6e>
                                UpdateState(actObj1.byteField[ACTION_STATE]);
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                            } else {
                                if (data[0] == 'u') {
                                    SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                                } else if (data[0] == 'g') {
    2a2e:	87 36       	cpi	r24, 0x67	; 103
    2a30:	09 f0       	breq	.+2      	; 0x2a34 <ProcessInput+0xa4a>
    2a32:	54 c2       	rjmp	.+1192   	; 0x2edc <ProcessInput+0xef2>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2a34:	87 2d       	mov	r24, r7
    2a36:	90 e0       	ldi	r25, 0x00	; 0
    2a38:	fc 01       	movw	r30, r24
    2a3a:	ee 0f       	add	r30, r30
    2a3c:	ff 1f       	adc	r31, r31
    2a3e:	e1 51       	subi	r30, 0x11	; 17
    2a40:	f7 4c       	sbci	r31, 0xC7	; 199
    2a42:	2d ed       	ldi	r18, 0xDD	; 221
    2a44:	36 e7       	ldi	r19, 0x76	; 118
    2a46:	20 83       	st	Z, r18
    2a48:	31 83       	std	Z+1, r19	; 0x01
    reactStr[1][number]=length;
    2a4a:	fc 01       	movw	r30, r24
    2a4c:	ee 0f       	add	r30, r30
    2a4e:	ff 1f       	adc	r31, r31
    2a50:	e1 5d       	subi	r30, 0xD1	; 209
    2a52:	f6 4c       	sbci	r31, 0xC6	; 198
    2a54:	28 e2       	ldi	r18, 0x28	; 40
    2a56:	30 e0       	ldi	r19, 0x00	; 0
    2a58:	20 83       	st	Z, r18
    2a5a:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    2a5c:	88 0f       	add	r24, r24
    2a5e:	99 1f       	adc	r25, r25
    2a60:	fc 01       	movw	r30, r24
    2a62:	e1 59       	subi	r30, 0x91	; 145
    2a64:	f6 4c       	sbci	r31, 0xC6	; 198
    2a66:	81 e0       	ldi	r24, 0x01	; 1
    2a68:	90 e0       	ldi	r25, 0x00	; 0
    2a6a:	80 83       	st	Z, r24
    2a6c:	91 83       	std	Z+1, r25	; 0x01
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                            } else {
                                if (data[0] == 'u') {
                                    SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                                } else if (data[0] == 'g') {
                                    SetResponse(elements++, A_CANTGIVE, L_CANTGIVE, TEASER);                                    
    2a6e:	73 94       	inc	r7
    2a70:	35 c2       	rjmp	.+1130   	; 0x2edc <ProcessInput+0xef2>
                            }
                        }
                    
                    //Talk to person, read or use object (without item)                          
                    } else {
                        PopulateObject(route[currDepth+1], &actObj1);
    2a72:	60 eb       	ldi	r22, 0xB0	; 176
    2a74:	78 e3       	ldi	r23, 0x38	; 56
    2a76:	0e 94 18 0b 	call	0x1630	; 0x1630 <PopulateObject>
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
    2a7a:	f8 01       	movw	r30, r16
    2a7c:	80 81       	ld	r24, Z
    2a7e:	84 37       	cpi	r24, 0x74	; 116
    2a80:	69 f5       	brne	.+90     	; 0x2adc <ProcessInput+0xaf2>
    2a82:	80 91 b8 38 	lds	r24, 0x38B8	; 0x8038b8 <actObj1.3989+0x8>
    2a86:	83 fd       	sbrc	r24, 3
    2a88:	44 c0       	rjmp	.+136    	; 0x2b12 <ProcessInput+0xb28>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2a8a:	8e e1       	ldi	r24, 0x1E	; 30
    2a8c:	99 e7       	ldi	r25, 0x79	; 121
    2a8e:	80 93 f1 38 	sts	0x38F1, r24	; 0x8038f1 <reactStr+0x2>
    2a92:	90 93 f2 38 	sts	0x38F2, r25	; 0x8038f2 <reactStr+0x3>
    reactStr[1][number]=length;
    2a96:	8e e1       	ldi	r24, 0x1E	; 30
    2a98:	90 e0       	ldi	r25, 0x00	; 0
    2a9a:	80 93 31 39 	sts	0x3931, r24	; 0x803931 <reactStr+0x42>
    2a9e:	90 93 32 39 	sts	0x3932, r25	; 0x803932 <reactStr+0x43>
    reactStr[2][number]=type;
    2aa2:	81 e0       	ldi	r24, 0x01	; 1
    2aa4:	90 e0       	ldi	r25, 0x00	; 0
    2aa6:	80 93 71 39 	sts	0x3971, r24	; 0x803971 <reactStr+0x82>
    2aaa:	90 93 72 39 	sts	0x3972, r25	; 0x803972 <reactStr+0x83>
                    //Talk to person, read or use object (without item)                          
                    } else {
                        PopulateObject(route[currDepth+1], &actObj1);
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
                            SetResponse(elements++, A_WHYTALK, L_WHYTALK, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    2aae:	80 91 ca 38 	lds	r24, 0x38CA	; 0x8038ca <actObj1.3989+0x1a>
    2ab2:	90 91 cb 38 	lds	r25, 0x38CB	; 0x8038cb <actObj1.3989+0x1b>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2ab6:	20 91 bc 38 	lds	r18, 0x38BC	; 0x8038bc <actObj1.3989+0xc>
    2aba:	30 91 bd 38 	lds	r19, 0x38BD	; 0x8038bd <actObj1.3989+0xd>
    2abe:	20 93 f3 38 	sts	0x38F3, r18	; 0x8038f3 <reactStr+0x4>
    2ac2:	30 93 f4 38 	sts	0x38F4, r19	; 0x8038f4 <reactStr+0x5>
    reactStr[1][number]=length;
    2ac6:	80 93 33 39 	sts	0x3933, r24	; 0x803933 <reactStr+0x44>
    2aca:	90 93 34 39 	sts	0x3934, r25	; 0x803934 <reactStr+0x45>
    reactStr[2][number]=type;
    2ace:	10 92 73 39 	sts	0x3973, r1	; 0x803973 <reactStr+0x84>
    2ad2:	10 92 74 39 	sts	0x3974, r1	; 0x803974 <reactStr+0x85>
                    //Talk to person, read or use object (without item)                          
                    } else {
                        PopulateObject(route[currDepth+1], &actObj1);
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
                            SetResponse(elements++, A_WHYTALK, L_WHYTALK, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    2ad6:	a3 e0       	ldi	r26, 0x03	; 3
    2ad8:	7a 2e       	mov	r7, r26
    2ada:	00 c2       	rjmp	.+1024   	; 0x2edc <ProcessInput+0xef2>
                        } else if ((data[0] == 'u')&&((actObj1.byteField[ACTION_MASK]&USE) == 0)) {
    2adc:	85 37       	cpi	r24, 0x75	; 117
    2ade:	39 f4       	brne	.+14     	; 0x2aee <ProcessInput+0xb04>
    2ae0:	80 91 b8 38 	lds	r24, 0x38B8	; 0x8038b8 <actObj1.3989+0x8>
    2ae4:	84 fd       	sbrc	r24, 4
    2ae6:	15 c0       	rjmp	.+42     	; 0x2b12 <ProcessInput+0xb28>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2ae8:	84 e0       	ldi	r24, 0x04	; 4
    2aea:	99 e7       	ldi	r25, 0x79	; 121
    2aec:	35 c2       	rjmp	.+1130   	; 0x2f58 <ProcessInput+0xf6e>
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
                            SetResponse(elements++, A_WHYTALK, L_WHYTALK, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                        } else if ((data[0] == 'u')&&((actObj1.byteField[ACTION_MASK]&USE) == 0)) {
                            SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                        } else if ((data[0] == 'r')&&((actObj1.byteField[ACTION_MASK]&READ) == 0)) {
    2aee:	82 37       	cpi	r24, 0x72	; 114
    2af0:	69 f4       	brne	.+26     	; 0x2b0c <ProcessInput+0xb22>
    2af2:	80 91 b8 38 	lds	r24, 0x38B8	; 0x8038b8 <actObj1.3989+0x8>
    2af6:	85 fd       	sbrc	r24, 5
    2af8:	0c c0       	rjmp	.+24     	; 0x2b12 <ProcessInput+0xb28>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2afa:	89 ee       	ldi	r24, 0xE9	; 233
    2afc:	98 e7       	ldi	r25, 0x78	; 120
    2afe:	80 93 f1 38 	sts	0x38F1, r24	; 0x8038f1 <reactStr+0x2>
    2b02:	90 93 f2 38 	sts	0x38F2, r25	; 0x8038f2 <reactStr+0x3>
    reactStr[1][number]=length;
    2b06:	8b e1       	ldi	r24, 0x1B	; 27
    2b08:	90 e0       	ldi	r25, 0x00	; 0
    2b0a:	1d cb       	rjmp	.-2502   	; 0x2146 <ProcessInput+0x15c>
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                        } else if ((data[0] == 'u')&&((actObj1.byteField[ACTION_MASK]&USE) == 0)) {
                            SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                        } else if ((data[0] == 'r')&&((actObj1.byteField[ACTION_MASK]&READ) == 0)) {
                            SetResponse(elements++, A_CANTREAD, L_CANTREAD, TEASER);
                        } else if (data[0] == 'g'){ 
    2b0c:	87 36       	cpi	r24, 0x67	; 103
    2b0e:	09 f4       	brne	.+2      	; 0x2b12 <ProcessInput+0xb28>
    2b10:	9b ca       	rjmp	.-2762   	; 0x2048 <ProcessInput+0x5e>
                            SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);  
                        } else {

                            //Special game, not enough characters
                            if (actObj1.lenStr[ACTION_STR1] == 1) {
    2b12:	e0 90 ce 38 	lds	r14, 0x38CE	; 0x8038ce <actObj1.3989+0x1e>
    2b16:	f0 90 cf 38 	lds	r15, 0x38CF	; 0x8038cf <actObj1.3989+0x1f>
    2b1a:	f1 e0       	ldi	r31, 0x01	; 1
    2b1c:	ef 16       	cp	r14, r31
    2b1e:	f1 04       	cpc	r15, r1
    2b20:	11 f5       	brne	.+68     	; 0x2b66 <ProcessInput+0xb7c>
                                ExtEERead(actObj1.addrStr[ACTION_STR1], 1, GAME, &data[2]);
    2b22:	98 01       	movw	r18, r16
    2b24:	2e 5f       	subi	r18, 0xFE	; 254
    2b26:	3f 4f       	sbci	r19, 0xFF	; 255
    2b28:	40 e0       	ldi	r20, 0x00	; 0
    2b2a:	61 e0       	ldi	r22, 0x01	; 1
    2b2c:	80 91 c0 38 	lds	r24, 0x38C0	; 0x8038c0 <actObj1.3989+0x10>
    2b30:	90 91 c1 38 	lds	r25, 0x38C1	; 0x8038c1 <actObj1.3989+0x11>
    2b34:	0e 94 0d 0a 	call	0x141a	; 0x141a <ExtEERead>
                                if (data[2] == '1') {
    2b38:	d8 01       	movw	r26, r16
    2b3a:	12 96       	adiw	r26, 0x02	; 2
    2b3c:	8c 91       	ld	r24, X
    2b3e:	81 33       	cpi	r24, 0x31	; 49
    2b40:	09 f0       	breq	.+2      	; 0x2b44 <ProcessInput+0xb5a>
    2b42:	a7 cc       	rjmp	.-1714   	; 0x2492 <ProcessInput+0x4a8>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2b44:	83 e6       	ldi	r24, 0x63	; 99
    2b46:	95 e7       	ldi	r25, 0x75	; 117
    2b48:	80 93 f1 38 	sts	0x38F1, r24	; 0x8038f1 <reactStr+0x2>
    2b4c:	90 93 f2 38 	sts	0x38F2, r25	; 0x8038f2 <reactStr+0x3>
    reactStr[1][number]=length;
    2b50:	8b e2       	ldi	r24, 0x2B	; 43
    2b52:	90 e0       	ldi	r25, 0x00	; 0
    2b54:	80 93 31 39 	sts	0x3931, r24	; 0x803931 <reactStr+0x42>
    2b58:	90 93 32 39 	sts	0x3932, r25	; 0x803932 <reactStr+0x43>
    reactStr[2][number]=type;
    2b5c:	e0 92 71 39 	sts	0x3971, r14	; 0x803971 <reactStr+0x82>
    2b60:	f0 92 72 39 	sts	0x3972, r15	; 0x803972 <reactStr+0x83>
    2b64:	fa ca       	rjmp	.-2572   	; 0x215a <ProcessInput+0x170>
                                if (data[2] == '1') {
                                    SetResponse(elements++, A_PLEASEOFFER, L_PLEASEOFFER, TEASER);
                                }

                            //General request
                            } else if (actObj1.lenStr[ACTION_STR1]) {
    2b66:	e1 14       	cp	r14, r1
    2b68:	f1 04       	cpc	r15, r1
    2b6a:	09 f4       	brne	.+2      	; 0x2b6e <ProcessInput+0xb84>
    2b6c:	59 c0       	rjmp	.+178    	; 0x2c20 <ProcessInput+0xc36>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2b6e:	80 91 c0 38 	lds	r24, 0x38C0	; 0x8038c0 <actObj1.3989+0x10>
    2b72:	90 91 c1 38 	lds	r25, 0x38C1	; 0x8038c1 <actObj1.3989+0x11>
    2b76:	80 93 f1 38 	sts	0x38F1, r24	; 0x8038f1 <reactStr+0x2>
    2b7a:	90 93 f2 38 	sts	0x38F2, r25	; 0x8038f2 <reactStr+0x3>
    reactStr[1][number]=length;
    2b7e:	e0 92 31 39 	sts	0x3931, r14	; 0x803931 <reactStr+0x42>
    2b82:	f0 92 32 39 	sts	0x3932, r15	; 0x803932 <reactStr+0x43>
    reactStr[2][number]=type;
    2b86:	10 92 71 39 	sts	0x3971, r1	; 0x803971 <reactStr+0x82>
    2b8a:	10 92 72 39 	sts	0x3972, r1	; 0x803972 <reactStr+0x83>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2b8e:	8b e5       	ldi	r24, 0x5B	; 91
    2b90:	9a e7       	ldi	r25, 0x7A	; 122
    2b92:	80 93 f3 38 	sts	0x38F3, r24	; 0x8038f3 <reactStr+0x4>
    2b96:	90 93 f4 38 	sts	0x38F4, r25	; 0x8038f4 <reactStr+0x5>
    reactStr[1][number]=length;
    2b9a:	82 e0       	ldi	r24, 0x02	; 2
    2b9c:	90 e0       	ldi	r25, 0x00	; 0
    2b9e:	80 93 33 39 	sts	0x3933, r24	; 0x803933 <reactStr+0x44>
    2ba2:	90 93 34 39 	sts	0x3934, r25	; 0x803934 <reactStr+0x45>
    reactStr[2][number]=type;
    2ba6:	81 e0       	ldi	r24, 0x01	; 1
    2ba8:	90 e0       	ldi	r25, 0x00	; 0
    2baa:	80 93 73 39 	sts	0x3973, r24	; 0x803973 <reactStr+0x84>
    2bae:	90 93 74 39 	sts	0x3974, r25	; 0x803974 <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2bb2:	20 eb       	ldi	r18, 0xB0	; 176
    2bb4:	38 e7       	ldi	r19, 0x78	; 120
    2bb6:	20 93 f5 38 	sts	0x38F5, r18	; 0x8038f5 <reactStr+0x6>
    2bba:	30 93 f6 38 	sts	0x38F6, r19	; 0x8038f6 <reactStr+0x7>
    reactStr[1][number]=length;
    2bbe:	22 e1       	ldi	r18, 0x12	; 18
    2bc0:	30 e0       	ldi	r19, 0x00	; 0
    2bc2:	20 93 35 39 	sts	0x3935, r18	; 0x803935 <reactStr+0x46>
    2bc6:	30 93 36 39 	sts	0x3936, r19	; 0x803936 <reactStr+0x47>
    reactStr[2][number]=type;
    2bca:	80 93 75 39 	sts	0x3975, r24	; 0x803975 <reactStr+0x86>
    2bce:	90 93 76 39 	sts	0x3976, r25	; 0x803976 <reactStr+0x87>
                            //General request
                            } else if (actObj1.lenStr[ACTION_STR1]) {
                                SetResponse(elements++, actObj1.addrStr[ACTION_STR1], actObj1.lenStr[ACTION_STR1], GAME);
                                SetResponse(elements++, A_LF, 2, TEASER);
                                SetResponse(elements++, A_RESPONSE, L_RESPONSE, TEASER);
                                if (actObj1.lenStr[ACTION_STR2]>(INP_LENGTH-1)) actObj1.lenStr[ACTION_STR2] = (INP_LENGTH-1);
    2bd2:	80 91 d0 38 	lds	r24, 0x38D0	; 0x8038d0 <actObj1.3989+0x20>
    2bd6:	90 91 d1 38 	lds	r25, 0x38D1	; 0x8038d1 <actObj1.3989+0x21>
    2bda:	40 97       	sbiw	r24, 0x10	; 16
    2bdc:	30 f0       	brcs	.+12     	; 0x2bea <ProcessInput+0xc00>
    2bde:	8f e0       	ldi	r24, 0x0F	; 15
    2be0:	90 e0       	ldi	r25, 0x00	; 0
    2be2:	80 93 d0 38 	sts	0x38D0, r24	; 0x8038d0 <actObj1.3989+0x20>
    2be6:	90 93 d1 38 	sts	0x38D1, r25	; 0x8038d1 <actObj1.3989+0x21>
                                ExtEERead(actObj1.addrStr[ACTION_STR2], actObj1.lenStr[ACTION_STR2], GAME, (uint8_t *)&specialInput[0]);
    2bea:	2e ed       	ldi	r18, 0xDE	; 222
    2bec:	38 e3       	ldi	r19, 0x38	; 56
    2bee:	40 e0       	ldi	r20, 0x00	; 0
    2bf0:	60 91 d0 38 	lds	r22, 0x38D0	; 0x8038d0 <actObj1.3989+0x20>
    2bf4:	80 91 c2 38 	lds	r24, 0x38C2	; 0x8038c2 <actObj1.3989+0x12>
    2bf8:	90 91 c3 38 	lds	r25, 0x38C3	; 0x8038c3 <actObj1.3989+0x13>
    2bfc:	0e 94 0d 0a 	call	0x141a	; 0x141a <ExtEERead>
                                UnflipData(actObj1.lenStr[ACTION_STR2], (uint8_t *)&specialInput[0]);
    2c00:	6e ed       	ldi	r22, 0xDE	; 222
    2c02:	78 e3       	ldi	r23, 0x38	; 56
    2c04:	80 91 d0 38 	lds	r24, 0x38D0	; 0x8038d0 <actObj1.3989+0x20>
    2c08:	0e 94 00 0a 	call	0x1400	; 0x1400 <UnflipData>
                                specialInput[actObj1.lenStr[ACTION_STR2]] = 0;
    2c0c:	e0 91 d0 38 	lds	r30, 0x38D0	; 0x8038d0 <actObj1.3989+0x20>
    2c10:	f0 91 d1 38 	lds	r31, 0x38D1	; 0x8038d1 <actObj1.3989+0x21>
    2c14:	e2 52       	subi	r30, 0x22	; 34
    2c16:	f7 4c       	sbci	r31, 0xC7	; 199
    2c18:	10 82       	st	Z, r1

                            //General request
                            } else if (actObj1.lenStr[ACTION_STR1]) {
                                SetResponse(elements++, actObj1.addrStr[ACTION_STR1], actObj1.lenStr[ACTION_STR1], GAME);
                                SetResponse(elements++, A_LF, 2, TEASER);
                                SetResponse(elements++, A_RESPONSE, L_RESPONSE, TEASER);
    2c1a:	f4 e0       	ldi	r31, 0x04	; 4
    2c1c:	7f 2e       	mov	r7, r31
    2c1e:	5e c1       	rjmp	.+700    	; 0x2edc <ProcessInput+0xef2>
                                if (actObj1.lenStr[ACTION_STR2]>(INP_LENGTH-1)) actObj1.lenStr[ACTION_STR2] = (INP_LENGTH-1);
                                ExtEERead(actObj1.addrStr[ACTION_STR2], actObj1.lenStr[ACTION_STR2], GAME, (uint8_t *)&specialInput[0]);
                                UnflipData(actObj1.lenStr[ACTION_STR2], (uint8_t *)&specialInput[0]);
                                specialInput[actObj1.lenStr[ACTION_STR2]] = 0;
                                //specialPassed = 0;
                            } else if (CheckState(actObj1.byteField[ACTION_ACL])){
    2c20:	80 91 b7 38 	lds	r24, 0x38B7	; 0x8038b7 <actObj1.3989+0x7>
    2c24:	0e 94 c3 08 	call	0x1186	; 0x1186 <CheckState>
    2c28:	88 23       	and	r24, r24
    2c2a:	c9 f0       	breq	.+50     	; 0x2c5e <ProcessInput+0xc74>
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    2c2c:	80 91 d6 38 	lds	r24, 0x38D6	; 0x8038d6 <actObj1.3989+0x26>
    2c30:	90 91 d7 38 	lds	r25, 0x38D7	; 0x8038d7 <actObj1.3989+0x27>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2c34:	20 91 c8 38 	lds	r18, 0x38C8	; 0x8038c8 <actObj1.3989+0x18>
    2c38:	30 91 c9 38 	lds	r19, 0x38C9	; 0x8038c9 <actObj1.3989+0x19>
    2c3c:	20 93 f1 38 	sts	0x38F1, r18	; 0x8038f1 <reactStr+0x2>
    2c40:	30 93 f2 38 	sts	0x38F2, r19	; 0x8038f2 <reactStr+0x3>
    reactStr[1][number]=length;
    2c44:	80 93 31 39 	sts	0x3931, r24	; 0x803931 <reactStr+0x42>
    2c48:	90 93 32 39 	sts	0x3932, r25	; 0x803932 <reactStr+0x43>
    reactStr[2][number]=type;
    2c4c:	10 92 71 39 	sts	0x3971, r1	; 0x803971 <reactStr+0x82>
    2c50:	10 92 72 39 	sts	0x3972, r1	; 0x803972 <reactStr+0x83>
                                UnflipData(actObj1.lenStr[ACTION_STR2], (uint8_t *)&specialInput[0]);
                                specialInput[actObj1.lenStr[ACTION_STR2]] = 0;
                                //specialPassed = 0;
                            } else if (CheckState(actObj1.byteField[ACTION_ACL])){
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                                UpdateState(actObj1.byteField[ACTION_STATE]);
    2c54:	80 91 ba 38 	lds	r24, 0x38BA	; 0x8038ba <actObj1.3989+0xa>
    2c58:	0e 94 bb 08 	call	0x1176	; 0x1176 <UpdateState>
    2c5c:	7e ca       	rjmp	.-2820   	; 0x215a <ProcessInput+0x170>
                            } else {
                                SetResponse(elements++, actObj1.addrStr[ACTION_ACL_MSG], actObj1.lenStr[ACTION_ACL_MSG], GAME);
    2c5e:	80 91 d4 38 	lds	r24, 0x38D4	; 0x8038d4 <actObj1.3989+0x24>
    2c62:	90 91 d5 38 	lds	r25, 0x38D5	; 0x8038d5 <actObj1.3989+0x25>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2c66:	20 91 c6 38 	lds	r18, 0x38C6	; 0x8038c6 <actObj1.3989+0x16>
    2c6a:	30 91 c7 38 	lds	r19, 0x38C7	; 0x8038c7 <actObj1.3989+0x17>
    2c6e:	20 93 f1 38 	sts	0x38F1, r18	; 0x8038f1 <reactStr+0x2>
    2c72:	30 93 f2 38 	sts	0x38F2, r19	; 0x8038f2 <reactStr+0x3>
    reactStr[1][number]=length;
    2c76:	80 93 31 39 	sts	0x3931, r24	; 0x803931 <reactStr+0x42>
    2c7a:	90 93 32 39 	sts	0x3932, r25	; 0x803932 <reactStr+0x43>
    reactStr[2][number]=type;
    2c7e:	10 92 71 39 	sts	0x3971, r1	; 0x803971 <reactStr+0x82>
    2c82:	10 92 72 39 	sts	0x3972, r1	; 0x803972 <reactStr+0x83>
    2c86:	69 ca       	rjmp	.-2862   	; 0x215a <ProcessInput+0x170>
                        }
                    }

                //Person or object not found
                } else {
                    if ((data[0] == 't')||(data[0] == 'g')){
    2c88:	f8 01       	movw	r30, r16
    2c8a:	80 81       	ld	r24, Z
    2c8c:	84 37       	cpi	r24, 0x74	; 116
    2c8e:	11 f0       	breq	.+4      	; 0x2c94 <ProcessInput+0xcaa>
    2c90:	87 36       	cpi	r24, 0x67	; 103
    2c92:	19 f4       	brne	.+6      	; 0x2c9a <ProcessInput+0xcb0>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2c94:	8c e3       	ldi	r24, 0x3C	; 60
    2c96:	99 e7       	ldi	r25, 0x79	; 121
    2c98:	02 c0       	rjmp	.+4      	; 0x2c9e <ProcessInput+0xcb4>
    2c9a:	80 e5       	ldi	r24, 0x50	; 80
    2c9c:	99 e7       	ldi	r25, 0x79	; 121
    2c9e:	80 93 f1 38 	sts	0x38F1, r24	; 0x8038f1 <reactStr+0x2>
    2ca2:	90 93 f2 38 	sts	0x38F2, r25	; 0x8038f2 <reactStr+0x3>
    reactStr[1][number]=length;
    2ca6:	84 e1       	ldi	r24, 0x14	; 20
    2ca8:	90 e0       	ldi	r25, 0x00	; 0
    2caa:	4d ca       	rjmp	.-2918   	; 0x2146 <ProcessInput+0x15c>
                    }
                }
            }
        
        //Special answer given
        } else if (data[0] == 'a'){
    2cac:	81 36       	cpi	r24, 0x61	; 97
    2cae:	09 f0       	breq	.+2      	; 0x2cb2 <ProcessInput+0xcc8>
    2cb0:	f0 cb       	rjmp	.-2080   	; 0x2492 <ProcessInput+0x4a8>
            
            //Priest offerings
            if (specialPassed >= 2) {
    2cb2:	80 91 dd 38 	lds	r24, 0x38DD	; 0x8038dd <specialPassed>
    2cb6:	82 30       	cpi	r24, 0x02	; 2
    2cb8:	08 f4       	brcc	.+2      	; 0x2cbc <ProcessInput+0xcd2>
    2cba:	b3 c0       	rjmp	.+358    	; 0x2e22 <ProcessInput+0xe38>
                if (data[1] > 0) {
    2cbc:	d8 01       	movw	r26, r16
    2cbe:	11 96       	adiw	r26, 0x01	; 1
    2cc0:	2c 91       	ld	r18, X
    2cc2:	22 23       	and	r18, r18
    2cc4:	09 f4       	brne	.+2      	; 0x2cc8 <ProcessInput+0xcde>
    2cc6:	a4 c0       	rjmp	.+328    	; 0x2e10 <ProcessInput+0xe26>

                    uint8_t  digit[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    2cc8:	fe 01       	movw	r30, r28
    2cca:	31 96       	adiw	r30, 0x01	; 1
    2ccc:	7f 01       	movw	r14, r30
    2cce:	8a e0       	ldi	r24, 0x0A	; 10
    2cd0:	df 01       	movw	r26, r30
    2cd2:	1d 92       	st	X+, r1
    2cd4:	8a 95       	dec	r24
    2cd6:	e9 f7       	brne	.-6      	; 0x2cd2 <ProcessInput+0xce8>
                        answer = ((offering  & 2) << 19) + ((offering  & 1) << 8) + \
                        ((element   & 2) << 15) + ((element   & 1) << 4) + \
                        ((kneelings & 2) << 11) + ((kneelings & 1))
                        answer = answer << (3-person)
                    */
                    data[1]-='1';
    2cd8:	21 53       	subi	r18, 0x31	; 49
    2cda:	f8 01       	movw	r30, r16
    2cdc:	21 83       	std	Z+1, r18	; 0x01
                    data[2]-='1';
    2cde:	32 81       	ldd	r19, Z+2	; 0x02
    2ce0:	31 53       	subi	r19, 0x31	; 49
    2ce2:	32 83       	std	Z+2, r19	; 0x02
                    if (data[3] == 'a') data[3] = 1;
    2ce4:	83 81       	ldd	r24, Z+3	; 0x03
    2ce6:	81 36       	cpi	r24, 0x61	; 97
    2ce8:	11 f4       	brne	.+4      	; 0x2cee <ProcessInput+0xd04>
    2cea:	81 e0       	ldi	r24, 0x01	; 1
    2cec:	08 c0       	rjmp	.+16     	; 0x2cfe <ProcessInput+0xd14>
                    else if (data[3] == 'e') data[3] = 0;
    2cee:	85 36       	cpi	r24, 0x65	; 101
    2cf0:	11 f4       	brne	.+4      	; 0x2cf6 <ProcessInput+0xd0c>
    2cf2:	13 82       	std	Z+3, r1	; 0x03
    2cf4:	08 c0       	rjmp	.+16     	; 0x2d06 <ProcessInput+0xd1c>
                    else if (data[3] == 'f') data[3] = 3;
    2cf6:	86 36       	cpi	r24, 0x66	; 102
    2cf8:	21 f4       	brne	.+8      	; 0x2d02 <ProcessInput+0xd18>
    2cfa:	83 e0       	ldi	r24, 0x03	; 3
    2cfc:	f8 01       	movw	r30, r16
    2cfe:	83 83       	std	Z+3, r24	; 0x03
    2d00:	02 c0       	rjmp	.+4      	; 0x2d06 <ProcessInput+0xd1c>
                    else data[3] = 2;
    2d02:	82 e0       	ldi	r24, 0x02	; 2
    2d04:	83 83       	std	Z+3, r24	; 0x03

                    if (data[1] & 2) answer += (1UL << 20);
    2d06:	21 fd       	sbrc	r18, 1
    2d08:	04 c0       	rjmp	.+8      	; 0x2d12 <ProcessInput+0xd28>
            //Priest offerings
            if (specialPassed >= 2) {
                if (data[1] > 0) {

                    uint8_t  digit[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
                    uint32_t answer = 0;
    2d0a:	80 e0       	ldi	r24, 0x00	; 0
    2d0c:	90 e0       	ldi	r25, 0x00	; 0
    2d0e:	dc 01       	movw	r26, r24
    2d10:	04 c0       	rjmp	.+8      	; 0x2d1a <ProcessInput+0xd30>
                    if (data[3] == 'a') data[3] = 1;
                    else if (data[3] == 'e') data[3] = 0;
                    else if (data[3] == 'f') data[3] = 3;
                    else data[3] = 2;

                    if (data[1] & 2) answer += (1UL << 20);
    2d12:	80 e0       	ldi	r24, 0x00	; 0
    2d14:	90 e0       	ldi	r25, 0x00	; 0
    2d16:	a0 e1       	ldi	r26, 0x10	; 16
    2d18:	b0 e0       	ldi	r27, 0x00	; 0
                    if (data[1] & 1) answer += (1 << 8);
    2d1a:	20 ff       	sbrs	r18, 0
    2d1c:	03 c0       	rjmp	.+6      	; 0x2d24 <ProcessInput+0xd3a>
    2d1e:	9f 5f       	subi	r25, 0xFF	; 255
    2d20:	af 4f       	sbci	r26, 0xFF	; 255
    2d22:	bf 4f       	sbci	r27, 0xFF	; 255
                    if (data[3] & 2) answer += (1UL << 16);
    2d24:	f8 01       	movw	r30, r16
    2d26:	23 81       	ldd	r18, Z+3	; 0x03
    2d28:	21 fd       	sbrc	r18, 1
    2d2a:	11 96       	adiw	r26, 0x01	; 1
                    if (data[3] & 1) answer += (1 << 4);
    2d2c:	20 ff       	sbrs	r18, 0
    2d2e:	03 c0       	rjmp	.+6      	; 0x2d36 <ProcessInput+0xd4c>
    2d30:	40 96       	adiw	r24, 0x10	; 16
    2d32:	a1 1d       	adc	r26, r1
    2d34:	b1 1d       	adc	r27, r1
                    if (data[2] & 2) answer += (1 << 12);
    2d36:	31 ff       	sbrs	r19, 1
    2d38:	03 c0       	rjmp	.+6      	; 0x2d40 <ProcessInput+0xd56>
    2d3a:	90 5f       	subi	r25, 0xF0	; 240
    2d3c:	af 4f       	sbci	r26, 0xFF	; 255
    2d3e:	bf 4f       	sbci	r27, 0xFF	; 255
                    if (data[2] & 1) answer += 1;
    2d40:	30 ff       	sbrs	r19, 0
    2d42:	03 c0       	rjmp	.+6      	; 0x2d4a <ProcessInput+0xd60>
    2d44:	01 96       	adiw	r24, 0x01	; 1
    2d46:	a1 1d       	adc	r26, r1
    2d48:	b1 1d       	adc	r27, r1
                    answer <<= (4 - whoami);            
    2d4a:	40 91 30 38 	lds	r20, 0x3830	; 0x803830 <whoami>
    2d4e:	24 e0       	ldi	r18, 0x04	; 4
    2d50:	30 e0       	ldi	r19, 0x00	; 0
    2d52:	24 1b       	sub	r18, r20
    2d54:	31 09       	sbc	r19, r1
    2d56:	bc 01       	movw	r22, r24
    2d58:	cd 01       	movw	r24, r26
    2d5a:	04 c0       	rjmp	.+8      	; 0x2d64 <ProcessInput+0xd7a>
    2d5c:	66 0f       	add	r22, r22
    2d5e:	77 1f       	adc	r23, r23
    2d60:	88 1f       	adc	r24, r24
    2d62:	99 1f       	adc	r25, r25
    2d64:	2a 95       	dec	r18
    2d66:	d2 f7       	brpl	.-12     	; 0x2d5c <ProcessInput+0xd72>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2d68:	26 e0       	ldi	r18, 0x06	; 6
    2d6a:	35 e7       	ldi	r19, 0x75	; 117
    2d6c:	20 93 f1 38 	sts	0x38F1, r18	; 0x8038f1 <reactStr+0x2>
    2d70:	30 93 f2 38 	sts	0x38F2, r19	; 0x8038f2 <reactStr+0x3>
    reactStr[1][number]=length;
    2d74:	20 e2       	ldi	r18, 0x20	; 32
    2d76:	30 e0       	ldi	r19, 0x00	; 0
    2d78:	20 93 31 39 	sts	0x3931, r18	; 0x803931 <reactStr+0x42>
    2d7c:	30 93 32 39 	sts	0x3932, r19	; 0x803932 <reactStr+0x43>
    reactStr[2][number]=type;
    2d80:	21 e0       	ldi	r18, 0x01	; 1
    2d82:	30 e0       	ldi	r19, 0x00	; 0
    2d84:	20 93 71 39 	sts	0x3971, r18	; 0x803971 <reactStr+0x82>
    2d88:	30 93 72 39 	sts	0x3972, r19	; 0x803972 <reactStr+0x83>
                    answer <<= (4 - whoami);            

                    SetResponse(elements++, A_YOURPART, L_YOURPART, TEASER);
                    
                    //Set up sending out number
                    for (n=9; n>=0; --n) {
    2d8c:	59 e0       	ldi	r21, 0x09	; 9
                        digit[n] = answer % 10;
    2d8e:	b5 2e       	mov	r11, r21
    2d90:	ea e0       	ldi	r30, 0x0A	; 10
    2d92:	4e 2e       	mov	r4, r30
    2d94:	51 2c       	mov	r5, r1
    2d96:	61 2c       	mov	r6, r1
    2d98:	71 2c       	mov	r7, r1
    2d9a:	67 01       	movw	r12, r14
    2d9c:	cb 0c       	add	r12, r11
    2d9e:	d1 1c       	adc	r13, r1
    2da0:	a3 01       	movw	r20, r6
    2da2:	92 01       	movw	r18, r4
    2da4:	36 d2       	rcall	.+1132   	; 0x3212 <__udivmodsi4>
    2da6:	d6 01       	movw	r26, r12
    2da8:	6c 93       	st	X, r22
                        answer /= 10;
    2daa:	b9 01       	movw	r22, r18
    2dac:	ca 01       	movw	r24, r20
                        if (answer == 0) break;
    2dae:	61 15       	cp	r22, r1
    2db0:	71 05       	cpc	r23, r1
    2db2:	81 05       	cpc	r24, r1
    2db4:	91 05       	cpc	r25, r1
    2db6:	51 f4       	brne	.+20     	; 0x2dcc <ProcessInput+0xde2>
    2db8:	2f ee       	ldi	r18, 0xEF	; 239
    2dba:	c2 2e       	mov	r12, r18
    2dbc:	28 e3       	ldi	r18, 0x38	; 56
    2dbe:	d2 2e       	mov	r13, r18
    2dc0:	32 e0       	ldi	r19, 0x02	; 2
    2dc2:	73 2e       	mov	r7, r19
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    reactStr[1][number]=length;
    2dc4:	88 24       	eor	r8, r8
    2dc6:	83 94       	inc	r8
    2dc8:	91 2c       	mov	r9, r1
    2dca:	02 c0       	rjmp	.+4      	; 0x2dd0 <ProcessInput+0xde6>
                    answer <<= (4 - whoami);            

                    SetResponse(elements++, A_YOURPART, L_YOURPART, TEASER);
                    
                    //Set up sending out number
                    for (n=9; n>=0; --n) {
    2dcc:	ba 94       	dec	r11
                        digit[n] = answer % 10;
                        answer /= 10;
                        if (answer == 0) break;
                    }
    2dce:	e5 cf       	rjmp	.-54     	; 0x2d9a <ProcessInput+0xdb0>
    2dd0:	f2 e0       	ldi	r31, 0x02	; 2
    2dd2:	cf 0e       	add	r12, r31
    2dd4:	d1 1c       	adc	r13, r1
                    for (; n<10; ++n) {
    2dd6:	29 e0       	ldi	r18, 0x09	; 9
    2dd8:	2b 15       	cp	r18, r11
    2dda:	08 f4       	brcc	.+2      	; 0x2dde <ProcessInput+0xdf4>
    2ddc:	7d c0       	rjmp	.+250    	; 0x2ed8 <ProcessInput+0xeee>
                        SetResponse(elements++, A_DIGITS+digit[n], 1, TEASER);
    2dde:	73 94       	inc	r7
    2de0:	f7 01       	movw	r30, r14
    2de2:	eb 0d       	add	r30, r11
    2de4:	f1 1d       	adc	r31, r1
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2de6:	80 81       	ld	r24, Z
    2de8:	90 e0       	ldi	r25, 0x00	; 0
    2dea:	8d 52       	subi	r24, 0x2D	; 45
    2dec:	9b 48       	sbci	r25, 0x8B	; 139
    2dee:	f6 01       	movw	r30, r12
    2df0:	82 83       	std	Z+2, r24	; 0x02
    2df2:	93 83       	std	Z+3, r25	; 0x03
    reactStr[1][number]=length;
    2df4:	ee 5b       	subi	r30, 0xBE	; 190
    2df6:	ff 4f       	sbci	r31, 0xFF	; 255
    2df8:	80 82       	st	Z, r8
    2dfa:	91 82       	std	Z+1, r9	; 0x01
    reactStr[2][number]=type;
    2dfc:	e0 5c       	subi	r30, 0xC0	; 192
    2dfe:	ff 4f       	sbci	r31, 0xFF	; 255
    2e00:	80 82       	st	Z, r8
    2e02:	91 82       	std	Z+1, r9	; 0x01
                        answer /= 10;
                        if (answer == 0) break;
                    }
                    for (; n<10; ++n) {
                        SetResponse(elements++, A_DIGITS+digit[n], 1, TEASER);
                        UpdateState(actObj1.byteField[ACTION_STATE]);
    2e04:	80 91 ba 38 	lds	r24, 0x38BA	; 0x8038ba <actObj1.3989+0xa>
    2e08:	0e 94 bb 08 	call	0x1176	; 0x1176 <UpdateState>
                    for (n=9; n>=0; --n) {
                        digit[n] = answer % 10;
                        answer /= 10;
                        if (answer == 0) break;
                    }
                    for (; n<10; ++n) {
    2e0c:	b3 94       	inc	r11
    2e0e:	e0 cf       	rjmp	.-64     	; 0x2dd0 <ProcessInput+0xde6>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2e10:	86 e2       	ldi	r24, 0x26	; 38
    2e12:	95 e7       	ldi	r25, 0x75	; 117
    2e14:	80 93 f1 38 	sts	0x38F1, r24	; 0x8038f1 <reactStr+0x2>
    2e18:	90 93 f2 38 	sts	0x38F2, r25	; 0x8038f2 <reactStr+0x3>
    reactStr[1][number]=length;
    2e1c:	8d e3       	ldi	r24, 0x3D	; 61
    2e1e:	90 e0       	ldi	r25, 0x00	; 0
    2e20:	4f c0       	rjmp	.+158    	; 0x2ec0 <ProcessInput+0xed6>
    2e22:	e0 91 26 38 	lds	r30, 0x3826	; 0x803826 <currDepth>
                    SetResponse(elements++, A_BADOFFERING, L_BADOFFERING, TEASER);
                }
            
            //Other questions    
            } else if (specialPassed == 1) {
                PopulateObject(route[currDepth+1], &actObj1);
    2e26:	f0 e0       	ldi	r31, 0x00	; 0
    2e28:	ee 0f       	add	r30, r30
    2e2a:	ff 1f       	adc	r31, r31
    2e2c:	ef 54       	subi	r30, 0x4F	; 79
    2e2e:	f6 4c       	sbci	r31, 0xC6	; 198
    2e30:	60 eb       	ldi	r22, 0xB0	; 176
    2e32:	78 e3       	ldi	r23, 0x38	; 56
                } else {
                    SetResponse(elements++, A_BADOFFERING, L_BADOFFERING, TEASER);
                }
            
            //Other questions    
            } else if (specialPassed == 1) {
    2e34:	81 30       	cpi	r24, 0x01	; 1
    2e36:	c1 f5       	brne	.+112    	; 0x2ea8 <ProcessInput+0xebe>
                PopulateObject(route[currDepth+1], &actObj1);
    2e38:	80 81       	ld	r24, Z
    2e3a:	91 81       	ldd	r25, Z+1	; 0x01
    2e3c:	0e 94 18 0b 	call	0x1630	; 0x1630 <PopulateObject>
                if (CheckState(actObj1.byteField[ACTION_ACL])){
    2e40:	80 91 b7 38 	lds	r24, 0x38B7	; 0x8038b7 <actObj1.3989+0x7>
    2e44:	0e 94 c3 08 	call	0x1186	; 0x1186 <CheckState>
    2e48:	88 23       	and	r24, r24
    2e4a:	c9 f0       	breq	.+50     	; 0x2e7e <ProcessInput+0xe94>
                    SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    2e4c:	80 91 d6 38 	lds	r24, 0x38D6	; 0x8038d6 <actObj1.3989+0x26>
    2e50:	90 91 d7 38 	lds	r25, 0x38D7	; 0x8038d7 <actObj1.3989+0x27>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2e54:	20 91 c8 38 	lds	r18, 0x38C8	; 0x8038c8 <actObj1.3989+0x18>
    2e58:	30 91 c9 38 	lds	r19, 0x38C9	; 0x8038c9 <actObj1.3989+0x19>
    2e5c:	20 93 f1 38 	sts	0x38F1, r18	; 0x8038f1 <reactStr+0x2>
    2e60:	30 93 f2 38 	sts	0x38F2, r19	; 0x8038f2 <reactStr+0x3>
    reactStr[1][number]=length;
    2e64:	80 93 31 39 	sts	0x3931, r24	; 0x803931 <reactStr+0x42>
    2e68:	90 93 32 39 	sts	0x3932, r25	; 0x803932 <reactStr+0x43>
    reactStr[2][number]=type;
    2e6c:	10 92 71 39 	sts	0x3971, r1	; 0x803971 <reactStr+0x82>
    2e70:	10 92 72 39 	sts	0x3972, r1	; 0x803972 <reactStr+0x83>
            //Other questions    
            } else if (specialPassed == 1) {
                PopulateObject(route[currDepth+1], &actObj1);
                if (CheckState(actObj1.byteField[ACTION_ACL])){
                    SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                    UpdateState(actObj1.byteField[ACTION_STATE]);
    2e74:	80 91 ba 38 	lds	r24, 0x38BA	; 0x8038ba <actObj1.3989+0xa>
    2e78:	0e 94 bb 08 	call	0x1176	; 0x1176 <UpdateState>
    2e7c:	2b c0       	rjmp	.+86     	; 0x2ed4 <ProcessInput+0xeea>
                } else {
                    SetResponse(elements++, actObj1.addrStr[ACTION_ACL_MSG], actObj1.lenStr[ACTION_ACL_MSG], GAME);
    2e7e:	80 91 d4 38 	lds	r24, 0x38D4	; 0x8038d4 <actObj1.3989+0x24>
    2e82:	90 91 d5 38 	lds	r25, 0x38D5	; 0x8038d5 <actObj1.3989+0x25>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2e86:	20 91 c6 38 	lds	r18, 0x38C6	; 0x8038c6 <actObj1.3989+0x16>
    2e8a:	30 91 c7 38 	lds	r19, 0x38C7	; 0x8038c7 <actObj1.3989+0x17>
    2e8e:	20 93 f1 38 	sts	0x38F1, r18	; 0x8038f1 <reactStr+0x2>
    2e92:	30 93 f2 38 	sts	0x38F2, r19	; 0x8038f2 <reactStr+0x3>
    reactStr[1][number]=length;
    2e96:	80 93 31 39 	sts	0x3931, r24	; 0x803931 <reactStr+0x42>
    2e9a:	90 93 32 39 	sts	0x3932, r25	; 0x803932 <reactStr+0x43>
    reactStr[2][number]=type;
    2e9e:	10 92 71 39 	sts	0x3971, r1	; 0x803971 <reactStr+0x82>
    2ea2:	10 92 72 39 	sts	0x3972, r1	; 0x803972 <reactStr+0x83>
    2ea6:	16 c0       	rjmp	.+44     	; 0x2ed4 <ProcessInput+0xeea>
                } else {
                    SetResponse(elements++, actObj1.addrStr[ACTION_ACL_MSG], actObj1.lenStr[ACTION_ACL_MSG], GAME);
                }

            } else {
                PopulateObject(route[currDepth+1], &actObj1);
    2ea8:	80 81       	ld	r24, Z
    2eaa:	91 81       	ldd	r25, Z+1	; 0x01
    2eac:	0e 94 18 0b 	call	0x1630	; 0x1630 <PopulateObject>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2eb0:	8e e9       	ldi	r24, 0x9E	; 158
    2eb2:	98 e7       	ldi	r25, 0x78	; 120
    2eb4:	80 93 f1 38 	sts	0x38F1, r24	; 0x8038f1 <reactStr+0x2>
    2eb8:	90 93 f2 38 	sts	0x38F2, r25	; 0x8038f2 <reactStr+0x3>
    reactStr[1][number]=length;
    2ebc:	82 e1       	ldi	r24, 0x12	; 18
    2ebe:	90 e0       	ldi	r25, 0x00	; 0
    2ec0:	80 93 31 39 	sts	0x3931, r24	; 0x803931 <reactStr+0x42>
    2ec4:	90 93 32 39 	sts	0x3932, r25	; 0x803932 <reactStr+0x43>
    reactStr[2][number]=type;
    2ec8:	81 e0       	ldi	r24, 0x01	; 1
    2eca:	90 e0       	ldi	r25, 0x00	; 0
    2ecc:	80 93 71 39 	sts	0x3971, r24	; 0x803971 <reactStr+0x82>
    2ed0:	90 93 72 39 	sts	0x3972, r25	; 0x803972 <reactStr+0x83>
                    SetResponse(elements++, actObj1.addrStr[ACTION_ACL_MSG], actObj1.lenStr[ACTION_ACL_MSG], GAME);
                }

            } else {
                PopulateObject(route[currDepth+1], &actObj1);
                SetResponse(elements++, A_INCORRECT, L_INCORRECT, TEASER);
    2ed4:	82 e0       	ldi	r24, 0x02	; 2
    2ed6:	78 2e       	mov	r7, r24
            }
            specialInput[0] = 0;
    2ed8:	10 92 de 38 	sts	0x38DE, r1	; 0x8038de <specialInput>
        } else {
               
        }
            
        //Input handled
        data[0] = 0;
    2edc:	d8 01       	movw	r26, r16
    2ede:	1c 92       	st	X, r1
        serRxDone = 0;
    2ee0:	10 92 37 38 	sts	0x3837, r1	; 0x803837 <serRxDone>
        RXCNT = 0;
    2ee4:	1d ba       	out	0x1d, r1	; 29
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2ee6:	8b e5       	ldi	r24, 0x5B	; 91
    2ee8:	9a e7       	ldi	r25, 0x7A	; 122
    2eea:	80 93 ef 38 	sts	0x38EF, r24	; 0x8038ef <reactStr>
    2eee:	90 93 f0 38 	sts	0x38F0, r25	; 0x8038f0 <reactStr+0x1>
    reactStr[1][number]=length;
    2ef2:	82 e0       	ldi	r24, 0x02	; 2
    2ef4:	90 e0       	ldi	r25, 0x00	; 0
    2ef6:	80 93 2f 39 	sts	0x392F, r24	; 0x80392f <reactStr+0x40>
    2efa:	90 93 30 39 	sts	0x3930, r25	; 0x803930 <reactStr+0x41>
    reactStr[2][number]=type;
    2efe:	81 e0       	ldi	r24, 0x01	; 1
    2f00:	90 e0       	ldi	r25, 0x00	; 0
    2f02:	80 93 6f 39 	sts	0x396F, r24	; 0x80396f <reactStr+0x80>
    2f06:	90 93 70 39 	sts	0x3970, r25	; 0x803970 <reactStr+0x81>
        //Input handled
        data[0] = 0;
        serRxDone = 0;
        RXCNT = 0;
        SetResponse(0, A_LF, 2, TEASER);
        if (specialInput[0]) responseList = elements; else responseList = SetStandardResponse(elements);
    2f0a:	80 91 de 38 	lds	r24, 0x38DE	; 0x8038de <specialInput>
    2f0e:	88 23       	and	r24, r24
    2f10:	19 f0       	breq	.+6      	; 0x2f18 <ProcessInput+0xf2e>
    2f12:	70 92 ee 38 	sts	0x38EE, r7	; 0x8038ee <responseList>
    2f16:	a4 c0       	rjmp	.+328    	; 0x3060 <ProcessInput+0x1076>
    2f18:	87 2d       	mov	r24, r7
    2f1a:	17 c0       	rjmp	.+46     	; 0x2f4a <ProcessInput+0xf60>

    } else {
        data[0] = 0;
    2f1c:	f8 01       	movw	r30, r16
    2f1e:	10 82       	st	Z, r1
        serRxDone = 0;
    2f20:	10 92 37 38 	sts	0x3837, r1	; 0x803837 <serRxDone>
        RXCNT = 0;
    2f24:	1d ba       	out	0x1d, r1	; 29
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2f26:	8b e5       	ldi	r24, 0x5B	; 91
    2f28:	9a e7       	ldi	r25, 0x7A	; 122
    2f2a:	80 93 ef 38 	sts	0x38EF, r24	; 0x8038ef <reactStr>
    2f2e:	90 93 f0 38 	sts	0x38F0, r25	; 0x8038f0 <reactStr+0x1>
    reactStr[1][number]=length;
    2f32:	82 e0       	ldi	r24, 0x02	; 2
    2f34:	90 e0       	ldi	r25, 0x00	; 0
    2f36:	80 93 2f 39 	sts	0x392F, r24	; 0x80392f <reactStr+0x40>
    2f3a:	90 93 30 39 	sts	0x3930, r25	; 0x803930 <reactStr+0x41>
    reactStr[2][number]=type;
    2f3e:	81 e0       	ldi	r24, 0x01	; 1
    2f40:	90 e0       	ldi	r25, 0x00	; 0
    2f42:	80 93 6f 39 	sts	0x396F, r24	; 0x80396f <reactStr+0x80>
    2f46:	90 93 70 39 	sts	0x3970, r25	; 0x803970 <reactStr+0x81>
    } else {
        data[0] = 0;
        serRxDone = 0;
        RXCNT = 0;
        SetResponse(0, A_LF, 2, TEASER);
        responseList = SetStandardResponse(1);
    2f4a:	0e 94 9c 0a 	call	0x1538	; 0x1538 <SetStandardResponse>
    2f4e:	80 93 ee 38 	sts	0x38EE, r24	; 0x8038ee <responseList>
    }
    
    return 0;
    2f52:	86 c0       	rjmp	.+268    	; 0x3060 <ProcessInput+0x1076>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2f54:	84 ed       	ldi	r24, 0xD4	; 212
    2f56:	99 e7       	ldi	r25, 0x79	; 121
    2f58:	80 93 f1 38 	sts	0x38F1, r24	; 0x8038f1 <reactStr+0x2>
    2f5c:	90 93 f2 38 	sts	0x38F2, r25	; 0x8038f2 <reactStr+0x3>
    reactStr[1][number]=length;
    2f60:	8a e1       	ldi	r24, 0x1A	; 26
    2f62:	90 e0       	ldi	r25, 0x00	; 0
    2f64:	f0 c8       	rjmp	.-3616   	; 0x2146 <ProcessInput+0x15c>

        //Drop item if in inventory
        if (data[0] == 'd') {
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
    2f66:	f2 e0       	ldi	r31, 0x02	; 2
    2f68:	ff 12       	cpse	r15, r31
    2f6a:	6e c8       	rjmp	.-3876   	; 0x2048 <ProcessInput+0x5e>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
                        if (CheckLetter(inventory[x], data[1])) {
    2f6c:	f8 01       	movw	r30, r16
    2f6e:	61 81       	ldd	r22, Z+1	; 0x01
    2f70:	0e 94 8f 0b 	call	0x171e	; 0x171e <CheckLetter>
    2f74:	88 23       	and	r24, r24
    2f76:	09 f4       	brne	.+2      	; 0x2f7a <ProcessInput+0xf90>
    2f78:	5b c0       	rjmp	.+182    	; 0x3030 <ProcessInput+0x1046>
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
    2f7a:	80 e0       	ldi	r24, 0x00	; 0
    2f7c:	90 e0       	ldi	r25, 0x00	; 0
                        if (CheckLetter(inventory[x], data[1])) {
                            PopulateObject(inventory[x], &actObj1);
    2f7e:	88 0f       	add	r24, r24
    2f80:	99 1f       	adc	r25, r25
    2f82:	9c 01       	movw	r18, r24
    2f84:	2f 5c       	subi	r18, 0xCF	; 207
    2f86:	37 4c       	sbci	r19, 0xC7	; 199
    2f88:	79 01       	movw	r14, r18
    2f8a:	60 eb       	ldi	r22, 0xB0	; 176
    2f8c:	78 e3       	ldi	r23, 0x38	; 56
    2f8e:	d9 01       	movw	r26, r18
    2f90:	8d 91       	ld	r24, X+
    2f92:	9c 91       	ld	r25, X
    2f94:	0e 94 18 0b 	call	0x1630	; 0x1630 <PopulateObject>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2f98:	84 ed       	ldi	r24, 0xD4	; 212
    2f9a:	97 e7       	ldi	r25, 0x77	; 119
    2f9c:	80 93 f1 38 	sts	0x38F1, r24	; 0x8038f1 <reactStr+0x2>
    2fa0:	90 93 f2 38 	sts	0x38F2, r25	; 0x8038f2 <reactStr+0x3>
    reactStr[1][number]=length;
    2fa4:	80 e1       	ldi	r24, 0x10	; 16
    2fa6:	90 e0       	ldi	r25, 0x00	; 0
    2fa8:	80 93 31 39 	sts	0x3931, r24	; 0x803931 <reactStr+0x42>
    2fac:	90 93 32 39 	sts	0x3932, r25	; 0x803932 <reactStr+0x43>
    reactStr[2][number]=type;
    2fb0:	81 e0       	ldi	r24, 0x01	; 1
    2fb2:	90 e0       	ldi	r25, 0x00	; 0
    2fb4:	80 93 71 39 	sts	0x3971, r24	; 0x803971 <reactStr+0x82>
    2fb8:	90 93 72 39 	sts	0x3972, r25	; 0x803972 <reactStr+0x83>
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
                        if (CheckLetter(inventory[x], data[1])) {
                            PopulateObject(inventory[x], &actObj1);
                            SetResponse(elements++, A_DROPPING, L_DROPPING, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    2fbc:	20 91 ca 38 	lds	r18, 0x38CA	; 0x8038ca <actObj1.3989+0x1a>
    2fc0:	30 91 cb 38 	lds	r19, 0x38CB	; 0x8038cb <actObj1.3989+0x1b>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2fc4:	40 91 bc 38 	lds	r20, 0x38BC	; 0x8038bc <actObj1.3989+0xc>
    2fc8:	50 91 bd 38 	lds	r21, 0x38BD	; 0x8038bd <actObj1.3989+0xd>
    2fcc:	40 93 f3 38 	sts	0x38F3, r20	; 0x8038f3 <reactStr+0x4>
    2fd0:	50 93 f4 38 	sts	0x38F4, r21	; 0x8038f4 <reactStr+0x5>
    reactStr[1][number]=length;
    2fd4:	20 93 33 39 	sts	0x3933, r18	; 0x803933 <reactStr+0x44>
    2fd8:	30 93 34 39 	sts	0x3934, r19	; 0x803934 <reactStr+0x45>
    reactStr[2][number]=type;
    2fdc:	10 92 73 39 	sts	0x3973, r1	; 0x803973 <reactStr+0x84>
    2fe0:	10 92 74 39 	sts	0x3974, r1	; 0x803974 <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2fe4:	2b e5       	ldi	r18, 0x5B	; 91
    2fe6:	3a e7       	ldi	r19, 0x7A	; 122
    2fe8:	20 93 f5 38 	sts	0x38F5, r18	; 0x8038f5 <reactStr+0x6>
    2fec:	30 93 f6 38 	sts	0x38F6, r19	; 0x8038f6 <reactStr+0x7>
    reactStr[1][number]=length;
    2ff0:	22 e0       	ldi	r18, 0x02	; 2
    2ff2:	30 e0       	ldi	r19, 0x00	; 0
    2ff4:	20 93 35 39 	sts	0x3935, r18	; 0x803935 <reactStr+0x46>
    2ff8:	30 93 36 39 	sts	0x3936, r19	; 0x803936 <reactStr+0x47>
    reactStr[2][number]=type;
    2ffc:	80 93 75 39 	sts	0x3975, r24	; 0x803975 <reactStr+0x86>
    3000:	90 93 76 39 	sts	0x3976, r25	; 0x803976 <reactStr+0x87>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3004:	27 e9       	ldi	r18, 0x97	; 151
    3006:	37 e7       	ldi	r19, 0x77	; 119
    3008:	20 93 f7 38 	sts	0x38F7, r18	; 0x8038f7 <reactStr+0x8>
    300c:	30 93 f8 38 	sts	0x38F8, r19	; 0x8038f8 <reactStr+0x9>
    reactStr[1][number]=length;
    3010:	2d e3       	ldi	r18, 0x3D	; 61
    3012:	30 e0       	ldi	r19, 0x00	; 0
    3014:	20 93 37 39 	sts	0x3937, r18	; 0x803937 <reactStr+0x48>
    3018:	30 93 38 39 	sts	0x3938, r19	; 0x803938 <reactStr+0x49>
    reactStr[2][number]=type;
    301c:	80 93 77 39 	sts	0x3977, r24	; 0x803977 <reactStr+0x88>
    3020:	90 93 78 39 	sts	0x3978, r25	; 0x803978 <reactStr+0x89>
                            PopulateObject(inventory[x], &actObj1);
                            SetResponse(elements++, A_DROPPING, L_DROPPING, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                            SetResponse(elements++, A_LF, 2, TEASER);
                            SetResponse(elements++, A_RETURNING, L_RETURNING, TEASER);
                            inventory[x] = 0;
    3024:	f7 01       	movw	r30, r14
    3026:	10 82       	st	Z, r1
    3028:	11 82       	std	Z+1, r1	; 0x01
                        if (CheckLetter(inventory[x], data[1])) {
                            PopulateObject(inventory[x], &actObj1);
                            SetResponse(elements++, A_DROPPING, L_DROPPING, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                            SetResponse(elements++, A_LF, 2, TEASER);
                            SetResponse(elements++, A_RETURNING, L_RETURNING, TEASER);
    302a:	f5 e0       	ldi	r31, 0x05	; 5
    302c:	7f 2e       	mov	r7, r31
                            inventory[x] = 0;
                            break;
    302e:	56 cf       	rjmp	.-340    	; 0x2edc <ProcessInput+0xef2>
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
    3030:	80 91 33 38 	lds	r24, 0x3833	; 0x803833 <inventory+0x2>
    3034:	90 91 34 38 	lds	r25, 0x3834	; 0x803834 <inventory+0x3>
    3038:	00 97       	sbiw	r24, 0x00	; 0
    303a:	49 f0       	breq	.+18     	; 0x304e <ProcessInput+0x1064>
                        if (CheckLetter(inventory[x], data[1])) {
    303c:	f8 01       	movw	r30, r16
    303e:	61 81       	ldd	r22, Z+1	; 0x01
    3040:	0e 94 8f 0b 	call	0x171e	; 0x171e <CheckLetter>
    3044:	88 23       	and	r24, r24
    3046:	19 f0       	breq	.+6      	; 0x304e <ProcessInput+0x1064>
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
    3048:	81 e0       	ldi	r24, 0x01	; 1
    304a:	90 e0       	ldi	r25, 0x00	; 0
    304c:	98 cf       	rjmp	.-208    	; 0x2f7e <ProcessInput+0xf94>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    304e:	84 e6       	ldi	r24, 0x64	; 100
    3050:	99 e7       	ldi	r25, 0x79	; 121
    3052:	80 93 f1 38 	sts	0x38F1, r24	; 0x8038f1 <reactStr+0x2>
    3056:	90 93 f2 38 	sts	0x38F2, r25	; 0x8038f2 <reactStr+0x3>
    reactStr[1][number]=length;
    305a:	81 e2       	ldi	r24, 0x21	; 33
    305c:	90 e0       	ldi	r25, 0x00	; 0
    305e:	73 c8       	rjmp	.-3866   	; 0x2146 <ProcessInput+0x15c>
        SetResponse(0, A_LF, 2, TEASER);
        responseList = SetStandardResponse(1);
    }
    
    return 0;
}
    3060:	80 e0       	ldi	r24, 0x00	; 0
    3062:	2a 96       	adiw	r28, 0x0a	; 10
    3064:	cd bf       	out	0x3d, r28	; 61
    3066:	de bf       	out	0x3e, r29	; 62
    3068:	df 91       	pop	r29
    306a:	cf 91       	pop	r28
    306c:	1f 91       	pop	r17
    306e:	0f 91       	pop	r16
    3070:	ff 90       	pop	r15
    3072:	ef 90       	pop	r14
    3074:	df 90       	pop	r13
    3076:	cf 90       	pop	r12
    3078:	bf 90       	pop	r11
    307a:	af 90       	pop	r10
    307c:	9f 90       	pop	r9
    307e:	8f 90       	pop	r8
    3080:	7f 90       	pop	r7
    3082:	6f 90       	pop	r6
    3084:	5f 90       	pop	r5
    3086:	4f 90       	pop	r4
    3088:	08 95       	ret

0000308a <TextAdventure>:


//MAIN GAME STRUCTURE
uint8_t TextAdventure(){
    308a:	cf 93       	push	r28
    static uint8_t serInput[RXLEN];
    
    //Still sending data to serial?
    if (CheckSend()) return 1;
    308c:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <CheckSend>
    3090:	88 23       	and	r24, r24
    3092:	11 f0       	breq	.+4      	; 0x3098 <TextAdventure+0xe>
    3094:	c1 e0       	ldi	r28, 0x01	; 1
    3096:	13 c0       	rjmp	.+38     	; 0x30be <TextAdventure+0x34>

    //Not sending? Process next response part to send, if any.
    if (CheckResponse()) return 1;        
    3098:	0e 94 c2 0c 	call	0x1984	; 0x1984 <CheckResponse>
    309c:	81 11       	cpse	r24, r1
    309e:	fa cf       	rjmp	.-12     	; 0x3094 <TextAdventure+0xa>

    //No responses to send, check if there is user input.
    if (CheckInput(&serInput[0])) return 2; 
    30a0:	84 e4       	ldi	r24, 0x44	; 68
    30a2:	98 e3       	ldi	r25, 0x38	; 56
    30a4:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <CheckInput>
    30a8:	c8 2f       	mov	r28, r24
    30aa:	81 11       	cpse	r24, r1
    30ac:	07 c0       	rjmp	.+14     	; 0x30bc <TextAdventure+0x32>

    //Input found, process and save (changes only)
    ProcessInput(&serInput[0]);
    30ae:	84 e4       	ldi	r24, 0x44	; 68
    30b0:	98 e3       	ldi	r25, 0x38	; 56
    30b2:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <ProcessInput>
    SaveGameState();
    30b6:	0e 94 1a 08 	call	0x1034	; 0x1034 <SaveGameState>

    return 0;
    30ba:	01 c0       	rjmp	.+2      	; 0x30be <TextAdventure+0x34>

    //Not sending? Process next response part to send, if any.
    if (CheckResponse()) return 1;        

    //No responses to send, check if there is user input.
    if (CheckInput(&serInput[0])) return 2; 
    30bc:	c2 e0       	ldi	r28, 0x02	; 2
    //Input found, process and save (changes only)
    ProcessInput(&serInput[0]);
    SaveGameState();

    return 0;
    30be:	8c 2f       	mov	r24, r28
    30c0:	cf 91       	pop	r28
    30c2:	08 95       	ret

000030c4 <main>:


//This is where it begins, inits first and main program in while(1) loop.
int main(void)
{
    Setup();
    30c4:	0e 94 cf 03 	call	0x79e	; 0x79e <Setup>

    SerSpeed(255);
    30c8:	8f ef       	ldi	r24, 0xFF	; 255
    30ca:	0e 94 37 07 	call	0xe6e	; 0xe6e <SerSpeed>
    30ce:	a4 e9       	ldi	r26, 0x94	; 148
    30d0:	b2 eb       	ldi	r27, 0xB2	; 178
    ////Turn on LEDs on low setting to check for interrupt glitches

    //"Hacker"
    for (uint8_t n=0; n<6; n++){
        iLED[HCKR[R][n]] = 1;
    30d2:	81 e0       	ldi	r24, 0x01	; 1
    30d4:	ed 91       	ld	r30, X+
    30d6:	f0 e0       	ldi	r31, 0x00	; 0
    30d8:	eb 54       	subi	r30, 0x4B	; 75
    30da:	f5 4c       	sbci	r31, 0xC5	; 197
    30dc:	80 83       	st	Z, r24
        iLED[HCKR[G][n]] = 1;
    30de:	15 96       	adiw	r26, 0x05	; 5
    30e0:	ec 91       	ld	r30, X
    30e2:	15 97       	sbiw	r26, 0x05	; 5
    30e4:	f0 e0       	ldi	r31, 0x00	; 0
    30e6:	eb 54       	subi	r30, 0x4B	; 75
    30e8:	f5 4c       	sbci	r31, 0xC5	; 197
    30ea:	80 83       	st	Z, r24

    SerSpeed(255);
    ////Turn on LEDs on low setting to check for interrupt glitches

    //"Hacker"
    for (uint8_t n=0; n<6; n++){
    30ec:	22 eb       	ldi	r18, 0xB2	; 178
    30ee:	aa 39       	cpi	r26, 0x9A	; 154
    30f0:	b2 07       	cpc	r27, r18
    30f2:	81 f7       	brne	.-32     	; 0x30d4 <main+0x10>
    30f4:	e6 e8       	ldi	r30, 0x86	; 134
    30f6:	f2 eb       	ldi	r31, 0xB2	; 178
        iLED[HCKR[G][n]] = 1;
    }

    //"Wings"
    for (uint8_t n=0; n<5; n++){
        iLED[WING[L][n]] = 1;
    30f8:	91 e0       	ldi	r25, 0x01	; 1
    30fa:	ef 01       	movw	r28, r30
    30fc:	a5 81       	ldd	r26, Z+5	; 0x05
    30fe:	b0 e0       	ldi	r27, 0x00	; 0
    3100:	ab 54       	subi	r26, 0x4B	; 75
    3102:	b5 4c       	sbci	r27, 0xC5	; 197
    3104:	81 e0       	ldi	r24, 0x01	; 1
    3106:	9c 93       	st	X, r25
    3108:	31 96       	adiw	r30, 0x01	; 1
        iLED[WING[R][n]] = 1;
    310a:	a8 81       	ld	r26, Y
    310c:	b0 e0       	ldi	r27, 0x00	; 0
    310e:	ab 54       	subi	r26, 0x4B	; 75
    3110:	b5 4c       	sbci	r27, 0xC5	; 197
    3112:	9c 93       	st	X, r25
        iLED[HCKR[R][n]] = 1;
        iLED[HCKR[G][n]] = 1;
    }

    //"Wings"
    for (uint8_t n=0; n<5; n++){
    3114:	22 eb       	ldi	r18, 0xB2	; 178
    3116:	eb 38       	cpi	r30, 0x8B	; 139
    3118:	f2 07       	cpc	r31, r18
    311a:	79 f7       	brne	.-34     	; 0x30fa <main+0x36>
        iLED[WING[L][n]] = 1;
        iLED[WING[R][n]] = 1;
    }    

    //"Others"
    iLED[EYE[G][R]] = 1;
    311c:	e0 91 92 b2 	lds	r30, 0xB292	; 0x80b292 <__bss_end+0x778e>
    3120:	f0 e0       	ldi	r31, 0x00	; 0
    3122:	eb 54       	subi	r30, 0x4B	; 75
    3124:	f5 4c       	sbci	r31, 0xC5	; 197
    3126:	80 83       	st	Z, r24
    iLED[EYE[G][L]] = 1;
    3128:	e0 91 93 b2 	lds	r30, 0xB293	; 0x80b293 <__bss_end+0x778f>
    312c:	f0 e0       	ldi	r31, 0x00	; 0
    312e:	eb 54       	subi	r30, 0x4B	; 75
    3130:	f5 4c       	sbci	r31, 0xC5	; 197
    3132:	80 83       	st	Z, r24
    iLED[EYE[R][R]] = 1;
    3134:	e0 91 90 b2 	lds	r30, 0xB290	; 0x80b290 <__bss_end+0x778c>
    3138:	f0 e0       	ldi	r31, 0x00	; 0
    313a:	eb 54       	subi	r30, 0x4B	; 75
    313c:	f5 4c       	sbci	r31, 0xC5	; 197
    313e:	80 83       	st	Z, r24
    iLED[EYE[R][L]] = 1;
    3140:	e0 91 91 b2 	lds	r30, 0xB291	; 0x80b291 <__bss_end+0x778d>
    3144:	f0 e0       	ldi	r31, 0x00	; 0
    3146:	eb 54       	subi	r30, 0x4B	; 75
    3148:	f5 4c       	sbci	r31, 0xC5	; 197
    314a:	80 83       	st	Z, r24
    iLED[GEM[R]] = 1;
    314c:	e0 91 84 b2 	lds	r30, 0xB284	; 0x80b284 <__bss_end+0x7780>
    3150:	f0 e0       	ldi	r31, 0x00	; 0
    3152:	eb 54       	subi	r30, 0x4B	; 75
    3154:	f5 4c       	sbci	r31, 0xC5	; 197
    3156:	80 83       	st	Z, r24
    iLED[GEM[G]] = 1;
    3158:	e0 91 85 b2 	lds	r30, 0xB285	; 0x80b285 <__bss_end+0x7781>
    315c:	f0 e0       	ldi	r31, 0x00	; 0
    315e:	eb 54       	subi	r30, 0x4B	; 75
    3160:	f5 4c       	sbci	r31, 0xC5	; 197
    3162:	80 83       	st	Z, r24
    iLED[BADGER] = 1;
    3164:	e0 91 83 b2 	lds	r30, 0xB283	; 0x80b283 <__bss_end+0x777f>
    3168:	f0 e0       	ldi	r31, 0x00	; 0
    316a:	eb 54       	subi	r30, 0x4B	; 75
    316c:	f5 4c       	sbci	r31, 0xC5	; 197
    316e:	80 83       	st	Z, r24
    iLED[CAT] = 1;
    3170:	e0 91 82 b2 	lds	r30, 0xB282	; 0x80b282 <__bss_end+0x777e>
    3174:	f0 e0       	ldi	r31, 0x00	; 0
    3176:	eb 54       	subi	r30, 0x4B	; 75
    3178:	f5 4c       	sbci	r31, 0xC5	; 197
    317a:	80 83       	st	Z, r24

    while (1)
    {
        GenerateAudio();
    317c:	0e 94 0a 09 	call	0x1214	; 0x1214 <GenerateAudio>
        //GenerateBlinks();

        if (buttonMark){
    3180:	80 91 35 38 	lds	r24, 0x3835	; 0x803835 <buttonMark>
    3184:	88 23       	and	r24, r24
    3186:	d1 f3       	breq	.-12     	; 0x317c <main+0xb8>
            buttonState = CheckButtons(buttonState);
    3188:	80 91 07 38 	lds	r24, 0x3807	; 0x803807 <buttonState>
    318c:	0e 94 48 07 	call	0xe90	; 0xe90 <CheckButtons>
    3190:	80 93 07 38 	sts	0x3807, r24	; 0x803807 <buttonState>
            buttonMark = 0;
    3194:	10 92 35 38 	sts	0x3835, r1	; 0x803835 <buttonMark>
            
            TextAdventure();
    3198:	78 df       	rcall	.-272    	; 0x308a <TextAdventure>
          
            //Other games & user interaction checks
            MagnetMaze();
    319a:	0e 94 90 02 	call	0x520	; 0x520 <MagnetMaze>
            BastetDictates();
    319e:	0e 94 a8 09 	call	0x1350	; 0x1350 <BastetDictates>
            LanyardCode();
    31a2:	0e 94 9f 01 	call	0x33e	; 0x33e <LanyardCode>
            //MakeFriends();
             
            //Check light sensor status (added hysteresis to preserve writing cycles to internal EEPROM)
            if (adcPhot < 10) WriteStatusBit(116, 1);
    31a6:	80 91 91 3a 	lds	r24, 0x3A91	; 0x803a91 <adcPhot>
    31aa:	90 91 92 3a 	lds	r25, 0x3A92	; 0x803a92 <adcPhot+0x1>
    31ae:	0a 97       	sbiw	r24, 0x0a	; 10
    31b0:	20 f4       	brcc	.+8      	; 0x31ba <main+0xf6>
    31b2:	61 e0       	ldi	r22, 0x01	; 1
    31b4:	84 e7       	ldi	r24, 0x74	; 116
    31b6:	0e 94 a1 08 	call	0x1142	; 0x1142 <WriteStatusBit>
            if (adcPhot > 100) WriteStatusBit(116, 0);
    31ba:	80 91 91 3a 	lds	r24, 0x3A91	; 0x803a91 <adcPhot>
    31be:	90 91 92 3a 	lds	r25, 0x3A92	; 0x803a92 <adcPhot+0x1>
    31c2:	85 36       	cpi	r24, 0x65	; 101
    31c4:	91 05       	cpc	r25, r1
    31c6:	d0 f2       	brcs	.-76     	; 0x317c <main+0xb8>
    31c8:	60 e0       	ldi	r22, 0x00	; 0
    31ca:	84 e7       	ldi	r24, 0x74	; 116
    31cc:	0e 94 a1 08 	call	0x1142	; 0x1142 <WriteStatusBit>
    31d0:	d5 cf       	rjmp	.-86     	; 0x317c <main+0xb8>

000031d2 <__udivmodqi4>:
    31d2:	99 1b       	sub	r25, r25
    31d4:	79 e0       	ldi	r23, 0x09	; 9
    31d6:	04 c0       	rjmp	.+8      	; 0x31e0 <__udivmodqi4_ep>

000031d8 <__udivmodqi4_loop>:
    31d8:	99 1f       	adc	r25, r25
    31da:	96 17       	cp	r25, r22
    31dc:	08 f0       	brcs	.+2      	; 0x31e0 <__udivmodqi4_ep>
    31de:	96 1b       	sub	r25, r22

000031e0 <__udivmodqi4_ep>:
    31e0:	88 1f       	adc	r24, r24
    31e2:	7a 95       	dec	r23
    31e4:	c9 f7       	brne	.-14     	; 0x31d8 <__udivmodqi4_loop>
    31e6:	80 95       	com	r24
    31e8:	08 95       	ret

000031ea <__udivmodhi4>:
    31ea:	aa 1b       	sub	r26, r26
    31ec:	bb 1b       	sub	r27, r27
    31ee:	51 e1       	ldi	r21, 0x11	; 17
    31f0:	07 c0       	rjmp	.+14     	; 0x3200 <__udivmodhi4_ep>

000031f2 <__udivmodhi4_loop>:
    31f2:	aa 1f       	adc	r26, r26
    31f4:	bb 1f       	adc	r27, r27
    31f6:	a6 17       	cp	r26, r22
    31f8:	b7 07       	cpc	r27, r23
    31fa:	10 f0       	brcs	.+4      	; 0x3200 <__udivmodhi4_ep>
    31fc:	a6 1b       	sub	r26, r22
    31fe:	b7 0b       	sbc	r27, r23

00003200 <__udivmodhi4_ep>:
    3200:	88 1f       	adc	r24, r24
    3202:	99 1f       	adc	r25, r25
    3204:	5a 95       	dec	r21
    3206:	a9 f7       	brne	.-22     	; 0x31f2 <__udivmodhi4_loop>
    3208:	80 95       	com	r24
    320a:	90 95       	com	r25
    320c:	bc 01       	movw	r22, r24
    320e:	cd 01       	movw	r24, r26
    3210:	08 95       	ret

00003212 <__udivmodsi4>:
    3212:	a1 e2       	ldi	r26, 0x21	; 33
    3214:	1a 2e       	mov	r1, r26
    3216:	aa 1b       	sub	r26, r26
    3218:	bb 1b       	sub	r27, r27
    321a:	fd 01       	movw	r30, r26
    321c:	0d c0       	rjmp	.+26     	; 0x3238 <__udivmodsi4_ep>

0000321e <__udivmodsi4_loop>:
    321e:	aa 1f       	adc	r26, r26
    3220:	bb 1f       	adc	r27, r27
    3222:	ee 1f       	adc	r30, r30
    3224:	ff 1f       	adc	r31, r31
    3226:	a2 17       	cp	r26, r18
    3228:	b3 07       	cpc	r27, r19
    322a:	e4 07       	cpc	r30, r20
    322c:	f5 07       	cpc	r31, r21
    322e:	20 f0       	brcs	.+8      	; 0x3238 <__udivmodsi4_ep>
    3230:	a2 1b       	sub	r26, r18
    3232:	b3 0b       	sbc	r27, r19
    3234:	e4 0b       	sbc	r30, r20
    3236:	f5 0b       	sbc	r31, r21

00003238 <__udivmodsi4_ep>:
    3238:	66 1f       	adc	r22, r22
    323a:	77 1f       	adc	r23, r23
    323c:	88 1f       	adc	r24, r24
    323e:	99 1f       	adc	r25, r25
    3240:	1a 94       	dec	r1
    3242:	69 f7       	brne	.-38     	; 0x321e <__udivmodsi4_loop>
    3244:	60 95       	com	r22
    3246:	70 95       	com	r23
    3248:	80 95       	com	r24
    324a:	90 95       	com	r25
    324c:	9b 01       	movw	r18, r22
    324e:	ac 01       	movw	r20, r24
    3250:	bd 01       	movw	r22, r26
    3252:	cf 01       	movw	r24, r30
    3254:	08 95       	ret

00003256 <_exit>:
    3256:	f8 94       	cli

00003258 <__stop_program>:
    3258:	ff cf       	rjmp	.-2      	; 0x3258 <__stop_program>
